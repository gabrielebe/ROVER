

Microchip Technology PIC18 LITE Macro Assembler V1.31 build 56723 
                                                                                               Wed Oct 01 10:30:34 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1
    54                           	psect	text44,global,reloc=2,class=CODE,delta=1
    55                           	psect	text45,global,reloc=2,class=CODE,delta=1
    56                           	psect	text46,global,reloc=2,class=CODE,delta=1
    57                           	psect	text47,global,reloc=2,class=CODE,delta=1
    58                           	psect	text48,global,reloc=2,class=CODE,delta=1
    59                           	psect	text49,global,reloc=2,class=CODE,delta=1
    60                           	psect	text50,global,reloc=2,class=CODE,delta=1
    61                           	psect	text51,global,reloc=2,class=CODE,delta=1
    62                           	psect	text52,global,reloc=2,class=CODE,delta=1
    63                           	psect	text53,global,reloc=2,class=CODE,delta=1
    64                           	psect	text54,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           	psect	smallconst
    69  000F00                     __psmallconst:
    70                           	opt stack 0
    71  000F00  00                 	db	0
    72  000F01                     _dpowers:
    73                           	opt stack 0
    74  000F01  0001               	dw	1
    75  000F03  0000               	dw	0
    76  000F05  000A               	dw	10
    77  000F07  0000               	dw	0
    78  000F09  0064               	dw	100
    79  000F0B  0000               	dw	0
    80  000F0D  03E8               	dw	1000
    81  000F0F  0000               	dw	0
    82  000F11  2710               	dw	10000
    83  000F13  0000               	dw	0
    84  000F15  86A0               	dw	34464
    85  000F17  0001               	dw	1
    86  000F19  4240               	dw	16960
    87  000F1B  000F               	dw	15
    88  000F1D  9680               	dw	38528
    89  000F1F  0098               	dw	152
    90  000F21  E100               	dw	57600
    91  000F23  05F5               	dw	1525
    92  000F25  CA00               	dw	51712
    93  000F27  3B9A               	dw	15258
    94  000F29                     __end_of_dpowers:
    95                           	opt stack 0
    96  000F29                     __npowers_:
    97                           	opt stack 0
    98  000F29  00                 	db	0
    99  000F2A  80                 	db	128
   100  000F2B  3F                 	db	63
   101  000F2C  CD                 	db	205
   102  000F2D  CC                 	db	204
   103  000F2E  3D                 	db	61
   104  000F2F  D7                 	db	215
   105  000F30  23                 	db	35
   106  000F31  3C                 	db	60
   107  000F32  12                 	db	18
   108  000F33  83                 	db	131
   109  000F34  3A                 	db	58
   110  000F35  B7                 	db	183
   111  000F36  D1                 	db	209
   112  000F37  38                 	db	56
   113  000F38  C6                 	db	198
   114  000F39  27                 	db	39
   115  000F3A  37                 	db	55
   116  000F3B  38                 	db	56
   117  000F3C  86                 	db	134
   118  000F3D  35                 	db	53
   119  000F3E  C0                 	db	192
   120  000F3F  D6                 	db	214
   121  000F40  33                 	db	51
   122  000F41  CC                 	db	204
   123  000F42  2B                 	db	43
   124  000F43  32                 	db	50
   125  000F44  70                 	db	112
   126  000F45  89                 	db	137
   127  000F46  30                 	db	48
   128  000F47  E7                 	db	231
   129  000F48  DB                 	db	219
   130  000F49  2E                 	db	46
   131  000F4A  E5                 	db	229
   132  000F4B  3C                 	db	60
   133  000F4C  1E                 	db	30
   134  000F4D  42                 	db	66
   135  000F4E  A2                 	db	162
   136  000F4F  0D                 	db	13
   137  000F50                     __end_of__npowers_:
   138                           	opt stack 0
   139  000F50                     __powers_:
   140                           	opt stack 0
   141  000F50  00                 	db	0
   142  000F51  80                 	db	128
   143  000F52  3F                 	db	63
   144  000F53  00                 	db	0
   145  000F54  20                 	db	32
   146  000F55  41                 	db	65
   147  000F56  00                 	db	0
   148  000F57  C8                 	db	200
   149  000F58  42                 	db	66
   150  000F59  00                 	db	0
   151  000F5A  7A                 	db	122
   152  000F5B  44                 	db	68
   153  000F5C  40                 	db	64
   154  000F5D  1C                 	db	28
   155  000F5E  46                 	db	70
   156  000F5F  50                 	db	80
   157  000F60  C3                 	db	195
   158  000F61  47                 	db	71
   159  000F62  24                 	db	36
   160  000F63  74                 	db	116
   161  000F64  49                 	db	73
   162  000F65  97                 	db	151
   163  000F66  18                 	db	24
   164  000F67  4B                 	db	75
   165  000F68  BC                 	db	188
   166  000F69  BE                 	db	190
   167  000F6A  4C                 	db	76
   168  000F6B  6B                 	db	107
   169  000F6C  6E                 	db	110
   170  000F6D  4E                 	db	78
   171  000F6E  03                 	db	3
   172  000F6F  15                 	db	21
   173  000F70  50                 	db	80
   174  000F71  79                 	db	121
   175  000F72  AD                 	db	173
   176  000F73  60                 	db	96
   177  000F74  F3                 	db	243
   178  000F75  49                 	db	73
   179  000F76  71                 	db	113
   180  000F77                     __end_of__powers_:
   181                           	opt stack 0
   182  0000                     _ADCON0bits	set	4034
   183  0000                     _ADCON1bits	set	4033
   184  0000                     _ADRESH	set	4036
   185  0000                     _ADRESL	set	4035
   186  0000                     _ANCON0	set	3912
   187  0000                     _ANCON1	set	3913
   188  0000                     _INTCONbits	set	4082
   189  0000                     _LATDbits	set	3980
   190  0000                     _LATEbits	set	3981
   191  0000                     _PORTBbits	set	3969
   192  0000                     _TRISA	set	3986
   193  0000                     _TRISB	set	3987
   194  0000                     _TRISD	set	3989
   195  0000                     _TRISDbits	set	3989
   196  0000                     _TRISEbits	set	3990
   197  0000                     _GO_DONE	set	32273
   198  000F77                     __stringdata:
   199                           	opt stack 0
   200  000F77                     STR_3:
   201  000F77  41                 	db	65	;'A'
   202  000F78  63                 	db	99	;'c'
   203  000F79  6C                 	db	108	;'l'
   204  000F7A  6D                 	db	109	;'m'
   205  000F7B  74                 	db	116	;'t'
   206  000F7C  72                 	db	114	;'r'
   207  000F7D  20                 	db	32
   208  000F7E  76                 	db	118	;'v'
   209  000F7F  61                 	db	97	;'a'
   210  000F80  6C                 	db	108	;'l'
   211  000F81  75                 	db	117	;'u'
   212  000F82  65                 	db	101	;'e'
   213  000F83  73                 	db	115	;'s'
   214  000F84  3A                 	db	58	;':'
   215  000F85  00                 	db	0
   216  000F86                     STR_8:
   217  000F86  53                 	db	83	;'S'
   218  000F87  69                 	db	105	;'i'
   219  000F88  6E                 	db	110	;'n'
   220  000F89  67                 	db	103	;'g'
   221  000F8A  68                 	db	104	;'h'
   222  000F8B  20                 	db	32
   223  000F8C  42                 	db	66	;'B'
   224  000F8D  65                 	db	101	;'e'
   225  000F8E  20                 	db	32
   226  000F8F  52                 	db	82	;'R'
   227  000F90  6F                 	db	111	;'o'
   228  000F91  73                 	db	115	;'s'
   229  000F92  61                 	db	97	;'a'
   230  000F93  00                 	db	0
   231  000F94                     STR_1:
   232  000F94  74                 	db	116	;'t'
   233  000F95  65                 	db	101	;'e'
   234  000F96  6D                 	db	109	;'m'
   235  000F97  70                 	db	112	;'p'
   236  000F98  3A                 	db	58	;':'
   237  000F99  20                 	db	32
   238  000F9A  25                 	db	37
   239  000F9B  31                 	db	49	;'1'
   240  000F9C  2E                 	db	46
   241  000F9D  33                 	db	51	;'3'
   242  000F9E  66                 	db	102	;'f'
   243  000F9F  00                 	db	0
   244  000FA0                     STR_2:
   245  000FA0  6C                 	db	108	;'l'
   246  000FA1  69                 	db	105	;'i'
   247  000FA2  67                 	db	103	;'g'
   248  000FA3  68                 	db	104	;'h'
   249  000FA4  74                 	db	116	;'t'
   250  000FA5  3A                 	db	58	;':'
   251  000FA6  20                 	db	32
   252  000FA7  25                 	db	37
   253  000FA8  64                 	db	100	;'d'
   254  000FA9  00                 	db	0
   255  000FAA                     STR_7:
   256  000FAA  52                 	db	82	;'R'
   257  000FAB  6F                 	db	111	;'o'
   258  000FAC  62                 	db	98	;'b'
   259  000FAD  65                 	db	101	;'e'
   260  000FAE  72                 	db	114	;'r'
   261  000FAF  69                 	db	105	;'i'
   262  000FB0  6E                 	db	110	;'n'
   263  000FB1  6F                 	db	111	;'o'
   264  000FB2  00                 	db	0
   265  000FB3                     STR_4:
   266  000FB3  25                 	db	37
   267  000FB4  31                 	db	49	;'1'
   268  000FB5  2E                 	db	46
   269  000FB6  32                 	db	50	;'2'
   270  000FB7  66                 	db	102	;'f'
   271  000FB8  00                 	db	0
   272  000FB9                     __end_of__stringdata:
   273                           	opt stack 0
   274                           
   275                           ; #config settings
   276  000FB9  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  003E9A                     __pcinit:
   280                           	opt stack 0
   281  003E9A                     start_initialization:
   282                           	opt stack 0
   283  003E9A                     __initialization:
   284                           	opt stack 0
   285  003E9A                     end_of_initialization:
   286                           	opt stack 0
   287  003E9A                     __end_of__initialization:
   288                           	opt stack 0
   289  003E9A  0100               	movlb	0
   290  003E9C  EF05  F01F         	goto	_main	;jump to C main() function
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     ??_intro:
   296                           
   297                           ; 0 bytes @ 0x0
   298  000100                     	ds	1
   299  000101                     intro@i:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x1
   303  000101                     	ds	2
   304  000103                     ??_lcdInit:
   305                           
   306                           ; 0 bytes @ 0x3
   307  000103                     	ds	1
   308  000104                     lcdInit@i:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x4
   312  000104                     	ds	2
   313  000106                     lcdInit@i_758:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x6
   317  000106                     	ds	2
   318  000108                     lcdInit@i_759:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x8
   322  000108                     	ds	2
   323  00010A                     lcdInit@i_760:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0xA
   327  00010A                     	ds	2
   328  00010C                     
   329                           ; 2 bytes @ 0xC
   330  00010C                     	ds	2
   331  00010E                     
   332                           ; 3 bytes @ 0xE
   333  00010E                     	ds	3
   334                           
   335                           	psect	cstackBANK0
   336  000060                     __pcstackBANK0:
   337                           	opt stack 0
   338  000060                     ?_sprintf:
   339                           	opt stack 0
   340  000060                     sprintf@sp:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x0
   344  000060                     	ds	2
   345  000062                     sprintf@f:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x2
   349  000062                     	ds	5
   350  000067                     ??_sprintf:
   351                           
   352                           ; 0 bytes @ 0x7
   353  000067                     	ds	6
   354  00006D                     _sprintf$1456:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0xD
   358  00006D                     	ds	3
   359  000070                     _sprintf$833:
   360                           	opt stack 0
   361                           
   362                           ; 4 bytes @ 0x10
   363  000070                     	ds	4
   364  000074                     sprintf@vd:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x14
   368  000074                     	ds	4
   369  000078                     sprintf@vd_835:
   370                           	opt stack 0
   371                           
   372                           ; 4 bytes @ 0x18
   373  000078                     	ds	4
   374  00007C                     sprintf@ap:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x1C
   378  00007C                     	ds	2
   379  00007E                     sprintf@integ:
   380                           	opt stack 0
   381                           
   382                           ; 3 bytes @ 0x1E
   383  00007E                     	ds	3
   384  000081                     sprintf@flag:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x21
   388  000081                     	ds	2
   389  000083                     sprintf@width:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x23
   393  000083                     	ds	2
   394  000085                     sprintf@_val:
   395                           	opt stack 0
   396                           
   397                           ; 5 bytes @ 0x25
   398  000085                     	ds	5
   399  00008A                     sprintf@exp:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x2A
   403  00008A                     	ds	2
   404  00008C                     sprintf@fval:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x2C
   408  00008C                     	ds	3
   409  00008F                     sprintf@prec:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x2F
   413  00008F                     	ds	2
   414  000091                     sprintf@c:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x31
   418  000091                     	ds	1
   419  000092                     showTempLight@buffer:
   420                           	opt stack 0
   421  000092                     showAccelerometerVal@buffer:
   422                           	opt stack 0
   423                           
   424                           ; 10 bytes @ 0x32
   425  000092                     	ds	10
   426  00009C                     ??_ISR:
   427                           
   428                           ; 0 bytes @ 0x3C
   429  00009C                     	ds	14
   430  0000AA                     writeDigit@n:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x4A
   434  0000AA                     	ds	1
   435  0000AB                     writeByte@n:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x4B
   439  0000AB                     	ds	1
   440  0000AC                     ??_lcdWriteCmd:
   441  0000AC                     lcdWriteChar@n:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x4C
   445  0000AC                     	ds	1
   446  0000AD                     lcdWriteCmd@n:
   447                           	opt stack 0
   448  0000AD                     lcdWriteStrC@s:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x4D
   452  0000AD                     	ds	1
   453  0000AE                     lcdWriteCmd@i:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x4E
   457  0000AE                     	ds	1
   458  0000AF                     
   459                           ; 0 bytes @ 0x4F
   460  0000AF                     	ds	1
   461  0000B0                     lcdSetPos@y:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x50
   465  0000B0                     	ds	1
   466  0000B1                     lcdSetPos@p:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x51
   470  0000B1                     	ds	1
   471  0000B2                     lcdSetPos@x:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x52
   475  0000B2                     	ds	1
   476  0000B3                     ??_lcdClean:
   477                           
   478                           ; 0 bytes @ 0x53
   479  0000B3                     	ds	1
   480  0000B4                     lcdClean@i:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x54
   484  0000B4                     	ds	2
   485  0000B6                     
   486                           ; 0 bytes @ 0x56
   487                           
   488                           	psect	cstackCOMRAM
   489  000001                     __pcstackCOMRAM:
   490                           	opt stack 0
   491  000001                     ??_isdigit:
   492  000001                     ?_read:
   493                           	opt stack 0
   494  000001                     ?___awmod:
   495                           	opt stack 0
   496  000001                     ?___ftpack:
   497                           	opt stack 0
   498  000001                     ?___ftneg:
   499                           	opt stack 0
   500  000001                     ?__tdiv_to_l_:
   501                           	opt stack 0
   502  000001                     ?__div_to_l_:
   503                           	opt stack 0
   504  000001                     ?___lmul:
   505                           	opt stack 0
   506  000001                     ?___lldiv:
   507                           	opt stack 0
   508  000001                     i2writeDigit@n:
   509                           	opt stack 0
   510  000001                     read@channel:
   511                           	opt stack 0
   512  000001                     ___awmod@dividend:
   513                           	opt stack 0
   514  000001                     __div_to_l_@f1:
   515                           	opt stack 0
   516  000001                     ___ftpack@arg:
   517                           	opt stack 0
   518  000001                     __tdiv_to_l_@f1:
   519                           	opt stack 0
   520  000001                     ___ftneg@f1:
   521                           	opt stack 0
   522  000001                     ___lldiv@dividend:
   523                           	opt stack 0
   524  000001                     ___lmul@multiplier:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x0
   528  000001                     	ds	1
   529  000002                     _isdigit$1108:
   530                           	opt stack 0
   531  000002                     i2writeByte@n:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1
   535  000002                     	ds	1
   536  000003                     ??_read:
   537  000003                     ??i2_lcdWriteCmd:
   538  000003                     isdigit@c:
   539                           	opt stack 0
   540  000003                     i2lcdWriteChar@n:
   541                           	opt stack 0
   542  000003                     ___awmod@divisor:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x2
   546  000003                     	ds	1
   547  000004                     ___ftpack@exp:
   548                           	opt stack 0
   549  000004                     i2lcdWriteCmd@n:
   550                           	opt stack 0
   551  000004                     i2lcdWriteStrC@s:
   552                           	opt stack 0
   553  000004                     __div_to_l_@f2:
   554                           	opt stack 0
   555  000004                     __tdiv_to_l_@f2:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x3
   559  000004                     	ds	1
   560  000005                     ??___awmod:
   561  000005                     ___ftpack@sign:
   562                           	opt stack 0
   563  000005                     read@value:
   564                           	opt stack 0
   565  000005                     i2lcdWriteCmd@i:
   566                           	opt stack 0
   567  000005                     ___lldiv@divisor:
   568                           	opt stack 0
   569  000005                     ___lmul@multiplicand:
   570                           	opt stack 0
   571                           
   572                           ; 4 bytes @ 0x4
   573  000005                     	ds	1
   574  000006                     ??___ftpack:
   575  000006                     ___awmod@counter:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x5
   579  000006                     	ds	1
   580  000007                     ??__tdiv_to_l_:
   581  000007                     ??__div_to_l_:
   582  000007                     ___awmod@sign:
   583                           	opt stack 0
   584  000007                     i2lcdSetPos@y:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x6
   588  000007                     	ds	1
   589  000008                     ?___awdiv:
   590                           	opt stack 0
   591  000008                     i2lcdSetPos@p:
   592                           	opt stack 0
   593  000008                     ___awdiv@dividend:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x7
   597  000008                     	ds	1
   598  000009                     ??___lldiv:
   599  000009                     ?___awtoft:
   600                           	opt stack 0
   601  000009                     ?___lltoft:
   602                           	opt stack 0
   603  000009                     ?___lwtoft:
   604                           	opt stack 0
   605  000009                     i2lcdSetPos@x:
   606                           	opt stack 0
   607  000009                     ___awtoft@c:
   608                           	opt stack 0
   609  000009                     ___lwtoft@c:
   610                           	opt stack 0
   611  000009                     ___lltoft@c:
   612                           	opt stack 0
   613  000009                     ___lmul@product:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x8
   617  000009                     	ds	1
   618  00000A                     ___awdiv@divisor:
   619                           	opt stack 0
   620  00000A                     __tdiv_to_l_@quot:
   621                           	opt stack 0
   622  00000A                     ___lldiv@quotient:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x9
   626  00000A                     	ds	1
   627  00000B                     __div_to_l_@quot:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0xA
   631  00000B                     	ds	1
   632  00000C                     ??___awdiv:
   633  00000C                     ??___awtoft:
   634  00000C                     ??___lwtoft:
   635                           
   636                           ; 0 bytes @ 0xB
   637  00000C                     	ds	1
   638  00000D                     ??___lltoft:
   639  00000D                     ?___aldiv:
   640                           	opt stack 0
   641  00000D                     ___awdiv@counter:
   642                           	opt stack 0
   643  00000D                     ___awtoft@sign:
   644                           	opt stack 0
   645  00000D                     ___aldiv@dividend:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0xC
   649  00000D                     	ds	1
   650  00000E                     ___awdiv@sign:
   651                           	opt stack 0
   652  00000E                     __tdiv_to_l_@cntr:
   653                           	opt stack 0
   654  00000E                     ___lldiv@counter:
   655                           	opt stack 0
   656  00000E                     ___ftge@ff1:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0xD
   660  00000E                     	ds	1
   661  00000F                     ?___llmod:
   662                           	opt stack 0
   663  00000F                     __div_to_l_@cntr:
   664                           	opt stack 0
   665  00000F                     __tdiv_to_l_@exp1:
   666                           	opt stack 0
   667  00000F                     ___awdiv@quotient:
   668                           	opt stack 0
   669  00000F                     ___llmod@dividend:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0xE
   673  00000F                     	ds	1
   674  000010                     __div_to_l_@exp1:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0xF
   678  000010                     	ds	1
   679  000011                     ?___wmul:
   680                           	opt stack 0
   681  000011                     ___lltoft@exp:
   682                           	opt stack 0
   683  000011                     ___wmul@multiplier:
   684                           	opt stack 0
   685  000011                     ___ftge@ff2:
   686                           	opt stack 0
   687  000011                     ___aldiv@divisor:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x10
   691  000011                     	ds	2
   692  000013                     ___wmul@multiplicand:
   693                           	opt stack 0
   694  000013                     ___llmod@divisor:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x12
   698  000013                     	ds	1
   699  000014                     ??___ftge:
   700                           
   701                           ; 0 bytes @ 0x13
   702  000014                     	ds	1
   703  000015                     ??___aldiv:
   704  000015                     ___wmul@product:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x14
   708  000015                     	ds	1
   709  000016                     ___aldiv@counter:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x15
   713  000016                     	ds	1
   714  000017                     ??___llmod:
   715  000017                     ?___ftmul:
   716                           	opt stack 0
   717  000017                     ___aldiv@sign:
   718                           	opt stack 0
   719  000017                     ___ftmul@f1:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x16
   723  000017                     	ds	1
   724  000018                     ___llmod@counter:
   725                           	opt stack 0
   726  000018                     ___aldiv@quotient:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x17
   730  000018                     	ds	2
   731  00001A                     ___ftmul@f2:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x19
   735  00001A                     	ds	2
   736  00001C                     ?_readLight:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x1B
   740  00001C                     	ds	1
   741  00001D                     ??___ftmul:
   742                           
   743                           ; 0 bytes @ 0x1C
   744  00001D                     	ds	1
   745  00001E                     ??_readLight:
   746                           
   747                           ; 0 bytes @ 0x1D
   748  00001E                     	ds	2
   749  000020                     ___ftmul@exp:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x1F
   753  000020                     	ds	1
   754  000021                     ___ftmul@f3_as_product:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x20
   758  000021                     	ds	1
   759  000022                     readLight@j:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0x21
   763  000022                     	ds	2
   764  000024                     ___ftmul@cntr:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x23
   768  000024                     	ds	1
   769  000025                     ___ftmul@sign:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x24
   773  000025                     	ds	1
   774  000026                     ?___ftadd:
   775                           	opt stack 0
   776  000026                     ?_fround:
   777                           	opt stack 0
   778  000026                     ?_scale:
   779                           	opt stack 0
   780  000026                     ___asftmul@f1p:
   781                           	opt stack 0
   782  000026                     ___ftadd@f1:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x25
   786  000026                     	ds	2
   787  000028                     ___asftmul@f2:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x27
   791  000028                     	ds	1
   792  000029                     ___ftadd@f2:
   793                           	opt stack 0
   794  000029                     _fround$1454:
   795                           	opt stack 0
   796  000029                     _scale$1455:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x28
   800  000029                     	ds	2
   801  00002B                     
   802                           ; 0 bytes @ 0x2A
   803  00002B                     	ds	1
   804  00002C                     ??___ftadd:
   805  00002C                     scale@scl:
   806                           	opt stack 0
   807  00002C                     _fround$1453:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x2B
   811  00002C                     	ds	1
   812  00002D                     ?___fttol:
   813                           	opt stack 0
   814  00002D                     ___fttol@f1:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x2C
   818  00002D                     	ds	2
   819  00002F                     fround@prec:
   820                           	opt stack 0
   821  00002F                     ___ftadd@sign:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x2E
   825  00002F                     	ds	1
   826  000030                     ___ftadd@exp2:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x2F
   830  000030                     	ds	1
   831  000031                     ??___fttol:
   832  000031                     ___ftadd@exp1:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x30
   836  000031                     	ds	1
   837  000032                     ?___ftdiv:
   838                           	opt stack 0
   839  000032                     ?___ftsub:
   840                           	opt stack 0
   841  000032                     ___asftadd@f1p:
   842                           	opt stack 0
   843  000032                     ___ftdiv@f1:
   844                           	opt stack 0
   845  000032                     ___ftsub@f1:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x31
   849  000032                     	ds	2
   850  000034                     ___asftadd@f2:
   851                           	opt stack 0
   852                           
   853                           ; 3 bytes @ 0x33
   854  000034                     	ds	1
   855  000035                     ___ftdiv@f2:
   856                           	opt stack 0
   857  000035                     ___ftsub@f2:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x34
   861  000035                     	ds	1
   862  000036                     ___fttol@sign1:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x35
   866  000036                     	ds	1
   867  000037                     ___fttol@lval:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x36
   871  000037                     	ds	1
   872  000038                     ??___ftdiv:
   873  000038                     ___asftsub@f1p:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x37
   877  000038                     	ds	2
   878  00003A                     ___asftsub@f2:
   879                           	opt stack 0
   880                           
   881                           ; 3 bytes @ 0x39
   882  00003A                     	ds	1
   883  00003B                     ___ftdiv@cntr:
   884                           	opt stack 0
   885  00003B                     ___fttol@exp1:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x3A
   889  00003B                     	ds	1
   890  00003C                     ___ftdiv@f3:
   891                           	opt stack 0
   892                           
   893                           ; 3 bytes @ 0x3B
   894  00003C                     	ds	1
   895  00003D                     
   896                           ; 0 bytes @ 0x3C
   897  00003D                     	ds	2
   898  00003F                     ___ftdiv@exp:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x3E
   902  00003F                     	ds	1
   903  000040                     ___ftdiv@sign:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x3F
   907  000040                     	ds	1
   908  000041                     ?_readTempF:
   909                           	opt stack 0
   910  000041                     ?_voltageToG:
   911                           	opt stack 0
   912  000041                     ?_pointToVoltage:
   913                           	opt stack 0
   914  000041                     pointToVoltage@point:
   915                           	opt stack 0
   916  000041                     voltageToG@voltage:
   917                           	opt stack 0
   918                           
   919                           ; 3 bytes @ 0x40
   920  000041                     	ds	3
   921  000044                     readTempF@temp:
   922                           	opt stack 0
   923  000044                     pointToVoltage@fPoint:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x43
   927  000044                     	ds	3
   928  000047                     ?_read_accelerometer:
   929                           	opt stack 0
   930  000047                     readTempF@i:
   931                           	opt stack 0
   932  000047                     read_accelerometer@axis:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x46
   936  000047                     	ds	2
   937  000049                     readTempF@j:
   938                           	opt stack 0
   939                           
   940                           ; 3 bytes @ 0x48
   941  000049                     	ds	1
   942  00004A                     read_accelerometer@axis_point:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x49
   946  00004A                     	ds	2
   947  00004C                     ?_single_axis_measure:
   948                           	opt stack 0
   949  00004C                     single_axis_measure@axis:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x4B
   953  00004C                     	ds	2
   954  00004E                     single_axis_measure@iteration:
   955                           	opt stack 0
   956                           
   957                           ; 3 bytes @ 0x4D
   958  00004E                     	ds	3
   959  000051                     single_axis_measure@axis_read:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x50
   963  000051                     	ds	3
   964  000054                     single_axis_measure@medium_value:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x53
   968  000054                     	ds	3
   969  000057                     single_axis_measure@i:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x56
   973  000057                     	ds	2
   974  000059                     single_axis_measure@axis_sum:
   975                           	opt stack 0
   976                           
   977                           ; 3 bytes @ 0x58
   978  000059                     	ds	3
   979  00005C                     ??_showTempLight:
   980  00005C                     ??_showAccelerometerVal:
   981                           
   982                           ; 0 bytes @ 0x5B
   983  00005C                     	ds	1
   984                           
   985 ;;
   986 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   987 ;;
   988 ;; *************** function _main *****************
   989 ;; Defined at:
   990 ;;		line 23 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  argc            2   12[BANK1 ] int 
   993 ;;  argv            3   14[BANK1 ] PTR PTR unsigned char 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  i               2    0        int 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  2   12[BANK1 ] int 
   998 ;; Registers used:
   999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1005 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1008 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1009 ;;Total ram usage:        5 bytes
  1010 ;; Hardware stack levels required when called:   14
  1011 ;; This function calls:
  1012 ;;		_lcdInit
  1013 ;; This function is called by:
  1014 ;;		Startup code after reset
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text0
  1019  003E0A                     __ptext0:
  1020                           	opt stack 0
  1021  003E0A                     _main:
  1022                           	opt stack 17
  1023                           
  1024                           ;main.c: 24: int i;
  1025                           ;main.c: 26: TRISB = 0xff;
  1026                           
  1027                           ;incstack = 0
  1028  003E0A  6893               	setf	3987,c	;volatile
  1029                           
  1030                           ;main.c: 27: TRISD = 0x00;
  1031  003E0C  0E00               	movlw	0
  1032  003E0E  6E95               	movwf	3989,c	;volatile
  1033                           
  1034                           ;main.c: 28: TRISA = 0xff;
  1035  003E10  6892               	setf	3986,c	;volatile
  1036                           
  1037                           ;main.c: 30: INTCONbits.RBIE = 1;
  1038  003E12  86F2               	bsf	intcon,3,c	;volatile
  1039                           
  1040                           ;main.c: 31: INTCONbits.GIE = 1;
  1041  003E14  8EF2               	bsf	intcon,7,c	;volatile
  1042                           
  1043                           ;main.c: 34: ANCON0 = 0b11111111;
  1044  003E16  010F               	movlb	15	; () banked
  1045  003E18  010F               	movlb	15	; () banked
  1046  003E1A  6948               	setf	72,b	;volatile
  1047                           
  1048                           ; BSR set to: 15
  1049                           ;main.c: 35: ANCON1 |= 0b00001111;
  1050  003E1C  0E0F               	movlw	15
  1051  003E1E  010F               	movlb	15	; () banked
  1052  003E20  010F               	movlb	15	; () banked
  1053  003E22  1349               	iorwf	73,f,b	;volatile
  1054                           
  1055                           ; BSR set to: 15
  1056                           ;main.c: 37: lcdInit();
  1057  003E24  EC0F  F016         	call	_lcdInit	;wreg free
  1058  003E28                     l41:
  1059                           
  1060                           ;main.c: 40: {
  1061  003E28  D7FF               	goto	l41
  1062  003E2A                     __end_of_main:
  1063                           	opt stack 0
  1064                           intcon	equ	0xFF2
  1065                           
  1066 ;; *************** function _lcdInit *****************
  1067 ;; Defined at:
  1068 ;;		line 54 in file "lcd.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  i               2   10[BANK1 ] int 
  1073 ;;  i               2    8[BANK1 ] int 
  1074 ;;  i               2    6[BANK1 ] int 
  1075 ;;  i               2    4[BANK1 ] int 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;		None               void
  1078 ;; Registers used:
  1079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1086 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1087 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1088 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1089 ;;Total ram usage:        9 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; Hardware stack levels required when called:   13
  1092 ;; This function calls:
  1093 ;;		_intro
  1094 ;;		_lcdWriteCmd
  1095 ;;		_writeDigit
  1096 ;; This function is called by:
  1097 ;;		_main
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text1
  1102  002C1E                     __ptext1:
  1103                           	opt stack 0
  1104  002C1E                     _lcdInit:
  1105                           	opt stack 17
  1106                           
  1107                           ;lcd.c: 57: TRISDbits.TRISD0 = 0;
  1108                           
  1109                           ;incstack = 0
  1110  002C1E  9095               	bcf	3989,0,c	;volatile
  1111                           
  1112                           ;lcd.c: 58: TRISDbits.TRISD1 = 0;
  1113  002C20  9295               	bcf	3989,1,c	;volatile
  1114                           
  1115                           ;lcd.c: 59: TRISDbits.TRISD2 = 0;
  1116  002C22  9495               	bcf	3989,2,c	;volatile
  1117                           
  1118                           ;lcd.c: 60: TRISDbits.TRISD3 = 0;
  1119  002C24  9695               	bcf	3989,3,c	;volatile
  1120                           
  1121                           ;lcd.c: 62: TRISEbits.TRISE0 = 0;
  1122  002C26  9096               	bcf	3990,0,c	;volatile
  1123                           
  1124                           ;lcd.c: 63: LATEbits.LATE0 = 0;
  1125  002C28  908D               	bcf	3981,0,c	;volatile
  1126                           
  1127                           ;lcd.c: 65: TRISEbits.TRISE1 = 0;
  1128  002C2A  9296               	bcf	3990,1,c	;volatile
  1129                           
  1130                           ;lcd.c: 66: LATEbits.LATE1 = 0;
  1131  002C2C  928D               	bcf	3981,1,c	;volatile
  1132                           
  1133                           ;lcd.c: 69: _delay((unsigned long)((15)*(12000000/4000.0)));
  1134  002C2E  0E3B               	movlw	59
  1135  002C30  0101               	movlb	1	; () banked
  1136  002C32  6F03               	movwf	??_lcdInit& (0+255),b
  1137  002C34  0E70               	movlw	112
  1138  002C36                     u4037:
  1139  002C36  2EE8               	decfsz	wreg,f,c
  1140  002C38  D7FE               	goto	u4037
  1141  002C3A  2F03               	decfsz	??_lcdInit& (0+255),f,b
  1142  002C3C  D7FC               	goto	u4037
  1143                           
  1144                           ;lcd.c: 73: LATEbits.LATE0 = 0;
  1145  002C3E  908D               	bcf	3981,0,c	;volatile
  1146                           
  1147                           ;lcd.c: 74: writeDigit(0x03);
  1148  002C40  0E03               	movlw	3
  1149  002C42  ECE4  F01D         	call	_writeDigit
  1150                           
  1151                           ;lcd.c: 75: for(int i = 0; i < 100; i++) _delay((unsigned long)((41)*(12000000/4000000.0
      +                          )));
  1152  002C46  0E00               	movlw	0
  1153  002C48  0101               	movlb	1	; () banked
  1154  002C4A  0101               	movlb	1	; () banked
  1155  002C4C  6F05               	movwf	(lcdInit@i+1)& (0+255),b
  1156  002C4E  0E00               	movlw	0
  1157  002C50  0101               	movlb	1	; () banked
  1158  002C52  6F04               	movwf	lcdInit@i& (0+255),b
  1159  002C54                     
  1160                           ; BSR set to: 1
  1161  002C54  0101               	movlb	1	; () banked
  1162  002C56  0101               	movlb	1	; () banked
  1163  002C58  5105               	movf	(lcdInit@i+1)& (0+255),w,b
  1164  002C5A  0A80               	xorlw	128
  1165  002C5C  0F80               	addlw	-128
  1166  002C5E  0E64               	movlw	100
  1167  002C60  B4D8               	btfsc	status,2,c
  1168  002C62  5D04               	subwf	lcdInit@i& (0+255),w,b
  1169  002C64  B0D8               	btfsc	status,0,c
  1170  002C66  D008               	goto	l5241
  1171                           
  1172                           ; BSR set to: 1
  1173                           
  1174                           ; BSR set to: 1
  1175                           
  1176                           ; BSR set to: 1
  1177  002C68  0E29               	movlw	41
  1178  002C6A                     u4047:
  1179  002C6A  2EE8               	decfsz	wreg,f,c
  1180  002C6C  D7FE               	goto	u4047
  1181  002C6E  0101               	movlb	1	; () banked
  1182  002C70  0101               	movlb	1	; () banked
  1183  002C72  4B04               	infsnz	lcdInit@i& (0+255),f,b
  1184  002C74  2B05               	incf	(lcdInit@i+1)& (0+255),f,b
  1185  002C76  D7EE               	goto	L1
  1186  002C78                     l5241:
  1187                           
  1188                           ; BSR set to: 1
  1189                           ;lcd.c: 77: writeDigit(0x03);
  1190  002C78  0E03               	movlw	3
  1191  002C7A  ECE4  F01D         	call	_writeDigit
  1192                           
  1193                           ;lcd.c: 78: for(int i = 0; i < 10; i++) _delay((unsigned long)((12)*(12000000/4000000.0)
      +                          ));
  1194  002C7E  0E00               	movlw	0
  1195  002C80  0101               	movlb	1	; () banked
  1196  002C82  0101               	movlb	1	; () banked
  1197  002C84  6F07               	movwf	(lcdInit@i_758+1)& (0+255),b
  1198  002C86  0E00               	movlw	0
  1199  002C88  0101               	movlb	1	; () banked
  1200  002C8A  6F06               	movwf	lcdInit@i_758& (0+255),b
  1201  002C8C                     
  1202                           ; BSR set to: 1
  1203  002C8C  0101               	movlb	1	; () banked
  1204  002C8E  0101               	movlb	1	; () banked
  1205  002C90  5107               	movf	(lcdInit@i_758+1)& (0+255),w,b
  1206  002C92  0A80               	xorlw	128
  1207  002C94  0F80               	addlw	-128
  1208  002C96  0E0A               	movlw	10
  1209  002C98  B4D8               	btfsc	status,2,c
  1210  002C9A  5D06               	subwf	lcdInit@i_758& (0+255),w,b
  1211  002C9C  B0D8               	btfsc	status,0,c
  1212  002C9E  D008               	goto	l5253
  1213                           
  1214                           ; BSR set to: 1
  1215                           
  1216                           ; BSR set to: 1
  1217                           
  1218                           ; BSR set to: 1
  1219  002CA0  0E0C               	movlw	12
  1220  002CA2                     u4057:
  1221  002CA2  2EE8               	decfsz	wreg,f,c
  1222  002CA4  D7FE               	goto	u4057
  1223  002CA6  0101               	movlb	1	; () banked
  1224  002CA8  0101               	movlb	1	; () banked
  1225  002CAA  4B06               	infsnz	lcdInit@i_758& (0+255),f,b
  1226  002CAC  2B07               	incf	(lcdInit@i_758+1)& (0+255),f,b
  1227  002CAE  D7EE               	goto	L2
  1228  002CB0                     l5253:
  1229                           
  1230                           ; BSR set to: 1
  1231                           ;lcd.c: 80: writeDigit(0x03);
  1232  002CB0  0E03               	movlw	3
  1233  002CB2  ECE4  F01D         	call	_writeDigit
  1234                           
  1235                           ;lcd.c: 81: for(int i = 0; i < 10; i++) _delay((unsigned long)((12)*(12000000/4000000.0)
      +                          ));
  1236  002CB6  0E00               	movlw	0
  1237  002CB8  0101               	movlb	1	; () banked
  1238  002CBA  0101               	movlb	1	; () banked
  1239  002CBC  6F09               	movwf	(lcdInit@i_759+1)& (0+255),b
  1240  002CBE  0E00               	movlw	0
  1241  002CC0  0101               	movlb	1	; () banked
  1242  002CC2  6F08               	movwf	lcdInit@i_759& (0+255),b
  1243  002CC4                     
  1244                           ; BSR set to: 1
  1245  002CC4  0101               	movlb	1	; () banked
  1246  002CC6  0101               	movlb	1	; () banked
  1247  002CC8  5109               	movf	(lcdInit@i_759+1)& (0+255),w,b
  1248  002CCA  0A80               	xorlw	128
  1249  002CCC  0F80               	addlw	-128
  1250  002CCE  0E0A               	movlw	10
  1251  002CD0  B4D8               	btfsc	status,2,c
  1252  002CD2  5D08               	subwf	lcdInit@i_759& (0+255),w,b
  1253  002CD4  B0D8               	btfsc	status,0,c
  1254  002CD6  D008               	goto	l5265
  1255                           
  1256                           ; BSR set to: 1
  1257                           
  1258                           ; BSR set to: 1
  1259                           
  1260                           ; BSR set to: 1
  1261  002CD8  0E0C               	movlw	12
  1262  002CDA                     u4067:
  1263  002CDA  2EE8               	decfsz	wreg,f,c
  1264  002CDC  D7FE               	goto	u4067
  1265  002CDE  0101               	movlb	1	; () banked
  1266  002CE0  0101               	movlb	1	; () banked
  1267  002CE2  4B08               	infsnz	lcdInit@i_759& (0+255),f,b
  1268  002CE4  2B09               	incf	(lcdInit@i_759+1)& (0+255),f,b
  1269  002CE6  D7EE               	goto	L3
  1270  002CE8                     l5265:
  1271                           
  1272                           ; BSR set to: 1
  1273                           ;lcd.c: 83: writeDigit(0x02);
  1274  002CE8  0E02               	movlw	2
  1275  002CEA  ECE4  F01D         	call	_writeDigit
  1276                           
  1277                           ;lcd.c: 84: for(int i = 0; i < 10; i++) _delay((unsigned long)((12)*(12000000/4000000.0)
      +                          ));
  1278  002CEE  0E00               	movlw	0
  1279  002CF0  0101               	movlb	1	; () banked
  1280  002CF2  0101               	movlb	1	; () banked
  1281  002CF4  6F0B               	movwf	(lcdInit@i_760+1)& (0+255),b
  1282  002CF6  0E00               	movlw	0
  1283  002CF8  0101               	movlb	1	; () banked
  1284  002CFA  6F0A               	movwf	lcdInit@i_760& (0+255),b
  1285  002CFC                     
  1286                           ; BSR set to: 1
  1287  002CFC  0101               	movlb	1	; () banked
  1288  002CFE  0101               	movlb	1	; () banked
  1289  002D00  510B               	movf	(lcdInit@i_760+1)& (0+255),w,b
  1290  002D02  0A80               	xorlw	128
  1291  002D04  0F80               	addlw	-128
  1292  002D06  0E0A               	movlw	10
  1293  002D08  B4D8               	btfsc	status,2,c
  1294  002D0A  5D0A               	subwf	lcdInit@i_760& (0+255),w,b
  1295  002D0C  B0D8               	btfsc	status,0,c
  1296  002D0E  D008               	goto	l5277
  1297                           
  1298                           ; BSR set to: 1
  1299                           
  1300                           ; BSR set to: 1
  1301                           
  1302                           ; BSR set to: 1
  1303  002D10  0E0C               	movlw	12
  1304  002D12                     u4077:
  1305  002D12  2EE8               	decfsz	wreg,f,c
  1306  002D14  D7FE               	goto	u4077
  1307  002D16  0101               	movlb	1	; () banked
  1308  002D18  0101               	movlb	1	; () banked
  1309  002D1A  4B0A               	infsnz	lcdInit@i_760& (0+255),f,b
  1310  002D1C  2B0B               	incf	(lcdInit@i_760+1)& (0+255),f,b
  1311  002D1E  D7EE               	goto	L4
  1312  002D20                     l5277:
  1313                           
  1314                           ; BSR set to: 1
  1315                           ;lcd.c: 92: lcdWriteCmd(0x28);
  1316  002D20  0E28               	movlw	40
  1317  002D22  ECD1  F01C         	call	_lcdWriteCmd
  1318                           
  1319                           ;lcd.c: 98: lcdWriteCmd(0x01);
  1320  002D26  0E01               	movlw	1
  1321  002D28  ECD1  F01C         	call	_lcdWriteCmd
  1322                           
  1323                           ;lcd.c: 101: lcdWriteCmd(0x06);
  1324  002D2C  0E06               	movlw	6
  1325  002D2E  ECD1  F01C         	call	_lcdWriteCmd
  1326                           
  1327                           ;lcd.c: 104: lcdWriteCmd(0x0C);
  1328  002D32  0E0C               	movlw	12
  1329  002D34  ECD1  F01C         	call	_lcdWriteCmd
  1330                           
  1331                           ;lcd.c: 106: intro();
  1332  002D38  ECC3  F01A         	call	_intro	;wreg free
  1333  002D3C  0012               	return	
  1334  002D3E                     __end_of_lcdInit:
  1335                           	opt stack 0
  1336                           intcon	equ	0xFF2
  1337                           wreg	equ	0xFE8
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _intro *****************
  1341 ;; Defined at:
  1342 ;;		line 168 in file "lcd.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  i               2    1[BANK1 ] int 
  1347 ;; Return value:  Size  Location     Type
  1348 ;;		None               void
  1349 ;; Registers used:
  1350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1357 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1358 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1359 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1360 ;;Total ram usage:        3 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:   12
  1363 ;; This function calls:
  1364 ;;		_lcdClean
  1365 ;;		_lcdSetPos
  1366 ;;		_lcdWriteStrC
  1367 ;; This function is called by:
  1368 ;;		_lcdInit
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text2
  1373  003586                     __ptext2:
  1374                           	opt stack 0
  1375  003586                     _intro:
  1376                           	opt stack 17
  1377                           
  1378                           ;lcd.c: 171: int i;
  1379                           ;lcd.c: 172: lcdSetPos(0,0);
  1380                           
  1381                           ;incstack = 0
  1382  003586  0101               	movlb	1	; () banked
  1383  003588  6F00               	movwf	??_intro& (0+255),b
  1384  00358A  0E00               	movlw	0
  1385  00358C  0100               	movlb	0	; () banked
  1386  00358E  0100               	movlb	0	; () banked
  1387  003590  6FB0               	movwf	lcdSetPos@y& (0+255),b
  1388  003592  0101               	movlb	1	; () banked
  1389  003594  5100               	movf	??_intro& (0+255),w,b
  1390  003596  0E00               	movlw	0
  1391  003598  EC72  F01C         	call	_lcdSetPos
  1392                           
  1393                           ;lcd.c: 173: lcdWriteStrC("Roberino");
  1394  00359C  0E0F               	movlw	high STR_7
  1395  00359E  0100               	movlb	0	; () banked
  1396  0035A0  0100               	movlb	0	; () banked
  1397  0035A2  6FAE               	movwf	(lcdWriteStrC@s+1)& (0+255),b
  1398  0035A4  0EAA               	movlw	low STR_7
  1399  0035A6  0100               	movlb	0	; () banked
  1400  0035A8  0100               	movlb	0	; () banked
  1401  0035AA  6FAD               	movwf	lcdWriteStrC@s& (0+255),b
  1402  0035AC  EC41  F01C         	call	_lcdWriteStrC	;wreg free
  1403                           
  1404                           ;lcd.c: 174: lcdSetPos(0,1);
  1405  0035B0  0101               	movlb	1	; () banked
  1406  0035B2  6F00               	movwf	??_intro& (0+255),b
  1407  0035B4  0E01               	movlw	1
  1408  0035B6  0100               	movlb	0	; () banked
  1409  0035B8  0100               	movlb	0	; () banked
  1410  0035BA  6FB0               	movwf	lcdSetPos@y& (0+255),b
  1411  0035BC  0101               	movlb	1	; () banked
  1412  0035BE  5100               	movf	??_intro& (0+255),w,b
  1413  0035C0  0E00               	movlw	0
  1414  0035C2  EC72  F01C         	call	_lcdSetPos
  1415                           
  1416                           ;lcd.c: 175: lcdWriteStrC("Singh Be Rosa");
  1417  0035C6  0E0F               	movlw	high STR_8
  1418  0035C8  0100               	movlb	0	; () banked
  1419  0035CA  0100               	movlb	0	; () banked
  1420  0035CC  6FAE               	movwf	(lcdWriteStrC@s+1)& (0+255),b
  1421  0035CE  0E86               	movlw	low STR_8
  1422  0035D0  0100               	movlb	0	; () banked
  1423  0035D2  0100               	movlb	0	; () banked
  1424  0035D4  6FAD               	movwf	lcdWriteStrC@s& (0+255),b
  1425  0035D6  EC41  F01C         	call	_lcdWriteStrC	;wreg free
  1426                           
  1427                           ;lcd.c: 177: for(i = 0; i < 100; i++) _delay((unsigned long)((50)*(12000000/4000.0)));
  1428  0035DA  0E00               	movlw	0
  1429  0035DC  0101               	movlb	1	; () banked
  1430  0035DE  0101               	movlb	1	; () banked
  1431  0035E0  6F02               	movwf	(intro@i+1)& (0+255),b
  1432  0035E2  0E00               	movlw	0
  1433  0035E4  0101               	movlb	1	; () banked
  1434  0035E6  6F01               	movwf	intro@i& (0+255),b
  1435  0035E8                     
  1436                           ; BSR set to: 1
  1437  0035E8  0101               	movlb	1	; () banked
  1438  0035EA  0101               	movlb	1	; () banked
  1439  0035EC  5102               	movf	(intro@i+1)& (0+255),w,b
  1440  0035EE  0A80               	xorlw	128
  1441  0035F0  0F80               	addlw	-128
  1442  0035F2  0E64               	movlw	100
  1443  0035F4  B4D8               	btfsc	status,2,c
  1444  0035F6  5D01               	subwf	intro@i& (0+255),w,b
  1445  0035F8  B0D8               	btfsc	status,0,c
  1446  0035FA  D00E               	goto	l5193
  1447                           
  1448                           ; BSR set to: 1
  1449                           
  1450                           ; BSR set to: 1
  1451                           
  1452                           ; BSR set to: 1
  1453  0035FC  0EC3               	movlw	195
  1454  0035FE  0101               	movlb	1	; () banked
  1455  003600  6F00               	movwf	??_intro& (0+255),b
  1456  003602  0ECD               	movlw	205
  1457  003604                     u4087:
  1458  003604  2EE8               	decfsz	wreg,f,c
  1459  003606  D7FE               	goto	u4087
  1460  003608  2F00               	decfsz	??_intro& (0+255),f,b
  1461  00360A  D7FC               	goto	u4087
  1462  00360C  F000               	nop	
  1463  00360E  0101               	movlb	1	; () banked
  1464  003610  0101               	movlb	1	; () banked
  1465  003612  4B01               	infsnz	intro@i& (0+255),f,b
  1466  003614  2B02               	incf	(intro@i+1)& (0+255),f,b
  1467  003616  D7E8               	goto	L5
  1468  003618                     l5193:
  1469                           
  1470                           ; BSR set to: 1
  1471                           ;lcd.c: 178: lcdClean();
  1472  003618  EC9E  F013         	call	_lcdClean	;wreg free
  1473  00361C  0012               	return	
  1474  00361E                     __end_of_intro:
  1475                           	opt stack 0
  1476                           intcon	equ	0xFF2
  1477                           wreg	equ	0xFE8
  1478                           status	equ	0xFD8
  1479                           
  1480 ;; *************** function _lcdWriteStrC *****************
  1481 ;; Defined at:
  1482 ;;		line 130 in file "lcd.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  s               2   77[BANK0 ] PTR const unsigned char 
  1485 ;;		 -> STR_8(14), STR_7(9), showAccelerometerVal@buffer(10), STR_3(15), 
  1486 ;;		 -> showTempLight@buffer(10), 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;		None               void
  1491 ;; Registers used:
  1492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1502 ;;Total ram usage:        2 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:   10
  1505 ;; This function calls:
  1506 ;;		_lcdWriteChar
  1507 ;; This function is called by:
  1508 ;;		_intro
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text3
  1513  003882                     __ptext3:
  1514                           	opt stack 0
  1515  003882                     _lcdWriteStrC:
  1516                           	opt stack 18
  1517                           
  1518                           ;lcd.c: 132: while(*s) lcdWriteChar(*s++);
  1519                           
  1520                           ;incstack = 0
  1521  003882  D019               	goto	l4381
  1522  003884                     l4377:
  1523  003884  0100               	movlb	0	; () banked
  1524  003886  C0AD  FFF6         	movff	lcdWriteStrC@s,tblptrl
  1525  00388A  0100               	movlb	0	; () banked
  1526  00388C  C0AE  FFF7         	movff	lcdWriteStrC@s+1,tblptrh
  1527  003890  0E00               	movlw	low (__smallconst shr (0+16))
  1528  003892  6EF8               	movwf	tblptru,c
  1529  003894  0E0E               	movlw	(high __ramtop+-1)
  1530  003896  64F7               	cpfsgt	tblptrh,c
  1531  003898  D003               	bra	u2657
  1532  00389A  0008               	tblrd		*
  1533  00389C  50F5               	movf	tablat,w,c
  1534  00389E  D005               	bra	u2650
  1535  0038A0                     u2657:
  1536  0038A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1537  0038A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1538  0038A8  50EF               	movf	indf0,w,c
  1539  0038AA                     u2650:
  1540  0038AA  EC24  F01F         	call	_lcdWriteChar
  1541  0038AE  0100               	movlb	0	; () banked
  1542  0038B0  0100               	movlb	0	; () banked
  1543  0038B2  4BAD               	infsnz	lcdWriteStrC@s& (0+255),f,b
  1544  0038B4  2BAE               	incf	(lcdWriteStrC@s+1)& (0+255),f,b
  1545  0038B6                     l4381:
  1546  0038B6  0100               	movlb	0	; () banked
  1547  0038B8  C0AD  FFF6         	movff	lcdWriteStrC@s,tblptrl
  1548  0038BC  0100               	movlb	0	; () banked
  1549  0038BE  C0AE  FFF7         	movff	lcdWriteStrC@s+1,tblptrh
  1550  0038C2  0E00               	movlw	low (__smallconst shr (0+16))
  1551  0038C4  6EF8               	movwf	tblptru,c
  1552  0038C6  0E0E               	movlw	(high __ramtop+-1)
  1553  0038C8  64F7               	cpfsgt	tblptrh,c
  1554  0038CA  D003               	bra	u2667
  1555  0038CC  0008               	tblrd		*
  1556  0038CE  50F5               	movf	tablat,w,c
  1557  0038D0  D005               	bra	u2660
  1558  0038D2                     u2667:
  1559  0038D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1560  0038D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1561  0038DA  50EF               	movf	indf0,w,c
  1562  0038DC                     u2660:
  1563  0038DC  0900               	iorlw	0
  1564  0038DE  B4D8               	btfsc	status,2,c
  1565  0038E0  0012               	return	
  1566  0038E2  D7D0               	goto	l4377
  1567  0038E4                     __end_of_lcdWriteStrC:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           intcon	equ	0xFF2
  1574                           indf0	equ	0xFEF
  1575                           fsr0h	equ	0xFEA
  1576                           fsr0l	equ	0xFE9
  1577                           wreg	equ	0xFE8
  1578                           status	equ	0xFD8
  1579                           
  1580 ;; *************** function _lcdClean *****************
  1581 ;; Defined at:
  1582 ;;		line 139 in file "lcd.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  i               2   84[BANK0 ] int 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;		None               void
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1597 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1599 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1600 ;;Total ram usage:        3 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; Hardware stack levels required when called:   11
  1603 ;; This function calls:
  1604 ;;		_lcdClear
  1605 ;;		_lcdSetPos
  1606 ;;		_lcdWriteChar
  1607 ;; This function is called by:
  1608 ;;		_intro
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text4
  1613  00273C                     __ptext4:
  1614                           	opt stack 0
  1615  00273C                     _lcdClean:
  1616                           	opt stack 17
  1617                           
  1618                           ;lcd.c: 141: int i;
  1619                           ;lcd.c: 142: for(i = 0; i < 16; i++)
  1620                           
  1621                           ;incstack = 0
  1622  00273C  0E00               	movlw	0
  1623  00273E  0100               	movlb	0	; () banked
  1624  002740  0100               	movlb	0	; () banked
  1625  002742  6FB5               	movwf	(lcdClean@i+1)& (0+255),b
  1626  002744  0E00               	movlw	0
  1627  002746  0100               	movlb	0	; () banked
  1628  002748  6FB4               	movwf	lcdClean@i& (0+255),b
  1629  00274A                     
  1630                           ; BSR set to: 0
  1631  00274A  0100               	movlb	0	; () banked
  1632  00274C  0100               	movlb	0	; () banked
  1633  00274E  51B5               	movf	(lcdClean@i+1)& (0+255),w,b
  1634  002750  0A80               	xorlw	128
  1635  002752  0F80               	addlw	-128
  1636  002754  0E10               	movlw	16
  1637  002756  B4D8               	btfsc	status,2,c
  1638  002758  5DB4               	subwf	lcdClean@i& (0+255),w,b
  1639  00275A  B0D8               	btfsc	status,0,c
  1640  00275C  D01E               	goto	l4405
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;lcd.c: 143: {
  1644                           ;lcd.c: 144: lcdSetPos(i,0);
  1645                           
  1646                           ; BSR set to: 0
  1647                           
  1648                           ; BSR set to: 0
  1649  00275E  0100               	movlb	0	; () banked
  1650  002760  6FB3               	movwf	??_lcdClean& (0+255),b
  1651  002762  0E00               	movlw	0
  1652  002764  0100               	movlb	0	; () banked
  1653  002766  0100               	movlb	0	; () banked
  1654  002768  6FB0               	movwf	lcdSetPos@y& (0+255),b
  1655  00276A  0100               	movlb	0	; () banked
  1656  00276C  51B3               	movf	??_lcdClean& (0+255),w,b
  1657  00276E  0100               	movlb	0	; () banked
  1658  002770  0100               	movlb	0	; () banked
  1659  002772  51B4               	movf	lcdClean@i& (0+255),w,b
  1660  002774  EC72  F01C         	call	_lcdSetPos
  1661                           
  1662                           ;lcd.c: 145: lcdWriteChar('-');
  1663  002778  0E2D               	movlw	45
  1664  00277A  EC24  F01F         	call	_lcdWriteChar
  1665                           
  1666                           ;lcd.c: 146: _delay((unsigned long)((20)*(12000000/4000.0)));
  1667  00277E  0E4E               	movlw	78
  1668  002780  0100               	movlb	0	; () banked
  1669  002782  6FB3               	movwf	??_lcdClean& (0+255),b
  1670  002784  0EEB               	movlw	235
  1671  002786                     u4097:
  1672  002786  2EE8               	decfsz	wreg,f,c
  1673  002788  D7FE               	goto	u4097
  1674  00278A  2FB3               	decfsz	??_lcdClean& (0+255),f,b
  1675  00278C  D7FC               	goto	u4097
  1676  00278E  F000               	nop	
  1677  002790  0100               	movlb	0	; () banked
  1678  002792  0100               	movlb	0	; () banked
  1679  002794  4BB4               	infsnz	lcdClean@i& (0+255),f,b
  1680  002796  2BB5               	incf	(lcdClean@i+1)& (0+255),f,b
  1681  002798  D7D8               	goto	L6
  1682  00279A                     l4405:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;lcd.c: 148: }
  1686                           ;lcd.c: 149: for(i = 0; i < 16; i++)
  1687  00279A  0E00               	movlw	0
  1688  00279C  0100               	movlb	0	; () banked
  1689  00279E  0100               	movlb	0	; () banked
  1690  0027A0  6FB5               	movwf	(lcdClean@i+1)& (0+255),b
  1691  0027A2  0E00               	movlw	0
  1692  0027A4  0100               	movlb	0	; () banked
  1693  0027A6  6FB4               	movwf	lcdClean@i& (0+255),b
  1694  0027A8                     
  1695                           ; BSR set to: 0
  1696  0027A8  0100               	movlb	0	; () banked
  1697  0027AA  0100               	movlb	0	; () banked
  1698  0027AC  51B5               	movf	(lcdClean@i+1)& (0+255),w,b
  1699  0027AE  0A80               	xorlw	128
  1700  0027B0  0F80               	addlw	-128
  1701  0027B2  0E10               	movlw	16
  1702  0027B4  B4D8               	btfsc	status,2,c
  1703  0027B6  5DB4               	subwf	lcdClean@i& (0+255),w,b
  1704  0027B8  B0D8               	btfsc	status,0,c
  1705  0027BA  D030               	goto	l4419
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;lcd.c: 150: {
  1709                           ;lcd.c: 151: lcdSetPos(i,0);
  1710                           
  1711                           ; BSR set to: 0
  1712                           
  1713                           ; BSR set to: 0
  1714  0027BC  0100               	movlb	0	; () banked
  1715  0027BE  6FB3               	movwf	??_lcdClean& (0+255),b
  1716  0027C0  0E00               	movlw	0
  1717  0027C2  0100               	movlb	0	; () banked
  1718  0027C4  0100               	movlb	0	; () banked
  1719  0027C6  6FB0               	movwf	lcdSetPos@y& (0+255),b
  1720  0027C8  0100               	movlb	0	; () banked
  1721  0027CA  51B3               	movf	??_lcdClean& (0+255),w,b
  1722  0027CC  0100               	movlb	0	; () banked
  1723  0027CE  0100               	movlb	0	; () banked
  1724  0027D0  51B4               	movf	lcdClean@i& (0+255),w,b
  1725  0027D2  EC72  F01C         	call	_lcdSetPos
  1726                           
  1727                           ;lcd.c: 152: lcdWriteChar(' ');
  1728  0027D6  0E20               	movlw	32
  1729  0027D8  EC24  F01F         	call	_lcdWriteChar
  1730                           
  1731                           ;lcd.c: 153: lcdSetPos(16-i,1);
  1732  0027DC  0100               	movlb	0	; () banked
  1733  0027DE  6FB3               	movwf	??_lcdClean& (0+255),b
  1734  0027E0  0E01               	movlw	1
  1735  0027E2  0100               	movlb	0	; () banked
  1736  0027E4  0100               	movlb	0	; () banked
  1737  0027E6  6FB0               	movwf	lcdSetPos@y& (0+255),b
  1738  0027E8  0100               	movlb	0	; () banked
  1739  0027EA  51B3               	movf	??_lcdClean& (0+255),w,b
  1740  0027EC  0100               	movlb	0	; () banked
  1741  0027EE  0100               	movlb	0	; () banked
  1742  0027F0  51B4               	movf	lcdClean@i& (0+255),w,b
  1743  0027F2  0800               	sublw	0
  1744  0027F4  0F10               	addlw	16
  1745  0027F6  EC72  F01C         	call	_lcdSetPos
  1746                           
  1747                           ;lcd.c: 154: lcdWriteChar('-');
  1748  0027FA  0E2D               	movlw	45
  1749  0027FC  EC24  F01F         	call	_lcdWriteChar
  1750                           
  1751                           ;lcd.c: 155: _delay((unsigned long)((20)*(12000000/4000.0)));
  1752  002800  0E4E               	movlw	78
  1753  002802  0100               	movlb	0	; () banked
  1754  002804  6FB3               	movwf	??_lcdClean& (0+255),b
  1755  002806  0EEB               	movlw	235
  1756  002808                     u4107:
  1757  002808  2EE8               	decfsz	wreg,f,c
  1758  00280A  D7FE               	goto	u4107
  1759  00280C  2FB3               	decfsz	??_lcdClean& (0+255),f,b
  1760  00280E  D7FC               	goto	u4107
  1761  002810  F000               	nop	
  1762  002812  0100               	movlb	0	; () banked
  1763  002814  0100               	movlb	0	; () banked
  1764  002816  4BB4               	infsnz	lcdClean@i& (0+255),f,b
  1765  002818  2BB5               	incf	(lcdClean@i+1)& (0+255),f,b
  1766  00281A  D7C6               	goto	L7
  1767  00281C                     l4419:
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;lcd.c: 157: }
  1771                           ;lcd.c: 158: for(i = 0; i < 16; i++)
  1772  00281C  0E00               	movlw	0
  1773  00281E  0100               	movlb	0	; () banked
  1774  002820  0100               	movlb	0	; () banked
  1775  002822  6FB5               	movwf	(lcdClean@i+1)& (0+255),b
  1776  002824  0E00               	movlw	0
  1777  002826  0100               	movlb	0	; () banked
  1778  002828  6FB4               	movwf	lcdClean@i& (0+255),b
  1779  00282A                     
  1780                           ; BSR set to: 0
  1781  00282A  0100               	movlb	0	; () banked
  1782  00282C  0100               	movlb	0	; () banked
  1783  00282E  51B5               	movf	(lcdClean@i+1)& (0+255),w,b
  1784  002830  0A80               	xorlw	128
  1785  002832  0F80               	addlw	-128
  1786  002834  0E10               	movlw	16
  1787  002836  B4D8               	btfsc	status,2,c
  1788  002838  5DB4               	subwf	lcdClean@i& (0+255),w,b
  1789  00283A  B0D8               	btfsc	status,0,c
  1790  00283C  D01E               	goto	l4433
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;lcd.c: 159: {
  1794                           ;lcd.c: 160: lcdSetPos(i,1);
  1795                           
  1796                           ; BSR set to: 0
  1797                           
  1798                           ; BSR set to: 0
  1799  00283E  0100               	movlb	0	; () banked
  1800  002840  6FB3               	movwf	??_lcdClean& (0+255),b
  1801  002842  0E01               	movlw	1
  1802  002844  0100               	movlb	0	; () banked
  1803  002846  0100               	movlb	0	; () banked
  1804  002848  6FB0               	movwf	lcdSetPos@y& (0+255),b
  1805  00284A  0100               	movlb	0	; () banked
  1806  00284C  51B3               	movf	??_lcdClean& (0+255),w,b
  1807  00284E  0100               	movlb	0	; () banked
  1808  002850  0100               	movlb	0	; () banked
  1809  002852  51B4               	movf	lcdClean@i& (0+255),w,b
  1810  002854  EC72  F01C         	call	_lcdSetPos
  1811                           
  1812                           ;lcd.c: 161: lcdWriteChar(' ');
  1813  002858  0E20               	movlw	32
  1814  00285A  EC24  F01F         	call	_lcdWriteChar
  1815                           
  1816                           ;lcd.c: 162: _delay((unsigned long)((20)*(12000000/4000.0)));
  1817  00285E  0E4E               	movlw	78
  1818  002860  0100               	movlb	0	; () banked
  1819  002862  6FB3               	movwf	??_lcdClean& (0+255),b
  1820  002864  0EEB               	movlw	235
  1821  002866                     u4117:
  1822  002866  2EE8               	decfsz	wreg,f,c
  1823  002868  D7FE               	goto	u4117
  1824  00286A  2FB3               	decfsz	??_lcdClean& (0+255),f,b
  1825  00286C  D7FC               	goto	u4117
  1826  00286E  F000               	nop	
  1827  002870  0100               	movlb	0	; () banked
  1828  002872  0100               	movlb	0	; () banked
  1829  002874  4BB4               	infsnz	lcdClean@i& (0+255),f,b
  1830  002876  2BB5               	incf	(lcdClean@i+1)& (0+255),f,b
  1831  002878  D7D8               	goto	L8
  1832  00287A                     l4433:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;lcd.c: 164: }
  1836                           ;lcd.c: 165: lcdClear();
  1837  00287A  EC45  F01F         	call	_lcdClear	;wreg free
  1838  00287E  0012               	return	
  1839  002880                     __end_of_lcdClean:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           intcon	equ	0xFF2
  1846                           indf0	equ	0xFEF
  1847                           fsr0h	equ	0xFEA
  1848                           fsr0l	equ	0xFE9
  1849                           wreg	equ	0xFE8
  1850                           status	equ	0xFD8
  1851                           
  1852 ;; *************** function _lcdWriteChar *****************
  1853 ;; Defined at:
  1854 ;;		line 43 in file "lcd.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  n               1    wreg     unsigned char 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  n               1   76[BANK0 ] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;		None               void
  1861 ;; Registers used:
  1862 ;;		wreg, status,2, status,0, cstack
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1871 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1872 ;;Total ram usage:        1 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    9
  1875 ;; This function calls:
  1876 ;;		_writeByte
  1877 ;; This function is called by:
  1878 ;;		_lcdWriteStrC
  1879 ;;		_lcdClean
  1880 ;;		_lcdWriteStr
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text5
  1885  003E48                     __ptext5:
  1886                           	opt stack 0
  1887  003E48                     _lcdWriteChar:
  1888                           	opt stack 18
  1889                           
  1890                           ;incstack = 0
  1891                           ;lcdWriteChar@n stored from wreg
  1892  003E48  CFE8 F0AC          	movff	wreg,lcdWriteChar@n
  1893                           
  1894                           ;lcd.c: 46: LATEbits.LATE0 = 1;
  1895  003E4C  808D               	bsf	3981,0,c	;volatile
  1896                           
  1897                           ;lcd.c: 48: writeByte(n);
  1898  003E4E  0100               	movlb	0	; () banked
  1899  003E50  0100               	movlb	0	; () banked
  1900  003E52  51AC               	movf	lcdWriteChar@n& (0+255),w,b
  1901  003E54  EC15  F01F         	call	_writeByte
  1902                           
  1903                           ;lcd.c: 51: _delay((unsigned long)((43)*(12000000/4000000.0)));
  1904  003E58  0E2B               	movlw	43
  1905  003E5A                     u4127:
  1906  003E5A  2EE8               	decfsz	wreg,f,c
  1907  003E5C  D7FE               	goto	u4127
  1908  003E5E  0012               	return	
  1909  003E60                     __end_of_lcdWriteChar:
  1910                           	opt stack 0
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           intcon	equ	0xFF2
  1916                           indf0	equ	0xFEF
  1917                           fsr0h	equ	0xFEA
  1918                           fsr0l	equ	0xFE9
  1919                           wreg	equ	0xFE8
  1920                           status	equ	0xFD8
  1921                           
  1922 ;; *************** function _lcdSetPos *****************
  1923 ;; Defined at:
  1924 ;;		line 115 in file "lcd.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  x               1    wreg     unsigned char 
  1927 ;;  y               1   80[BANK0 ] unsigned char 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  x               1   82[BANK0 ] unsigned char 
  1930 ;;  p               1   81[BANK0 ] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;		None               void
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1940 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1943 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1944 ;;Total ram usage:        3 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:   10
  1947 ;; This function calls:
  1948 ;;		_lcdWriteCmd
  1949 ;; This function is called by:
  1950 ;;		_lcdClean
  1951 ;;		_intro
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text6
  1956  0038E4                     __ptext6:
  1957                           	opt stack 0
  1958  0038E4                     _lcdSetPos:
  1959                           	opt stack 18
  1960                           
  1961                           ;incstack = 0
  1962                           ;lcdSetPos@x stored from wreg
  1963  0038E4  CFE8 F0B2          	movff	wreg,lcdSetPos@x
  1964                           
  1965                           ;lcd.c: 117: unsigned char p;
  1966                           ;lcd.c: 119: switch(y)
  1967  0038E8  D015               	goto	l4227
  1968  0038EA                     l4217:
  1969  0038EA  C0B2  F0B1         	movff	lcdSetPos@x,lcdSetPos@p
  1970  0038EE  D021               	goto	l4229
  1971  0038F0                     l4219:
  1972  0038F0  0100               	movlb	0	; () banked
  1973  0038F2  0100               	movlb	0	; () banked
  1974  0038F4  51B2               	movf	lcdSetPos@x& (0+255),w,b
  1975  0038F6  0F40               	addlw	64
  1976  0038F8  D009               	goto	L10
  1977  0038FA                     l4221:
  1978                           
  1979                           ; BSR set to: 0
  1980  0038FA  0100               	movlb	0	; () banked
  1981  0038FC  0100               	movlb	0	; () banked
  1982  0038FE  51B2               	movf	lcdSetPos@x& (0+255),w,b
  1983  003900  0F14               	addlw	20
  1984  003902  D004               	goto	L10
  1985  003904                     l4223:
  1986                           
  1987                           ; BSR set to: 0
  1988  003904  0100               	movlb	0	; () banked
  1989  003906  0100               	movlb	0	; () banked
  1990  003908  51B2               	movf	lcdSetPos@x& (0+255),w,b
  1991  00390A  0F54               	addlw	84
  1992  00390C                     L10:
  1993  00390C  0100               	movlb	0	; () banked
  1994  00390E  0100               	movlb	0	; () banked
  1995  003910  6FB1               	movwf	lcdSetPos@p& (0+255),b
  1996  003912  D00F               	goto	l4229
  1997  003914                     l4227:
  1998  003914  0100               	movlb	0	; () banked
  1999  003916  0100               	movlb	0	; () banked
  2000  003918  51B0               	movf	lcdSetPos@y& (0+255),w,b
  2001                           
  2002                           ; Switch size 1, requested type "space"
  2003                           ; Number of cases is 4, Range of values is 0 to 3
  2004                           ; switch strategies available:
  2005                           ; Name         Instructions Cycles
  2006                           ; simple_byte           13     7 (average)
  2007                           ;	Chosen strategy is simple_byte
  2008  00391A  0A00               	xorlw	0	; case 0
  2009  00391C  B4D8               	btfsc	status,2,c
  2010  00391E  D7E5               	goto	l4217
  2011  003920  0A01               	xorlw	1	; case 1
  2012  003922  B4D8               	btfsc	status,2,c
  2013  003924  D7E5               	goto	l4219
  2014  003926  0A03               	xorlw	3	; case 2
  2015  003928  B4D8               	btfsc	status,2,c
  2016  00392A  D7E7               	goto	l4221
  2017  00392C  0A01               	xorlw	1	; case 3
  2018  00392E  B4D8               	btfsc	status,2,c
  2019  003930  D7E9               	goto	l4223
  2020  003932                     l4229:
  2021                           
  2022                           ;lcd.c: 126: p |= 0x80;
  2023  003932  0100               	movlb	0	; () banked
  2024  003934  0100               	movlb	0	; () banked
  2025  003936  8FB1               	bsf	lcdSetPos@p& (0+255),7,b
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;lcd.c: 127: lcdWriteCmd(p);
  2029  003938  0100               	movlb	0	; () banked
  2030  00393A  0100               	movlb	0	; () banked
  2031  00393C  51B1               	movf	lcdSetPos@p& (0+255),w,b
  2032  00393E  ECD1  F01C         	call	_lcdWriteCmd
  2033  003942  0012               	return	
  2034  003944                     __end_of_lcdSetPos:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           intcon	equ	0xFF2
  2041                           indf0	equ	0xFEF
  2042                           fsr0h	equ	0xFEA
  2043                           fsr0l	equ	0xFE9
  2044                           wreg	equ	0xFE8
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _lcdClear *****************
  2048 ;; Defined at:
  2049 ;;		line 110 in file "lcd.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;		None
  2054 ;; Return value:  Size  Location     Type
  2055 ;;		None               void
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2067 ;;Total ram usage:        0 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:   10
  2070 ;; This function calls:
  2071 ;;		_lcdWriteCmd
  2072 ;; This function is called by:
  2073 ;;		_lcdClean
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text7
  2078  003E8A                     __ptext7:
  2079                           	opt stack 0
  2080  003E8A                     _lcdClear:
  2081                           	opt stack 17
  2082                           
  2083                           ;lcd.c: 112: lcdWriteCmd(0x01);
  2084                           
  2085                           ;incstack = 0
  2086  003E8A  0E01               	movlw	1
  2087  003E8C  ECD1  F01C         	call	_lcdWriteCmd
  2088  003E90  0012               	return	
  2089  003E92                     __end_of_lcdClear:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           intcon	equ	0xFF2
  2096                           indf0	equ	0xFEF
  2097                           fsr0h	equ	0xFEA
  2098                           fsr0l	equ	0xFE9
  2099                           wreg	equ	0xFE8
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _lcdWriteCmd *****************
  2103 ;; Defined at:
  2104 ;;		line 30 in file "lcd.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  n               1    wreg     unsigned char 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  n               1   77[BANK0 ] unsigned char 
  2109 ;;  i               2   78[BANK0 ] int 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;		None               void
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2122 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;Total ram usage:        4 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    9
  2126 ;; This function calls:
  2127 ;;		_writeByte
  2128 ;; This function is called by:
  2129 ;;		_lcdInit
  2130 ;;		_lcdClear
  2131 ;;		_lcdSetPos
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text8
  2136  0039A2                     __ptext8:
  2137                           	opt stack 0
  2138  0039A2                     _lcdWriteCmd:
  2139                           	opt stack 20
  2140                           
  2141                           ;incstack = 0
  2142                           ;lcdWriteCmd@n stored from wreg
  2143  0039A2  CFE8 F0AD          	movff	wreg,lcdWriteCmd@n
  2144                           
  2145                           ;lcd.c: 33: LATEbits.LATE0 = 0;
  2146  0039A6  908D               	bcf	3981,0,c	;volatile
  2147                           
  2148                           ;lcd.c: 35: writeByte(n);
  2149  0039A8  0100               	movlb	0	; () banked
  2150  0039AA  0100               	movlb	0	; () banked
  2151  0039AC  51AD               	movf	lcdWriteCmd@n& (0+255),w,b
  2152  0039AE  EC15  F01F         	call	_writeByte
  2153                           
  2154                           ;lcd.c: 39: if (!(n & 0xFC)) for(int i = 0; i < 100; i++) _delay((unsigned long)((16)*(1
      +                          2000000/4000000.0)));
  2155  0039B2  C0AD  F0AC         	movff	lcdWriteCmd@n,??_lcdWriteCmd
  2156  0039B6  0EFC               	movlw	252
  2157  0039B8  0100               	movlb	0	; () banked
  2158  0039BA  17AC               	andwf	??_lcdWriteCmd& (0+255),f,b
  2159  0039BC  A4D8               	btfss	status,2,c
  2160  0039BE  D019               	goto	l4027
  2161                           
  2162                           ; BSR set to: 0
  2163  0039C0  0E00               	movlw	0
  2164  0039C2  0100               	movlb	0	; () banked
  2165  0039C4  0100               	movlb	0	; () banked
  2166  0039C6  6FAF               	movwf	(lcdWriteCmd@i+1)& (0+255),b
  2167  0039C8  0E00               	movlw	0
  2168  0039CA  0100               	movlb	0	; () banked
  2169  0039CC  6FAE               	movwf	lcdWriteCmd@i& (0+255),b
  2170  0039CE                     
  2171                           ; BSR set to: 0
  2172  0039CE  0100               	movlb	0	; () banked
  2173  0039D0  0100               	movlb	0	; () banked
  2174  0039D2  51AF               	movf	(lcdWriteCmd@i+1)& (0+255),w,b
  2175  0039D4  0A80               	xorlw	128
  2176  0039D6  0F80               	addlw	-128
  2177  0039D8  0E64               	movlw	100
  2178  0039DA  B4D8               	btfsc	status,2,c
  2179  0039DC  5DAE               	subwf	lcdWriteCmd@i& (0+255),w,b
  2180  0039DE  B0D8               	btfsc	status,0,c
  2181  0039E0  0012               	return	
  2182                           
  2183                           ; BSR set to: 0
  2184                           
  2185                           ; BSR set to: 0
  2186                           
  2187                           ; BSR set to: 0
  2188  0039E2  0E10               	movlw	16
  2189  0039E4                     u4137:
  2190  0039E4  2EE8               	decfsz	wreg,f,c
  2191  0039E6  D7FE               	goto	u4137
  2192  0039E8  0100               	movlb	0	; () banked
  2193  0039EA  0100               	movlb	0	; () banked
  2194  0039EC  4BAE               	infsnz	lcdWriteCmd@i& (0+255),f,b
  2195  0039EE  2BAF               	incf	(lcdWriteCmd@i+1)& (0+255),f,b
  2196  0039F0  D7EE               	goto	L11
  2197  0039F2                     l4027:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;lcd.c: 40: else _delay((unsigned long)((43)*(12000000/4000000.0)));
  2201  0039F2  0E2B               	movlw	43
  2202  0039F4                     u4147:
  2203  0039F4  2EE8               	decfsz	wreg,f,c
  2204  0039F6  D7FE               	goto	u4147
  2205  0039F8  0012               	return	
  2206  0039FA                     __end_of_lcdWriteCmd:
  2207                           	opt stack 0
  2208                           tblptru	equ	0xFF8
  2209                           tblptrh	equ	0xFF7
  2210                           tblptrl	equ	0xFF6
  2211                           tablat	equ	0xFF5
  2212                           intcon	equ	0xFF2
  2213                           indf0	equ	0xFEF
  2214                           fsr0h	equ	0xFEA
  2215                           fsr0l	equ	0xFE9
  2216                           wreg	equ	0xFE8
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _writeByte *****************
  2220 ;; Defined at:
  2221 ;;		line 22 in file "lcd.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  n               1    wreg     unsigned char 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  n               1   75[BANK0 ] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;		None               void
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2238 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2239 ;;Total ram usage:        1 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    8
  2242 ;; This function calls:
  2243 ;;		_writeDigit
  2244 ;; This function is called by:
  2245 ;;		_lcdWriteCmd
  2246 ;;		_lcdWriteChar
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text9
  2251  003E2A                     __ptext9:
  2252                           	opt stack 0
  2253  003E2A                     _writeByte:
  2254                           	opt stack 20
  2255                           
  2256                           ;incstack = 0
  2257                           ;writeByte@n stored from wreg
  2258  003E2A  CFE8 F0AB          	movff	wreg,writeByte@n
  2259                           
  2260                           ;lcd.c: 25: writeDigit(n >> 4);
  2261  003E2E  0100               	movlb	0	; () banked
  2262  003E30  0100               	movlb	0	; () banked
  2263  003E32  39AB               	swapf	writeByte@n& (0+255),w,b
  2264  003E34  0B0F               	andlw	15
  2265  003E36  ECE4  F01D         	call	_writeDigit
  2266                           
  2267                           ;lcd.c: 27: writeDigit(n & 0x0F);
  2268  003E3A  0100               	movlb	0	; () banked
  2269  003E3C  0100               	movlb	0	; () banked
  2270  003E3E  51AB               	movf	writeByte@n& (0+255),w,b
  2271  003E40  0B0F               	andlw	15
  2272  003E42  ECE4  F01D         	call	_writeDigit
  2273  003E46  0012               	return	
  2274  003E48                     __end_of_writeByte:
  2275                           	opt stack 0
  2276                           tblptru	equ	0xFF8
  2277                           tblptrh	equ	0xFF7
  2278                           tblptrl	equ	0xFF6
  2279                           tablat	equ	0xFF5
  2280                           intcon	equ	0xFF2
  2281                           indf0	equ	0xFEF
  2282                           fsr0h	equ	0xFEA
  2283                           fsr0l	equ	0xFE9
  2284                           wreg	equ	0xFE8
  2285                           status	equ	0xFD8
  2286                           
  2287 ;; *************** function _writeDigit *****************
  2288 ;; Defined at:
  2289 ;;		line 6 in file "lcd.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  n               1    wreg     unsigned char 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  n               1   74[BANK0 ] unsigned char 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;		None               void
  2296 ;; Registers used:
  2297 ;;		wreg
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2307 ;;Total ram usage:        1 bytes
  2308 ;; Hardware stack levels used:    1
  2309 ;; Hardware stack levels required when called:    7
  2310 ;; This function calls:
  2311 ;;		Nothing
  2312 ;; This function is called by:
  2313 ;;		_writeByte
  2314 ;;		_lcdInit
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text10
  2319  003BC8                     __ptext10:
  2320                           	opt stack 0
  2321  003BC8                     _writeDigit:
  2322                           	opt stack 22
  2323                           
  2324                           ;incstack = 0
  2325                           ;writeDigit@n stored from wreg
  2326  003BC8  CFE8 F0AA          	movff	wreg,writeDigit@n
  2327                           
  2328                           ;lcd.c: 9: LATEbits.LATE1 = 1;
  2329  003BCC  828D               	bsf	3981,1,c	;volatile
  2330                           
  2331                           ;lcd.c: 12: if (n & 0x01) LATDbits.LATD0 = 1; else LATDbits.LATD0 = 0;
  2332  003BCE  0100               	movlb	0	; () banked
  2333  003BD0  0100               	movlb	0	; () banked
  2334  003BD2  A1AA               	btfss	writeDigit@n& (0+255),0,b
  2335  003BD4  D002               	goto	l127
  2336                           
  2337                           ; BSR set to: 0
  2338  003BD6  808C               	bsf	3980,0,c	;volatile
  2339  003BD8  D001               	goto	l3963
  2340  003BDA                     l127:
  2341                           
  2342                           ; BSR set to: 0
  2343  003BDA  908C               	bcf	3980,0,c	;volatile
  2344  003BDC                     l3963:
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;lcd.c: 13: if (n & 0x02) LATDbits.LATD1 = 1; else LATDbits.LATD1 = 0;
  2348  003BDC  0100               	movlb	0	; () banked
  2349  003BDE  0100               	movlb	0	; () banked
  2350  003BE0  A3AA               	btfss	writeDigit@n& (0+255),1,b
  2351  003BE2  D002               	goto	l129
  2352                           
  2353                           ; BSR set to: 0
  2354  003BE4  828C               	bsf	3980,1,c	;volatile
  2355  003BE6  D001               	goto	l3967
  2356  003BE8                     l129:
  2357                           
  2358                           ; BSR set to: 0
  2359  003BE8  928C               	bcf	3980,1,c	;volatile
  2360  003BEA                     l3967:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;lcd.c: 14: if (n & 0x04) LATDbits.LATD2 = 1; else LATDbits.LATD2 = 0;
  2364  003BEA  0100               	movlb	0	; () banked
  2365  003BEC  0100               	movlb	0	; () banked
  2366  003BEE  A5AA               	btfss	writeDigit@n& (0+255),2,b
  2367  003BF0  D002               	goto	l131
  2368                           
  2369                           ; BSR set to: 0
  2370  003BF2  848C               	bsf	3980,2,c	;volatile
  2371  003BF4  D001               	goto	l3971
  2372  003BF6                     l131:
  2373                           
  2374                           ; BSR set to: 0
  2375  003BF6  948C               	bcf	3980,2,c	;volatile
  2376  003BF8                     l3971:
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;lcd.c: 15: if (n & 0x08) LATDbits.LATD3 = 1; else LATDbits.LATD3 = 0;
  2380  003BF8  0100               	movlb	0	; () banked
  2381  003BFA  0100               	movlb	0	; () banked
  2382  003BFC  A7AA               	btfss	writeDigit@n& (0+255),3,b
  2383  003BFE  D002               	goto	l133
  2384                           
  2385                           ; BSR set to: 0
  2386  003C00  868C               	bsf	3980,3,c	;volatile
  2387  003C02  D001               	goto	l134
  2388  003C04                     l133:
  2389                           
  2390                           ; BSR set to: 0
  2391  003C04  968C               	bcf	3980,3,c	;volatile
  2392  003C06                     l134:
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;lcd.c: 19: LATEbits.LATE1 = 0;
  2396  003C06  928D               	bcf	3981,1,c	;volatile
  2397                           
  2398                           ; BSR set to: 0
  2399  003C08  0012               	return	
  2400  003C0A                     __end_of_writeDigit:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           intcon	equ	0xFF2
  2407                           indf0	equ	0xFEF
  2408                           fsr0h	equ	0xFEA
  2409                           fsr0l	equ	0xFE9
  2410                           wreg	equ	0xFE8
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _ISR *****************
  2414 ;; Defined at:
  2415 ;;		line 52 in file "main.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;		None
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;		None               void
  2422 ;; Registers used:
  2423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2431 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2432 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;Total ram usage:       14 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    6
  2436 ;; This function calls:
  2437 ;;		_showAccelerometerVal
  2438 ;;		_showTempLight
  2439 ;; This function is called by:
  2440 ;;		Interrupt level 2
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	intcode
  2445  000008                     __pintcode:
  2446                           	opt stack 0
  2447  000008                     _ISR:
  2448                           	opt stack 17
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;incstack = 0
  2452  000008  CFFA F09C          	movff	pclath,??_ISR
  2453  00000C  CFFB F09D          	movff	pclatu,??_ISR+1
  2454  000010  CFE9 F09E          	movff	fsr0l,??_ISR+2
  2455  000014  CFEA F09F          	movff	fsr0h,??_ISR+3
  2456  000018  CFE1 F0A0          	movff	fsr1l,??_ISR+4
  2457  00001C  CFE2 F0A1          	movff	fsr1h,??_ISR+5
  2458  000020  CFD9 F0A2          	movff	fsr2l,??_ISR+6
  2459  000024  CFDA F0A3          	movff	fsr2h,??_ISR+7
  2460  000028  CFF3 F0A4          	movff	prodl,??_ISR+8
  2461  00002C  CFF4 F0A5          	movff	prodh,??_ISR+9
  2462  000030  CFF6 F0A6          	movff	tblptrl,??_ISR+10
  2463  000034  CFF7 F0A7          	movff	tblptrh,??_ISR+11
  2464  000038  CFF8 F0A8          	movff	tblptru,??_ISR+12
  2465  00003C  CFF5 F0A9          	movff	tablat,??_ISR+13
  2466                           
  2467                           ;main.c: 54: if(INTCONbits.RBIF == 1)
  2468  000040  A0F2               	btfss	intcon,0,c	;volatile
  2469  000042  D00B               	goto	i2l51
  2470                           
  2471                           ;main.c: 55: {
  2472                           ;main.c: 56: _delay((unsigned long)((100)*(12000000/4000000.0)));
  2473  000044  0E64               	movlw	100
  2474  000046                     i2u415_47:
  2475  000046  2EE8               	decfsz	wreg,f,c
  2476  000048  D7FE               	goto	i2u415_47
  2477                           
  2478                           ;main.c: 57: if(PORTBbits.RB4 == 0)
  2479  00004A  A881               	btfss	3969,4,c	;volatile
  2480                           
  2481                           ;main.c: 58: {
  2482                           ;main.c: 59: showTempLight();
  2483  00004C  ECCA  F019         	call	_showTempLight	;wreg free
  2484                           
  2485                           ;main.c: 60: }
  2486                           ;main.c: 61: if(PORTBbits.RB5 == 0)
  2487  000050  AA81               	btfss	3969,5,c	;volatile
  2488                           
  2489                           ;main.c: 62: {
  2490                           ;main.c: 63: showAccelerometerVal();
  2491  000052  EC40  F014         	call	_showAccelerometerVal	;wreg free
  2492                           
  2493                           ;main.c: 64: }
  2494                           ;main.c: 65: if(PORTBbits.RB6 == 0)
  2495  000056  5081               	movf	3969,w,c	;volatile
  2496                           
  2497                           ;main.c: 68: }
  2498                           ;main.c: 69: INTCONbits.RBIF = 0;
  2499                           
  2500                           ;main.c: 66: {
  2501  000058  90F2               	bcf	intcon,0,c	;volatile
  2502  00005A                     i2l51:
  2503  00005A  C0A9  FFF5         	movff	??_ISR+13,tablat
  2504  00005E  C0A8  FFF8         	movff	??_ISR+12,tblptru
  2505  000062  C0A7  FFF7         	movff	??_ISR+11,tblptrh
  2506  000066  C0A6  FFF6         	movff	??_ISR+10,tblptrl
  2507  00006A  C0A5  FFF4         	movff	??_ISR+9,prodh
  2508  00006E  C0A4  FFF3         	movff	??_ISR+8,prodl
  2509  000072  C0A3  FFDA         	movff	??_ISR+7,fsr2h
  2510  000076  C0A2  FFD9         	movff	??_ISR+6,fsr2l
  2511  00007A  C0A1  FFE2         	movff	??_ISR+5,fsr1h
  2512  00007E  C0A0  FFE1         	movff	??_ISR+4,fsr1l
  2513  000082  C09F  FFEA         	movff	??_ISR+3,fsr0h
  2514  000086  C09E  FFE9         	movff	??_ISR+2,fsr0l
  2515  00008A  C09D  FFFB         	movff	??_ISR+1,pclatu
  2516  00008E  C09C  FFFA         	movff	??_ISR,pclath
  2517  000092  0011               	retfie		f
  2518  000094                     __end_of_ISR:
  2519                           	opt stack 0
  2520                           pclatu	equ	0xFFB
  2521                           pclath	equ	0xFFA
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           prodh	equ	0xFF4
  2527                           prodl	equ	0xFF3
  2528                           intcon	equ	0xFF2
  2529                           indf0	equ	0xFEF
  2530                           fsr0h	equ	0xFEA
  2531                           fsr0l	equ	0xFE9
  2532                           wreg	equ	0xFE8
  2533                           fsr1h	equ	0xFE2
  2534                           fsr1l	equ	0xFE1
  2535                           fsr2h	equ	0xFDA
  2536                           fsr2l	equ	0xFD9
  2537                           status	equ	0xFD8
  2538                           
  2539 ;; *************** function _showTempLight *****************
  2540 ;; Defined at:
  2541 ;;		line 73 in file "main.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;		None
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  buffer         10   50[BANK0 ] unsigned char [10]
  2546 ;; Return value:  Size  Location     Type
  2547 ;;		None               void
  2548 ;; Registers used:
  2549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2556 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;Total ram usage:       11 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    5
  2562 ;; This function calls:
  2563 ;;		_readLight
  2564 ;;		_readTempF
  2565 ;;		_sprintf
  2566 ;;		i2_lcdClear
  2567 ;;		i2_lcdSetPos
  2568 ;;		i2_lcdWriteStrC
  2569 ;; This function is called by:
  2570 ;;		_ISR
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text12
  2575  003394                     __ptext12:
  2576                           	opt stack 0
  2577  003394                     _showTempLight:
  2578                           	opt stack 17
  2579                           
  2580                           ;main.c: 75: char buffer [10];
  2581                           ;main.c: 76: lcdClear();
  2582                           
  2583                           ;incstack = 0
  2584  003394  EC49  F01F         	call	i2_lcdClear	;wreg free
  2585                           
  2586                           ;main.c: 77: lcdSetPos(0,0);
  2587  003398  6E5C               	movwf	??_showTempLight& (0+255),c
  2588  00339A  0E00               	movlw	0
  2589  00339C  6E07               	movwf	i2lcdSetPos@y,c
  2590  00339E  505C               	movf	??_showTempLight& (0+255),w,c
  2591  0033A0  0E00               	movlw	0
  2592  0033A2  ECA0  F01D         	call	i2_lcdSetPos
  2593                           
  2594                           ;main.c: 78: sprintf(buffer,"temp: %1.3f",readTempF());
  2595  0033A6  0100               	movlb	0	; () banked
  2596  0033A8  0E00               	movlw	high showTempLight@buffer
  2597  0033AA  0100               	movlb	0	; () banked
  2598  0033AC  0100               	movlb	0	; () banked
  2599  0033AE  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2600  0033B0  0100               	movlb	0	; () banked
  2601  0033B2  0E92               	movlw	low showTempLight@buffer
  2602  0033B4  0100               	movlb	0	; () banked
  2603  0033B6  0100               	movlb	0	; () banked
  2604  0033B8  6F60               	movwf	sprintf@sp& (0+255),b
  2605  0033BA  0E0F               	movlw	high STR_1
  2606  0033BC  0100               	movlb	0	; () banked
  2607  0033BE  0100               	movlb	0	; () banked
  2608  0033C0  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2609  0033C2  0E94               	movlw	low STR_1
  2610  0033C4  0100               	movlb	0	; () banked
  2611  0033C6  0100               	movlb	0	; () banked
  2612  0033C8  6F62               	movwf	sprintf@f& (0+255),b
  2613  0033CA  EC7B  F015         	call	_readTempF	;wreg free
  2614  0033CE  C041  F064         	movff	?_readTempF,?_sprintf+4
  2615  0033D2  C042  F065         	movff	?_readTempF+1,?_sprintf+5
  2616  0033D6  C043  F066         	movff	?_readTempF+2,?_sprintf+6
  2617  0033DA  ECDD  F007         	call	_sprintf	;wreg free
  2618                           
  2619                           ;main.c: 79: lcdWriteStrC(buffer);
  2620  0033DE  0100               	movlb	0	; () banked
  2621  0033E0  0E00               	movlw	high showTempLight@buffer
  2622  0033E2  6E05               	movwf	i2lcdWriteStrC@s+1,c
  2623  0033E4  0100               	movlb	0	; () banked
  2624  0033E6  0E92               	movlw	low showTempLight@buffer
  2625  0033E8  6E04               	movwf	i2lcdWriteStrC@s,c
  2626  0033EA  EC28  F01D         	call	i2_lcdWriteStrC	;wreg free
  2627                           
  2628                           ;main.c: 80: lcdSetPos(0,1);
  2629  0033EE  6E5C               	movwf	??_showTempLight& (0+255),c
  2630  0033F0  0E01               	movlw	1
  2631  0033F2  6E07               	movwf	i2lcdSetPos@y,c
  2632  0033F4  505C               	movf	??_showTempLight& (0+255),w,c
  2633  0033F6  0E00               	movlw	0
  2634  0033F8  ECA0  F01D         	call	i2_lcdSetPos
  2635                           
  2636                           ;main.c: 81: sprintf(buffer,"light: %d",readLight());
  2637  0033FC  0100               	movlb	0	; () banked
  2638  0033FE  0E00               	movlw	high showTempLight@buffer
  2639  003400  0100               	movlb	0	; () banked
  2640  003402  0100               	movlb	0	; () banked
  2641  003404  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2642  003406  0100               	movlb	0	; () banked
  2643  003408  0E92               	movlw	low showTempLight@buffer
  2644  00340A  0100               	movlb	0	; () banked
  2645  00340C  0100               	movlb	0	; () banked
  2646  00340E  6F60               	movwf	sprintf@sp& (0+255),b
  2647  003410  0E0F               	movlw	high STR_2
  2648  003412  0100               	movlb	0	; () banked
  2649  003414  0100               	movlb	0	; () banked
  2650  003416  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2651  003418  0EA0               	movlw	low STR_2
  2652  00341A  0100               	movlb	0	; () banked
  2653  00341C  0100               	movlb	0	; () banked
  2654  00341E  6F62               	movwf	sprintf@f& (0+255),b
  2655  003420  EC9A  F01B         	call	_readLight	;wreg free
  2656  003424  C01C  F064         	movff	?_readLight,?_sprintf+4
  2657  003428  C01D  F065         	movff	?_readLight+1,?_sprintf+5
  2658  00342C  ECDD  F007         	call	_sprintf	;wreg free
  2659                           
  2660                           ;main.c: 82: lcdWriteStrC(buffer);
  2661  003430  0100               	movlb	0	; () banked
  2662  003432  0E00               	movlw	high showTempLight@buffer
  2663  003434  6E05               	movwf	i2lcdWriteStrC@s+1,c
  2664  003436  0100               	movlb	0	; () banked
  2665  003438  0E92               	movlw	low showTempLight@buffer
  2666  00343A  6E04               	movwf	i2lcdWriteStrC@s,c
  2667  00343C  EC28  F01D         	call	i2_lcdWriteStrC	;wreg free
  2668  003440  0012               	return	
  2669  003442                     __end_of_showTempLight:
  2670                           	opt stack 0
  2671                           pclatu	equ	0xFFB
  2672                           pclath	equ	0xFFA
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           intcon	equ	0xFF2
  2680                           indf0	equ	0xFEF
  2681                           fsr0h	equ	0xFEA
  2682                           fsr0l	equ	0xFE9
  2683                           wreg	equ	0xFE8
  2684                           fsr1h	equ	0xFE2
  2685                           fsr1l	equ	0xFE1
  2686                           fsr2h	equ	0xFDA
  2687                           fsr2l	equ	0xFD9
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function _readTempF *****************
  2691 ;; Defined at:
  2692 ;;		line 93 in file "functions.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  i               2   70[COMRAM] int 
  2697 ;;  j               3   72[COMRAM] float 
  2698 ;;  temp            3   67[COMRAM] float 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  3   64[COMRAM] float 
  2701 ;; Registers used:
  2702 ;;		wreg, status,2, status,0, prodl, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2708 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2709 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2711 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2712 ;;Total ram usage:       11 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    2
  2715 ;; This function calls:
  2716 ;;		___awtoft
  2717 ;;		___ftadd
  2718 ;;		___ftdiv
  2719 ;;		___ftmul
  2720 ;;		_read
  2721 ;; This function is called by:
  2722 ;;		_showTempLight
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text13
  2727  002AF6                     __ptext13:
  2728                           	opt stack 0
  2729  002AF6                     _readTempF:
  2730                           	opt stack 19
  2731                           
  2732                           ;functions.c: 95: float temp;
  2733                           ;functions.c: 96: float j = 0;
  2734                           
  2735                           ;incstack = 0
  2736  002AF6  0E00               	movlw	0
  2737  002AF8  6E49               	movwf	readTempF@j,c
  2738  002AFA  0E00               	movlw	0
  2739  002AFC  6E4A               	movwf	readTempF@j+1,c
  2740  002AFE  0E00               	movlw	0
  2741  002B00  6E4B               	movwf	readTempF@j+2,c
  2742                           
  2743                           ;functions.c: 97: for(int i = 0; i < 5; i++)
  2744  002B02  0E00               	movlw	0
  2745  002B04  6E48               	movwf	readTempF@i+1,c
  2746  002B06  0E00               	movlw	0
  2747  002B08  6E47               	movwf	readTempF@i,c
  2748  002B0A  5048               	movf	readTempF@i+1,w,c
  2749  002B0C  0A80               	xorlw	128
  2750  002B0E  0F80               	addlw	-128
  2751  002B10  0E05               	movlw	5
  2752  002B12  B4D8               	btfsc	status,2,c
  2753  002B14  5C47               	subwf	readTempF@i,w,c
  2754  002B16  B0D8               	btfsc	status,0,c
  2755  002B18  D023               	goto	i2l4849
  2756                           
  2757                           ;functions.c: 98: j = (float)read(0)+j;
  2758  002B1A  0E00               	movlw	0
  2759  002B1C  6E02               	movwf	read@channel+1,c
  2760  002B1E  0E00               	movlw	0
  2761  002B20  6E01               	movwf	read@channel,c
  2762  002B22  EC0D  F019         	call	_read	;wreg free
  2763  002B26  C001  F009         	movff	?_read,___awtoft@c
  2764  002B2A  C002  F00A         	movff	?_read+1,___awtoft@c+1
  2765  002B2E  EC53  F01D         	call	___awtoft	;wreg free
  2766  002B32  C009  F026         	movff	?___awtoft,___ftadd@f1
  2767  002B36  C00A  F027         	movff	?___awtoft+1,___ftadd@f1+1
  2768  002B3A  C00B  F028         	movff	?___awtoft+2,___ftadd@f1+2
  2769  002B3E  C049  F029         	movff	readTempF@j,___ftadd@f2
  2770  002B42  C04A  F02A         	movff	readTempF@j+1,___ftadd@f2+1
  2771  002B46  C04B  F02B         	movff	readTempF@j+2,___ftadd@f2+2
  2772  002B4A  EC0C  F012         	call	___ftadd	;wreg free
  2773  002B4E  C026  F049         	movff	?___ftadd,readTempF@j
  2774  002B52  C027  F04A         	movff	?___ftadd+1,readTempF@j+1
  2775  002B56  C028  F04B         	movff	?___ftadd+2,readTempF@j+2
  2776  002B5A  4A47               	infsnz	readTempF@i,f,c
  2777  002B5C  2A48               	incf	readTempF@i+1,f,c
  2778  002B5E  D7D5               	goto	L12
  2779  002B60                     i2l4849:
  2780                           
  2781                           ;functions.c: 99: j = j/5;
  2782  002B60  C049  F032         	movff	readTempF@j,___ftdiv@f1
  2783  002B64  C04A  F033         	movff	readTempF@j+1,___ftdiv@f1+1
  2784  002B68  C04B  F034         	movff	readTempF@j+2,___ftdiv@f1+2
  2785  002B6C  0E00               	movlw	0
  2786  002B6E  6E35               	movwf	___ftdiv@f2,c
  2787  002B70  0EA0               	movlw	160
  2788  002B72  6E36               	movwf	___ftdiv@f2+1,c
  2789  002B74  0E40               	movlw	64
  2790  002B76  6E37               	movwf	___ftdiv@f2+2,c
  2791  002B78  EC9A  F018         	call	___ftdiv	;wreg free
  2792  002B7C  C032  F049         	movff	?___ftdiv,readTempF@j
  2793  002B80  C033  F04A         	movff	?___ftdiv+1,readTempF@j+1
  2794  002B84  C034  F04B         	movff	?___ftdiv+2,readTempF@j+2
  2795                           
  2796                           ;functions.c: 100: j = ((j*3.3)/4096);
  2797  002B88  0E33               	movlw	51
  2798  002B8A  6E1A               	movwf	___ftmul@f2,c
  2799  002B8C  0E53               	movlw	83
  2800  002B8E  6E1B               	movwf	___ftmul@f2+1,c
  2801  002B90  0E40               	movlw	64
  2802  002B92  6E1C               	movwf	___ftmul@f2+2,c
  2803  002B94  C049  F017         	movff	readTempF@j,___ftmul@f1
  2804  002B98  C04A  F018         	movff	readTempF@j+1,___ftmul@f1+1
  2805  002B9C  C04B  F019         	movff	readTempF@j+2,___ftmul@f1+2
  2806  002BA0  ECA3  F017         	call	___ftmul	;wreg free
  2807  002BA4  C017  F032         	movff	?___ftmul,___ftdiv@f1
  2808  002BA8  C018  F033         	movff	?___ftmul+1,___ftdiv@f1+1
  2809  002BAC  C019  F034         	movff	?___ftmul+2,___ftdiv@f1+2
  2810  002BB0  0E00               	movlw	0
  2811  002BB2  6E35               	movwf	___ftdiv@f2,c
  2812  002BB4  0E80               	movlw	128
  2813  002BB6  6E36               	movwf	___ftdiv@f2+1,c
  2814  002BB8  0E45               	movlw	69
  2815  002BBA  6E37               	movwf	___ftdiv@f2+2,c
  2816  002BBC  EC9A  F018         	call	___ftdiv	;wreg free
  2817  002BC0  C032  F049         	movff	?___ftdiv,readTempF@j
  2818  002BC4  C033  F04A         	movff	?___ftdiv+1,readTempF@j+1
  2819  002BC8  C034  F04B         	movff	?___ftdiv+2,readTempF@j+2
  2820                           
  2821                           ;functions.c: 101: temp = (18.181818*j) - 10;
  2822  002BCC  0E74               	movlw	116
  2823  002BCE  6E1A               	movwf	___ftmul@f2,c
  2824  002BD0  0E91               	movlw	145
  2825  002BD2  6E1B               	movwf	___ftmul@f2+1,c
  2826  002BD4  0E41               	movlw	65
  2827  002BD6  6E1C               	movwf	___ftmul@f2+2,c
  2828  002BD8  C049  F017         	movff	readTempF@j,___ftmul@f1
  2829  002BDC  C04A  F018         	movff	readTempF@j+1,___ftmul@f1+1
  2830  002BE0  C04B  F019         	movff	readTempF@j+2,___ftmul@f1+2
  2831  002BE4  ECA3  F017         	call	___ftmul	;wreg free
  2832  002BE8  C017  F026         	movff	?___ftmul,___ftadd@f1
  2833  002BEC  C018  F027         	movff	?___ftmul+1,___ftadd@f1+1
  2834  002BF0  C019  F028         	movff	?___ftmul+2,___ftadd@f1+2
  2835  002BF4  0E00               	movlw	0
  2836  002BF6  6E29               	movwf	___ftadd@f2,c
  2837  002BF8  0E20               	movlw	32
  2838  002BFA  6E2A               	movwf	___ftadd@f2+1,c
  2839  002BFC  0EC1               	movlw	193
  2840  002BFE  6E2B               	movwf	___ftadd@f2+2,c
  2841  002C00  EC0C  F012         	call	___ftadd	;wreg free
  2842  002C04  C026  F044         	movff	?___ftadd,readTempF@temp
  2843  002C08  C027  F045         	movff	?___ftadd+1,readTempF@temp+1
  2844  002C0C  C028  F046         	movff	?___ftadd+2,readTempF@temp+2
  2845                           
  2846                           ;functions.c: 103: return temp;
  2847  002C10  C044  F041         	movff	readTempF@temp,?_readTempF
  2848  002C14  C045  F042         	movff	readTempF@temp+1,?_readTempF+1
  2849  002C18  C046  F043         	movff	readTempF@temp+2,?_readTempF+2
  2850  002C1C  0012               	return	
  2851  002C1E                     __end_of_readTempF:
  2852                           	opt stack 0
  2853                           pclatu	equ	0xFFB
  2854                           pclath	equ	0xFFA
  2855                           tblptru	equ	0xFF8
  2856                           tblptrh	equ	0xFF7
  2857                           tblptrl	equ	0xFF6
  2858                           tablat	equ	0xFF5
  2859                           prodh	equ	0xFF4
  2860                           prodl	equ	0xFF3
  2861                           intcon	equ	0xFF2
  2862                           indf0	equ	0xFEF
  2863                           fsr0h	equ	0xFEA
  2864                           fsr0l	equ	0xFE9
  2865                           wreg	equ	0xFE8
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function ___awtoft *****************
  2873 ;; Defined at:
  2874 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awtoft.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  c               2    8[COMRAM] int 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  sign            1   12[COMRAM] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  3    8[COMRAM] float 
  2881 ;; Registers used:
  2882 ;;		wreg, status,2, status,0, prodl, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2888 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2891 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2892 ;;Total ram usage:        5 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    1
  2895 ;; This function calls:
  2896 ;;		___ftpack
  2897 ;; This function is called by:
  2898 ;;		_readTempF
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text14
  2903  003AA6                     __ptext14:
  2904                           	opt stack 0
  2905  003AA6                     ___awtoft:
  2906                           	opt stack 19
  2907                           
  2908                           ;incstack = 0
  2909  003AA6  6E0C               	movwf	??___awtoft& (0+255),c
  2910  003AA8  0E00               	movlw	0
  2911  003AAA  6E0D               	movwf	___awtoft@sign,c
  2912  003AAC  500C               	movf	??___awtoft& (0+255),w,c
  2913  003AAE  500A               	movf	___awtoft@c+1,w,c
  2914  003AB0  0A80               	xorlw	128
  2915  003AB2  6EF3               	movwf	prodl,c
  2916  003AB4  0E80               	movlw	128
  2917  003AB6  5CF3               	subwf	prodl,w,c
  2918  003AB8  0E00               	movlw	0
  2919  003ABA  B4D8               	btfsc	status,2,c
  2920  003ABC  5C09               	subwf	___awtoft@c,w,c
  2921  003ABE  B0D8               	btfsc	status,0,c
  2922  003AC0  D008               	goto	i2l4693
  2923  003AC2  6C09               	negf	___awtoft@c,c
  2924  003AC4  1E0A               	comf	___awtoft@c+1,f,c
  2925  003AC6  B0D8               	btfsc	status,0,c
  2926  003AC8  2A0A               	incf	___awtoft@c+1,f,c
  2927  003ACA  6E0C               	movwf	??___awtoft& (0+255),c
  2928  003ACC  0E01               	movlw	1
  2929  003ACE  6E0D               	movwf	___awtoft@sign,c
  2930  003AD0  500C               	movf	??___awtoft& (0+255),w,c
  2931  003AD2                     i2l4693:
  2932  003AD2  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2933  003AD6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2934  003ADA  6A03               	clrf	___ftpack@arg+2,c
  2935  003ADC  6E0C               	movwf	??___awtoft& (0+255),c
  2936  003ADE  0E8E               	movlw	142
  2937  003AE0  6E04               	movwf	___ftpack@exp,c
  2938  003AE2  500C               	movf	??___awtoft& (0+255),w,c
  2939  003AE4  C00D  F005         	movff	___awtoft@sign,___ftpack@sign
  2940  003AE8  EC21  F01A         	call	___ftpack	;wreg free
  2941  003AEC  C001  F009         	movff	?___ftpack,?___awtoft
  2942  003AF0  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2943  003AF4  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2944  003AF8  0012               	return	
  2945  003AFA                     __end_of___awtoft:
  2946                           	opt stack 0
  2947                           pclatu	equ	0xFFB
  2948                           pclath	equ	0xFFA
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           intcon	equ	0xFF2
  2956                           indf0	equ	0xFEF
  2957                           fsr0h	equ	0xFEA
  2958                           fsr0l	equ	0xFE9
  2959                           wreg	equ	0xFE8
  2960                           fsr1h	equ	0xFE2
  2961                           fsr1l	equ	0xFE1
  2962                           fsr2h	equ	0xFDA
  2963                           fsr2l	equ	0xFD9
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function _readLight *****************
  2967 ;; Defined at:
  2968 ;;		line 111 in file "functions.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;		None
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  j               4   33[COMRAM] long 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  2   27[COMRAM] int 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2983 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2984 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2985 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2986 ;;Total ram usage:       10 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    1
  2989 ;; This function calls:
  2990 ;;		___aldiv
  2991 ;;		___lmul
  2992 ;;		_read
  2993 ;; This function is called by:
  2994 ;;		_showTempLight
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text15
  2999  003734                     __ptext15:
  3000                           	opt stack 0
  3001  003734                     _readLight:
  3002                           	opt stack 20
  3003                           
  3004                           ;functions.c: 113: long j = read(1);
  3005                           
  3006                           ;incstack = 0
  3007  003734  0E00               	movlw	0
  3008  003736  6E02               	movwf	read@channel+1,c
  3009  003738  0E01               	movlw	1
  3010  00373A  6E01               	movwf	read@channel,c
  3011  00373C  EC0D  F019         	call	_read	;wreg free
  3012  003740  C001  F022         	movff	?_read,readLight@j
  3013  003744  C002  F023         	movff	?_read+1,readLight@j+1
  3014  003748  0E00               	movlw	0
  3015  00374A  BE23               	btfsc	readLight@j+1,7,c
  3016  00374C  0EFF               	movlw	-1
  3017  00374E  6E24               	movwf	readLight@j+2,c
  3018  003750  6E25               	movwf	readLight@j+3,c
  3019                           
  3020                           ;functions.c: 114: return ((j*100)/4096);
  3021  003752  0E64               	movlw	100
  3022  003754  6E05               	movwf	___lmul@multiplicand,c
  3023  003756  0E00               	movlw	0
  3024  003758  6E06               	movwf	___lmul@multiplicand+1,c
  3025  00375A  0E00               	movlw	0
  3026  00375C  6E07               	movwf	___lmul@multiplicand+2,c
  3027  00375E  0E00               	movlw	0
  3028  003760  6E08               	movwf	___lmul@multiplicand+3,c
  3029  003762  C022  F001         	movff	readLight@j,___lmul@multiplier
  3030  003766  C023  F002         	movff	readLight@j+1,___lmul@multiplier+1
  3031  00376A  C024  F003         	movff	readLight@j+2,___lmul@multiplier+2
  3032  00376E  C025  F004         	movff	readLight@j+3,___lmul@multiplier+3
  3033  003772  ECFD  F01C         	call	___lmul	;wreg free
  3034  003776  C001  F00D         	movff	?___lmul,___aldiv@dividend
  3035  00377A  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
  3036  00377E  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
  3037  003782  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
  3038  003786  0E00               	movlw	0
  3039  003788  6E11               	movwf	___aldiv@divisor,c
  3040  00378A  0E10               	movlw	16
  3041  00378C  6E12               	movwf	___aldiv@divisor+1,c
  3042  00378E  0E00               	movlw	0
  3043  003790  6E13               	movwf	___aldiv@divisor+2,c
  3044  003792  0E00               	movlw	0
  3045  003794  6E14               	movwf	___aldiv@divisor+3,c
  3046  003796  EC9F  F016         	call	___aldiv	;wreg free
  3047  00379A  C00D  F01E         	movff	?___aldiv,??_readLight
  3048  00379E  C00E  F01F         	movff	?___aldiv+1,??_readLight+1
  3049  0037A2  C00F  F020         	movff	?___aldiv+2,??_readLight+2
  3050  0037A6  C010  F021         	movff	?___aldiv+3,??_readLight+3
  3051  0037AA  C01E  F01C         	movff	??_readLight,?_readLight
  3052  0037AE  C01F  F01D         	movff	??_readLight+1,?_readLight+1
  3053  0037B2  0012               	return	
  3054  0037B4                     __end_of_readLight:
  3055                           	opt stack 0
  3056                           pclatu	equ	0xFFB
  3057                           pclath	equ	0xFFA
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodh	equ	0xFF4
  3063                           prodl	equ	0xFF3
  3064                           intcon	equ	0xFF2
  3065                           indf0	equ	0xFEF
  3066                           fsr0h	equ	0xFEA
  3067                           fsr0l	equ	0xFE9
  3068                           wreg	equ	0xFE8
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function ___lmul *****************
  3076 ;; Defined at:
  3077 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lmul.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  multiplier      4    0[COMRAM] unsigned long 
  3080 ;;  multiplicand    4    4[COMRAM] unsigned long 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  product         4    8[COMRAM] unsigned long 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  4    0[COMRAM] unsigned long 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3092 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3093 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3095 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3096 ;;Total ram usage:       12 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_readLight
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text16
  3106  0039FA                     __ptext16:
  3107                           	opt stack 0
  3108  0039FA                     ___lmul:
  3109                           	opt stack 20
  3110                           
  3111                           ;incstack = 0
  3112  0039FA  0E00               	movlw	0
  3113  0039FC  6E09               	movwf	___lmul@product,c
  3114  0039FE  0E00               	movlw	0
  3115  003A00  6E0A               	movwf	___lmul@product+1,c
  3116  003A02  0E00               	movlw	0
  3117  003A04  6E0B               	movwf	___lmul@product+2,c
  3118  003A06  0E00               	movlw	0
  3119  003A08  6E0C               	movwf	___lmul@product+3,c
  3120  003A0A                     i2l4677:
  3121  003A0A  A001               	btfss	___lmul@multiplier,0,c
  3122  003A0C  D008               	goto	i2l4681
  3123  003A0E  5005               	movf	___lmul@multiplicand,w,c
  3124  003A10  2609               	addwf	___lmul@product,f,c
  3125  003A12  5006               	movf	___lmul@multiplicand+1,w,c
  3126  003A14  220A               	addwfc	___lmul@product+1,f,c
  3127  003A16  5007               	movf	___lmul@multiplicand+2,w,c
  3128  003A18  220B               	addwfc	___lmul@product+2,f,c
  3129  003A1A  5008               	movf	___lmul@multiplicand+3,w,c
  3130  003A1C  220C               	addwfc	___lmul@product+3,f,c
  3131  003A1E                     i2l4681:
  3132  003A1E  90D8               	bcf	status,0,c
  3133  003A20  3605               	rlcf	___lmul@multiplicand,f,c
  3134  003A22  3606               	rlcf	___lmul@multiplicand+1,f,c
  3135  003A24  3607               	rlcf	___lmul@multiplicand+2,f,c
  3136  003A26  3608               	rlcf	___lmul@multiplicand+3,f,c
  3137  003A28  90D8               	bcf	status,0,c
  3138  003A2A  3204               	rrcf	___lmul@multiplier+3,f,c
  3139  003A2C  3203               	rrcf	___lmul@multiplier+2,f,c
  3140  003A2E  3202               	rrcf	___lmul@multiplier+1,f,c
  3141  003A30  3201               	rrcf	___lmul@multiplier,f,c
  3142  003A32  5004               	movf	___lmul@multiplier+3,w,c
  3143  003A34  1001               	iorwf	___lmul@multiplier,w,c
  3144  003A36  1002               	iorwf	___lmul@multiplier+1,w,c
  3145  003A38  1003               	iorwf	___lmul@multiplier+2,w,c
  3146  003A3A  A4D8               	btfss	status,2,c
  3147  003A3C  D7E6               	goto	i2l4677
  3148  003A3E  C009  F001         	movff	___lmul@product,?___lmul
  3149  003A42  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  3150  003A46  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  3151  003A4A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  3152  003A4E  0012               	return	
  3153  003A50                     __end_of___lmul:
  3154                           	opt stack 0
  3155                           pclatu	equ	0xFFB
  3156                           pclath	equ	0xFFA
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           intcon	equ	0xFF2
  3164                           indf0	equ	0xFEF
  3165                           fsr0h	equ	0xFEA
  3166                           fsr0l	equ	0xFE9
  3167                           wreg	equ	0xFE8
  3168                           fsr1h	equ	0xFE2
  3169                           fsr1l	equ	0xFE1
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function ___aldiv *****************
  3175 ;; Defined at:
  3176 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\aldiv.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  dividend        4   12[COMRAM] long 
  3179 ;;  divisor         4   16[COMRAM] long 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  quotient        4   23[COMRAM] long 
  3182 ;;  sign            1   22[COMRAM] unsigned char 
  3183 ;;  counter         1   21[COMRAM] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  4   12[COMRAM] long 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3193 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3194 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3196 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3197 ;;Total ram usage:       15 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_readLight
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text17
  3207  002D3E                     __ptext17:
  3208                           	opt stack 0
  3209  002D3E                     ___aldiv:
  3210                           	opt stack 20
  3211                           
  3212                           ;incstack = 0
  3213  002D3E  6E15               	movwf	??___aldiv& (0+255),c
  3214  002D40  0E00               	movlw	0
  3215  002D42  6E17               	movwf	___aldiv@sign,c
  3216  002D44  5015               	movf	??___aldiv& (0+255),w,c
  3217  002D46  5014               	movf	___aldiv@divisor+3,w,c
  3218  002D48  0A80               	xorlw	128
  3219  002D4A  0F80               	addlw	128
  3220  002D4C  E108               	bnz	i2u301_45
  3221  002D4E  0E00               	movlw	0
  3222  002D50  5C13               	subwf	___aldiv@divisor+2,w,c
  3223  002D52  E105               	bnz	i2u301_45
  3224  002D54  0E00               	movlw	0
  3225  002D56  5C12               	subwf	___aldiv@divisor+1,w,c
  3226  002D58  E102               	bnz	i2u301_45
  3227  002D5A  0E00               	movlw	0
  3228  002D5C  5C11               	subwf	___aldiv@divisor,w,c
  3229  002D5E                     i2u301_45:
  3230  002D5E  B0D8               	btfsc	status,0,c
  3231  002D60  D00C               	goto	i2l4627
  3232  002D62  1E14               	comf	___aldiv@divisor+3,f,c
  3233  002D64  1E13               	comf	___aldiv@divisor+2,f,c
  3234  002D66  1E12               	comf	___aldiv@divisor+1,f,c
  3235  002D68  6C11               	negf	___aldiv@divisor,c
  3236  002D6A  0E00               	movlw	0
  3237  002D6C  2212               	addwfc	___aldiv@divisor+1,f,c
  3238  002D6E  2213               	addwfc	___aldiv@divisor+2,f,c
  3239  002D70  2214               	addwfc	___aldiv@divisor+3,f,c
  3240  002D72  6E15               	movwf	??___aldiv& (0+255),c
  3241  002D74  0E01               	movlw	1
  3242  002D76  6E17               	movwf	___aldiv@sign,c
  3243  002D78  5015               	movf	??___aldiv& (0+255),w,c
  3244  002D7A                     i2l4627:
  3245  002D7A  5010               	movf	___aldiv@dividend+3,w,c
  3246  002D7C  0A80               	xorlw	128
  3247  002D7E  0F80               	addlw	128
  3248  002D80  E108               	bnz	i2u302_45
  3249  002D82  0E00               	movlw	0
  3250  002D84  5C0F               	subwf	___aldiv@dividend+2,w,c
  3251  002D86  E105               	bnz	i2u302_45
  3252  002D88  0E00               	movlw	0
  3253  002D8A  5C0E               	subwf	___aldiv@dividend+1,w,c
  3254  002D8C  E102               	bnz	i2u302_45
  3255  002D8E  0E00               	movlw	0
  3256  002D90  5C0D               	subwf	___aldiv@dividend,w,c
  3257  002D92                     i2u302_45:
  3258  002D92  B0D8               	btfsc	status,0,c
  3259  002D94  D00A               	goto	i2l4633
  3260  002D96  1E10               	comf	___aldiv@dividend+3,f,c
  3261  002D98  1E0F               	comf	___aldiv@dividend+2,f,c
  3262  002D9A  1E0E               	comf	___aldiv@dividend+1,f,c
  3263  002D9C  6C0D               	negf	___aldiv@dividend,c
  3264  002D9E  0E00               	movlw	0
  3265  002DA0  220E               	addwfc	___aldiv@dividend+1,f,c
  3266  002DA2  220F               	addwfc	___aldiv@dividend+2,f,c
  3267  002DA4  2210               	addwfc	___aldiv@dividend+3,f,c
  3268  002DA6  0E01               	movlw	1
  3269  002DA8  1A17               	xorwf	___aldiv@sign,f,c
  3270  002DAA                     i2l4633:
  3271  002DAA  0E00               	movlw	0
  3272  002DAC  6E18               	movwf	___aldiv@quotient,c
  3273  002DAE  0E00               	movlw	0
  3274  002DB0  6E19               	movwf	___aldiv@quotient+1,c
  3275  002DB2  0E00               	movlw	0
  3276  002DB4  6E1A               	movwf	___aldiv@quotient+2,c
  3277  002DB6  0E00               	movlw	0
  3278  002DB8  6E1B               	movwf	___aldiv@quotient+3,c
  3279  002DBA  5014               	movf	___aldiv@divisor+3,w,c
  3280  002DBC  1011               	iorwf	___aldiv@divisor,w,c
  3281  002DBE  1012               	iorwf	___aldiv@divisor+1,w,c
  3282  002DC0  1013               	iorwf	___aldiv@divisor+2,w,c
  3283  002DC2  B4D8               	btfsc	status,2,c
  3284  002DC4  D02C               	goto	i2l4655
  3285  002DC6  6E15               	movwf	??___aldiv& (0+255),c
  3286  002DC8  0E01               	movlw	1
  3287  002DCA  6E16               	movwf	___aldiv@counter,c
  3288  002DCC  5015               	movf	??___aldiv& (0+255),w,c
  3289  002DCE  D006               	goto	i2l4641
  3290  002DD0                     i2l4639:
  3291  002DD0  90D8               	bcf	status,0,c
  3292  002DD2  3611               	rlcf	___aldiv@divisor,f,c
  3293  002DD4  3612               	rlcf	___aldiv@divisor+1,f,c
  3294  002DD6  3613               	rlcf	___aldiv@divisor+2,f,c
  3295  002DD8  3614               	rlcf	___aldiv@divisor+3,f,c
  3296  002DDA  2A16               	incf	___aldiv@counter,f,c
  3297  002DDC                     i2l4641:
  3298  002DDC  AE14               	btfss	___aldiv@divisor+3,7,c
  3299  002DDE  D7F8               	goto	i2l4639
  3300  002DE0                     i2l4643:
  3301  002DE0  90D8               	bcf	status,0,c
  3302  002DE2  3618               	rlcf	___aldiv@quotient,f,c
  3303  002DE4  3619               	rlcf	___aldiv@quotient+1,f,c
  3304  002DE6  361A               	rlcf	___aldiv@quotient+2,f,c
  3305  002DE8  361B               	rlcf	___aldiv@quotient+3,f,c
  3306  002DEA  5011               	movf	___aldiv@divisor,w,c
  3307  002DEC  5C0D               	subwf	___aldiv@dividend,w,c
  3308  002DEE  5012               	movf	___aldiv@divisor+1,w,c
  3309  002DF0  580E               	subwfb	___aldiv@dividend+1,w,c
  3310  002DF2  5013               	movf	___aldiv@divisor+2,w,c
  3311  002DF4  580F               	subwfb	___aldiv@dividend+2,w,c
  3312  002DF6  5014               	movf	___aldiv@divisor+3,w,c
  3313  002DF8  5810               	subwfb	___aldiv@dividend+3,w,c
  3314  002DFA  A0D8               	btfss	status,0,c
  3315  002DFC  D009               	goto	i2l4651
  3316  002DFE  5011               	movf	___aldiv@divisor,w,c
  3317  002E00  5E0D               	subwf	___aldiv@dividend,f,c
  3318  002E02  5012               	movf	___aldiv@divisor+1,w,c
  3319  002E04  5A0E               	subwfb	___aldiv@dividend+1,f,c
  3320  002E06  5013               	movf	___aldiv@divisor+2,w,c
  3321  002E08  5A0F               	subwfb	___aldiv@dividend+2,f,c
  3322  002E0A  5014               	movf	___aldiv@divisor+3,w,c
  3323  002E0C  5A10               	subwfb	___aldiv@dividend+3,f,c
  3324  002E0E  8018               	bsf	___aldiv@quotient,0,c
  3325  002E10                     i2l4651:
  3326  002E10  90D8               	bcf	status,0,c
  3327  002E12  3214               	rrcf	___aldiv@divisor+3,f,c
  3328  002E14  3213               	rrcf	___aldiv@divisor+2,f,c
  3329  002E16  3212               	rrcf	___aldiv@divisor+1,f,c
  3330  002E18  3211               	rrcf	___aldiv@divisor,f,c
  3331  002E1A  2E16               	decfsz	___aldiv@counter,f,c
  3332  002E1C  D7E1               	goto	i2l4643
  3333  002E1E                     i2l4655:
  3334  002E1E  5017               	movf	___aldiv@sign,w,c
  3335  002E20  B4D8               	btfsc	status,2,c
  3336  002E22  D008               	goto	i2l4659
  3337  002E24  1E1B               	comf	___aldiv@quotient+3,f,c
  3338  002E26  1E1A               	comf	___aldiv@quotient+2,f,c
  3339  002E28  1E19               	comf	___aldiv@quotient+1,f,c
  3340  002E2A  6C18               	negf	___aldiv@quotient,c
  3341  002E2C  0E00               	movlw	0
  3342  002E2E  2219               	addwfc	___aldiv@quotient+1,f,c
  3343  002E30  221A               	addwfc	___aldiv@quotient+2,f,c
  3344  002E32  221B               	addwfc	___aldiv@quotient+3,f,c
  3345  002E34                     i2l4659:
  3346  002E34  C018  F00D         	movff	___aldiv@quotient,?___aldiv
  3347  002E38  C019  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
  3348  002E3C  C01A  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
  3349  002E40  C01B  F010         	movff	___aldiv@quotient+3,?___aldiv+3
  3350  002E44  0012               	return	
  3351  002E46                     __end_of___aldiv:
  3352                           	opt stack 0
  3353                           pclatu	equ	0xFFB
  3354                           pclath	equ	0xFFA
  3355                           tblptru	equ	0xFF8
  3356                           tblptrh	equ	0xFF7
  3357                           tblptrl	equ	0xFF6
  3358                           tablat	equ	0xFF5
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           intcon	equ	0xFF2
  3362                           indf0	equ	0xFEF
  3363                           fsr0h	equ	0xFEA
  3364                           fsr0l	equ	0xFE9
  3365                           wreg	equ	0xFE8
  3366                           fsr1h	equ	0xFE2
  3367                           fsr1l	equ	0xFE1
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _showAccelerometerVal *****************
  3373 ;; Defined at:
  3374 ;;		line 86 in file "main.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  buffer         10   50[BANK0 ] unsigned char [10]
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3389 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3390 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3391 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3392 ;;Total ram usage:       11 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    5
  3395 ;; This function calls:
  3396 ;;		_single_axis_measure
  3397 ;;		_sprintf
  3398 ;;		i2_lcdClear
  3399 ;;		i2_lcdSetPos
  3400 ;;		i2_lcdWriteChar
  3401 ;;		i2_lcdWriteStrC
  3402 ;; This function is called by:
  3403 ;;		_ISR
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text18
  3408  002880                     __ptext18:
  3409                           	opt stack 0
  3410  002880                     _showAccelerometerVal:
  3411                           	opt stack 17
  3412                           
  3413                           ;main.c: 88: char buffer [10];
  3414                           ;main.c: 89: lcdClear();
  3415                           
  3416                           ;incstack = 0
  3417  002880  EC49  F01F         	call	i2_lcdClear	;wreg free
  3418                           
  3419                           ;main.c: 91: lcdWriteStrC("Aclmtr values:");
  3420  002884  0E0F               	movlw	high STR_3
  3421  002886  6E05               	movwf	i2lcdWriteStrC@s+1,c
  3422  002888  0E77               	movlw	low STR_3
  3423  00288A  6E04               	movwf	i2lcdWriteStrC@s,c
  3424  00288C  EC28  F01D         	call	i2_lcdWriteStrC	;wreg free
  3425                           
  3426                           ;main.c: 92: lcdSetPos(0,1);
  3427  002890  6E5C               	movwf	??_showAccelerometerVal& (0+255),c
  3428  002892  0E01               	movlw	1
  3429  002894  6E07               	movwf	i2lcdSetPos@y,c
  3430  002896  505C               	movf	??_showAccelerometerVal& (0+255),w,c
  3431  002898  0E00               	movlw	0
  3432  00289A  ECA0  F01D         	call	i2_lcdSetPos
  3433                           
  3434                           ;main.c: 93: sprintf(buffer,"%1.2f",single_axis_measure(2, 10));
  3435  00289E  0100               	movlb	0	; () banked
  3436  0028A0  0E00               	movlw	high showAccelerometerVal@buffer
  3437  0028A2  0100               	movlb	0	; () banked
  3438  0028A4  0100               	movlb	0	; () banked
  3439  0028A6  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3440  0028A8  0100               	movlb	0	; () banked
  3441  0028AA  0E92               	movlw	low showAccelerometerVal@buffer
  3442  0028AC  0100               	movlb	0	; () banked
  3443  0028AE  0100               	movlb	0	; () banked
  3444  0028B0  6F60               	movwf	sprintf@sp& (0+255),b
  3445  0028B2  0E0F               	movlw	high STR_4
  3446  0028B4  0100               	movlb	0	; () banked
  3447  0028B6  0100               	movlb	0	; () banked
  3448  0028B8  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3449  0028BA  0EB3               	movlw	low STR_4
  3450  0028BC  0100               	movlb	0	; () banked
  3451  0028BE  0100               	movlb	0	; () banked
  3452  0028C0  6F62               	movwf	sprintf@f& (0+255),b
  3453  0028C2  0E00               	movlw	0
  3454  0028C4  6E4D               	movwf	single_axis_measure@axis+1,c
  3455  0028C6  0E02               	movlw	2
  3456  0028C8  6E4C               	movwf	single_axis_measure@axis,c
  3457  0028CA  0E00               	movlw	0
  3458  0028CC  6E4E               	movwf	single_axis_measure@iteration,c
  3459  0028CE  0E20               	movlw	32
  3460  0028D0  6E4F               	movwf	single_axis_measure@iteration+1,c
  3461  0028D2  0E41               	movlw	65
  3462  0028D4  6E50               	movwf	single_axis_measure@iteration+2,c
  3463  0028D6  EC23  F017         	call	_single_axis_measure	;wreg free
  3464  0028DA  C04C  F064         	movff	?_single_axis_measure,?_sprintf+4
  3465  0028DE  C04D  F065         	movff	?_single_axis_measure+1,?_sprintf+5
  3466  0028E2  C04E  F066         	movff	?_single_axis_measure+2,?_sprintf+6
  3467  0028E6  ECDD  F007         	call	_sprintf	;wreg free
  3468                           
  3469                           ;main.c: 94: lcdWriteStrC(buffer);
  3470  0028EA  0100               	movlb	0	; () banked
  3471  0028EC  0E00               	movlw	high showAccelerometerVal@buffer
  3472  0028EE  6E05               	movwf	i2lcdWriteStrC@s+1,c
  3473  0028F0  0100               	movlb	0	; () banked
  3474  0028F2  0E92               	movlw	low showAccelerometerVal@buffer
  3475  0028F4  6E04               	movwf	i2lcdWriteStrC@s,c
  3476  0028F6  EC28  F01D         	call	i2_lcdWriteStrC	;wreg free
  3477                           
  3478                           ;main.c: 95: lcdWriteChar(' ');
  3479  0028FA  0E20               	movlw	32
  3480  0028FC  EC3B  F01F         	call	i2_lcdWriteChar
  3481                           
  3482                           ;main.c: 96: sprintf(buffer,"%1.2f",single_axis_measure(3, 10));
  3483  002900  0100               	movlb	0	; () banked
  3484  002902  0E00               	movlw	high showAccelerometerVal@buffer
  3485  002904  0100               	movlb	0	; () banked
  3486  002906  0100               	movlb	0	; () banked
  3487  002908  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3488  00290A  0100               	movlb	0	; () banked
  3489  00290C  0E92               	movlw	low showAccelerometerVal@buffer
  3490  00290E  0100               	movlb	0	; () banked
  3491  002910  0100               	movlb	0	; () banked
  3492  002912  6F60               	movwf	sprintf@sp& (0+255),b
  3493  002914  0E0F               	movlw	high STR_4
  3494  002916  0100               	movlb	0	; () banked
  3495  002918  0100               	movlb	0	; () banked
  3496  00291A  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3497  00291C  0EB3               	movlw	low STR_4
  3498  00291E  0100               	movlb	0	; () banked
  3499  002920  0100               	movlb	0	; () banked
  3500  002922  6F62               	movwf	sprintf@f& (0+255),b
  3501  002924  0E00               	movlw	0
  3502  002926  6E4D               	movwf	single_axis_measure@axis+1,c
  3503  002928  0E03               	movlw	3
  3504  00292A  6E4C               	movwf	single_axis_measure@axis,c
  3505  00292C  0E00               	movlw	0
  3506  00292E  6E4E               	movwf	single_axis_measure@iteration,c
  3507  002930  0E20               	movlw	32
  3508  002932  6E4F               	movwf	single_axis_measure@iteration+1,c
  3509  002934  0E41               	movlw	65
  3510  002936  6E50               	movwf	single_axis_measure@iteration+2,c
  3511  002938  EC23  F017         	call	_single_axis_measure	;wreg free
  3512  00293C  C04C  F064         	movff	?_single_axis_measure,?_sprintf+4
  3513  002940  C04D  F065         	movff	?_single_axis_measure+1,?_sprintf+5
  3514  002944  C04E  F066         	movff	?_single_axis_measure+2,?_sprintf+6
  3515  002948  ECDD  F007         	call	_sprintf	;wreg free
  3516                           
  3517                           ;main.c: 97: lcdWriteStrC(buffer);
  3518  00294C  0100               	movlb	0	; () banked
  3519  00294E  0E00               	movlw	high showAccelerometerVal@buffer
  3520  002950  6E05               	movwf	i2lcdWriteStrC@s+1,c
  3521  002952  0100               	movlb	0	; () banked
  3522  002954  0E92               	movlw	low showAccelerometerVal@buffer
  3523  002956  6E04               	movwf	i2lcdWriteStrC@s,c
  3524  002958  EC28  F01D         	call	i2_lcdWriteStrC	;wreg free
  3525                           
  3526                           ;main.c: 98: lcdWriteChar(' ');
  3527  00295C  0E20               	movlw	32
  3528  00295E  EC3B  F01F         	call	i2_lcdWriteChar
  3529                           
  3530                           ;main.c: 99: sprintf(buffer,"%1.2f",single_axis_measure(4, 10));
  3531  002962  0100               	movlb	0	; () banked
  3532  002964  0E00               	movlw	high showAccelerometerVal@buffer
  3533  002966  0100               	movlb	0	; () banked
  3534  002968  0100               	movlb	0	; () banked
  3535  00296A  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3536  00296C  0100               	movlb	0	; () banked
  3537  00296E  0E92               	movlw	low showAccelerometerVal@buffer
  3538  002970  0100               	movlb	0	; () banked
  3539  002972  0100               	movlb	0	; () banked
  3540  002974  6F60               	movwf	sprintf@sp& (0+255),b
  3541  002976  0E0F               	movlw	high STR_4
  3542  002978  0100               	movlb	0	; () banked
  3543  00297A  0100               	movlb	0	; () banked
  3544  00297C  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3545  00297E  0EB3               	movlw	low STR_4
  3546  002980  0100               	movlb	0	; () banked
  3547  002982  0100               	movlb	0	; () banked
  3548  002984  6F62               	movwf	sprintf@f& (0+255),b
  3549  002986  0E00               	movlw	0
  3550  002988  6E4D               	movwf	single_axis_measure@axis+1,c
  3551  00298A  0E04               	movlw	4
  3552  00298C  6E4C               	movwf	single_axis_measure@axis,c
  3553  00298E  0E00               	movlw	0
  3554  002990  6E4E               	movwf	single_axis_measure@iteration,c
  3555  002992  0E20               	movlw	32
  3556  002994  6E4F               	movwf	single_axis_measure@iteration+1,c
  3557  002996  0E41               	movlw	65
  3558  002998  6E50               	movwf	single_axis_measure@iteration+2,c
  3559  00299A  EC23  F017         	call	_single_axis_measure	;wreg free
  3560  00299E  C04C  F064         	movff	?_single_axis_measure,?_sprintf+4
  3561  0029A2  C04D  F065         	movff	?_single_axis_measure+1,?_sprintf+5
  3562  0029A6  C04E  F066         	movff	?_single_axis_measure+2,?_sprintf+6
  3563  0029AA  ECDD  F007         	call	_sprintf	;wreg free
  3564                           
  3565                           ;main.c: 100: lcdWriteStrC(buffer);
  3566  0029AE  0100               	movlb	0	; () banked
  3567  0029B0  0E00               	movlw	high showAccelerometerVal@buffer
  3568  0029B2  6E05               	movwf	i2lcdWriteStrC@s+1,c
  3569  0029B4  0100               	movlb	0	; () banked
  3570  0029B6  0E92               	movlw	low showAccelerometerVal@buffer
  3571  0029B8  6E04               	movwf	i2lcdWriteStrC@s,c
  3572  0029BA  EC28  F01D         	call	i2_lcdWriteStrC	;wreg free
  3573  0029BE  0012               	return	
  3574  0029C0                     __end_of_showAccelerometerVal:
  3575                           	opt stack 0
  3576                           pclatu	equ	0xFFB
  3577                           pclath	equ	0xFFA
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           prodh	equ	0xFF4
  3583                           prodl	equ	0xFF3
  3584                           intcon	equ	0xFF2
  3585                           indf0	equ	0xFEF
  3586                           fsr0h	equ	0xFEA
  3587                           fsr0l	equ	0xFE9
  3588                           wreg	equ	0xFE8
  3589                           fsr1h	equ	0xFE2
  3590                           fsr1l	equ	0xFE1
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function i2_lcdWriteStrC *****************
  3596 ;; Defined at:
  3597 ;;		line 130 in file "lcd.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  s               2    3[COMRAM] PTR const unsigned char 
  3600 ;;		 -> STR_8(14), STR_7(9), showAccelerometerVal@buffer(10), STR_3(15), 
  3601 ;;		 -> showTempLight@buffer(10), 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;		None
  3604 ;; Return value:  Size  Location     Type
  3605 ;;		None               void
  3606 ;; Registers used:
  3607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3617 ;;Total ram usage:        2 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    3
  3620 ;; This function calls:
  3621 ;;		i2_lcdWriteChar
  3622 ;; This function is called by:
  3623 ;;		_showTempLight
  3624 ;;		_showAccelerometerVal
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           	psect	text19
  3629  003A50                     __ptext19:
  3630                           	opt stack 0
  3631  003A50                     i2_lcdWriteStrC:
  3632                           	opt stack 18
  3633                           
  3634                           ;lcd.c: 132: while(*s) lcdWriteChar(*s++);
  3635                           
  3636                           ;incstack = 0
  3637  003A50  D015               	goto	i2l5221
  3638  003A52                     i2l5217:
  3639  003A52  C004  FFF6         	movff	i2lcdWriteStrC@s,tblptrl
  3640  003A56  C005  FFF7         	movff	i2lcdWriteStrC@s+1,tblptrh
  3641  003A5A  0E00               	movlw	low (__smallconst shr (0+16))
  3642  003A5C  6EF8               	movwf	tblptru,c
  3643  003A5E  0E0E               	movlw	(high __ramtop+-1)
  3644  003A60  64F7               	cpfsgt	tblptrh,c
  3645  003A62  D003               	bra	i2u388_47
  3646  003A64  0008               	tblrd		*
  3647  003A66  50F5               	movf	tablat,w,c
  3648  003A68  D005               	bra	i2u388_40
  3649  003A6A                     i2u388_47:
  3650  003A6A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3651  003A6E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3652  003A72  50EF               	movf	indf0,w,c
  3653  003A74                     i2u388_40:
  3654  003A74  EC3B  F01F         	call	i2_lcdWriteChar
  3655  003A78  4A04               	infsnz	i2lcdWriteStrC@s,f,c
  3656  003A7A  2A05               	incf	i2lcdWriteStrC@s+1,f,c
  3657  003A7C                     i2l5221:
  3658  003A7C  C004  FFF6         	movff	i2lcdWriteStrC@s,tblptrl
  3659  003A80  C005  FFF7         	movff	i2lcdWriteStrC@s+1,tblptrh
  3660  003A84  0E00               	movlw	low (__smallconst shr (0+16))
  3661  003A86  6EF8               	movwf	tblptru,c
  3662  003A88  0E0E               	movlw	(high __ramtop+-1)
  3663  003A8A  64F7               	cpfsgt	tblptrh,c
  3664  003A8C  D003               	bra	i2u389_47
  3665  003A8E  0008               	tblrd		*
  3666  003A90  50F5               	movf	tablat,w,c
  3667  003A92  D005               	bra	i2u389_40
  3668  003A94                     i2u389_47:
  3669  003A94  CFF6 FFE9          	movff	tblptrl,fsr0l
  3670  003A98  CFF7 FFEA          	movff	tblptrh,fsr0h
  3671  003A9C  50EF               	movf	indf0,w,c
  3672  003A9E                     i2u389_40:
  3673  003A9E  0900               	iorlw	0
  3674  003AA0  B4D8               	btfsc	status,2,c
  3675  003AA2  0012               	return	
  3676  003AA4  D7D6               	goto	i2l5217
  3677  003AA6                     __end_ofi2_lcdWriteStrC:
  3678                           	opt stack 0
  3679                           pclatu	equ	0xFFB
  3680                           pclath	equ	0xFFA
  3681                           tblptru	equ	0xFF8
  3682                           tblptrh	equ	0xFF7
  3683                           tblptrl	equ	0xFF6
  3684                           tablat	equ	0xFF5
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           intcon	equ	0xFF2
  3688                           indf0	equ	0xFEF
  3689                           fsr0h	equ	0xFEA
  3690                           fsr0l	equ	0xFE9
  3691                           wreg	equ	0xFE8
  3692                           fsr1h	equ	0xFE2
  3693                           fsr1l	equ	0xFE1
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function i2_lcdWriteChar *****************
  3699 ;; Defined at:
  3700 ;;		line 43 in file "lcd.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  n               1    wreg     unsigned char 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  n               1    2[COMRAM] unsigned char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;		None               void
  3707 ;; Registers used:
  3708 ;;		wreg, status,2, status,0, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3715 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3718 ;;Total ram usage:        1 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    2
  3721 ;; This function calls:
  3722 ;;		i2_writeByte
  3723 ;; This function is called by:
  3724 ;;		_showAccelerometerVal
  3725 ;;		i2_lcdWriteStrC
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text20
  3730  003E76                     __ptext20:
  3731                           	opt stack 0
  3732  003E76                     i2_lcdWriteChar:
  3733                           	opt stack 18
  3734                           
  3735                           ;incstack = 0
  3736                           ;i2lcdWriteChar@n stored from wreg
  3737  003E76  CFE8 F003          	movff	wreg,i2lcdWriteChar@n
  3738                           
  3739                           ;lcd.c: 46: LATEbits.LATE0 = 1;
  3740  003E7A  808D               	bsf	3981,0,c	;volatile
  3741                           
  3742                           ;lcd.c: 48: writeByte(n);
  3743  003E7C  5003               	movf	i2lcdWriteChar@n,w,c
  3744  003E7E  EC30  F01F         	call	i2_writeByte
  3745                           
  3746                           ;lcd.c: 51: _delay((unsigned long)((43)*(12000000/4000000.0)));
  3747  003E82  0E2B               	movlw	43
  3748  003E84                     i2u416_47:
  3749  003E84  2EE8               	decfsz	wreg,f,c
  3750  003E86  D7FE               	goto	i2u416_47
  3751  003E88  0012               	return	
  3752  003E8A                     __end_ofi2_lcdWriteChar:
  3753                           	opt stack 0
  3754                           pclatu	equ	0xFFB
  3755                           pclath	equ	0xFFA
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           indf0	equ	0xFEF
  3764                           fsr0h	equ	0xFEA
  3765                           fsr0l	equ	0xFE9
  3766                           wreg	equ	0xFE8
  3767                           fsr1h	equ	0xFE2
  3768                           fsr1l	equ	0xFE1
  3769                           fsr2h	equ	0xFDA
  3770                           fsr2l	equ	0xFD9
  3771                           status	equ	0xFD8
  3772                           
  3773 ;; *************** function i2_lcdSetPos *****************
  3774 ;; Defined at:
  3775 ;;		line 115 in file "lcd.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  x               1    wreg     unsigned char 
  3778 ;;  y               1    6[COMRAM] unsigned char 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  x               1    8[COMRAM] unsigned char 
  3781 ;;  lcdSetPos       1    7[COMRAM] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;		None               void
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3791 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3792 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3794 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3795 ;;Total ram usage:        3 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    3
  3798 ;; This function calls:
  3799 ;;		i2_lcdWriteCmd
  3800 ;; This function is called by:
  3801 ;;		_showTempLight
  3802 ;;		_showAccelerometerVal
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text21
  3807  003B40                     __ptext21:
  3808                           	opt stack 0
  3809  003B40                     i2_lcdSetPos:
  3810                           	opt stack 18
  3811                           
  3812                           ;incstack = 0
  3813                           ;i2lcdSetPos@x stored from wreg
  3814  003B40  CFE8 F009          	movff	wreg,i2lcdSetPos@x
  3815                           
  3816                           ;lcd.c: 117: unsigned char p;
  3817                           ;lcd.c: 119: switch(y)
  3818  003B44  D00D               	goto	i2l5209
  3819  003B46                     i2l5199:
  3820  003B46  C009  F008         	movff	i2lcdSetPos@x,i2lcdSetPos@p
  3821  003B4A  D017               	goto	i2l5211
  3822  003B4C                     i2l5201:
  3823  003B4C  5009               	movf	i2lcdSetPos@x,w,c
  3824  003B4E  0F40               	addlw	64
  3825  003B50  D005               	goto	L14
  3826  003B52                     i2l5203:
  3827  003B52  5009               	movf	i2lcdSetPos@x,w,c
  3828  003B54  0F14               	addlw	20
  3829  003B56  D002               	goto	L14
  3830  003B58                     i2l5205:
  3831  003B58  5009               	movf	i2lcdSetPos@x,w,c
  3832  003B5A  0F54               	addlw	84
  3833  003B5C                     L14:
  3834  003B5C  6E08               	movwf	i2lcdSetPos@p,c
  3835  003B5E  D00D               	goto	i2l5211
  3836  003B60                     i2l5209:
  3837  003B60  5007               	movf	i2lcdSetPos@y,w,c
  3838                           
  3839                           ; Switch size 1, requested type "space"
  3840                           ; Number of cases is 4, Range of values is 0 to 3
  3841                           ; switch strategies available:
  3842                           ; Name         Instructions Cycles
  3843                           ; simple_byte           13     7 (average)
  3844                           ;	Chosen strategy is simple_byte
  3845  003B62  0A00               	xorlw	0	; case 0
  3846  003B64  B4D8               	btfsc	status,2,c
  3847  003B66  D7EF               	goto	i2l5199
  3848  003B68  0A01               	xorlw	1	; case 1
  3849  003B6A  B4D8               	btfsc	status,2,c
  3850  003B6C  D7EF               	goto	i2l5201
  3851  003B6E  0A03               	xorlw	3	; case 2
  3852  003B70  B4D8               	btfsc	status,2,c
  3853  003B72  D7EF               	goto	i2l5203
  3854  003B74  0A01               	xorlw	1	; case 3
  3855  003B76  B4D8               	btfsc	status,2,c
  3856  003B78  D7EF               	goto	i2l5205
  3857  003B7A                     i2l5211:
  3858                           
  3859                           ;lcd.c: 126: p |= 0x80;
  3860  003B7A  8E08               	bsf	i2lcdSetPos@p,7,c
  3861                           
  3862                           ;lcd.c: 127: lcdWriteCmd(p);
  3863  003B7C  5008               	movf	i2lcdSetPos@p,w,c
  3864  003B7E  ECC2  F01D         	call	i2_lcdWriteCmd
  3865  003B82  0012               	return	
  3866  003B84                     __end_ofi2_lcdSetPos:
  3867                           	opt stack 0
  3868                           pclatu	equ	0xFFB
  3869                           pclath	equ	0xFFA
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           indf0	equ	0xFEF
  3878                           fsr0h	equ	0xFEA
  3879                           fsr0l	equ	0xFE9
  3880                           wreg	equ	0xFE8
  3881                           fsr1h	equ	0xFE2
  3882                           fsr1l	equ	0xFE1
  3883                           fsr2h	equ	0xFDA
  3884                           fsr2l	equ	0xFD9
  3885                           status	equ	0xFD8
  3886                           
  3887 ;; *************** function i2_lcdClear *****************
  3888 ;; Defined at:
  3889 ;;		line 110 in file "lcd.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;		None               void
  3896 ;; Registers used:
  3897 ;;		wreg, status,2, status,0, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3907 ;;Total ram usage:        0 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    3
  3910 ;; This function calls:
  3911 ;;		i2_lcdWriteCmd
  3912 ;; This function is called by:
  3913 ;;		_showTempLight
  3914 ;;		_showAccelerometerVal
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text22
  3919  003E92                     __ptext22:
  3920                           	opt stack 0
  3921  003E92                     i2_lcdClear:
  3922                           	opt stack 18
  3923                           
  3924                           ;lcd.c: 112: lcdWriteCmd(0x01);
  3925                           
  3926                           ;incstack = 0
  3927  003E92  0E01               	movlw	1
  3928  003E94  ECC2  F01D         	call	i2_lcdWriteCmd
  3929  003E98  0012               	return	
  3930  003E9A                     __end_ofi2_lcdClear:
  3931                           	opt stack 0
  3932                           pclatu	equ	0xFFB
  3933                           pclath	equ	0xFFA
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           indf0	equ	0xFEF
  3942                           fsr0h	equ	0xFEA
  3943                           fsr0l	equ	0xFE9
  3944                           wreg	equ	0xFE8
  3945                           fsr1h	equ	0xFE2
  3946                           fsr1l	equ	0xFE1
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function i2_lcdWriteCmd *****************
  3952 ;; Defined at:
  3953 ;;		line 30 in file "lcd.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  n               1    wreg     unsigned char 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  n               1    3[COMRAM] unsigned char 
  3958 ;;  lcdWriteCmd     2    4[COMRAM] int 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;		None               void
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3969 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3971 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3972 ;;Total ram usage:        4 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    2
  3975 ;; This function calls:
  3976 ;;		i2_writeByte
  3977 ;; This function is called by:
  3978 ;;		i2_lcdClear
  3979 ;;		i2_lcdSetPos
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text23
  3984  003B84                     __ptext23:
  3985                           	opt stack 0
  3986  003B84                     i2_lcdWriteCmd:
  3987                           	opt stack 18
  3988                           
  3989                           ;incstack = 0
  3990                           ;i2lcdWriteCmd@n stored from wreg
  3991  003B84  CFE8 F004          	movff	wreg,i2lcdWriteCmd@n
  3992                           
  3993                           ;lcd.c: 33: LATEbits.LATE0 = 0;
  3994  003B88  908D               	bcf	3981,0,c	;volatile
  3995                           
  3996                           ;lcd.c: 35: writeByte(n);
  3997  003B8A  5004               	movf	i2lcdWriteCmd@n,w,c
  3998  003B8C  EC30  F01F         	call	i2_writeByte
  3999                           
  4000                           ;lcd.c: 39: if (!(n & 0xFC)) for(int i = 0; i < 100; i++) _delay((unsigned long)((16)*(1
      +                          2000000/4000000.0)));
  4001  003B90  C004  F003         	movff	i2lcdWriteCmd@n,??i2_lcdWriteCmd
  4002  003B94  0EFC               	movlw	252
  4003  003B96  1603               	andwf	??i2_lcdWriteCmd,f,c
  4004  003B98  A4D8               	btfss	status,2,c
  4005  003B9A  D012               	goto	i2l4829
  4006  003B9C  0E00               	movlw	0
  4007  003B9E  6E06               	movwf	i2lcdWriteCmd@i+1,c
  4008  003BA0  0E00               	movlw	0
  4009  003BA2  6E05               	movwf	i2lcdWriteCmd@i,c
  4010  003BA4  5006               	movf	i2lcdWriteCmd@i+1,w,c
  4011  003BA6  0A80               	xorlw	128
  4012  003BA8  0F80               	addlw	-128
  4013  003BAA  0E64               	movlw	100
  4014  003BAC  B4D8               	btfsc	status,2,c
  4015  003BAE  5C05               	subwf	i2lcdWriteCmd@i,w,c
  4016  003BB0  B0D8               	btfsc	status,0,c
  4017  003BB2  0012               	return	
  4018  003BB4  0E10               	movlw	16
  4019  003BB6                     i2u417_47:
  4020  003BB6  2EE8               	decfsz	wreg,f,c
  4021  003BB8  D7FE               	goto	i2u417_47
  4022  003BBA  4A05               	infsnz	i2lcdWriteCmd@i,f,c
  4023  003BBC  2A06               	incf	i2lcdWriteCmd@i+1,f,c
  4024  003BBE  D7F2               	goto	L15
  4025  003BC0                     i2l4829:
  4026                           
  4027                           ;lcd.c: 40: else _delay((unsigned long)((43)*(12000000/4000000.0)));
  4028  003BC0  0E2B               	movlw	43
  4029  003BC2                     i2u418_47:
  4030  003BC2  2EE8               	decfsz	wreg,f,c
  4031  003BC4  D7FE               	goto	i2u418_47
  4032  003BC6  0012               	return	
  4033  003BC8                     __end_ofi2_lcdWriteCmd:
  4034                           	opt stack 0
  4035                           pclatu	equ	0xFFB
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           indf0	equ	0xFEF
  4045                           fsr0h	equ	0xFEA
  4046                           fsr0l	equ	0xFE9
  4047                           wreg	equ	0xFE8
  4048                           fsr1h	equ	0xFE2
  4049                           fsr1l	equ	0xFE1
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function i2_writeByte *****************
  4055 ;; Defined at:
  4056 ;;		line 22 in file "lcd.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  n               1    wreg     unsigned char 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  n               1    1[COMRAM] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4071 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4073 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4074 ;;Total ram usage:        1 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    1
  4077 ;; This function calls:
  4078 ;;		i2_writeDigit
  4079 ;; This function is called by:
  4080 ;;		i2_lcdWriteCmd
  4081 ;;		i2_lcdWriteChar
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text24
  4086  003E60                     __ptext24:
  4087                           	opt stack 0
  4088  003E60                     i2_writeByte:
  4089                           	opt stack 18
  4090                           
  4091                           ;incstack = 0
  4092                           ;i2writeByte@n stored from wreg
  4093  003E60  CFE8 F002          	movff	wreg,i2writeByte@n
  4094                           
  4095                           ;lcd.c: 25: writeDigit(n >> 4);
  4096  003E64  3802               	swapf	i2writeByte@n,w,c
  4097  003E66  0B0F               	andlw	15
  4098  003E68  EC97  F01E         	call	i2_writeDigit
  4099                           
  4100                           ;lcd.c: 27: writeDigit(n & 0x0F);
  4101  003E6C  5002               	movf	i2writeByte@n,w,c
  4102  003E6E  0B0F               	andlw	15
  4103  003E70  EC97  F01E         	call	i2_writeDigit
  4104  003E74  0012               	return	
  4105  003E76                     __end_ofi2_writeByte:
  4106                           	opt stack 0
  4107                           pclatu	equ	0xFFB
  4108                           pclath	equ	0xFFA
  4109                           tblptru	equ	0xFF8
  4110                           tblptrh	equ	0xFF7
  4111                           tblptrl	equ	0xFF6
  4112                           tablat	equ	0xFF5
  4113                           prodh	equ	0xFF4
  4114                           prodl	equ	0xFF3
  4115                           intcon	equ	0xFF2
  4116                           indf0	equ	0xFEF
  4117                           fsr0h	equ	0xFEA
  4118                           fsr0l	equ	0xFE9
  4119                           wreg	equ	0xFE8
  4120                           fsr1h	equ	0xFE2
  4121                           fsr1l	equ	0xFE1
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function i2_writeDigit *****************
  4127 ;; Defined at:
  4128 ;;		line 6 in file "lcd.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  n               1    wreg     unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  n               1    0[COMRAM] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;		None               void
  4135 ;; Registers used:
  4136 ;;		wreg
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4145 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4146 ;;Total ram usage:        1 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		i2_writeByte
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text25
  4156  003D2E                     __ptext25:
  4157                           	opt stack 0
  4158  003D2E                     i2_writeDigit:
  4159                           	opt stack 18
  4160                           
  4161                           ;incstack = 0
  4162                           ;i2writeDigit@n stored from wreg
  4163  003D2E  CFE8 F001          	movff	wreg,i2writeDigit@n
  4164                           
  4165                           ;lcd.c: 9: LATEbits.LATE1 = 1;
  4166  003D32  828D               	bsf	3981,1,c	;volatile
  4167                           
  4168                           ;lcd.c: 12: if (n & 0x01) LATDbits.LATD0 = 1; else LATDbits.LATD0 = 0;
  4169  003D34  A001               	btfss	i2writeDigit@n,0,c
  4170  003D36  D002               	goto	i2l127
  4171  003D38  808C               	bsf	3980,0,c	;volatile
  4172  003D3A  D001               	goto	i2l4201
  4173  003D3C                     i2l127:
  4174  003D3C  908C               	bcf	3980,0,c	;volatile
  4175  003D3E                     i2l4201:
  4176                           
  4177                           ;lcd.c: 13: if (n & 0x02) LATDbits.LATD1 = 1; else LATDbits.LATD1 = 0;
  4178  003D3E  A201               	btfss	i2writeDigit@n,1,c
  4179  003D40  D002               	goto	i2l129
  4180  003D42  828C               	bsf	3980,1,c	;volatile
  4181  003D44  D001               	goto	i2l4205
  4182  003D46                     i2l129:
  4183  003D46  928C               	bcf	3980,1,c	;volatile
  4184  003D48                     i2l4205:
  4185                           
  4186                           ;lcd.c: 14: if (n & 0x04) LATDbits.LATD2 = 1; else LATDbits.LATD2 = 0;
  4187  003D48  A401               	btfss	i2writeDigit@n,2,c
  4188  003D4A  D002               	goto	i2l131
  4189  003D4C  848C               	bsf	3980,2,c	;volatile
  4190  003D4E  D001               	goto	i2l4209
  4191  003D50                     i2l131:
  4192  003D50  948C               	bcf	3980,2,c	;volatile
  4193  003D52                     i2l4209:
  4194                           
  4195                           ;lcd.c: 15: if (n & 0x08) LATDbits.LATD3 = 1; else LATDbits.LATD3 = 0;
  4196  003D52  A601               	btfss	i2writeDigit@n,3,c
  4197  003D54  D002               	goto	i2l133
  4198  003D56  868C               	bsf	3980,3,c	;volatile
  4199  003D58  D001               	goto	i2l134
  4200  003D5A                     i2l133:
  4201  003D5A  968C               	bcf	3980,3,c	;volatile
  4202  003D5C                     i2l134:
  4203                           
  4204                           ;lcd.c: 19: LATEbits.LATE1 = 0;
  4205  003D5C  928D               	bcf	3981,1,c	;volatile
  4206  003D5E  0012               	return	
  4207  003D60                     __end_ofi2_writeDigit:
  4208                           	opt stack 0
  4209                           pclatu	equ	0xFFB
  4210                           pclath	equ	0xFFA
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           intcon	equ	0xFF2
  4218                           indf0	equ	0xFEF
  4219                           fsr0h	equ	0xFEA
  4220                           fsr0l	equ	0xFE9
  4221                           wreg	equ	0xFE8
  4222                           fsr1h	equ	0xFE2
  4223                           fsr1l	equ	0xFE1
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _sprintf *****************
  4229 ;; Defined at:
  4230 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\doprnt.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  4233 ;;		 -> showAccelerometerVal@buffer(10), showTempLight@buffer(10), 
  4234 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  4235 ;;		 -> STR_6(6), STR_5(6), STR_4(6), STR_2(10), 
  4236 ;;		 -> STR_1(12), 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  vd              4   20[BANK0 ] unsigned long 
  4239 ;;  vd              4   24[BANK0 ] unsigned long 
  4240 ;;  _val            5   37[BANK0 ] struct .
  4241 ;;  fval            3   44[BANK0 ] struct .
  4242 ;;  integ           3   30[BANK0 ] struct .
  4243 ;;  ival            3    0        struct .
  4244 ;;  prec            2   47[BANK0 ] int 
  4245 ;;  exp             2   42[BANK0 ] int 
  4246 ;;  width           2   35[BANK0 ] int 
  4247 ;;  flag            2   33[BANK0 ] unsigned short 
  4248 ;;  ap              2   28[BANK0 ] PTR void [1]
  4249 ;;		 -> ?_sprintf(2), 
  4250 ;;  c               1   49[BANK0 ] char 
  4251 ;;  d               1    0        unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  2    0[BANK0 ] int 
  4254 ;; Registers used:
  4255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4261 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4262 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4263 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4264 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4265 ;;Total ram usage:       50 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    4
  4268 ;; This function calls:
  4269 ;;		___asftadd
  4270 ;;		___asftmul
  4271 ;;		___asftsub
  4272 ;;		___awdiv
  4273 ;;		___ftge
  4274 ;;		___ftmul
  4275 ;;		___ftneg
  4276 ;;		___fttol
  4277 ;;		___lldiv
  4278 ;;		___llmod
  4279 ;;		___lltoft
  4280 ;;		___wmul
  4281 ;;		__div_to_l_
  4282 ;;		__tdiv_to_l_
  4283 ;;		_fround
  4284 ;;		_isdigit
  4285 ;;		_scale
  4286 ;; This function is called by:
  4287 ;;		_showTempLight
  4288 ;;		_showAccelerometerVal
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text26
  4293  000FBA                     __ptext26:
  4294                           	opt stack 0
  4295  000FBA                     _sprintf:
  4296                           	opt stack 17
  4297                           
  4298                           ;doprnt.c: 494: va_list ap;
  4299                           ;doprnt.c: 499: signed char c;
  4300                           ;doprnt.c: 501: int width;
  4301                           ;doprnt.c: 504: int prec;
  4302                           ;doprnt.c: 508: unsigned short flag;
  4303                           ;doprnt.c: 515: char d;
  4304                           ;doprnt.c: 516: double fval, integ;
  4305                           ;doprnt.c: 517: int exp;
  4306                           ;doprnt.c: 518: double ival;
  4307                           ;doprnt.c: 519: union {
  4308                           ;doprnt.c: 520: unsigned long _val;
  4309                           ;doprnt.c: 521: struct {
  4310                           ;doprnt.c: 522: const char * _cp;
  4311                           ;doprnt.c: 523: unsigned _len;
  4312                           ;doprnt.c: 524: } _str;
  4313                           ;doprnt.c: 525: } _val;
  4314                           ;doprnt.c: 542: *ap = __va_start();
  4315                           
  4316                           ;incstack = 0
  4317  000FBA  0100               	movlb	0	; () banked
  4318  000FBC  0E00               	movlw	high (?_sprintf+4)
  4319  000FBE  0100               	movlb	0	; () banked
  4320  000FC0  0100               	movlb	0	; () banked
  4321  000FC2  6F7D               	movwf	(sprintf@ap+1)& (0+255),b
  4322  000FC4  0100               	movlb	0	; () banked
  4323  000FC6  0E64               	movlw	low (?_sprintf+4)
  4324  000FC8  0100               	movlb	0	; () banked
  4325  000FCA  0100               	movlb	0	; () banked
  4326  000FCC  6F7C               	movwf	sprintf@ap& (0+255),b
  4327                           
  4328                           ;doprnt.c: 545: while(c = *f++) {
  4329  000FCE  EF85  F00E         	goto	i2l5147
  4330  000FD2                     i2l4857:
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;doprnt.c: 547: if(c != '%')
  4334  000FD2  0100               	movlb	0	; () banked
  4335  000FD4  0100               	movlb	0	; () banked
  4336  000FD6  5191               	movf	sprintf@c& (0+255),w,b
  4337  000FD8  0A25               	xorlw	37
  4338  000FDA  B4D8               	btfsc	status,2,c
  4339  000FDC  D00D               	goto	i2l4863
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 549: {
  4343                           ;doprnt.c: 550: ((*sp++ = (c)));
  4344  000FDE  C060  FFD9         	movff	sprintf@sp,fsr2l
  4345  000FE2  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4346  000FE6  0100               	movlb	0	; () banked
  4347  000FE8  C091  FFDF         	movff	sprintf@c,indf2
  4348                           
  4349                           ; BSR set to: 0
  4350  000FEC  0100               	movlb	0	; () banked
  4351  000FEE  0100               	movlb	0	; () banked
  4352  000FF0  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4353  000FF2  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4354                           
  4355                           ;doprnt.c: 551: continue;
  4356  000FF4  EF85  F00E         	goto	i2l5147
  4357  000FF8                     i2l4863:
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;doprnt.c: 552: }
  4361                           ;doprnt.c: 555: width = 0;
  4362  000FF8  0E00               	movlw	0
  4363  000FFA  0100               	movlb	0	; () banked
  4364  000FFC  0100               	movlb	0	; () banked
  4365  000FFE  6F84               	movwf	(sprintf@width+1)& (0+255),b
  4366  001000  0E00               	movlw	0
  4367  001002  0100               	movlb	0	; () banked
  4368  001004  6F83               	movwf	sprintf@width& (0+255),b
  4369                           
  4370                           ;doprnt.c: 557: flag = 0;
  4371  001006  0E00               	movlw	0
  4372  001008  0100               	movlb	0	; () banked
  4373  00100A  0100               	movlb	0	; () banked
  4374  00100C  6F82               	movwf	(sprintf@flag+1)& (0+255),b
  4375  00100E  0E00               	movlw	0
  4376  001010  0100               	movlb	0	; () banked
  4377  001012  6F81               	movwf	sprintf@flag& (0+255),b
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  4381  001014  0100               	movlb	0	; () banked
  4382  001016  C062  FFF6         	movff	sprintf@f,tblptrl
  4383  00101A  0100               	movlb	0	; () banked
  4384  00101C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4385  001020  0E00               	movlw	low (__mediumconst shr (0+16))
  4386  001022  6EF8               	movwf	tblptru,c
  4387  001024  0008               	tblrd		*
  4388  001026  50F5               	movf	tablat,w,c
  4389  001028  ECDD  F01E         	call	_isdigit
  4390  00102C  A0D8               	btfss	status,0,c
  4391  00102E  D04B               	goto	i2l4877
  4392                           
  4393                           ;doprnt.c: 607: width = 0;
  4394  001030  0E00               	movlw	0
  4395  001032  0100               	movlb	0	; () banked
  4396  001034  0100               	movlb	0	; () banked
  4397  001036  6F84               	movwf	(sprintf@width+1)& (0+255),b
  4398  001038  0E00               	movlw	0
  4399  00103A  0100               	movlb	0	; () banked
  4400  00103C  6F83               	movwf	sprintf@width& (0+255),b
  4401  00103E                     i2l4869:
  4402                           
  4403                           ;doprnt.c: 609: width *= 10;
  4404  00103E  C083  F011         	movff	sprintf@width,___wmul@multiplier
  4405  001042  C084  F012         	movff	sprintf@width+1,___wmul@multiplier+1
  4406  001046  0E00               	movlw	0
  4407  001048  6E14               	movwf	___wmul@multiplicand+1,c
  4408  00104A  0E0A               	movlw	10
  4409  00104C  6E13               	movwf	___wmul@multiplicand,c
  4410  00104E  EC5F  F01E         	call	___wmul	;wreg free
  4411  001052  C011  F083         	movff	?___wmul,sprintf@width
  4412  001056  C012  F084         	movff	?___wmul+1,sprintf@width+1
  4413                           
  4414                           ;doprnt.c: 610: width += *f++ - '0';
  4415  00105A  0ED0               	movlw	208
  4416  00105C  0100               	movlb	0	; () banked
  4417  00105E  6F67               	movwf	??_sprintf& (0+255),b
  4418  001060  0EFF               	movlw	255
  4419  001062  6F68               	movwf	(??_sprintf+1)& (0+255),b
  4420  001064  0100               	movlb	0	; () banked
  4421  001066  C062  FFF6         	movff	sprintf@f,tblptrl
  4422  00106A  0100               	movlb	0	; () banked
  4423  00106C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4424  001070  0E00               	movlw	low (__mediumconst shr (0+16))
  4425  001072  6EF8               	movwf	tblptru,c
  4426  001074  0008               	tblrd		*
  4427  001076  50F5               	movf	tablat,w,c
  4428  001078  0100               	movlb	0	; () banked
  4429  00107A  6F69               	movwf	(??_sprintf+2)& (0+255),b
  4430  00107C  6B6A               	clrf	(??_sprintf+3)& (0+255),b
  4431  00107E  0100               	movlb	0	; () banked
  4432  001080  5167               	movf	??_sprintf& (0+255),w,b
  4433  001082  0100               	movlb	0	; () banked
  4434  001084  2769               	addwf	(??_sprintf+2)& (0+255),f,b
  4435  001086  0100               	movlb	0	; () banked
  4436  001088  5168               	movf	(??_sprintf+1)& (0+255),w,b
  4437  00108A  0100               	movlb	0	; () banked
  4438  00108C  236A               	addwfc	(??_sprintf+3)& (0+255),f,b
  4439  00108E  0100               	movlb	0	; () banked
  4440  001090  5169               	movf	(??_sprintf+2)& (0+255),w,b
  4441  001092  0100               	movlb	0	; () banked
  4442  001094  0100               	movlb	0	; () banked
  4443  001096  2783               	addwf	sprintf@width& (0+255),f,b
  4444  001098  0100               	movlb	0	; () banked
  4445  00109A  516A               	movf	(??_sprintf+3)& (0+255),w,b
  4446  00109C  0100               	movlb	0	; () banked
  4447  00109E  0100               	movlb	0	; () banked
  4448  0010A0  2384               	addwfc	(sprintf@width+1)& (0+255),f,b
  4449                           
  4450                           ; BSR set to: 0
  4451  0010A2  0100               	movlb	0	; () banked
  4452  0010A4  0100               	movlb	0	; () banked
  4453  0010A6  4B62               	infsnz	sprintf@f& (0+255),f,b
  4454  0010A8  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  4458  0010AA  0100               	movlb	0	; () banked
  4459  0010AC  C062  FFF6         	movff	sprintf@f,tblptrl
  4460  0010B0  0100               	movlb	0	; () banked
  4461  0010B2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4462  0010B6  0E00               	movlw	low (__mediumconst shr (0+16))
  4463  0010B8  6EF8               	movwf	tblptru,c
  4464  0010BA  0008               	tblrd		*
  4465  0010BC  50F5               	movf	tablat,w,c
  4466  0010BE  ECDD  F01E         	call	_isdigit
  4467  0010C2  B0D8               	btfsc	status,0,c
  4468  0010C4  D7BC               	goto	i2l4869
  4469  0010C6                     i2l4877:
  4470                           
  4471                           ;doprnt.c: 617: }
  4472                           ;doprnt.c: 620: if(*f == '.') {
  4473  0010C6  0100               	movlb	0	; () banked
  4474  0010C8  C062  FFF6         	movff	sprintf@f,tblptrl
  4475  0010CC  0100               	movlb	0	; () banked
  4476  0010CE  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4477  0010D2  0E00               	movlw	low (__mediumconst shr (0+16))
  4478  0010D4  6EF8               	movwf	tblptru,c
  4479  0010D6  0008               	tblrd		*
  4480  0010D8  50F5               	movf	tablat,w,c
  4481  0010DA  0A2E               	xorlw	46
  4482  0010DC  A4D8               	btfss	status,2,c
  4483  0010DE  D042               	goto	i2l4889
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;doprnt.c: 621: flag |= 0x4000;
  4487  0010E0  0100               	movlb	0	; () banked
  4488  0010E2  0100               	movlb	0	; () banked
  4489  0010E4  8D82               	bsf	(sprintf@flag+1)& (0+255),6,b
  4490                           
  4491                           ;doprnt.c: 622: f++;
  4492  0010E6  0100               	movlb	0	; () banked
  4493  0010E8  0100               	movlb	0	; () banked
  4494  0010EA  4B62               	infsnz	sprintf@f& (0+255),f,b
  4495  0010EC  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;doprnt.c: 629: {
  4499                           ;doprnt.c: 630: prec = 0;
  4500  0010EE  0E00               	movlw	0
  4501  0010F0  0100               	movlb	0	; () banked
  4502  0010F2  0100               	movlb	0	; () banked
  4503  0010F4  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  4504  0010F6  0E00               	movlw	0
  4505  0010F8  0100               	movlb	0	; () banked
  4506  0010FA  6F8F               	movwf	sprintf@prec& (0+255),b
  4507                           
  4508                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  4509  0010FC  D024               	goto	i2l4887
  4510  0010FE                     i2l4883:
  4511                           
  4512                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  4513  0010FE  C08F  F011         	movff	sprintf@prec,___wmul@multiplier
  4514  001102  C090  F012         	movff	sprintf@prec+1,___wmul@multiplier+1
  4515  001106  0E00               	movlw	0
  4516  001108  6E14               	movwf	___wmul@multiplicand+1,c
  4517  00110A  0E0A               	movlw	10
  4518  00110C  6E13               	movwf	___wmul@multiplicand,c
  4519  00110E  EC5F  F01E         	call	___wmul	;wreg free
  4520  001112  0100               	movlb	0	; () banked
  4521  001114  C062  FFF6         	movff	sprintf@f,tblptrl
  4522  001118  0100               	movlb	0	; () banked
  4523  00111A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4524  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
  4525  001120  6EF8               	movwf	tblptru,c
  4526  001122  0008               	tblrd		*
  4527  001124  50F5               	movf	tablat,w,c
  4528  001126  2611               	addwf	?___wmul,f,c
  4529  001128  0E00               	movlw	0
  4530  00112A  2212               	addwfc	?___wmul+1,f,c
  4531  00112C  0ED0               	movlw	208
  4532  00112E  2411               	addwf	?___wmul,w,c
  4533  001130  0100               	movlb	0	; () banked
  4534  001132  0100               	movlb	0	; () banked
  4535  001134  6F8F               	movwf	sprintf@prec& (0+255),b
  4536  001136  0EFF               	movlw	255
  4537  001138  2012               	addwfc	?___wmul+1,w,c
  4538  00113A  0100               	movlb	0	; () banked
  4539  00113C  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542  00113E  0100               	movlb	0	; () banked
  4543  001140  0100               	movlb	0	; () banked
  4544  001142  4B62               	infsnz	sprintf@f& (0+255),f,b
  4545  001144  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4546  001146                     i2l4887:
  4547                           
  4548                           ; BSR set to: 0
  4549  001146  0100               	movlb	0	; () banked
  4550  001148  C062  FFF6         	movff	sprintf@f,tblptrl
  4551  00114C  0100               	movlb	0	; () banked
  4552  00114E  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4553  001152  0E00               	movlw	low (__mediumconst shr (0+16))
  4554  001154  6EF8               	movwf	tblptru,c
  4555  001156  0008               	tblrd		*
  4556  001158  50F5               	movf	tablat,w,c
  4557  00115A  ECDD  F01E         	call	_isdigit
  4558  00115E  A0D8               	btfss	status,0,c
  4559  001160  D010               	goto	i2l4897
  4560  001162  D7CD               	goto	i2l4883
  4561  001164                     i2l4889:
  4562                           
  4563                           ;doprnt.c: 635: prec = 0;
  4564  001164  0E00               	movlw	0
  4565  001166  0100               	movlb	0	; () banked
  4566  001168  0100               	movlb	0	; () banked
  4567  00116A  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  4568  00116C  0E00               	movlw	0
  4569  00116E  0100               	movlb	0	; () banked
  4570  001170  6F8F               	movwf	sprintf@prec& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 637: flag |= 0x1000;
  4574  001172  0100               	movlb	0	; () banked
  4575  001174  0100               	movlb	0	; () banked
  4576  001176  8982               	bsf	(sprintf@flag+1)& (0+255),4,b
  4577  001178  D004               	goto	i2l4897
  4578  00117A                     i2l4893:
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;doprnt.c: 672: flag |= 0x400;
  4582  00117A  0100               	movlb	0	; () banked
  4583  00117C  0100               	movlb	0	; () banked
  4584  00117E  8582               	bsf	(sprintf@flag+1)& (0+255),2,b
  4585                           
  4586                           ;doprnt.c: 673: break;
  4587  001180  D027               	goto	i2l4899
  4588  001182                     i2l4897:
  4589  001182  0100               	movlb	0	; () banked
  4590  001184  0100               	movlb	0	; () banked
  4591  001186  5162               	movf	sprintf@f& (0+255),w,b
  4592  001188  0100               	movlb	0	; () banked
  4593  00118A  6F67               	movwf	??_sprintf& (0+255),b
  4594  00118C  0100               	movlb	0	; () banked
  4595  00118E  0100               	movlb	0	; () banked
  4596  001190  5163               	movf	(sprintf@f+1)& (0+255),w,b
  4597  001192  0100               	movlb	0	; () banked
  4598  001194  6F68               	movwf	(??_sprintf+1)& (0+255),b
  4599  001196  0100               	movlb	0	; () banked
  4600  001198  4B62               	infsnz	sprintf@f& (0+255),f,b
  4601  00119A  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4602  00119C  C067  FFF6         	movff	??_sprintf,tblptrl
  4603  0011A0  C068  FFF7         	movff	??_sprintf+1,tblptrh
  4604  0011A4  0E00               	movlw	low (__mediumconst shr (0+16))
  4605  0011A6  6EF8               	movwf	tblptru,c
  4606  0011A8  0008               	tblrd		*
  4607  0011AA  0100               	movlb	0	; () banked
  4608  0011AC  CFF5 F091          	movff	tablat,sprintf@c
  4609  0011B0  0100               	movlb	0	; () banked
  4610  0011B2  5191               	movf	sprintf@c& (0+255),w,b
  4611                           
  4612                           ; Switch size 1, requested type "space"
  4613                           ; Number of cases is 4, Range of values is 0 to 105
  4614                           ; switch strategies available:
  4615                           ; Name         Instructions Cycles
  4616                           ; simple_byte           13     7 (average)
  4617                           ;	Chosen strategy is simple_byte
  4618  0011B4  0A00               	xorlw	0	; case 0
  4619  0011B6  B4D8               	btfsc	status,2,c
  4620  0011B8  EFA0  F00E         	goto	i2l5149
  4621  0011BC  0A64               	xorlw	100	; case 100
  4622  0011BE  B4D8               	btfsc	status,2,c
  4623  0011C0  D007               	goto	i2l4899
  4624  0011C2  0A02               	xorlw	2	; case 102
  4625  0011C4  B4D8               	btfsc	status,2,c
  4626  0011C6  D7D9               	goto	i2l4893
  4627  0011C8  0A0F               	xorlw	15	; case 105
  4628  0011CA  A4D8               	btfss	status,2,c
  4629  0011CC  EF85  F00E         	goto	i2l5147
  4630  0011D0                     i2l4899:
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;doprnt.c: 834: if(flag & (0x700)) {
  4634  0011D0  0E07               	movlw	7
  4635  0011D2  0100               	movlb	0	; () banked
  4636  0011D4  0100               	movlb	0	; () banked
  4637  0011D6  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  4638  0011D8  B4D8               	btfsc	status,2,c
  4639  0011DA  D3D4               	goto	i2l5067
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 836: if(flag & 0x1000)
  4643  0011DC  0100               	movlb	0	; () banked
  4644  0011DE  0100               	movlb	0	; () banked
  4645  0011E0  A982               	btfss	(sprintf@flag+1)& (0+255),4,b
  4646  0011E2  D007               	goto	i2l4905
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;doprnt.c: 838: prec = 6;
  4650  0011E4  0E00               	movlw	0
  4651  0011E6  0100               	movlb	0	; () banked
  4652  0011E8  0100               	movlb	0	; () banked
  4653  0011EA  6F90               	movwf	(sprintf@prec+1)& (0+255),b
  4654  0011EC  0E06               	movlw	6
  4655  0011EE  0100               	movlb	0	; () banked
  4656  0011F0  6F8F               	movwf	sprintf@prec& (0+255),b
  4657  0011F2                     i2l4905:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4661  0011F2  C07C  FFD9         	movff	sprintf@ap,fsr2l
  4662  0011F6  C07D  FFDA         	movff	sprintf@ap+1,fsr2h
  4663  0011FA  0100               	movlb	0	; () banked
  4664  0011FC  CFDE F08C          	movff	postinc2,sprintf@fval
  4665  001200  0100               	movlb	0	; () banked
  4666  001202  CFDE F08D          	movff	postinc2,sprintf@fval+1
  4667  001206  0100               	movlb	0	; () banked
  4668  001208  CFDD F08E          	movff	postdec2,sprintf@fval+2
  4669                           
  4670                           ; BSR set to: 0
  4671  00120C  0E03               	movlw	3
  4672  00120E  0100               	movlb	0	; () banked
  4673  001210  0100               	movlb	0	; () banked
  4674  001212  277C               	addwf	sprintf@ap& (0+255),f,b
  4675  001214  0E00               	movlw	0
  4676  001216  0100               	movlb	0	; () banked
  4677  001218  237D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;doprnt.c: 840: if(fval < 0.0) {
  4681  00121A  0100               	movlb	0	; () banked
  4682  00121C  0100               	movlb	0	; () banked
  4683  00121E  518E               	movf	(sprintf@fval+2)& (0+255),w,b
  4684  001220  0A80               	xorlw	128
  4685  001222  0F80               	addlw	128
  4686  001224  E107               	bnz	i2u341_45
  4687  001226  0E00               	movlw	0
  4688  001228  0100               	movlb	0	; () banked
  4689  00122A  5D8D               	subwf	(sprintf@fval+1)& (0+255),w,b
  4690  00122C  E103               	bnz	i2u341_45
  4691  00122E  0E00               	movlw	0
  4692  001230  0100               	movlb	0	; () banked
  4693  001232  5D8C               	subwf	sprintf@fval& (0+255),w,b
  4694  001234                     i2u341_45:
  4695  001234  B0D8               	btfsc	status,0,c
  4696  001236  D012               	goto	i2l4915
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;doprnt.c: 841: fval = -fval;
  4700  001238  C08C  F001         	movff	sprintf@fval,___ftneg@f1
  4701  00123C  C08D  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  4702  001240  C08E  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  4703  001244  ECF2  F01E         	call	___ftneg	;wreg free
  4704  001248  C001  F08C         	movff	?___ftneg,sprintf@fval
  4705  00124C  C002  F08D         	movff	?___ftneg+1,sprintf@fval+1
  4706  001250  C003  F08E         	movff	?___ftneg+2,sprintf@fval+2
  4707                           
  4708                           ;doprnt.c: 842: flag |= 0x03;
  4709  001254  0E03               	movlw	3
  4710  001256  0100               	movlb	0	; () banked
  4711  001258  0100               	movlb	0	; () banked
  4712  00125A  1381               	iorwf	sprintf@flag& (0+255),f,b
  4713  00125C                     i2l4915:
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;doprnt.c: 843: }
  4717                           ;doprnt.c: 844: exp = 0;
  4718  00125C  0E00               	movlw	0
  4719  00125E  0100               	movlb	0	; () banked
  4720  001260  0100               	movlb	0	; () banked
  4721  001262  6F8B               	movwf	(sprintf@exp+1)& (0+255),b
  4722  001264  0E00               	movlw	0
  4723  001266  0100               	movlb	0	; () banked
  4724  001268  6F8A               	movwf	sprintf@exp& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 845: if( fval!=0) {
  4728  00126A  0E7F               	movlw	127
  4729  00126C  0100               	movlb	0	; () banked
  4730  00126E  0100               	movlb	0	; () banked
  4731  001270  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  4732  001272  0100               	movlb	0	; () banked
  4733  001274  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4734  001276  0100               	movlb	0	; () banked
  4735  001278  118C               	iorwf	sprintf@fval& (0+255),w,b
  4736  00127A  B4D8               	btfsc	status,2,c
  4737  00127C  D09D               	goto	i2l4943
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4741  00127E  0E82               	movlw	130
  4742  001280  0100               	movlb	0	; () banked
  4743  001282  6F67               	movwf	??_sprintf& (0+255),b
  4744  001284  0EFF               	movlw	255
  4745  001286  6F68               	movwf	(??_sprintf+1)& (0+255),b
  4746  001288  0100               	movlb	0	; () banked
  4747  00128A  C08C  F069         	movff	sprintf@fval,??_sprintf+2
  4748  00128E  0100               	movlb	0	; () banked
  4749  001290  C08D  F06A         	movff	sprintf@fval+1,??_sprintf+3
  4750  001294  0100               	movlb	0	; () banked
  4751  001296  C08E  F06B         	movff	sprintf@fval+2,??_sprintf+4
  4752  00129A  0100               	movlb	0	; () banked
  4753  00129C  C08F  F06C         	movff	sprintf@fval+3,??_sprintf+5
  4754  0012A0  0E10               	movlw	16
  4755  0012A2  D006               	goto	i2u343_40
  4756  0012A4                     i2u343_45:
  4757  0012A4  0100               	movlb	0	; () banked
  4758  0012A6  90D8               	bcf	status,0,c
  4759  0012A8  336C               	rrcf	(??_sprintf+5)& (0+255),f,b
  4760  0012AA  336B               	rrcf	(??_sprintf+4)& (0+255),f,b
  4761  0012AC  336A               	rrcf	(??_sprintf+3)& (0+255),f,b
  4762  0012AE  3369               	rrcf	(??_sprintf+2)& (0+255),f,b
  4763  0012B0                     i2u343_40:
  4764  0012B0  2EE8               	decfsz	wreg,f,c
  4765  0012B2  D7F8               	goto	i2u343_45
  4766  0012B4  0100               	movlb	0	; () banked
  4767  0012B6  5169               	movf	(??_sprintf+2)& (0+255),w,b
  4768  0012B8  0100               	movlb	0	; () banked
  4769  0012BA  2567               	addwf	??_sprintf& (0+255),w,b
  4770  0012BC  0100               	movlb	0	; () banked
  4771  0012BE  0100               	movlb	0	; () banked
  4772  0012C0  6F8A               	movwf	sprintf@exp& (0+255),b
  4773  0012C2  0100               	movlb	0	; () banked
  4774  0012C4  0100               	movlb	0	; () banked
  4775  0012C6  0E00               	movlw	0
  4776  0012C8  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  4777  0012CA  6F8B               	movwf	(sprintf@exp+1)& (0+255),b
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;doprnt.c: 847: exp--;
  4781  0012CC  0100               	movlb	0	; () banked
  4782  0012CE  0100               	movlb	0	; () banked
  4783  0012D0  078A               	decf	sprintf@exp& (0+255),f,b
  4784  0012D2  A0D8               	btfss	status,0,c
  4785  0012D4  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;doprnt.c: 848: exp *= 3;
  4789  0012D6  C08A  F011         	movff	sprintf@exp,___wmul@multiplier
  4790  0012DA  C08B  F012         	movff	sprintf@exp+1,___wmul@multiplier+1
  4791  0012DE  0E00               	movlw	0
  4792  0012E0  6E14               	movwf	___wmul@multiplicand+1,c
  4793  0012E2  0E03               	movlw	3
  4794  0012E4  6E13               	movwf	___wmul@multiplicand,c
  4795  0012E6  EC5F  F01E         	call	___wmul	;wreg free
  4796  0012EA  C011  F08A         	movff	?___wmul,sprintf@exp
  4797  0012EE  C012  F08B         	movff	?___wmul+1,sprintf@exp+1
  4798                           
  4799                           ;doprnt.c: 849: exp /= 10;
  4800  0012F2  C08A  F008         	movff	sprintf@exp,___awdiv@dividend
  4801  0012F6  C08B  F009         	movff	sprintf@exp+1,___awdiv@dividend+1
  4802  0012FA  0E00               	movlw	0
  4803  0012FC  6E0B               	movwf	___awdiv@divisor+1,c
  4804  0012FE  0E0A               	movlw	10
  4805  001300  6E0A               	movwf	___awdiv@divisor,c
  4806  001302  EC72  F019         	call	___awdiv	;wreg free
  4807  001306  C008  F08A         	movff	?___awdiv,sprintf@exp
  4808  00130A  C009  F08B         	movff	?___awdiv+1,sprintf@exp+1
  4809                           
  4810                           ;doprnt.c: 850: if(exp < 0)
  4811  00130E  0100               	movlb	0	; () banked
  4812  001310  0100               	movlb	0	; () banked
  4813  001312  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  4814  001314  0A80               	xorlw	128
  4815  001316  6EF3               	movwf	prodl,c
  4816  001318  0E80               	movlw	128
  4817  00131A  5CF3               	subwf	prodl,w,c
  4818  00131C  0E00               	movlw	0
  4819  00131E  B4D8               	btfsc	status,2,c
  4820  001320  5D8A               	subwf	sprintf@exp& (0+255),w,b
  4821  001322  B0D8               	btfsc	status,0,c
  4822  001324  D005               	goto	i2l4931
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;doprnt.c: 851: exp--;
  4826  001326  0100               	movlb	0	; () banked
  4827  001328  0100               	movlb	0	; () banked
  4828  00132A  078A               	decf	sprintf@exp& (0+255),f,b
  4829  00132C  A0D8               	btfss	status,0,c
  4830  00132E  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  4831  001330                     i2l4931:
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;doprnt.c: 855: integ = scale(-exp);
  4835  001330  0100               	movlb	0	; () banked
  4836  001332  0100               	movlb	0	; () banked
  4837  001334  518A               	movf	sprintf@exp& (0+255),w,b
  4838  001336  0800               	sublw	0
  4839  001338  ECA7  F00E         	call	_scale
  4840  00133C  C026  F07E         	movff	?_scale,sprintf@integ
  4841  001340  C027  F07F         	movff	?_scale+1,sprintf@integ+1
  4842  001344  C028  F080         	movff	?_scale+2,sprintf@integ+2
  4843                           
  4844                           ;doprnt.c: 856: integ *= fval;
  4845  001348  0100               	movlb	0	; () banked
  4846  00134A  0E00               	movlw	high sprintf@integ
  4847  00134C  6E27               	movwf	___asftmul@f1p+1,c
  4848  00134E  0100               	movlb	0	; () banked
  4849  001350  0E7E               	movlw	low sprintf@integ
  4850  001352  6E26               	movwf	___asftmul@f1p,c
  4851  001354  C08C  F028         	movff	sprintf@fval,___asftmul@f2
  4852  001358  C08D  F029         	movff	sprintf@fval+1,___asftmul@f2+1
  4853  00135C  C08E  F02A         	movff	sprintf@fval+2,___asftmul@f2+2
  4854  001360  EC23  F01E         	call	___asftmul	;wreg free
  4855                           
  4856                           ;doprnt.c: 857: if(integ < 1.0)
  4857  001364  C07E  F00E         	movff	sprintf@integ,___ftge@ff1
  4858  001368  C07F  F00F         	movff	sprintf@integ+1,___ftge@ff1+1
  4859  00136C  C080  F010         	movff	sprintf@integ+2,___ftge@ff1+2
  4860  001370  0E00               	movlw	0
  4861  001372  6E11               	movwf	___ftge@ff2,c
  4862  001374  0E80               	movlw	128
  4863  001376  6E12               	movwf	___ftge@ff2+1,c
  4864  001378  0E3F               	movlw	63
  4865  00137A  6E13               	movwf	___ftge@ff2+2,c
  4866  00137C  EC0F  F01B         	call	___ftge	;wreg free
  4867  001380  B0D8               	btfsc	status,0,c
  4868  001382  D006               	goto	i2l4939
  4869                           
  4870                           ;doprnt.c: 858: exp--;
  4871  001384  0100               	movlb	0	; () banked
  4872  001386  0100               	movlb	0	; () banked
  4873  001388  078A               	decf	sprintf@exp& (0+255),f,b
  4874  00138A  A0D8               	btfss	status,0,c
  4875  00138C  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  4876  00138E  D014               	goto	i2l4943
  4877  001390                     i2l4939:
  4878                           
  4879                           ;doprnt.c: 859: else if(integ >= 10.0)
  4880  001390  C07E  F00E         	movff	sprintf@integ,___ftge@ff1
  4881  001394  C07F  F00F         	movff	sprintf@integ+1,___ftge@ff1+1
  4882  001398  C080  F010         	movff	sprintf@integ+2,___ftge@ff1+2
  4883  00139C  0E00               	movlw	0
  4884  00139E  6E11               	movwf	___ftge@ff2,c
  4885  0013A0  0E20               	movlw	32
  4886  0013A2  6E12               	movwf	___ftge@ff2+1,c
  4887  0013A4  0E41               	movlw	65
  4888  0013A6  6E13               	movwf	___ftge@ff2+2,c
  4889  0013A8  EC0F  F01B         	call	___ftge	;wreg free
  4890  0013AC  A0D8               	btfss	status,0,c
  4891  0013AE  D004               	goto	i2l4943
  4892                           
  4893                           ;doprnt.c: 860: exp++;
  4894  0013B0  0100               	movlb	0	; () banked
  4895  0013B2  0100               	movlb	0	; () banked
  4896  0013B4  4B8A               	infsnz	sprintf@exp& (0+255),f,b
  4897  0013B6  2B8B               	incf	(sprintf@exp+1)& (0+255),f,b
  4898  0013B8                     i2l4943:
  4899                           
  4900                           ;doprnt.c: 861: }
  4901                           ;doprnt.c: 1121: if(prec <= 12)
  4902  0013B8  0100               	movlb	0	; () banked
  4903  0013BA  0100               	movlb	0	; () banked
  4904  0013BC  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  4905  0013BE  0A80               	xorlw	128
  4906  0013C0  6EF3               	movwf	prodl,c
  4907  0013C2  0E80               	movlw	128
  4908  0013C4  5CF3               	subwf	prodl,w,c
  4909  0013C6  0E0D               	movlw	13
  4910  0013C8  B4D8               	btfsc	status,2,c
  4911  0013CA  5D8F               	subwf	sprintf@prec& (0+255),w,b
  4912  0013CC  B0D8               	btfsc	status,0,c
  4913  0013CE  D013               	goto	i2l4947
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 1122: fval += fround(prec);
  4917  0013D0  0100               	movlb	0	; () banked
  4918  0013D2  0E00               	movlw	high sprintf@fval
  4919  0013D4  6E33               	movwf	___asftadd@f1p+1,c
  4920  0013D6  0100               	movlb	0	; () banked
  4921  0013D8  0E8C               	movlw	low sprintf@fval
  4922  0013DA  6E32               	movwf	___asftadd@f1p,c
  4923  0013DC  0100               	movlb	0	; () banked
  4924  0013DE  0100               	movlb	0	; () banked
  4925  0013E0  518F               	movf	sprintf@prec& (0+255),w,b
  4926  0013E2  ECD0  F010         	call	_fround
  4927  0013E6  C026  F034         	movff	?_fround,___asftadd@f2
  4928  0013EA  C027  F035         	movff	?_fround+1,___asftadd@f2+1
  4929  0013EE  C028  F036         	movff	?_fround+2,___asftadd@f2+2
  4930  0013F2  EC41  F01E         	call	___asftadd	;wreg free
  4931  0013F6                     i2l4947:
  4932                           
  4933                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4934  0013F6  0100               	movlb	0	; () banked
  4935  0013F8  0100               	movlb	0	; () banked
  4936  0013FA  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  4937  0013FC  0A80               	xorlw	128
  4938  0013FE  6EF3               	movwf	prodl,c
  4939  001400  0E80               	movlw	128
  4940  001402  5CF3               	subwf	prodl,w,c
  4941  001404  0E0A               	movlw	10
  4942  001406  B4D8               	btfsc	status,2,c
  4943  001408  5D8A               	subwf	sprintf@exp& (0+255),w,b
  4944  00140A  B0D8               	btfsc	status,0,c
  4945  00140C  D02B               	goto	i2l4955
  4946                           
  4947                           ; BSR set to: 0
  4948  00140E  0E7F               	movlw	127
  4949  001410  0100               	movlb	0	; () banked
  4950  001412  0100               	movlb	0	; () banked
  4951  001414  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  4952  001416  0100               	movlb	0	; () banked
  4953  001418  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4954  00141A  0100               	movlb	0	; () banked
  4955  00141C  118C               	iorwf	sprintf@fval& (0+255),w,b
  4956  00141E  B4D8               	btfsc	status,2,c
  4957  001420  D071               	goto	i2l4971
  4958                           
  4959                           ; BSR set to: 0
  4960  001422  C08C  F02D         	movff	sprintf@fval,___fttol@f1
  4961  001426  C08D  F02E         	movff	sprintf@fval+1,___fttol@f1+1
  4962  00142A  C08E  F02F         	movff	sprintf@fval+2,___fttol@f1+2
  4963  00142E  EC1F  F018         	call	___fttol	;wreg free
  4964  001432  C02D  F067         	movff	?___fttol,??_sprintf
  4965  001436  C02E  F068         	movff	?___fttol+1,??_sprintf+1
  4966  00143A  C02F  F069         	movff	?___fttol+2,??_sprintf+2
  4967  00143E  C030  F06A         	movff	?___fttol+3,??_sprintf+3
  4968  001442  0100               	movlb	0	; () banked
  4969  001444  516A               	movf	(??_sprintf+3)& (0+255),w,b
  4970  001446  1167               	iorwf	??_sprintf& (0+255),w,b
  4971  001448  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  4972  00144A  1169               	iorwf	(??_sprintf+2)& (0+255),w,b
  4973  00144C  A4D8               	btfss	status,2,c
  4974  00144E  D05A               	goto	i2l4971
  4975                           
  4976                           ; BSR set to: 0
  4977  001450  0100               	movlb	0	; () banked
  4978  001452  0100               	movlb	0	; () banked
  4979  001454  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  4980  001456  0A80               	xorlw	128
  4981  001458  0F80               	addlw	-128
  4982  00145A  0E02               	movlw	2
  4983  00145C  B4D8               	btfsc	status,2,c
  4984  00145E  5D8A               	subwf	sprintf@exp& (0+255),w,b
  4985  001460  A0D8               	btfss	status,0,c
  4986  001462  D050               	goto	i2l4971
  4987  001464                     i2l4955:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;doprnt.c: 1129: if(integ < 4.294967296){
  4991  001464  C07E  F00E         	movff	sprintf@integ,___ftge@ff1
  4992  001468  C07F  F00F         	movff	sprintf@integ+1,___ftge@ff1+1
  4993  00146C  C080  F010         	movff	sprintf@integ+2,___ftge@ff1+2
  4994  001470  0E70               	movlw	112
  4995  001472  6E11               	movwf	___ftge@ff2,c
  4996  001474  0E89               	movlw	137
  4997  001476  6E12               	movwf	___ftge@ff2+1,c
  4998  001478  0E40               	movlw	64
  4999  00147A  6E13               	movwf	___ftge@ff2+2,c
  5000  00147C  EC0F  F01B         	call	___ftge	;wreg free
  5001  001480  B0D8               	btfsc	status,0,c
  5002  001482  D003               	goto	i2l4959
  5003                           
  5004                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5005  001484  0100               	movlb	0	; () banked
  5006  001486  0EF7               	movlw	247
  5007  001488  D002               	goto	L16
  5008  00148A                     i2l4959:
  5009                           
  5010                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5011  00148A  0100               	movlb	0	; () banked
  5012  00148C  0EF8               	movlw	248
  5013  00148E                     L16:
  5014  00148E  0100               	movlb	0	; () banked
  5015  001490  278A               	addwf	sprintf@exp& (0+255),f,b
  5016  001492  0EFF               	movlw	255
  5017  001494  0100               	movlb	0	; () banked
  5018  001496  238B               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 1133: }
  5022                           ;doprnt.c: 1134: integ = scale(exp);
  5023                           
  5024                           ; BSR set to: 0
  5025  001498  0100               	movlb	0	; () banked
  5026  00149A  0100               	movlb	0	; () banked
  5027  00149C  518A               	movf	sprintf@exp& (0+255),w,b
  5028  00149E  ECA7  F00E         	call	_scale
  5029  0014A2  C026  F07E         	movff	?_scale,sprintf@integ
  5030  0014A6  C027  F07F         	movff	?_scale+1,sprintf@integ+1
  5031  0014AA  C028  F080         	movff	?_scale+2,sprintf@integ+2
  5032                           
  5033                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5034  0014AE  C08C  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  5035  0014B2  C08D  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5036  0014B6  C08E  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5037  0014BA  C07E  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  5038  0014BE  C07F  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  5039  0014C2  C080  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  5040  0014C6  ECE0  F014         	call	__tdiv_to_l_	;wreg free
  5041  0014CA  C001  F070         	movff	?__tdiv_to_l_,_sprintf$833
  5042  0014CE  C002  F071         	movff	?__tdiv_to_l_+1,_sprintf$833+1
  5043  0014D2  C003  F072         	movff	?__tdiv_to_l_+2,_sprintf$833+2
  5044  0014D6  C004  F073         	movff	?__tdiv_to_l_+3,_sprintf$833+3
  5045  0014DA  C070  F085         	movff	_sprintf$833,sprintf@_val
  5046  0014DE  C071  F086         	movff	_sprintf$833+1,sprintf@_val+1
  5047  0014E2  C072  F087         	movff	_sprintf$833+2,sprintf@_val+2
  5048  0014E6  C073  F088         	movff	_sprintf$833+3,sprintf@_val+3
  5049                           
  5050                           ;doprnt.c: 1138: fval = 0.0;
  5051  0014EA  0E00               	movlw	0
  5052  0014EC  0100               	movlb	0	; () banked
  5053  0014EE  0100               	movlb	0	; () banked
  5054  0014F0  6F8C               	movwf	sprintf@fval& (0+255),b
  5055  0014F2  0E00               	movlw	0
  5056  0014F4  0100               	movlb	0	; () banked
  5057  0014F6  0100               	movlb	0	; () banked
  5058  0014F8  6F8D               	movwf	(sprintf@fval+1)& (0+255),b
  5059  0014FA  0E00               	movlw	0
  5060  0014FC  0100               	movlb	0	; () banked
  5061  0014FE  0100               	movlb	0	; () banked
  5062  001500  6F8E               	movwf	(sprintf@fval+2)& (0+255),b
  5063                           
  5064                           ;doprnt.c: 1139: } else {
  5065  001502  D02F               	goto	i2l4977
  5066  001504                     i2l4971:
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  5070  001504  C08C  F02D         	movff	sprintf@fval,___fttol@f1
  5071  001508  C08D  F02E         	movff	sprintf@fval+1,___fttol@f1+1
  5072  00150C  C08E  F02F         	movff	sprintf@fval+2,___fttol@f1+2
  5073  001510  EC1F  F018         	call	___fttol	;wreg free
  5074  001514  C02D  F085         	movff	?___fttol,sprintf@_val
  5075  001518  C02E  F086         	movff	?___fttol+1,sprintf@_val+1
  5076  00151C  C02F  F087         	movff	?___fttol+2,sprintf@_val+2
  5077  001520  C030  F088         	movff	?___fttol+3,sprintf@_val+3
  5078                           
  5079                           ;doprnt.c: 1141: fval -= (double)_val._val;
  5080  001524  0100               	movlb	0	; () banked
  5081  001526  0E00               	movlw	high sprintf@fval
  5082  001528  6E39               	movwf	___asftsub@f1p+1,c
  5083  00152A  0100               	movlb	0	; () banked
  5084  00152C  0E8C               	movlw	low sprintf@fval
  5085  00152E  6E38               	movwf	___asftsub@f1p,c
  5086  001530  C085  F009         	movff	sprintf@_val,___lltoft@c
  5087  001534  C086  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  5088  001538  C087  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  5089  00153C  C088  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  5090  001540  EC0F  F01C         	call	___lltoft	;wreg free
  5091  001544  C009  F03A         	movff	?___lltoft,___asftsub@f2
  5092  001548  C00A  F03B         	movff	?___lltoft+1,___asftsub@f2+1
  5093  00154C  C00B  F03C         	movff	?___lltoft+2,___asftsub@f2+2
  5094  001550  EC05  F01E         	call	___asftsub	;wreg free
  5095                           
  5096                           ;doprnt.c: 1142: exp = 0;
  5097  001554  0E00               	movlw	0
  5098  001556  0100               	movlb	0	; () banked
  5099  001558  0100               	movlb	0	; () banked
  5100  00155A  6F8B               	movwf	(sprintf@exp+1)& (0+255),b
  5101  00155C  0E00               	movlw	0
  5102  00155E  0100               	movlb	0	; () banked
  5103  001560  6F8A               	movwf	sprintf@exp& (0+255),b
  5104  001562                     i2l4977:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;doprnt.c: 1143: }
  5108                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5109  001562  0100               	movlb	0	; () banked
  5110  001564  6F67               	movwf	??_sprintf& (0+255),b
  5111  001566  0E01               	movlw	1
  5112  001568  0100               	movlb	0	; () banked
  5113  00156A  0100               	movlb	0	; () banked
  5114  00156C  6F91               	movwf	sprintf@c& (0+255),b
  5115  00156E  0100               	movlb	0	; () banked
  5116  001570  5167               	movf	??_sprintf& (0+255),w,b
  5117  001572                     
  5118                           ; BSR set to: 0
  5119  001572  0100               	movlb	0	; () banked
  5120  001574  0100               	movlb	0	; () banked
  5121  001576  5191               	movf	sprintf@c& (0+255),w,b
  5122  001578  0A0A               	xorlw	10
  5123  00157A  B4D8               	btfsc	status,2,c
  5124  00157C  D024               	goto	i2l4991
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  5128                           
  5129                           ; BSR set to: 0
  5130                           
  5131                           ; BSR set to: 0
  5132  00157E  0100               	movlb	0	; () banked
  5133  001580  0100               	movlb	0	; () banked
  5134  001582  5191               	movf	sprintf@c& (0+255),w,b
  5135  001584  0D04               	mullw	4
  5136  001586  0E01               	movlw	low _dpowers
  5137  001588  24F3               	addwf	prodl,w,c
  5138  00158A  6EF6               	movwf	tblptrl,c
  5139  00158C  0E0F               	movlw	high _dpowers
  5140  00158E  20F4               	addwfc	prodh,w,c
  5141  001590  6EF7               	movwf	tblptrh,c
  5142  001592  6AF8               	clrf	tblptru,c
  5143  001594  0E00               	movlw	low (__mediumconst shr (0+16))
  5144  001596  22F8               	addwfc	tblptru,f,c
  5145  001598  0009               	tblrd		*+
  5146  00159A  50F5               	movf	tablat,w,c
  5147  00159C  0100               	movlb	0	; () banked
  5148  00159E  0100               	movlb	0	; () banked
  5149  0015A0  5D85               	subwf	sprintf@_val& (0+255),w,b
  5150  0015A2  0009               	tblrd		*+
  5151  0015A4  50F5               	movf	tablat,w,c
  5152  0015A6  0100               	movlb	0	; () banked
  5153  0015A8  5986               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5154  0015AA  0009               	tblrd		*+
  5155  0015AC  50F5               	movf	tablat,w,c
  5156  0015AE  0100               	movlb	0	; () banked
  5157  0015B0  5987               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5158  0015B2  0009               	tblrd		*+
  5159  0015B4  50F5               	movf	tablat,w,c
  5160  0015B6  0100               	movlb	0	; () banked
  5161  0015B8  5988               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5162  0015BA  A0D8               	btfss	status,0,c
  5163  0015BC  D004               	goto	i2l4991
  5164                           
  5165                           ; BSR set to: 0
  5166                           
  5167                           ; BSR set to: 0
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;doprnt.c: 1147: break;
  5171  0015BE  0100               	movlb	0	; () banked
  5172  0015C0  0100               	movlb	0	; () banked
  5173  0015C2  2B91               	incf	sprintf@c& (0+255),f,b
  5174  0015C4  D7D6               	goto	L17
  5175  0015C6                     i2l4991:
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;doprnt.c: 1151: width -= prec + c + exp;
  5179  0015C6  0100               	movlb	0	; () banked
  5180  0015C8  C091  F067         	movff	sprintf@c,??_sprintf
  5181  0015CC  0100               	movlb	0	; () banked
  5182  0015CE  6B68               	clrf	(??_sprintf+1)& (0+255),b
  5183  0015D0  BF67               	btfsc	??_sprintf& (0+255),7,b
  5184  0015D2  0768               	decf	(??_sprintf+1)& (0+255),f,b
  5185  0015D4  0100               	movlb	0	; () banked
  5186  0015D6  0100               	movlb	0	; () banked
  5187  0015D8  518F               	movf	sprintf@prec& (0+255),w,b
  5188  0015DA  0100               	movlb	0	; () banked
  5189  0015DC  2767               	addwf	??_sprintf& (0+255),f,b
  5190  0015DE  0100               	movlb	0	; () banked
  5191  0015E0  0100               	movlb	0	; () banked
  5192  0015E2  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5193  0015E4  0100               	movlb	0	; () banked
  5194  0015E6  2368               	addwfc	(??_sprintf+1)& (0+255),f,b
  5195  0015E8  0100               	movlb	0	; () banked
  5196  0015EA  0100               	movlb	0	; () banked
  5197  0015EC  518A               	movf	sprintf@exp& (0+255),w,b
  5198  0015EE  0100               	movlb	0	; () banked
  5199  0015F0  2767               	addwf	??_sprintf& (0+255),f,b
  5200  0015F2  0100               	movlb	0	; () banked
  5201  0015F4  0100               	movlb	0	; () banked
  5202  0015F6  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  5203  0015F8  0100               	movlb	0	; () banked
  5204  0015FA  2368               	addwfc	(??_sprintf+1)& (0+255),f,b
  5205  0015FC  0100               	movlb	0	; () banked
  5206  0015FE  5167               	movf	??_sprintf& (0+255),w,b
  5207  001600  0100               	movlb	0	; () banked
  5208  001602  0100               	movlb	0	; () banked
  5209  001604  5F83               	subwf	sprintf@width& (0+255),f,b
  5210  001606  0100               	movlb	0	; () banked
  5211  001608  5168               	movf	(??_sprintf+1)& (0+255),w,b
  5212  00160A  0100               	movlb	0	; () banked
  5213  00160C  0100               	movlb	0	; () banked
  5214  00160E  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  5215                           
  5216                           ;doprnt.c: 1152: if(
  5217                           ;doprnt.c: 1156: prec)
  5218  001610  0100               	movlb	0	; () banked
  5219  001612  0100               	movlb	0	; () banked
  5220  001614  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5221  001616  118F               	iorwf	sprintf@prec& (0+255),w,b
  5222  001618  B4D8               	btfsc	status,2,c
  5223  00161A  D005               	goto	i2l4995
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;doprnt.c: 1157: width--;
  5227  00161C  0100               	movlb	0	; () banked
  5228  00161E  0100               	movlb	0	; () banked
  5229  001620  0783               	decf	sprintf@width& (0+255),f,b
  5230  001622  A0D8               	btfss	status,0,c
  5231  001624  0784               	decf	(sprintf@width+1)& (0+255),f,b
  5232  001626                     i2l4995:
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;doprnt.c: 1158: if(flag & 0x03)
  5236  001626  0E03               	movlw	3
  5237  001628  0100               	movlb	0	; () banked
  5238  00162A  0100               	movlb	0	; () banked
  5239  00162C  1581               	andwf	sprintf@flag& (0+255),w,b
  5240  00162E  0100               	movlb	0	; () banked
  5241  001630  6F67               	movwf	??_sprintf& (0+255),b
  5242  001632  0E00               	movlw	0
  5243  001634  0100               	movlb	0	; () banked
  5244  001636  0100               	movlb	0	; () banked
  5245  001638  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  5246  00163A  0100               	movlb	0	; () banked
  5247  00163C  6F68               	movwf	(??_sprintf+1)& (0+255),b
  5248  00163E  0100               	movlb	0	; () banked
  5249  001640  5168               	movf	(??_sprintf+1)& (0+255),w,b
  5250  001642  1167               	iorwf	??_sprintf& (0+255),w,b
  5251  001644  B4D8               	btfsc	status,2,c
  5252  001646  D010               	goto	i2l5005
  5253  001648  D00A               	goto	L18
  5254  00164A                     i2l4999:
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  5258  00164A  C060  FFD9         	movff	sprintf@sp,fsr2l
  5259  00164E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5260  001652  0E20               	movlw	32
  5261  001654  6EDF               	movwf	indf2,c
  5262                           
  5263                           ; BSR set to: 0
  5264  001656  0100               	movlb	0	; () banked
  5265  001658  0100               	movlb	0	; () banked
  5266  00165A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5267  00165C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5268  00165E                     L18:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1191: width--;
  5272  00165E  0100               	movlb	0	; () banked
  5273  001660  0100               	movlb	0	; () banked
  5274  001662  0783               	decf	sprintf@width& (0+255),f,b
  5275  001664  A0D8               	btfss	status,0,c
  5276  001666  0784               	decf	(sprintf@width+1)& (0+255),f,b
  5277  001668                     i2l5005:
  5278                           
  5279                           ; BSR set to: 0
  5280  001668  0100               	movlb	0	; () banked
  5281  00166A  0100               	movlb	0	; () banked
  5282  00166C  5184               	movf	(sprintf@width+1)& (0+255),w,b
  5283  00166E  0A80               	xorlw	128
  5284  001670  6EF3               	movwf	prodl,c
  5285  001672  0E80               	movlw	128
  5286  001674  5CF3               	subwf	prodl,w,c
  5287  001676  0E01               	movlw	1
  5288  001678  B4D8               	btfsc	status,2,c
  5289  00167A  5D83               	subwf	sprintf@width& (0+255),w,b
  5290  00167C  B0D8               	btfsc	status,0,c
  5291  00167E  D7E5               	goto	i2l4999
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;doprnt.c: 1192: }
  5295                           ;doprnt.c: 1197: if(flag & 0x03)
  5296                           
  5297                           ; BSR set to: 0
  5298  001680  0E03               	movlw	3
  5299  001682  0100               	movlb	0	; () banked
  5300  001684  0100               	movlb	0	; () banked
  5301  001686  1581               	andwf	sprintf@flag& (0+255),w,b
  5302  001688  0100               	movlb	0	; () banked
  5303  00168A  6F67               	movwf	??_sprintf& (0+255),b
  5304  00168C  0E00               	movlw	0
  5305  00168E  0100               	movlb	0	; () banked
  5306  001690  0100               	movlb	0	; () banked
  5307  001692  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  5308  001694  0100               	movlb	0	; () banked
  5309  001696  6F68               	movwf	(??_sprintf+1)& (0+255),b
  5310  001698  0100               	movlb	0	; () banked
  5311  00169A  5168               	movf	(??_sprintf+1)& (0+255),w,b
  5312  00169C  1167               	iorwf	??_sprintf& (0+255),w,b
  5313  00169E  B4D8               	btfsc	status,2,c
  5314  0016A0  D058               	goto	i2l5021
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  5318  0016A2  C060  FFD9         	movff	sprintf@sp,fsr2l
  5319  0016A6  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5320  0016AA  0E2D               	movlw	45
  5321  0016AC  D04D               	goto	L19
  5322  0016AE                     i2l5013:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;doprnt.c: 1209: {
  5326                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  5327  0016AE  C085  F001         	movff	sprintf@_val,___lldiv@dividend
  5328  0016B2  C086  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  5329  0016B6  C087  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  5330  0016BA  C088  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  5331  0016BE  0100               	movlb	0	; () banked
  5332  0016C0  0100               	movlb	0	; () banked
  5333  0016C2  5191               	movf	sprintf@c& (0+255),w,b
  5334  0016C4  0D04               	mullw	4
  5335  0016C6  0E01               	movlw	low _dpowers
  5336  0016C8  24F3               	addwf	prodl,w,c
  5337  0016CA  6EF6               	movwf	tblptrl,c
  5338  0016CC  0E0F               	movlw	high _dpowers
  5339  0016CE  20F4               	addwfc	prodh,w,c
  5340  0016D0  6EF7               	movwf	tblptrh,c
  5341  0016D2  6AF8               	clrf	tblptru,c
  5342  0016D4  0E00               	movlw	low (__mediumconst shr (0+16))
  5343  0016D6  22F8               	addwfc	tblptru,f,c
  5344  0016D8  0009               	tblrd		*+
  5345  0016DA  CFF5 F005          	movff	tablat,___lldiv@divisor
  5346  0016DE  0009               	tblrd		*+
  5347  0016E0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5348  0016E4  0009               	tblrd		*+
  5349  0016E6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5350  0016EA  000A               	tblrd		*-
  5351  0016EC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5352  0016F0  EC57  F01B         	call	___lldiv	;wreg free
  5353  0016F4  C001  F074         	movff	?___lldiv,sprintf@vd
  5354  0016F8  C002  F075         	movff	?___lldiv+1,sprintf@vd+1
  5355  0016FC  C003  F076         	movff	?___lldiv+2,sprintf@vd+2
  5356  001700  C004  F077         	movff	?___lldiv+3,sprintf@vd+3
  5357                           
  5358                           ;doprnt.c: 1211: vd %= 10;
  5359  001704  C074  F00F         	movff	sprintf@vd,___llmod@dividend
  5360  001708  C075  F010         	movff	sprintf@vd+1,___llmod@dividend+1
  5361  00170C  C076  F011         	movff	sprintf@vd+2,___llmod@dividend+2
  5362  001710  C077  F012         	movff	sprintf@vd+3,___llmod@dividend+3
  5363  001714  0E0A               	movlw	10
  5364  001716  6E13               	movwf	___llmod@divisor,c
  5365  001718  0E00               	movlw	0
  5366  00171A  6E14               	movwf	___llmod@divisor+1,c
  5367  00171C  0E00               	movlw	0
  5368  00171E  6E15               	movwf	___llmod@divisor+2,c
  5369  001720  0E00               	movlw	0
  5370  001722  6E16               	movwf	___llmod@divisor+3,c
  5371  001724  ECDA  F01B         	call	___llmod	;wreg free
  5372  001728  C00F  F074         	movff	?___llmod,sprintf@vd
  5373  00172C  C010  F075         	movff	?___llmod+1,sprintf@vd+1
  5374  001730  C011  F076         	movff	?___llmod+2,sprintf@vd+2
  5375  001734  C012  F077         	movff	?___llmod+3,sprintf@vd+3
  5376                           
  5377                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  5378  001738  0100               	movlb	0	; () banked
  5379  00173A  0100               	movlb	0	; () banked
  5380  00173C  5174               	movf	sprintf@vd& (0+255),w,b
  5381  00173E  0F30               	addlw	48
  5382  001740  C060  FFD9         	movff	sprintf@sp,fsr2l
  5383  001744  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5384  001748                     L19:
  5385  001748  6EDF               	movwf	indf2,c
  5386                           
  5387                           ; BSR set to: 0
  5388  00174A  0100               	movlb	0	; () banked
  5389  00174C  0100               	movlb	0	; () banked
  5390  00174E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5391  001750  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5392  001752                     i2l5021:
  5393                           
  5394                           ; BSR set to: 0
  5395  001752  0100               	movlb	0	; () banked
  5396  001754  0100               	movlb	0	; () banked
  5397  001756  0791               	decf	sprintf@c& (0+255),f,b
  5398  001758  0100               	movlb	0	; () banked
  5399  00175A  2991               	incf	sprintf@c& (0+255),w,b
  5400  00175C  B4D8               	btfsc	status,2,c
  5401  00175E  D010               	goto	i2l5029
  5402  001760  D7A6               	goto	i2l5013
  5403  001762                     i2l5023:
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  5407  001762  C060  FFD9         	movff	sprintf@sp,fsr2l
  5408  001766  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5409  00176A  0E30               	movlw	48
  5410  00176C  6EDF               	movwf	indf2,c
  5411                           
  5412                           ; BSR set to: 0
  5413  00176E  0100               	movlb	0	; () banked
  5414  001770  0100               	movlb	0	; () banked
  5415  001772  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5416  001774  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 1218: exp--;
  5420  001776  0100               	movlb	0	; () banked
  5421  001778  0100               	movlb	0	; () banked
  5422  00177A  078A               	decf	sprintf@exp& (0+255),f,b
  5423  00177C  A0D8               	btfss	status,0,c
  5424  00177E  078B               	decf	(sprintf@exp+1)& (0+255),f,b
  5425  001780                     i2l5029:
  5426                           
  5427                           ; BSR set to: 0
  5428  001780  0100               	movlb	0	; () banked
  5429  001782  0100               	movlb	0	; () banked
  5430  001784  518B               	movf	(sprintf@exp+1)& (0+255),w,b
  5431  001786  0A80               	xorlw	128
  5432  001788  6EF3               	movwf	prodl,c
  5433  00178A  0E80               	movlw	128
  5434  00178C  5CF3               	subwf	prodl,w,c
  5435  00178E  0E01               	movlw	1
  5436  001790  B4D8               	btfsc	status,2,c
  5437  001792  5D8A               	subwf	sprintf@exp& (0+255),w,b
  5438  001794  B0D8               	btfsc	status,0,c
  5439  001796  D7E5               	goto	i2l5023
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1219: }
  5443                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5444                           
  5445                           ; BSR set to: 0
  5446  001798  0100               	movlb	0	; () banked
  5447  00179A  0100               	movlb	0	; () banked
  5448  00179C  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5449  00179E  0A80               	xorlw	128
  5450  0017A0  0F80               	addlw	-128
  5451  0017A2  0E09               	movlw	9
  5452  0017A4  B4D8               	btfsc	status,2,c
  5453  0017A6  5D8F               	subwf	sprintf@prec& (0+255),w,b
  5454  0017A8  A0D8               	btfss	status,0,c
  5455  0017AA  D009               	goto	i2l285
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5459  0017AC  0100               	movlb	0	; () banked
  5460  0017AE  6F67               	movwf	??_sprintf& (0+255),b
  5461  0017B0  0E08               	movlw	8
  5462  0017B2  0100               	movlb	0	; () banked
  5463  0017B4  0100               	movlb	0	; () banked
  5464  0017B6  6F91               	movwf	sprintf@c& (0+255),b
  5465  0017B8  0100               	movlb	0	; () banked
  5466  0017BA  5167               	movf	??_sprintf& (0+255),w,b
  5467  0017BC  D002               	goto	i2l5035
  5468  0017BE                     i2l285:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 1222: else
  5472                           ;doprnt.c: 1223: c = prec;
  5473  0017BE  C08F  F091         	movff	sprintf@prec,sprintf@c
  5474  0017C2                     i2l5035:
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;doprnt.c: 1224: prec -= c;
  5478  0017C2  0100               	movlb	0	; () banked
  5479  0017C4  0100               	movlb	0	; () banked
  5480  0017C6  5191               	movf	sprintf@c& (0+255),w,b
  5481  0017C8  0100               	movlb	0	; () banked
  5482  0017CA  0100               	movlb	0	; () banked
  5483  0017CC  5F8F               	subwf	sprintf@prec& (0+255),f,b
  5484  0017CE  0E00               	movlw	0
  5485  0017D0  0100               	movlb	0	; () banked
  5486  0017D2  BF91               	btfsc	sprintf@c& (0+255),7,b
  5487  0017D4  0EFF               	movlw	255
  5488  0017D6  0100               	movlb	0	; () banked
  5489  0017D8  0100               	movlb	0	; () banked
  5490  0017DA  5B90               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;doprnt.c: 1228: if(c)
  5494  0017DC  0100               	movlb	0	; () banked
  5495  0017DE  0100               	movlb	0	; () banked
  5496  0017E0  5191               	movf	sprintf@c& (0+255),w,b
  5497  0017E2  B4D8               	btfsc	status,2,c
  5498  0017E4  D00A               	goto	i2l5043
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  5502  0017E6  C060  FFD9         	movff	sprintf@sp,fsr2l
  5503  0017EA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5504  0017EE  0E2E               	movlw	46
  5505  0017F0  6EDF               	movwf	indf2,c
  5506                           
  5507                           ; BSR set to: 0
  5508  0017F2  0100               	movlb	0	; () banked
  5509  0017F4  0100               	movlb	0	; () banked
  5510  0017F6  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5511  0017F8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5512  0017FA                     i2l5043:
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5516  0017FA  0100               	movlb	0	; () banked
  5517  0017FC  0100               	movlb	0	; () banked
  5518  0017FE  5191               	movf	sprintf@c& (0+255),w,b
  5519  001800  ECA7  F00E         	call	_scale
  5520  001804  C026  F06D         	movff	?_scale,_sprintf$1456
  5521  001808  C027  F06E         	movff	?_scale+1,_sprintf$1456+1
  5522  00180C  C028  F06F         	movff	?_scale+2,_sprintf$1456+2
  5523                           
  5524                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  5525  001810  C08C  F01A         	movff	sprintf@fval,___ftmul@f2
  5526  001814  C08D  F01B         	movff	sprintf@fval+1,___ftmul@f2+1
  5527  001818  C08E  F01C         	movff	sprintf@fval+2,___ftmul@f2+2
  5528  00181C  C06D  F017         	movff	_sprintf$1456,___ftmul@f1
  5529  001820  C06E  F018         	movff	_sprintf$1456+1,___ftmul@f1+1
  5530  001824  C06F  F019         	movff	_sprintf$1456+2,___ftmul@f1+2
  5531  001828  ECA3  F017         	call	___ftmul	;wreg free
  5532  00182C  C017  F02D         	movff	?___ftmul,___fttol@f1
  5533  001830  C018  F02E         	movff	?___ftmul+1,___fttol@f1+1
  5534  001834  C019  F02F         	movff	?___ftmul+2,___fttol@f1+2
  5535  001838  EC1F  F018         	call	___fttol	;wreg free
  5536  00183C  C02D  F085         	movff	?___fttol,sprintf@_val
  5537  001840  C02E  F086         	movff	?___fttol+1,sprintf@_val+1
  5538  001844  C02F  F087         	movff	?___fttol+2,sprintf@_val+2
  5539  001848  C030  F088         	movff	?___fttol+3,sprintf@_val+3
  5540                           
  5541                           ;doprnt.c: 1237: while(c--) {
  5542  00184C  D07D               	goto	i2l5057
  5543  00184E                     i2l5047:
  5544                           
  5545                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  5546  00184E  C085  F001         	movff	sprintf@_val,___lldiv@dividend
  5547  001852  C086  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  5548  001856  C087  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  5549  00185A  C088  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  5550  00185E  0100               	movlb	0	; () banked
  5551  001860  0100               	movlb	0	; () banked
  5552  001862  5191               	movf	sprintf@c& (0+255),w,b
  5553  001864  0D04               	mullw	4
  5554  001866  0E01               	movlw	low _dpowers
  5555  001868  24F3               	addwf	prodl,w,c
  5556  00186A  6EF6               	movwf	tblptrl,c
  5557  00186C  0E0F               	movlw	high _dpowers
  5558  00186E  20F4               	addwfc	prodh,w,c
  5559  001870  6EF7               	movwf	tblptrh,c
  5560  001872  6AF8               	clrf	tblptru,c
  5561  001874  0E00               	movlw	low (__mediumconst shr (0+16))
  5562  001876  22F8               	addwfc	tblptru,f,c
  5563  001878  0009               	tblrd		*+
  5564  00187A  CFF5 F005          	movff	tablat,___lldiv@divisor
  5565  00187E  0009               	tblrd		*+
  5566  001880  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  5567  001884  0009               	tblrd		*+
  5568  001886  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  5569  00188A  000A               	tblrd		*-
  5570  00188C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  5571  001890  EC57  F01B         	call	___lldiv	;wreg free
  5572  001894  C001  F078         	movff	?___lldiv,sprintf@vd_835
  5573  001898  C002  F079         	movff	?___lldiv+1,sprintf@vd_835+1
  5574  00189C  C003  F07A         	movff	?___lldiv+2,sprintf@vd_835+2
  5575  0018A0  C004  F07B         	movff	?___lldiv+3,sprintf@vd_835+3
  5576                           
  5577                           ;doprnt.c: 1239: vd %= 10;
  5578  0018A4  C078  F00F         	movff	sprintf@vd_835,___llmod@dividend
  5579  0018A8  C079  F010         	movff	sprintf@vd_835+1,___llmod@dividend+1
  5580  0018AC  C07A  F011         	movff	sprintf@vd_835+2,___llmod@dividend+2
  5581  0018B0  C07B  F012         	movff	sprintf@vd_835+3,___llmod@dividend+3
  5582  0018B4  0E0A               	movlw	10
  5583  0018B6  6E13               	movwf	___llmod@divisor,c
  5584  0018B8  0E00               	movlw	0
  5585  0018BA  6E14               	movwf	___llmod@divisor+1,c
  5586  0018BC  0E00               	movlw	0
  5587  0018BE  6E15               	movwf	___llmod@divisor+2,c
  5588  0018C0  0E00               	movlw	0
  5589  0018C2  6E16               	movwf	___llmod@divisor+3,c
  5590  0018C4  ECDA  F01B         	call	___llmod	;wreg free
  5591  0018C8  C00F  F078         	movff	?___llmod,sprintf@vd_835
  5592  0018CC  C010  F079         	movff	?___llmod+1,sprintf@vd_835+1
  5593  0018D0  C011  F07A         	movff	?___llmod+2,sprintf@vd_835+2
  5594  0018D4  C012  F07B         	movff	?___llmod+3,sprintf@vd_835+3
  5595                           
  5596                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  5597  0018D8  0100               	movlb	0	; () banked
  5598  0018DA  0100               	movlb	0	; () banked
  5599  0018DC  5178               	movf	sprintf@vd_835& (0+255),w,b
  5600  0018DE  0F30               	addlw	48
  5601  0018E0  C060  FFD9         	movff	sprintf@sp,fsr2l
  5602  0018E4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5603  0018E8  6EDF               	movwf	indf2,c
  5604                           
  5605                           ; BSR set to: 0
  5606  0018EA  0100               	movlb	0	; () banked
  5607  0018EC  0100               	movlb	0	; () banked
  5608  0018EE  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5609  0018F0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  5613  0018F2  C085  F00F         	movff	sprintf@_val,___llmod@dividend
  5614  0018F6  C086  F010         	movff	sprintf@_val+1,___llmod@dividend+1
  5615  0018FA  C087  F011         	movff	sprintf@_val+2,___llmod@dividend+2
  5616  0018FE  C088  F012         	movff	sprintf@_val+3,___llmod@dividend+3
  5617  001902  0100               	movlb	0	; () banked
  5618  001904  0100               	movlb	0	; () banked
  5619  001906  5191               	movf	sprintf@c& (0+255),w,b
  5620  001908  0D04               	mullw	4
  5621  00190A  0E01               	movlw	low _dpowers
  5622  00190C  24F3               	addwf	prodl,w,c
  5623  00190E  6EF6               	movwf	tblptrl,c
  5624  001910  0E0F               	movlw	high _dpowers
  5625  001912  20F4               	addwfc	prodh,w,c
  5626  001914  6EF7               	movwf	tblptrh,c
  5627  001916  6AF8               	clrf	tblptru,c
  5628  001918  0E00               	movlw	low (__mediumconst shr (0+16))
  5629  00191A  22F8               	addwfc	tblptru,f,c
  5630  00191C  0009               	tblrd		*+
  5631  00191E  CFF5 F013          	movff	tablat,___llmod@divisor
  5632  001922  0009               	tblrd		*+
  5633  001924  CFF5 F014          	movff	tablat,___llmod@divisor+1
  5634  001928  0009               	tblrd		*+
  5635  00192A  CFF5 F015          	movff	tablat,___llmod@divisor+2
  5636  00192E  000A               	tblrd		*-
  5637  001930  CFF5 F016          	movff	tablat,___llmod@divisor+3
  5638  001934  ECDA  F01B         	call	___llmod	;wreg free
  5639  001938  C00F  F085         	movff	?___llmod,sprintf@_val
  5640  00193C  C010  F086         	movff	?___llmod+1,sprintf@_val+1
  5641  001940  C011  F087         	movff	?___llmod+2,sprintf@_val+2
  5642  001944  C012  F088         	movff	?___llmod+3,sprintf@_val+3
  5643  001948                     i2l5057:
  5644  001948  0100               	movlb	0	; () banked
  5645  00194A  0100               	movlb	0	; () banked
  5646  00194C  0791               	decf	sprintf@c& (0+255),f,b
  5647  00194E  0100               	movlb	0	; () banked
  5648  001950  2991               	incf	sprintf@c& (0+255),w,b
  5649  001952  B4D8               	btfsc	status,2,c
  5650  001954  D010               	goto	i2l5065
  5651  001956  D77B               	goto	i2l5047
  5652  001958                     i2l5059:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  5656  001958  C060  FFD9         	movff	sprintf@sp,fsr2l
  5657  00195C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5658  001960  0E30               	movlw	48
  5659  001962  6EDF               	movwf	indf2,c
  5660                           
  5661                           ; BSR set to: 0
  5662  001964  0100               	movlb	0	; () banked
  5663  001966  0100               	movlb	0	; () banked
  5664  001968  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5665  00196A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;doprnt.c: 1246: prec--;
  5669  00196C  0100               	movlb	0	; () banked
  5670  00196E  0100               	movlb	0	; () banked
  5671  001970  078F               	decf	sprintf@prec& (0+255),f,b
  5672  001972  A0D8               	btfss	status,0,c
  5673  001974  0790               	decf	(sprintf@prec+1)& (0+255),f,b
  5674  001976                     i2l5065:
  5675                           
  5676                           ; BSR set to: 0
  5677  001976  0100               	movlb	0	; () banked
  5678  001978  0100               	movlb	0	; () banked
  5679  00197A  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5680  00197C  118F               	iorwf	sprintf@prec& (0+255),w,b
  5681  00197E  B4D8               	btfsc	status,2,c
  5682  001980  D1C4               	goto	i2l5147
  5683  001982  D7EA               	goto	i2l5059
  5684  001984                     i2l5067:
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;doprnt.c: 1255: }
  5688                           ;doprnt.c: 1262: {
  5689                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5690  001984  C07C  FFD9         	movff	sprintf@ap,fsr2l
  5691  001988  C07D  FFDA         	movff	sprintf@ap+1,fsr2h
  5692  00198C  0100               	movlb	0	; () banked
  5693  00198E  CFDE F085          	movff	postinc2,sprintf@_val
  5694  001992  0100               	movlb	0	; () banked
  5695  001994  CFDD F086          	movff	postdec2,sprintf@_val+1
  5696  001998  0100               	movlb	0	; () banked
  5697  00199A  0E00               	movlw	0
  5698  00199C  0100               	movlb	0	; () banked
  5699  00199E  BF86               	btfsc	(sprintf@_val+1)& (0+255),7,b
  5700  0019A0  0EFF               	movlw	-1
  5701  0019A2  0100               	movlb	0	; () banked
  5702  0019A4  6F87               	movwf	(sprintf@_val+2)& (0+255),b
  5703  0019A6  0100               	movlb	0	; () banked
  5704  0019A8  6F88               	movwf	(sprintf@_val+3)& (0+255),b
  5705                           
  5706                           ; BSR set to: 0
  5707  0019AA  0E02               	movlw	2
  5708  0019AC  0100               	movlb	0	; () banked
  5709  0019AE  0100               	movlb	0	; () banked
  5710  0019B0  277C               	addwf	sprintf@ap& (0+255),f,b
  5711  0019B2  0E00               	movlw	0
  5712  0019B4  0100               	movlb	0	; () banked
  5713  0019B6  237D               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  5717  0019B8  0100               	movlb	0	; () banked
  5718  0019BA  0100               	movlb	0	; () banked
  5719  0019BC  5188               	movf	(sprintf@_val+3)& (0+255),w,b
  5720  0019BE  0A80               	xorlw	128
  5721  0019C0  0F80               	addlw	128
  5722  0019C2  E10B               	bnz	i2u366_45
  5723  0019C4  0E00               	movlw	0
  5724  0019C6  0100               	movlb	0	; () banked
  5725  0019C8  5D87               	subwf	(sprintf@_val+2)& (0+255),w,b
  5726  0019CA  E107               	bnz	i2u366_45
  5727  0019CC  0E00               	movlw	0
  5728  0019CE  0100               	movlb	0	; () banked
  5729  0019D0  5D86               	subwf	(sprintf@_val+1)& (0+255),w,b
  5730  0019D2  E103               	bnz	i2u366_45
  5731  0019D4  0E00               	movlw	0
  5732  0019D6  0100               	movlb	0	; () banked
  5733  0019D8  5D85               	subwf	sprintf@_val& (0+255),w,b
  5734  0019DA                     i2u366_45:
  5735  0019DA  B0D8               	btfsc	status,0,c
  5736  0019DC  D014               	goto	i2l5077
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;doprnt.c: 1271: flag |= 0x03;
  5740  0019DE  0E03               	movlw	3
  5741  0019E0  0100               	movlb	0	; () banked
  5742  0019E2  0100               	movlb	0	; () banked
  5743  0019E4  1381               	iorwf	sprintf@flag& (0+255),f,b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;doprnt.c: 1272: _val._val = -_val._val;
  5747  0019E6  0100               	movlb	0	; () banked
  5748  0019E8  0100               	movlb	0	; () banked
  5749  0019EA  1F88               	comf	(sprintf@_val+3)& (0+255),f,b
  5750  0019EC  0100               	movlb	0	; () banked
  5751  0019EE  1F87               	comf	(sprintf@_val+2)& (0+255),f,b
  5752  0019F0  0100               	movlb	0	; () banked
  5753  0019F2  1F86               	comf	(sprintf@_val+1)& (0+255),f,b
  5754  0019F4  0100               	movlb	0	; () banked
  5755  0019F6  6D85               	negf	sprintf@_val& (0+255),b
  5756  0019F8  0E00               	movlw	0
  5757  0019FA  0100               	movlb	0	; () banked
  5758  0019FC  2386               	addwfc	(sprintf@_val+1)& (0+255),f,b
  5759  0019FE  0100               	movlb	0	; () banked
  5760  001A00  2387               	addwfc	(sprintf@_val+2)& (0+255),f,b
  5761  001A02  0100               	movlb	0	; () banked
  5762  001A04  2388               	addwfc	(sprintf@_val+3)& (0+255),f,b
  5763  001A06                     i2l5077:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;doprnt.c: 1273: }
  5767                           ;doprnt.c: 1275: }
  5768                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  5769  001A06  0100               	movlb	0	; () banked
  5770  001A08  0100               	movlb	0	; () banked
  5771  001A0A  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5772  001A0C  118F               	iorwf	sprintf@prec& (0+255),w,b
  5773  001A0E  A4D8               	btfss	status,2,c
  5774  001A10  D00C               	goto	i2l5083
  5775                           
  5776                           ; BSR set to: 0
  5777  001A12  0100               	movlb	0	; () banked
  5778  001A14  0100               	movlb	0	; () banked
  5779  001A16  5188               	movf	(sprintf@_val+3)& (0+255),w,b
  5780  001A18  1185               	iorwf	sprintf@_val& (0+255),w,b
  5781  001A1A  1186               	iorwf	(sprintf@_val+1)& (0+255),w,b
  5782  001A1C  1187               	iorwf	(sprintf@_val+2)& (0+255),w,b
  5783  001A1E  A4D8               	btfss	status,2,c
  5784  001A20  D004               	goto	i2l5083
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;doprnt.c: 1300: prec++;
  5788  001A22  0100               	movlb	0	; () banked
  5789  001A24  0100               	movlb	0	; () banked
  5790  001A26  4B8F               	infsnz	sprintf@prec& (0+255),f,b
  5791  001A28  2B90               	incf	(sprintf@prec+1)& (0+255),f,b
  5792  001A2A                     i2l5083:
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5796  001A2A  0100               	movlb	0	; () banked
  5797  001A2C  6F67               	movwf	??_sprintf& (0+255),b
  5798  001A2E  0E01               	movlw	1
  5799  001A30  0100               	movlb	0	; () banked
  5800  001A32  0100               	movlb	0	; () banked
  5801  001A34  6F91               	movwf	sprintf@c& (0+255),b
  5802  001A36  0100               	movlb	0	; () banked
  5803  001A38  5167               	movf	??_sprintf& (0+255),w,b
  5804  001A3A                     
  5805                           ; BSR set to: 0
  5806  001A3A  0100               	movlb	0	; () banked
  5807  001A3C  0100               	movlb	0	; () banked
  5808  001A3E  5191               	movf	sprintf@c& (0+255),w,b
  5809  001A40  0A0A               	xorlw	10
  5810  001A42  B4D8               	btfsc	status,2,c
  5811  001A44  D024               	goto	i2l5097
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5815                           
  5816                           ; BSR set to: 0
  5817                           
  5818                           ; BSR set to: 0
  5819  001A46  0100               	movlb	0	; () banked
  5820  001A48  0100               	movlb	0	; () banked
  5821  001A4A  5191               	movf	sprintf@c& (0+255),w,b
  5822  001A4C  0D04               	mullw	4
  5823  001A4E  0E01               	movlw	low _dpowers
  5824  001A50  24F3               	addwf	prodl,w,c
  5825  001A52  6EF6               	movwf	tblptrl,c
  5826  001A54  0E0F               	movlw	high _dpowers
  5827  001A56  20F4               	addwfc	prodh,w,c
  5828  001A58  6EF7               	movwf	tblptrh,c
  5829  001A5A  6AF8               	clrf	tblptru,c
  5830  001A5C  0E00               	movlw	low (__mediumconst shr (0+16))
  5831  001A5E  22F8               	addwfc	tblptru,f,c
  5832  001A60  0009               	tblrd		*+
  5833  001A62  50F5               	movf	tablat,w,c
  5834  001A64  0100               	movlb	0	; () banked
  5835  001A66  0100               	movlb	0	; () banked
  5836  001A68  5D85               	subwf	sprintf@_val& (0+255),w,b
  5837  001A6A  0009               	tblrd		*+
  5838  001A6C  50F5               	movf	tablat,w,c
  5839  001A6E  0100               	movlb	0	; () banked
  5840  001A70  5986               	subwfb	(sprintf@_val+1)& (0+255),w,b
  5841  001A72  0009               	tblrd		*+
  5842  001A74  50F5               	movf	tablat,w,c
  5843  001A76  0100               	movlb	0	; () banked
  5844  001A78  5987               	subwfb	(sprintf@_val+2)& (0+255),w,b
  5845  001A7A  0009               	tblrd		*+
  5846  001A7C  50F5               	movf	tablat,w,c
  5847  001A7E  0100               	movlb	0	; () banked
  5848  001A80  5988               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5849  001A82  A0D8               	btfss	status,0,c
  5850  001A84  D004               	goto	i2l5097
  5851                           
  5852                           ; BSR set to: 0
  5853                           
  5854                           ; BSR set to: 0
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;doprnt.c: 1316: break;
  5858  001A86  0100               	movlb	0	; () banked
  5859  001A88  0100               	movlb	0	; () banked
  5860  001A8A  2B91               	incf	sprintf@c& (0+255),f,b
  5861  001A8C  D7D6               	goto	L20
  5862  001A8E                     i2l5097:
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;doprnt.c: 1348: if(c < prec)
  5866  001A8E  0E80               	movlw	128
  5867  001A90  0100               	movlb	0	; () banked
  5868  001A92  0100               	movlb	0	; () banked
  5869  001A94  BF91               	btfsc	sprintf@c& (0+255),7,b
  5870  001A96  0E7F               	movlw	127
  5871  001A98  6F67               	movwf	??_sprintf& (0+255),b
  5872  001A9A  0100               	movlb	0	; () banked
  5873  001A9C  0100               	movlb	0	; () banked
  5874  001A9E  518F               	movf	sprintf@prec& (0+255),w,b
  5875  001AA0  0100               	movlb	0	; () banked
  5876  001AA2  0100               	movlb	0	; () banked
  5877  001AA4  5D91               	subwf	sprintf@c& (0+255),w,b
  5878  001AA6  0100               	movlb	0	; () banked
  5879  001AA8  0100               	movlb	0	; () banked
  5880  001AAA  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5881  001AAC  0A80               	xorlw	128
  5882  001AAE  0100               	movlb	0	; () banked
  5883  001AB0  5967               	subwfb	??_sprintf& (0+255),w,b
  5884  001AB2  B0D8               	btfsc	status,0,c
  5885  001AB4  D003               	goto	i2l5101
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;doprnt.c: 1349: c = prec;
  5889  001AB6  C08F  F091         	movff	sprintf@prec,sprintf@c
  5890  001ABA  D020               	goto	i2l5105
  5891  001ABC                     i2l5101:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;doprnt.c: 1350: else if(prec < c)
  5895  001ABC  0100               	movlb	0	; () banked
  5896  001ABE  0100               	movlb	0	; () banked
  5897  001AC0  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5898  001AC2  0A80               	xorlw	128
  5899  001AC4  0100               	movlb	0	; () banked
  5900  001AC6  6F67               	movwf	??_sprintf& (0+255),b
  5901  001AC8  0100               	movlb	0	; () banked
  5902  001ACA  0100               	movlb	0	; () banked
  5903  001ACC  5191               	movf	sprintf@c& (0+255),w,b
  5904  001ACE  0100               	movlb	0	; () banked
  5905  001AD0  0100               	movlb	0	; () banked
  5906  001AD2  5D8F               	subwf	sprintf@prec& (0+255),w,b
  5907  001AD4  0E80               	movlw	128
  5908  001AD6  0100               	movlb	0	; () banked
  5909  001AD8  0100               	movlb	0	; () banked
  5910  001ADA  BF91               	btfsc	sprintf@c& (0+255),7,b
  5911  001ADC  0E7F               	movlw	127
  5912  001ADE  0100               	movlb	0	; () banked
  5913  001AE0  5967               	subwfb	??_sprintf& (0+255),w,b
  5914  001AE2  B0D8               	btfsc	status,0,c
  5915  001AE4  D00B               	goto	i2l5105
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;doprnt.c: 1351: prec = c;
  5919  001AE6  0100               	movlb	0	; () banked
  5920  001AE8  0100               	movlb	0	; () banked
  5921  001AEA  5191               	movf	sprintf@c& (0+255),w,b
  5922  001AEC  0100               	movlb	0	; () banked
  5923  001AEE  0100               	movlb	0	; () banked
  5924  001AF0  6F8F               	movwf	sprintf@prec& (0+255),b
  5925  001AF2  0100               	movlb	0	; () banked
  5926  001AF4  6B90               	clrf	(sprintf@prec+1)& (0+255),b
  5927  001AF6  0100               	movlb	0	; () banked
  5928  001AF8  BF8F               	btfsc	sprintf@prec& (0+255),7,b
  5929  001AFA  0790               	decf	(sprintf@prec+1)& (0+255),f,b
  5930  001AFC                     i2l5105:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;doprnt.c: 1354: if(width && flag & 0x03)
  5934  001AFC  0100               	movlb	0	; () banked
  5935  001AFE  0100               	movlb	0	; () banked
  5936  001B00  5184               	movf	(sprintf@width+1)& (0+255),w,b
  5937  001B02  1183               	iorwf	sprintf@width& (0+255),w,b
  5938  001B04  B4D8               	btfsc	status,2,c
  5939  001B06  D016               	goto	i2l5111
  5940                           
  5941                           ; BSR set to: 0
  5942  001B08  0E03               	movlw	3
  5943  001B0A  0100               	movlb	0	; () banked
  5944  001B0C  0100               	movlb	0	; () banked
  5945  001B0E  1581               	andwf	sprintf@flag& (0+255),w,b
  5946  001B10  0100               	movlb	0	; () banked
  5947  001B12  6F67               	movwf	??_sprintf& (0+255),b
  5948  001B14  0E00               	movlw	0
  5949  001B16  0100               	movlb	0	; () banked
  5950  001B18  0100               	movlb	0	; () banked
  5951  001B1A  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  5952  001B1C  0100               	movlb	0	; () banked
  5953  001B1E  6F68               	movwf	(??_sprintf+1)& (0+255),b
  5954  001B20  0100               	movlb	0	; () banked
  5955  001B22  5168               	movf	(??_sprintf+1)& (0+255),w,b
  5956  001B24  1167               	iorwf	??_sprintf& (0+255),w,b
  5957  001B26  B4D8               	btfsc	status,2,c
  5958  001B28  D005               	goto	i2l5111
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;doprnt.c: 1355: width--;
  5962  001B2A  0100               	movlb	0	; () banked
  5963  001B2C  0100               	movlb	0	; () banked
  5964  001B2E  0783               	decf	sprintf@width& (0+255),f,b
  5965  001B30  A0D8               	btfss	status,0,c
  5966  001B32  0784               	decf	(sprintf@width+1)& (0+255),f,b
  5967  001B34                     i2l5111:
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;doprnt.c: 1357: if(flag & 0x4000) {
  5971  001B34  0100               	movlb	0	; () banked
  5972  001B36  0100               	movlb	0	; () banked
  5973  001B38  AD82               	btfss	(sprintf@flag+1)& (0+255),6,b
  5974  001B3A  D028               	goto	i2l5119
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;doprnt.c: 1358: if(width > prec)
  5978  001B3C  0100               	movlb	0	; () banked
  5979  001B3E  0100               	movlb	0	; () banked
  5980  001B40  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  5981  001B42  0A80               	xorlw	128
  5982  001B44  0100               	movlb	0	; () banked
  5983  001B46  6F67               	movwf	??_sprintf& (0+255),b
  5984  001B48  0100               	movlb	0	; () banked
  5985  001B4A  0100               	movlb	0	; () banked
  5986  001B4C  5183               	movf	sprintf@width& (0+255),w,b
  5987  001B4E  0100               	movlb	0	; () banked
  5988  001B50  0100               	movlb	0	; () banked
  5989  001B52  5D8F               	subwf	sprintf@prec& (0+255),w,b
  5990  001B54  0100               	movlb	0	; () banked
  5991  001B56  0100               	movlb	0	; () banked
  5992  001B58  5184               	movf	(sprintf@width+1)& (0+255),w,b
  5993  001B5A  0A80               	xorlw	128
  5994  001B5C  0100               	movlb	0	; () banked
  5995  001B5E  5967               	subwfb	??_sprintf& (0+255),w,b
  5996  001B60  B0D8               	btfsc	status,0,c
  5997  001B62  D00D               	goto	i2l5117
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;doprnt.c: 1359: width -= prec;
  6001  001B64  0100               	movlb	0	; () banked
  6002  001B66  0100               	movlb	0	; () banked
  6003  001B68  518F               	movf	sprintf@prec& (0+255),w,b
  6004  001B6A  0100               	movlb	0	; () banked
  6005  001B6C  0100               	movlb	0	; () banked
  6006  001B6E  5F83               	subwf	sprintf@width& (0+255),f,b
  6007  001B70  0100               	movlb	0	; () banked
  6008  001B72  0100               	movlb	0	; () banked
  6009  001B74  5190               	movf	(sprintf@prec+1)& (0+255),w,b
  6010  001B76  0100               	movlb	0	; () banked
  6011  001B78  0100               	movlb	0	; () banked
  6012  001B7A  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  6013  001B7C  D007               	goto	i2l5119
  6014  001B7E                     i2l5117:
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;doprnt.c: 1360: else
  6018                           ;doprnt.c: 1361: width = 0;
  6019  001B7E  0E00               	movlw	0
  6020  001B80  0100               	movlb	0	; () banked
  6021  001B82  0100               	movlb	0	; () banked
  6022  001B84  6F84               	movwf	(sprintf@width+1)& (0+255),b
  6023  001B86  0E00               	movlw	0
  6024  001B88  0100               	movlb	0	; () banked
  6025  001B8A  6F83               	movwf	sprintf@width& (0+255),b
  6026  001B8C                     i2l5119:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;doprnt.c: 1362: }
  6030                           ;doprnt.c: 1390: if(width > c)
  6031  001B8C  0E80               	movlw	128
  6032  001B8E  0100               	movlb	0	; () banked
  6033  001B90  0100               	movlb	0	; () banked
  6034  001B92  BF91               	btfsc	sprintf@c& (0+255),7,b
  6035  001B94  0E7F               	movlw	127
  6036  001B96  6F67               	movwf	??_sprintf& (0+255),b
  6037  001B98  0100               	movlb	0	; () banked
  6038  001B9A  0100               	movlb	0	; () banked
  6039  001B9C  5183               	movf	sprintf@width& (0+255),w,b
  6040  001B9E  0100               	movlb	0	; () banked
  6041  001BA0  0100               	movlb	0	; () banked
  6042  001BA2  5D91               	subwf	sprintf@c& (0+255),w,b
  6043  001BA4  0100               	movlb	0	; () banked
  6044  001BA6  0100               	movlb	0	; () banked
  6045  001BA8  5184               	movf	(sprintf@width+1)& (0+255),w,b
  6046  001BAA  0A80               	xorlw	128
  6047  001BAC  0100               	movlb	0	; () banked
  6048  001BAE  5967               	subwfb	??_sprintf& (0+255),w,b
  6049  001BB0  B0D8               	btfsc	status,0,c
  6050  001BB2  D00E               	goto	i2l5123
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;doprnt.c: 1391: width -= c;
  6054  001BB4  0100               	movlb	0	; () banked
  6055  001BB6  0100               	movlb	0	; () banked
  6056  001BB8  5191               	movf	sprintf@c& (0+255),w,b
  6057  001BBA  0100               	movlb	0	; () banked
  6058  001BBC  0100               	movlb	0	; () banked
  6059  001BBE  5F83               	subwf	sprintf@width& (0+255),f,b
  6060  001BC0  0E00               	movlw	0
  6061  001BC2  0100               	movlb	0	; () banked
  6062  001BC4  BF91               	btfsc	sprintf@c& (0+255),7,b
  6063  001BC6  0EFF               	movlw	255
  6064  001BC8  0100               	movlb	0	; () banked
  6065  001BCA  0100               	movlb	0	; () banked
  6066  001BCC  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  6067  001BCE  D007               	goto	i2l5125
  6068  001BD0                     i2l5123:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;doprnt.c: 1392: else
  6072                           ;doprnt.c: 1393: width = 0;
  6073  001BD0  0E00               	movlw	0
  6074  001BD2  0100               	movlb	0	; () banked
  6075  001BD4  0100               	movlb	0	; () banked
  6076  001BD6  6F84               	movwf	(sprintf@width+1)& (0+255),b
  6077  001BD8  0E00               	movlw	0
  6078  001BDA  0100               	movlb	0	; () banked
  6079  001BDC  6F83               	movwf	sprintf@width& (0+255),b
  6080  001BDE                     i2l5125:
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;doprnt.c: 1431: {
  6084                           ;doprnt.c: 1433: if(width
  6085                           ;doprnt.c: 1437: )
  6086  001BDE  0100               	movlb	0	; () banked
  6087  001BE0  0100               	movlb	0	; () banked
  6088  001BE2  5184               	movf	(sprintf@width+1)& (0+255),w,b
  6089  001BE4  1183               	iorwf	sprintf@width& (0+255),w,b
  6090  001BE6  B4D8               	btfsc	status,2,c
  6091  001BE8  D014               	goto	i2l5133
  6092  001BEA                     i2l5127:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  6096  001BEA  C060  FFD9         	movff	sprintf@sp,fsr2l
  6097  001BEE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6098  001BF2  0E20               	movlw	32
  6099  001BF4  6EDF               	movwf	indf2,c
  6100                           
  6101                           ; BSR set to: 0
  6102  001BF6  0100               	movlb	0	; () banked
  6103  001BF8  0100               	movlb	0	; () banked
  6104  001BFA  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6105  001BFC  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;doprnt.c: 1440: while(--width);
  6109  001BFE  0100               	movlb	0	; () banked
  6110  001C00  0100               	movlb	0	; () banked
  6111  001C02  0783               	decf	sprintf@width& (0+255),f,b
  6112  001C04  A0D8               	btfss	status,0,c
  6113  001C06  0784               	decf	(sprintf@width+1)& (0+255),f,b
  6114  001C08  0100               	movlb	0	; () banked
  6115  001C0A  5184               	movf	(sprintf@width+1)& (0+255),w,b
  6116  001C0C  1183               	iorwf	sprintf@width& (0+255),w,b
  6117  001C0E  A4D8               	btfss	status,2,c
  6118  001C10  D7EC               	goto	i2l5127
  6119  001C12                     i2l5133:
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;doprnt.c: 1447: if(flag & 0x03)
  6123  001C12  0E03               	movlw	3
  6124  001C14  0100               	movlb	0	; () banked
  6125  001C16  0100               	movlb	0	; () banked
  6126  001C18  1581               	andwf	sprintf@flag& (0+255),w,b
  6127  001C1A  0100               	movlb	0	; () banked
  6128  001C1C  6F67               	movwf	??_sprintf& (0+255),b
  6129  001C1E  0E00               	movlw	0
  6130  001C20  0100               	movlb	0	; () banked
  6131  001C22  0100               	movlb	0	; () banked
  6132  001C24  1582               	andwf	(sprintf@flag+1)& (0+255),w,b
  6133  001C26  0100               	movlb	0	; () banked
  6134  001C28  6F68               	movwf	(??_sprintf+1)& (0+255),b
  6135  001C2A  0100               	movlb	0	; () banked
  6136  001C2C  5168               	movf	(??_sprintf+1)& (0+255),w,b
  6137  001C2E  1167               	iorwf	??_sprintf& (0+255),w,b
  6138  001C30  B4D8               	btfsc	status,2,c
  6139  001C32  D060               	goto	i2l5145
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  6143  001C34  C060  FFD9         	movff	sprintf@sp,fsr2l
  6144  001C38  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6145  001C3C  0E2D               	movlw	45
  6146  001C3E  6EDF               	movwf	indf2,c
  6147  001C40  D055               	goto	L21
  6148  001C42                     i2l5139:
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;doprnt.c: 1487: {
  6152                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  6153  001C42  0100               	movlb	0	; () banked
  6154  001C44  C08F  F067         	movff	sprintf@prec,??_sprintf
  6155  001C48  0100               	movlb	0	; () banked
  6156  001C4A  C090  F068         	movff	sprintf@prec+1,??_sprintf+1
  6157  001C4E  0100               	movlb	0	; () banked
  6158  001C50  90D8               	bcf	status,0,c
  6159  001C52  3767               	rlcf	??_sprintf& (0+255),f,b
  6160  001C54  3768               	rlcf	(??_sprintf+1)& (0+255),f,b
  6161  001C56  0100               	movlb	0	; () banked
  6162  001C58  90D8               	bcf	status,0,c
  6163  001C5A  3767               	rlcf	??_sprintf& (0+255),f,b
  6164  001C5C  3768               	rlcf	(??_sprintf+1)& (0+255),f,b
  6165  001C5E  0E01               	movlw	low _dpowers
  6166  001C60  0100               	movlb	0	; () banked
  6167  001C62  2567               	addwf	??_sprintf& (0+255),w,b
  6168  001C64  6EF6               	movwf	tblptrl,c
  6169  001C66  0E0F               	movlw	high _dpowers
  6170  001C68  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  6171  001C6A  6EF7               	movwf	tblptrh,c
  6172  001C6C  6AF8               	clrf	tblptru,c
  6173  001C6E  0E00               	movlw	low (__mediumconst shr (0+16))
  6174  001C70  22F8               	addwfc	tblptru,f,c
  6175  001C72  0009               	tblrd		*+
  6176  001C74  CFF5 F005          	movff	tablat,___lldiv@divisor
  6177  001C78  0009               	tblrd		*+
  6178  001C7A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6179  001C7E  0009               	tblrd		*+
  6180  001C80  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6181  001C84  000A               	tblrd		*-
  6182  001C86  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6183  001C8A  C085  F001         	movff	sprintf@_val,___lldiv@dividend
  6184  001C8E  C086  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  6185  001C92  C087  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  6186  001C96  C088  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  6187  001C9A  EC57  F01B         	call	___lldiv	;wreg free
  6188  001C9E  C001  F00F         	movff	?___lldiv,___llmod@dividend
  6189  001CA2  C002  F010         	movff	?___lldiv+1,___llmod@dividend+1
  6190  001CA6  C003  F011         	movff	?___lldiv+2,___llmod@dividend+2
  6191  001CAA  C004  F012         	movff	?___lldiv+3,___llmod@dividend+3
  6192  001CAE  0E0A               	movlw	10
  6193  001CB0  6E13               	movwf	___llmod@divisor,c
  6194  001CB2  0E00               	movlw	0
  6195  001CB4  6E14               	movwf	___llmod@divisor+1,c
  6196  001CB6  0E00               	movlw	0
  6197  001CB8  6E15               	movwf	___llmod@divisor+2,c
  6198  001CBA  0E00               	movlw	0
  6199  001CBC  6E16               	movwf	___llmod@divisor+3,c
  6200  001CBE  ECDA  F01B         	call	___llmod	;wreg free
  6201  001CC2  C00F  F069         	movff	?___llmod,??_sprintf+2
  6202  001CC6  C010  F06A         	movff	?___llmod+1,??_sprintf+3
  6203  001CCA  C011  F06B         	movff	?___llmod+2,??_sprintf+4
  6204  001CCE  C012  F06C         	movff	?___llmod+3,??_sprintf+5
  6205  001CD2  0100               	movlb	0	; () banked
  6206  001CD4  5169               	movf	(??_sprintf+2)& (0+255),w,b
  6207  001CD6  0F30               	addlw	48
  6208  001CD8  0100               	movlb	0	; () banked
  6209  001CDA  0100               	movlb	0	; () banked
  6210  001CDC  6F91               	movwf	sprintf@c& (0+255),b
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;doprnt.c: 1532: }
  6214                           ;doprnt.c: 1533: ((*sp++ = (c)));
  6215  001CDE  C060  FFD9         	movff	sprintf@sp,fsr2l
  6216  001CE2  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6217  001CE6  0100               	movlb	0	; () banked
  6218  001CE8  C091  FFDF         	movff	sprintf@c,indf2
  6219  001CEC                     L21:
  6220                           
  6221                           ; BSR set to: 0
  6222  001CEC  0100               	movlb	0	; () banked
  6223  001CEE  0100               	movlb	0	; () banked
  6224  001CF0  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6225  001CF2  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6226  001CF4                     i2l5145:
  6227                           
  6228                           ; BSR set to: 0
  6229  001CF4  0100               	movlb	0	; () banked
  6230  001CF6  0100               	movlb	0	; () banked
  6231  001CF8  078F               	decf	sprintf@prec& (0+255),f,b
  6232  001CFA  A0D8               	btfss	status,0,c
  6233  001CFC  0790               	decf	(sprintf@prec+1)& (0+255),f,b
  6234  001CFE  0100               	movlb	0	; () banked
  6235  001D00  298F               	incf	sprintf@prec& (0+255),w,b
  6236  001D02  B4D8               	btfsc	status,2,c
  6237  001D04  2990               	incf	(sprintf@prec+1)& (0+255),w,b
  6238  001D06  A4D8               	btfss	status,2,c
  6239  001D08  D79C               	goto	i2l5139
  6240  001D0A                     i2l5147:
  6241                           
  6242                           ; BSR set to: 0
  6243  001D0A  0100               	movlb	0	; () banked
  6244  001D0C  0100               	movlb	0	; () banked
  6245  001D0E  5162               	movf	sprintf@f& (0+255),w,b
  6246  001D10  0100               	movlb	0	; () banked
  6247  001D12  6F67               	movwf	??_sprintf& (0+255),b
  6248  001D14  0100               	movlb	0	; () banked
  6249  001D16  0100               	movlb	0	; () banked
  6250  001D18  5163               	movf	(sprintf@f+1)& (0+255),w,b
  6251  001D1A  0100               	movlb	0	; () banked
  6252  001D1C  6F68               	movwf	(??_sprintf+1)& (0+255),b
  6253  001D1E  0100               	movlb	0	; () banked
  6254  001D20  4B62               	infsnz	sprintf@f& (0+255),f,b
  6255  001D22  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  6256  001D24  C067  FFF6         	movff	??_sprintf,tblptrl
  6257  001D28  C068  FFF7         	movff	??_sprintf+1,tblptrh
  6258  001D2C  0E00               	movlw	low (__mediumconst shr (0+16))
  6259  001D2E  6EF8               	movwf	tblptru,c
  6260  001D30  0008               	tblrd		*
  6261  001D32  0100               	movlb	0	; () banked
  6262  001D34  CFF5 F091          	movff	tablat,sprintf@c
  6263  001D38  0100               	movlb	0	; () banked
  6264  001D3A  6791               	tstfsz	sprintf@c& (0+255),b
  6265  001D3C  EFE9  F007         	goto	i2l4857
  6266  001D40                     i2l5149:
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;doprnt.c: 1547: *sp = 0;
  6270  001D40  C060  FFD9         	movff	sprintf@sp,fsr2l
  6271  001D44  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6272  001D48  0E00               	movlw	0
  6273  001D4A  6EDF               	movwf	indf2,c
  6274  001D4C  0012               	return	
  6275  001D4E                     __end_of_sprintf:
  6276                           	opt stack 0
  6277                           pclatu	equ	0xFFB
  6278                           pclath	equ	0xFFA
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           indf0	equ	0xFEF
  6287                           fsr0h	equ	0xFEA
  6288                           fsr0l	equ	0xFE9
  6289                           wreg	equ	0xFE8
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function _scale *****************
  6300 ;; Defined at:
  6301 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\doprnt.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  scl             1    wreg     char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  scl             1   43[COMRAM] char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  3   37[COMRAM] char 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6315 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6316 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6318 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6319 ;;Total ram usage:        7 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    2
  6322 ;; This function calls:
  6323 ;;		___awdiv
  6324 ;;		___awmod
  6325 ;;		___ftmul
  6326 ;;		___wmul
  6327 ;; This function is called by:
  6328 ;;		_sprintf
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           	psect	text27
  6333  001D4E                     __ptext27:
  6334                           	opt stack 0
  6335  001D4E                     _scale:
  6336                           	opt stack 18
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;incstack = 0
  6340                           ;scale@scl stored from wreg
  6341  001D4E  CFE8 F02C          	movff	wreg,scale@scl
  6342                           
  6343                           ;doprnt.c: 428: if(scl < 0) {
  6344  001D52  AE2C               	btfss	scale@scl,7,c
  6345  001D54  D113               	goto	i2l4477
  6346                           
  6347                           ;doprnt.c: 429: scl = -scl;
  6348  001D56  6C2C               	negf	scale@scl,c
  6349                           
  6350                           ;doprnt.c: 430: if(scl>=110)
  6351  001D58  502C               	movf	scale@scl,w,c
  6352  001D5A  0A80               	xorlw	128
  6353  001D5C  0F12               	addlw	-238
  6354  001D5E  A0D8               	btfss	status,0,c
  6355  001D60  D09A               	goto	i2l4467
  6356                           
  6357                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6358  001D62  0E00               	movlw	0
  6359  001D64  6E14               	movwf	___wmul@multiplicand+1,c
  6360  001D66  0E03               	movlw	3
  6361  001D68  6E13               	movwf	___wmul@multiplicand,c
  6362  001D6A  0E00               	movlw	0
  6363  001D6C  6E0B               	movwf	___awdiv@divisor+1,c
  6364  001D6E  0E0A               	movlw	10
  6365  001D70  6E0A               	movwf	___awdiv@divisor,c
  6366  001D72  0E00               	movlw	0
  6367  001D74  6E04               	movwf	___awmod@divisor+1,c
  6368  001D76  0E64               	movlw	100
  6369  001D78  6E03               	movwf	___awmod@divisor,c
  6370  001D7A  502C               	movf	scale@scl,w,c
  6371  001D7C  6E01               	movwf	___awmod@dividend,c
  6372  001D7E  6A02               	clrf	___awmod@dividend+1,c
  6373  001D80  BE01               	btfsc	___awmod@dividend,7,c
  6374  001D82  0602               	decf	___awmod@dividend+1,f,c
  6375  001D84  EC75  F01A         	call	___awmod	;wreg free
  6376  001D88  C001  F008         	movff	?___awmod,___awdiv@dividend
  6377  001D8C  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  6378  001D90  EC72  F019         	call	___awdiv	;wreg free
  6379  001D94  0E09               	movlw	9
  6380  001D96  2408               	addwf	?___awdiv,w,c
  6381  001D98  6E11               	movwf	___wmul@multiplier,c
  6382  001D9A  0E00               	movlw	0
  6383  001D9C  2009               	addwfc	?___awdiv+1,w,c
  6384  001D9E  6E12               	movwf	___wmul@multiplier+1,c
  6385  001DA0  EC5F  F01E         	call	___wmul	;wreg free
  6386  001DA4  0E29               	movlw	low __npowers_
  6387  001DA6  2411               	addwf	?___wmul,w,c
  6388  001DA8  6EF6               	movwf	tblptrl,c
  6389  001DAA  0E0F               	movlw	high __npowers_
  6390  001DAC  2012               	addwfc	?___wmul+1,w,c
  6391  001DAE  6EF7               	movwf	tblptrh,c
  6392  001DB0  6AF8               	clrf	tblptru,c
  6393  001DB2  0E00               	movlw	low (__mediumconst shr (0+16))
  6394  001DB4  22F8               	addwfc	tblptru,f,c
  6395  001DB6  0009               	tblrd		*+
  6396  001DB8  CFF5 F01A          	movff	tablat,___ftmul@f2
  6397  001DBC  0009               	tblrd		*+
  6398  001DBE  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  6399  001DC2  000A               	tblrd		*-
  6400  001DC4  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  6401  001DC8  0E00               	movlw	0
  6402  001DCA  6E14               	movwf	___wmul@multiplicand+1,c
  6403  001DCC  0E03               	movlw	3
  6404  001DCE  6E13               	movwf	___wmul@multiplicand,c
  6405  001DD0  0E00               	movlw	0
  6406  001DD2  6E0B               	movwf	___awdiv@divisor+1,c
  6407  001DD4  0E64               	movlw	100
  6408  001DD6  6E0A               	movwf	___awdiv@divisor,c
  6409  001DD8  502C               	movf	scale@scl,w,c
  6410  001DDA  6E08               	movwf	___awdiv@dividend,c
  6411  001DDC  6A09               	clrf	___awdiv@dividend+1,c
  6412  001DDE  BE08               	btfsc	___awdiv@dividend,7,c
  6413  001DE0  0609               	decf	___awdiv@dividend+1,f,c
  6414  001DE2  EC72  F019         	call	___awdiv	;wreg free
  6415  001DE6  0E12               	movlw	18
  6416  001DE8  2408               	addwf	?___awdiv,w,c
  6417  001DEA  6E11               	movwf	___wmul@multiplier,c
  6418  001DEC  0E00               	movlw	0
  6419  001DEE  2009               	addwfc	?___awdiv+1,w,c
  6420  001DF0  6E12               	movwf	___wmul@multiplier+1,c
  6421  001DF2  EC5F  F01E         	call	___wmul	;wreg free
  6422  001DF6  0E29               	movlw	low __npowers_
  6423  001DF8  2411               	addwf	?___wmul,w,c
  6424  001DFA  6EF6               	movwf	tblptrl,c
  6425  001DFC  0E0F               	movlw	high __npowers_
  6426  001DFE  2012               	addwfc	?___wmul+1,w,c
  6427  001E00  6EF7               	movwf	tblptrh,c
  6428  001E02  6AF8               	clrf	tblptru,c
  6429  001E04  0E00               	movlw	low (__mediumconst shr (0+16))
  6430  001E06  22F8               	addwfc	tblptru,f,c
  6431  001E08  0009               	tblrd		*+
  6432  001E0A  CFF5 F017          	movff	tablat,___ftmul@f1
  6433  001E0E  0009               	tblrd		*+
  6434  001E10  CFF5 F018          	movff	tablat,___ftmul@f1+1
  6435  001E14  000A               	tblrd		*-
  6436  001E16  CFF5 F019          	movff	tablat,___ftmul@f1+2
  6437  001E1A  ECA3  F017         	call	___ftmul	;wreg free
  6438  001E1E  C017  F029         	movff	?___ftmul,_scale$1455
  6439  001E22  C018  F02A         	movff	?___ftmul+1,_scale$1455+1
  6440  001E26  C019  F02B         	movff	?___ftmul+2,_scale$1455+2
  6441                           
  6442                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6443  001E2A  C029  F017         	movff	_scale$1455,___ftmul@f1
  6444  001E2E  C02A  F018         	movff	_scale$1455+1,___ftmul@f1+1
  6445  001E32  C02B  F019         	movff	_scale$1455+2,___ftmul@f1+2
  6446  001E36  0E00               	movlw	0
  6447  001E38  6E14               	movwf	___wmul@multiplicand+1,c
  6448  001E3A  0E03               	movlw	3
  6449  001E3C  6E13               	movwf	___wmul@multiplicand,c
  6450  001E3E  0E00               	movlw	0
  6451  001E40  6E04               	movwf	___awmod@divisor+1,c
  6452  001E42  0E0A               	movlw	10
  6453  001E44  6E03               	movwf	___awmod@divisor,c
  6454  001E46  502C               	movf	scale@scl,w,c
  6455  001E48  6E01               	movwf	___awmod@dividend,c
  6456  001E4A  6A02               	clrf	___awmod@dividend+1,c
  6457  001E4C  BE01               	btfsc	___awmod@dividend,7,c
  6458  001E4E  0602               	decf	___awmod@dividend+1,f,c
  6459  001E50  EC75  F01A         	call	___awmod	;wreg free
  6460  001E54  C001  F011         	movff	?___awmod,___wmul@multiplier
  6461  001E58  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  6462  001E5C  EC5F  F01E         	call	___wmul	;wreg free
  6463  001E60  0E29               	movlw	low __npowers_
  6464  001E62  2411               	addwf	?___wmul,w,c
  6465  001E64  6EF6               	movwf	tblptrl,c
  6466  001E66  0E0F               	movlw	high __npowers_
  6467  001E68  2012               	addwfc	?___wmul+1,w,c
  6468  001E6A  6EF7               	movwf	tblptrh,c
  6469  001E6C  6AF8               	clrf	tblptru,c
  6470  001E6E  0E00               	movlw	low (__mediumconst shr (0+16))
  6471  001E70  22F8               	addwfc	tblptru,f,c
  6472  001E72  0009               	tblrd		*+
  6473  001E74  CFF5 F01A          	movff	tablat,___ftmul@f2
  6474  001E78  0009               	tblrd		*+
  6475  001E7A  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  6476  001E7E  000A               	tblrd		*-
  6477  001E80  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  6478  001E84  ECA3  F017         	call	___ftmul	;wreg free
  6479  001E88  C017  F026         	movff	?___ftmul,?_scale
  6480  001E8C  C018  F027         	movff	?___ftmul+1,?_scale+1
  6481  001E90  C019  F028         	movff	?___ftmul+2,?_scale+2
  6482  001E94  0012               	return	
  6483  001E96                     i2l4467:
  6484                           
  6485                           ;doprnt.c: 432: else if(scl > 10)
  6486  001E96  502C               	movf	scale@scl,w,c
  6487  001E98  0A80               	xorlw	128
  6488  001E9A  0F75               	addlw	-139
  6489  001E9C  A0D8               	btfss	status,0,c
  6490  001E9E  D059               	goto	i2l4473
  6491                           
  6492                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6493  001EA0  0E00               	movlw	0
  6494  001EA2  6E14               	movwf	___wmul@multiplicand+1,c
  6495  001EA4  0E03               	movlw	3
  6496  001EA6  6E13               	movwf	___wmul@multiplicand,c
  6497  001EA8  0E00               	movlw	0
  6498  001EAA  6E0B               	movwf	___awdiv@divisor+1,c
  6499  001EAC  0E0A               	movlw	10
  6500  001EAE  6E0A               	movwf	___awdiv@divisor,c
  6501  001EB0  502C               	movf	scale@scl,w,c
  6502  001EB2  6E08               	movwf	___awdiv@dividend,c
  6503  001EB4  6A09               	clrf	___awdiv@dividend+1,c
  6504  001EB6  BE08               	btfsc	___awdiv@dividend,7,c
  6505  001EB8  0609               	decf	___awdiv@dividend+1,f,c
  6506  001EBA  EC72  F019         	call	___awdiv	;wreg free
  6507  001EBE  0E09               	movlw	9
  6508  001EC0  2408               	addwf	?___awdiv,w,c
  6509  001EC2  6E11               	movwf	___wmul@multiplier,c
  6510  001EC4  0E00               	movlw	0
  6511  001EC6  2009               	addwfc	?___awdiv+1,w,c
  6512  001EC8  6E12               	movwf	___wmul@multiplier+1,c
  6513  001ECA  EC5F  F01E         	call	___wmul	;wreg free
  6514  001ECE  0E29               	movlw	low __npowers_
  6515  001ED0  2411               	addwf	?___wmul,w,c
  6516  001ED2  6EF6               	movwf	tblptrl,c
  6517  001ED4  0E0F               	movlw	high __npowers_
  6518  001ED6  2012               	addwfc	?___wmul+1,w,c
  6519  001ED8  6EF7               	movwf	tblptrh,c
  6520  001EDA  6AF8               	clrf	tblptru,c
  6521  001EDC  0E00               	movlw	low (__mediumconst shr (0+16))
  6522  001EDE  22F8               	addwfc	tblptru,f,c
  6523  001EE0  0009               	tblrd		*+
  6524  001EE2  CFF5 F017          	movff	tablat,___ftmul@f1
  6525  001EE6  0009               	tblrd		*+
  6526  001EE8  CFF5 F018          	movff	tablat,___ftmul@f1+1
  6527  001EEC  000A               	tblrd		*-
  6528  001EEE  CFF5 F019          	movff	tablat,___ftmul@f1+2
  6529  001EF2  0E00               	movlw	0
  6530  001EF4  6E14               	movwf	___wmul@multiplicand+1,c
  6531  001EF6  0E03               	movlw	3
  6532  001EF8  6E13               	movwf	___wmul@multiplicand,c
  6533  001EFA  0E00               	movlw	0
  6534  001EFC  6E04               	movwf	___awmod@divisor+1,c
  6535  001EFE  0E0A               	movlw	10
  6536  001F00  6E03               	movwf	___awmod@divisor,c
  6537  001F02  502C               	movf	scale@scl,w,c
  6538  001F04  6E01               	movwf	___awmod@dividend,c
  6539  001F06  6A02               	clrf	___awmod@dividend+1,c
  6540  001F08  BE01               	btfsc	___awmod@dividend,7,c
  6541  001F0A  0602               	decf	___awmod@dividend+1,f,c
  6542  001F0C  EC75  F01A         	call	___awmod	;wreg free
  6543  001F10  C001  F011         	movff	?___awmod,___wmul@multiplier
  6544  001F14  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  6545  001F18  EC5F  F01E         	call	___wmul	;wreg free
  6546  001F1C  0E29               	movlw	low __npowers_
  6547  001F1E  2411               	addwf	?___wmul,w,c
  6548  001F20  6EF6               	movwf	tblptrl,c
  6549  001F22  0E0F               	movlw	high __npowers_
  6550  001F24  2012               	addwfc	?___wmul+1,w,c
  6551  001F26  6EF7               	movwf	tblptrh,c
  6552  001F28  6AF8               	clrf	tblptru,c
  6553  001F2A  0E00               	movlw	low (__mediumconst shr (0+16))
  6554  001F2C  22F8               	addwfc	tblptru,f,c
  6555  001F2E  0009               	tblrd		*+
  6556  001F30  CFF5 F01A          	movff	tablat,___ftmul@f2
  6557  001F34  0009               	tblrd		*+
  6558  001F36  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  6559  001F3A  000A               	tblrd		*-
  6560  001F3C  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  6561  001F40  ECA3  F017         	call	___ftmul	;wreg free
  6562  001F44  C017  F026         	movff	?___ftmul,?_scale
  6563  001F48  C018  F027         	movff	?___ftmul+1,?_scale+1
  6564  001F4C  C019  F028         	movff	?___ftmul+2,?_scale+2
  6565  001F50  0012               	return	
  6566  001F52                     i2l4473:
  6567                           
  6568                           ;doprnt.c: 434: return _npowers_[scl];
  6569  001F52  502C               	movf	scale@scl,w,c
  6570  001F54  0D03               	mullw	3
  6571  001F56  0E29               	movlw	low __npowers_
  6572  001F58  24F3               	addwf	prodl,w,c
  6573  001F5A  6EF6               	movwf	tblptrl,c
  6574  001F5C  0E0F               	movlw	high __npowers_
  6575  001F5E  20F4               	addwfc	prodh,w,c
  6576  001F60  6EF7               	movwf	tblptrh,c
  6577  001F62  6AF8               	clrf	tblptru,c
  6578  001F64  0E00               	movlw	low (__mediumconst shr (0+16))
  6579  001F66  22F8               	addwfc	tblptru,f,c
  6580  001F68  0009               	tblrd		*+
  6581  001F6A  CFF5 F026          	movff	tablat,?_scale
  6582  001F6E  0009               	tblrd		*+
  6583  001F70  CFF5 F027          	movff	tablat,?_scale+1
  6584  001F74  000A               	tblrd		*-
  6585  001F76  CFF5 F028          	movff	tablat,?_scale+2
  6586  001F7A  0012               	return	
  6587  001F7C                     i2l4477:
  6588                           
  6589                           ;doprnt.c: 435: }
  6590                           ;doprnt.c: 436: if(scl>=110)
  6591  001F7C  502C               	movf	scale@scl,w,c
  6592  001F7E  0A80               	xorlw	128
  6593  001F80  0F12               	addlw	-238
  6594  001F82  A0D8               	btfss	status,0,c
  6595  001F84  D09A               	goto	i2l4485
  6596                           
  6597                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6598  001F86  0E00               	movlw	0
  6599  001F88  6E14               	movwf	___wmul@multiplicand+1,c
  6600  001F8A  0E03               	movlw	3
  6601  001F8C  6E13               	movwf	___wmul@multiplicand,c
  6602  001F8E  0E00               	movlw	0
  6603  001F90  6E0B               	movwf	___awdiv@divisor+1,c
  6604  001F92  0E0A               	movlw	10
  6605  001F94  6E0A               	movwf	___awdiv@divisor,c
  6606  001F96  0E00               	movlw	0
  6607  001F98  6E04               	movwf	___awmod@divisor+1,c
  6608  001F9A  0E64               	movlw	100
  6609  001F9C  6E03               	movwf	___awmod@divisor,c
  6610  001F9E  502C               	movf	scale@scl,w,c
  6611  001FA0  6E01               	movwf	___awmod@dividend,c
  6612  001FA2  6A02               	clrf	___awmod@dividend+1,c
  6613  001FA4  BE01               	btfsc	___awmod@dividend,7,c
  6614  001FA6  0602               	decf	___awmod@dividend+1,f,c
  6615  001FA8  EC75  F01A         	call	___awmod	;wreg free
  6616  001FAC  C001  F008         	movff	?___awmod,___awdiv@dividend
  6617  001FB0  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  6618  001FB4  EC72  F019         	call	___awdiv	;wreg free
  6619  001FB8  0E09               	movlw	9
  6620  001FBA  2408               	addwf	?___awdiv,w,c
  6621  001FBC  6E11               	movwf	___wmul@multiplier,c
  6622  001FBE  0E00               	movlw	0
  6623  001FC0  2009               	addwfc	?___awdiv+1,w,c
  6624  001FC2  6E12               	movwf	___wmul@multiplier+1,c
  6625  001FC4  EC5F  F01E         	call	___wmul	;wreg free
  6626  001FC8  0E50               	movlw	low __powers_
  6627  001FCA  2411               	addwf	?___wmul,w,c
  6628  001FCC  6EF6               	movwf	tblptrl,c
  6629  001FCE  0E0F               	movlw	high __powers_
  6630  001FD0  2012               	addwfc	?___wmul+1,w,c
  6631  001FD2  6EF7               	movwf	tblptrh,c
  6632  001FD4  6AF8               	clrf	tblptru,c
  6633  001FD6  0E00               	movlw	low (__mediumconst shr (0+16))
  6634  001FD8  22F8               	addwfc	tblptru,f,c
  6635  001FDA  0009               	tblrd		*+
  6636  001FDC  CFF5 F01A          	movff	tablat,___ftmul@f2
  6637  001FE0  0009               	tblrd		*+
  6638  001FE2  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  6639  001FE6  000A               	tblrd		*-
  6640  001FE8  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  6641  001FEC  0E00               	movlw	0
  6642  001FEE  6E14               	movwf	___wmul@multiplicand+1,c
  6643  001FF0  0E03               	movlw	3
  6644  001FF2  6E13               	movwf	___wmul@multiplicand,c
  6645  001FF4  0E00               	movlw	0
  6646  001FF6  6E0B               	movwf	___awdiv@divisor+1,c
  6647  001FF8  0E64               	movlw	100
  6648  001FFA  6E0A               	movwf	___awdiv@divisor,c
  6649  001FFC  502C               	movf	scale@scl,w,c
  6650  001FFE  6E08               	movwf	___awdiv@dividend,c
  6651  002000  6A09               	clrf	___awdiv@dividend+1,c
  6652  002002  BE08               	btfsc	___awdiv@dividend,7,c
  6653  002004  0609               	decf	___awdiv@dividend+1,f,c
  6654  002006  EC72  F019         	call	___awdiv	;wreg free
  6655  00200A  0E12               	movlw	18
  6656  00200C  2408               	addwf	?___awdiv,w,c
  6657  00200E  6E11               	movwf	___wmul@multiplier,c
  6658  002010  0E00               	movlw	0
  6659  002012  2009               	addwfc	?___awdiv+1,w,c
  6660  002014  6E12               	movwf	___wmul@multiplier+1,c
  6661  002016  EC5F  F01E         	call	___wmul	;wreg free
  6662  00201A  0E50               	movlw	low __powers_
  6663  00201C  2411               	addwf	?___wmul,w,c
  6664  00201E  6EF6               	movwf	tblptrl,c
  6665  002020  0E0F               	movlw	high __powers_
  6666  002022  2012               	addwfc	?___wmul+1,w,c
  6667  002024  6EF7               	movwf	tblptrh,c
  6668  002026  6AF8               	clrf	tblptru,c
  6669  002028  0E00               	movlw	low (__mediumconst shr (0+16))
  6670  00202A  22F8               	addwfc	tblptru,f,c
  6671  00202C  0009               	tblrd		*+
  6672  00202E  CFF5 F017          	movff	tablat,___ftmul@f1
  6673  002032  0009               	tblrd		*+
  6674  002034  CFF5 F018          	movff	tablat,___ftmul@f1+1
  6675  002038  000A               	tblrd		*-
  6676  00203A  CFF5 F019          	movff	tablat,___ftmul@f1+2
  6677  00203E  ECA3  F017         	call	___ftmul	;wreg free
  6678  002042  C017  F029         	movff	?___ftmul,_scale$1455
  6679  002046  C018  F02A         	movff	?___ftmul+1,_scale$1455+1
  6680  00204A  C019  F02B         	movff	?___ftmul+2,_scale$1455+2
  6681                           
  6682                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6683  00204E  C029  F017         	movff	_scale$1455,___ftmul@f1
  6684  002052  C02A  F018         	movff	_scale$1455+1,___ftmul@f1+1
  6685  002056  C02B  F019         	movff	_scale$1455+2,___ftmul@f1+2
  6686  00205A  0E00               	movlw	0
  6687  00205C  6E14               	movwf	___wmul@multiplicand+1,c
  6688  00205E  0E03               	movlw	3
  6689  002060  6E13               	movwf	___wmul@multiplicand,c
  6690  002062  0E00               	movlw	0
  6691  002064  6E04               	movwf	___awmod@divisor+1,c
  6692  002066  0E0A               	movlw	10
  6693  002068  6E03               	movwf	___awmod@divisor,c
  6694  00206A  502C               	movf	scale@scl,w,c
  6695  00206C  6E01               	movwf	___awmod@dividend,c
  6696  00206E  6A02               	clrf	___awmod@dividend+1,c
  6697  002070  BE01               	btfsc	___awmod@dividend,7,c
  6698  002072  0602               	decf	___awmod@dividend+1,f,c
  6699  002074  EC75  F01A         	call	___awmod	;wreg free
  6700  002078  C001  F011         	movff	?___awmod,___wmul@multiplier
  6701  00207C  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  6702  002080  EC5F  F01E         	call	___wmul	;wreg free
  6703  002084  0E50               	movlw	low __powers_
  6704  002086  2411               	addwf	?___wmul,w,c
  6705  002088  6EF6               	movwf	tblptrl,c
  6706  00208A  0E0F               	movlw	high __powers_
  6707  00208C  2012               	addwfc	?___wmul+1,w,c
  6708  00208E  6EF7               	movwf	tblptrh,c
  6709  002090  6AF8               	clrf	tblptru,c
  6710  002092  0E00               	movlw	low (__mediumconst shr (0+16))
  6711  002094  22F8               	addwfc	tblptru,f,c
  6712  002096  0009               	tblrd		*+
  6713  002098  CFF5 F01A          	movff	tablat,___ftmul@f2
  6714  00209C  0009               	tblrd		*+
  6715  00209E  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  6716  0020A2  000A               	tblrd		*-
  6717  0020A4  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  6718  0020A8  ECA3  F017         	call	___ftmul	;wreg free
  6719  0020AC  C017  F026         	movff	?___ftmul,?_scale
  6720  0020B0  C018  F027         	movff	?___ftmul+1,?_scale+1
  6721  0020B4  C019  F028         	movff	?___ftmul+2,?_scale+2
  6722  0020B8  0012               	return	
  6723  0020BA                     i2l4485:
  6724                           
  6725                           ;doprnt.c: 438: else if(scl > 10)
  6726  0020BA  502C               	movf	scale@scl,w,c
  6727  0020BC  0A80               	xorlw	128
  6728  0020BE  0F75               	addlw	-139
  6729  0020C0  A0D8               	btfss	status,0,c
  6730  0020C2  D059               	goto	i2l4491
  6731                           
  6732                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6733  0020C4  0E00               	movlw	0
  6734  0020C6  6E14               	movwf	___wmul@multiplicand+1,c
  6735  0020C8  0E03               	movlw	3
  6736  0020CA  6E13               	movwf	___wmul@multiplicand,c
  6737  0020CC  0E00               	movlw	0
  6738  0020CE  6E0B               	movwf	___awdiv@divisor+1,c
  6739  0020D0  0E0A               	movlw	10
  6740  0020D2  6E0A               	movwf	___awdiv@divisor,c
  6741  0020D4  502C               	movf	scale@scl,w,c
  6742  0020D6  6E08               	movwf	___awdiv@dividend,c
  6743  0020D8  6A09               	clrf	___awdiv@dividend+1,c
  6744  0020DA  BE08               	btfsc	___awdiv@dividend,7,c
  6745  0020DC  0609               	decf	___awdiv@dividend+1,f,c
  6746  0020DE  EC72  F019         	call	___awdiv	;wreg free
  6747  0020E2  0E09               	movlw	9
  6748  0020E4  2408               	addwf	?___awdiv,w,c
  6749  0020E6  6E11               	movwf	___wmul@multiplier,c
  6750  0020E8  0E00               	movlw	0
  6751  0020EA  2009               	addwfc	?___awdiv+1,w,c
  6752  0020EC  6E12               	movwf	___wmul@multiplier+1,c
  6753  0020EE  EC5F  F01E         	call	___wmul	;wreg free
  6754  0020F2  0E50               	movlw	low __powers_
  6755  0020F4  2411               	addwf	?___wmul,w,c
  6756  0020F6  6EF6               	movwf	tblptrl,c
  6757  0020F8  0E0F               	movlw	high __powers_
  6758  0020FA  2012               	addwfc	?___wmul+1,w,c
  6759  0020FC  6EF7               	movwf	tblptrh,c
  6760  0020FE  6AF8               	clrf	tblptru,c
  6761  002100  0E00               	movlw	low (__mediumconst shr (0+16))
  6762  002102  22F8               	addwfc	tblptru,f,c
  6763  002104  0009               	tblrd		*+
  6764  002106  CFF5 F017          	movff	tablat,___ftmul@f1
  6765  00210A  0009               	tblrd		*+
  6766  00210C  CFF5 F018          	movff	tablat,___ftmul@f1+1
  6767  002110  000A               	tblrd		*-
  6768  002112  CFF5 F019          	movff	tablat,___ftmul@f1+2
  6769  002116  0E00               	movlw	0
  6770  002118  6E14               	movwf	___wmul@multiplicand+1,c
  6771  00211A  0E03               	movlw	3
  6772  00211C  6E13               	movwf	___wmul@multiplicand,c
  6773  00211E  0E00               	movlw	0
  6774  002120  6E04               	movwf	___awmod@divisor+1,c
  6775  002122  0E0A               	movlw	10
  6776  002124  6E03               	movwf	___awmod@divisor,c
  6777  002126  502C               	movf	scale@scl,w,c
  6778  002128  6E01               	movwf	___awmod@dividend,c
  6779  00212A  6A02               	clrf	___awmod@dividend+1,c
  6780  00212C  BE01               	btfsc	___awmod@dividend,7,c
  6781  00212E  0602               	decf	___awmod@dividend+1,f,c
  6782  002130  EC75  F01A         	call	___awmod	;wreg free
  6783  002134  C001  F011         	movff	?___awmod,___wmul@multiplier
  6784  002138  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  6785  00213C  EC5F  F01E         	call	___wmul	;wreg free
  6786  002140  0E50               	movlw	low __powers_
  6787  002142  2411               	addwf	?___wmul,w,c
  6788  002144  6EF6               	movwf	tblptrl,c
  6789  002146  0E0F               	movlw	high __powers_
  6790  002148  2012               	addwfc	?___wmul+1,w,c
  6791  00214A  6EF7               	movwf	tblptrh,c
  6792  00214C  6AF8               	clrf	tblptru,c
  6793  00214E  0E00               	movlw	low (__mediumconst shr (0+16))
  6794  002150  22F8               	addwfc	tblptru,f,c
  6795  002152  0009               	tblrd		*+
  6796  002154  CFF5 F01A          	movff	tablat,___ftmul@f2
  6797  002158  0009               	tblrd		*+
  6798  00215A  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  6799  00215E  000A               	tblrd		*-
  6800  002160  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  6801  002164  ECA3  F017         	call	___ftmul	;wreg free
  6802  002168  C017  F026         	movff	?___ftmul,?_scale
  6803  00216C  C018  F027         	movff	?___ftmul+1,?_scale+1
  6804  002170  C019  F028         	movff	?___ftmul+2,?_scale+2
  6805  002174  0012               	return	
  6806  002176                     i2l4491:
  6807                           
  6808                           ;doprnt.c: 440: return _powers_[scl];
  6809  002176  502C               	movf	scale@scl,w,c
  6810  002178  0D03               	mullw	3
  6811  00217A  0E50               	movlw	low __powers_
  6812  00217C  24F3               	addwf	prodl,w,c
  6813  00217E  6EF6               	movwf	tblptrl,c
  6814  002180  0E0F               	movlw	high __powers_
  6815  002182  20F4               	addwfc	prodh,w,c
  6816  002184  6EF7               	movwf	tblptrh,c
  6817  002186  6AF8               	clrf	tblptru,c
  6818  002188  0E00               	movlw	low (__mediumconst shr (0+16))
  6819  00218A  22F8               	addwfc	tblptru,f,c
  6820  00218C  0009               	tblrd		*+
  6821  00218E  CFF5 F026          	movff	tablat,?_scale
  6822  002192  0009               	tblrd		*+
  6823  002194  CFF5 F027          	movff	tablat,?_scale+1
  6824  002198  000A               	tblrd		*-
  6825  00219A  CFF5 F028          	movff	tablat,?_scale+2
  6826  00219E  0012               	return	
  6827  0021A0                     __end_of_scale:
  6828                           	opt stack 0
  6829                           pclatu	equ	0xFFB
  6830                           pclath	equ	0xFFA
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           indf0	equ	0xFEF
  6839                           fsr0h	equ	0xFEA
  6840                           fsr0l	equ	0xFE9
  6841                           wreg	equ	0xFE8
  6842                           fsr1h	equ	0xFE2
  6843                           fsr1l	equ	0xFE1
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           postdec2	equ	0xFDD
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function _isdigit *****************
  6852 ;; Defined at:
  6853 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\isdigit.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  c               1    wreg     unsigned char 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  c               1    2[COMRAM] unsigned char 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;		None               void
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6868 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6870 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6871 ;;Total ram usage:        3 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_sprintf
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text28
  6881  003DBA                     __ptext28:
  6882                           	opt stack 0
  6883  003DBA                     _isdigit:
  6884                           	opt stack 20
  6885                           
  6886                           ;incstack = 0
  6887                           ;isdigit@c stored from wreg
  6888  003DBA  CFE8 F003          	movff	wreg,isdigit@c
  6889  003DBE  6E01               	movwf	??_isdigit& (0+255),c
  6890  003DC0  0E00               	movlw	0
  6891  003DC2  6E02               	movwf	_isdigit$1108,c
  6892  003DC4  5001               	movf	??_isdigit& (0+255),w,c
  6893  003DC6  0E3A               	movlw	58
  6894  003DC8  5C03               	subwf	isdigit@c,w,c
  6895  003DCA  B0D8               	btfsc	status,0,c
  6896  003DCC  D007               	goto	i2l4503
  6897  003DCE  0E2F               	movlw	47
  6898  003DD0  6403               	cpfsgt	isdigit@c,c
  6899  003DD2  D004               	goto	i2l4503
  6900  003DD4  6E01               	movwf	??_isdigit& (0+255),c
  6901  003DD6  0E01               	movlw	1
  6902  003DD8  6E02               	movwf	_isdigit$1108,c
  6903  003DDA  5001               	movf	??_isdigit& (0+255),w,c
  6904  003DDC                     i2l4503:
  6905  003DDC  C002  F001         	movff	_isdigit$1108,??_isdigit
  6906  003DE0  3001               	rrcf	??_isdigit,w,c
  6907  003DE2  0012               	return	
  6908  003DE4                     __end_of_isdigit:
  6909                           	opt stack 0
  6910                           pclatu	equ	0xFFB
  6911                           pclath	equ	0xFFA
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           intcon	equ	0xFF2
  6919                           indf0	equ	0xFEF
  6920                           fsr0h	equ	0xFEA
  6921                           fsr0l	equ	0xFE9
  6922                           wreg	equ	0xFE8
  6923                           fsr1h	equ	0xFE2
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           postinc2	equ	0xFDE
  6927                           postdec2	equ	0xFDD
  6928                           fsr2h	equ	0xFDA
  6929                           fsr2l	equ	0xFD9
  6930                           status	equ	0xFD8
  6931                           
  6932 ;; *************** function _fround *****************
  6933 ;; Defined at:
  6934 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\doprnt.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;  prec            1    wreg     unsigned char 
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;  prec            1   46[COMRAM] unsigned char 
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  3   37[COMRAM] unsigned char 
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6948 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6949 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6951 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6952 ;;Total ram usage:       10 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    2
  6955 ;; This function calls:
  6956 ;;		___awdiv
  6957 ;;		___awmod
  6958 ;;		___ftmul
  6959 ;;		___wmul
  6960 ;; This function is called by:
  6961 ;;		_sprintf
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           	psect	text29
  6966  0021A0                     __ptext29:
  6967                           	opt stack 0
  6968  0021A0                     _fround:
  6969                           	opt stack 18
  6970                           
  6971                           ;incstack = 0
  6972                           ;fround@prec stored from wreg
  6973  0021A0  CFE8 F02F          	movff	wreg,fround@prec
  6974                           
  6975                           ;doprnt.c: 413: if(prec>=110)
  6976  0021A4  0E6D               	movlw	109
  6977  0021A6  642F               	cpfsgt	fround@prec,c
  6978  0021A8  D0A8               	goto	i2l4445
  6979                           
  6980                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6981  0021AA  0E00               	movlw	0
  6982  0021AC  6E14               	movwf	___wmul@multiplicand+1,c
  6983  0021AE  0E03               	movlw	3
  6984  0021B0  6E13               	movwf	___wmul@multiplicand,c
  6985  0021B2  0E00               	movlw	0
  6986  0021B4  6E0B               	movwf	___awdiv@divisor+1,c
  6987  0021B6  0E0A               	movlw	10
  6988  0021B8  6E0A               	movwf	___awdiv@divisor,c
  6989  0021BA  0E00               	movlw	0
  6990  0021BC  6E04               	movwf	___awmod@divisor+1,c
  6991  0021BE  0E64               	movlw	100
  6992  0021C0  6E03               	movwf	___awmod@divisor,c
  6993  0021C2  C02F  F001         	movff	fround@prec,___awmod@dividend
  6994  0021C6  6A02               	clrf	___awmod@dividend+1,c
  6995  0021C8  EC75  F01A         	call	___awmod	;wreg free
  6996  0021CC  C001  F008         	movff	?___awmod,___awdiv@dividend
  6997  0021D0  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  6998  0021D4  EC72  F019         	call	___awdiv	;wreg free
  6999  0021D8  0E09               	movlw	9
  7000  0021DA  2408               	addwf	?___awdiv,w,c
  7001  0021DC  6E11               	movwf	___wmul@multiplier,c
  7002  0021DE  0E00               	movlw	0
  7003  0021E0  2009               	addwfc	?___awdiv+1,w,c
  7004  0021E2  6E12               	movwf	___wmul@multiplier+1,c
  7005  0021E4  EC5F  F01E         	call	___wmul	;wreg free
  7006  0021E8  0E29               	movlw	low __npowers_
  7007  0021EA  2411               	addwf	?___wmul,w,c
  7008  0021EC  6EF6               	movwf	tblptrl,c
  7009  0021EE  0E0F               	movlw	high __npowers_
  7010  0021F0  2012               	addwfc	?___wmul+1,w,c
  7011  0021F2  6EF7               	movwf	tblptrh,c
  7012  0021F4  6AF8               	clrf	tblptru,c
  7013  0021F6  0E00               	movlw	low (__mediumconst shr (0+16))
  7014  0021F8  22F8               	addwfc	tblptru,f,c
  7015  0021FA  0009               	tblrd		*+
  7016  0021FC  CFF5 F01A          	movff	tablat,___ftmul@f2
  7017  002200  0009               	tblrd		*+
  7018  002202  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  7019  002206  000A               	tblrd		*-
  7020  002208  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  7021  00220C  0E00               	movlw	0
  7022  00220E  6E14               	movwf	___wmul@multiplicand+1,c
  7023  002210  0E03               	movlw	3
  7024  002212  6E13               	movwf	___wmul@multiplicand,c
  7025  002214  0E00               	movlw	0
  7026  002216  6E0B               	movwf	___awdiv@divisor+1,c
  7027  002218  0E64               	movlw	100
  7028  00221A  6E0A               	movwf	___awdiv@divisor,c
  7029  00221C  C02F  F008         	movff	fround@prec,___awdiv@dividend
  7030  002220  6A09               	clrf	___awdiv@dividend+1,c
  7031  002222  EC72  F019         	call	___awdiv	;wreg free
  7032  002226  0E12               	movlw	18
  7033  002228  2408               	addwf	?___awdiv,w,c
  7034  00222A  6E11               	movwf	___wmul@multiplier,c
  7035  00222C  0E00               	movlw	0
  7036  00222E  2009               	addwfc	?___awdiv+1,w,c
  7037  002230  6E12               	movwf	___wmul@multiplier+1,c
  7038  002232  EC5F  F01E         	call	___wmul	;wreg free
  7039  002236  0E29               	movlw	low __npowers_
  7040  002238  2411               	addwf	?___wmul,w,c
  7041  00223A  6EF6               	movwf	tblptrl,c
  7042  00223C  0E0F               	movlw	high __npowers_
  7043  00223E  2012               	addwfc	?___wmul+1,w,c
  7044  002240  6EF7               	movwf	tblptrh,c
  7045  002242  6AF8               	clrf	tblptru,c
  7046  002244  0E00               	movlw	low (__mediumconst shr (0+16))
  7047  002246  22F8               	addwfc	tblptru,f,c
  7048  002248  0009               	tblrd		*+
  7049  00224A  CFF5 F017          	movff	tablat,___ftmul@f1
  7050  00224E  0009               	tblrd		*+
  7051  002250  CFF5 F018          	movff	tablat,___ftmul@f1+1
  7052  002254  000A               	tblrd		*-
  7053  002256  CFF5 F019          	movff	tablat,___ftmul@f1+2
  7054  00225A  ECA3  F017         	call	___ftmul	;wreg free
  7055  00225E  C017  F02C         	movff	?___ftmul,_fround$1453
  7056  002262  C018  F02D         	movff	?___ftmul+1,_fround$1453+1
  7057  002266  C019  F02E         	movff	?___ftmul+2,_fround$1453+2
  7058                           
  7059                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7060  00226A  0E00               	movlw	0
  7061  00226C  6E14               	movwf	___wmul@multiplicand+1,c
  7062  00226E  0E03               	movlw	3
  7063  002270  6E13               	movwf	___wmul@multiplicand,c
  7064  002272  0E00               	movlw	0
  7065  002274  6E04               	movwf	___awmod@divisor+1,c
  7066  002276  0E0A               	movlw	10
  7067  002278  6E03               	movwf	___awmod@divisor,c
  7068  00227A  C02F  F001         	movff	fround@prec,___awmod@dividend
  7069  00227E  6A02               	clrf	___awmod@dividend+1,c
  7070  002280  EC75  F01A         	call	___awmod	;wreg free
  7071  002284  C001  F011         	movff	?___awmod,___wmul@multiplier
  7072  002288  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  7073  00228C  EC5F  F01E         	call	___wmul	;wreg free
  7074  002290  0E29               	movlw	low __npowers_
  7075  002292  2411               	addwf	?___wmul,w,c
  7076  002294  6EF6               	movwf	tblptrl,c
  7077  002296  0E0F               	movlw	high __npowers_
  7078  002298  2012               	addwfc	?___wmul+1,w,c
  7079  00229A  6EF7               	movwf	tblptrh,c
  7080  00229C  6AF8               	clrf	tblptru,c
  7081  00229E  0E00               	movlw	low (__mediumconst shr (0+16))
  7082  0022A0  22F8               	addwfc	tblptru,f,c
  7083  0022A2  0009               	tblrd		*+
  7084  0022A4  CFF5 F01A          	movff	tablat,___ftmul@f2
  7085  0022A8  0009               	tblrd		*+
  7086  0022AA  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  7087  0022AE  000A               	tblrd		*-
  7088  0022B0  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  7089  0022B4  C02C  F017         	movff	_fround$1453,___ftmul@f1
  7090  0022B8  C02D  F018         	movff	_fround$1453+1,___ftmul@f1+1
  7091  0022BC  C02E  F019         	movff	_fround$1453+2,___ftmul@f1+2
  7092  0022C0  ECA3  F017         	call	___ftmul	;wreg free
  7093  0022C4  C017  F029         	movff	?___ftmul,_fround$1454
  7094  0022C8  C018  F02A         	movff	?___ftmul+1,_fround$1454+1
  7095  0022CC  C019  F02B         	movff	?___ftmul+2,_fround$1454+2
  7096                           
  7097                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7098  0022D0  C029  F017         	movff	_fround$1454,___ftmul@f1
  7099  0022D4  C02A  F018         	movff	_fround$1454+1,___ftmul@f1+1
  7100  0022D8  C02B  F019         	movff	_fround$1454+2,___ftmul@f1+2
  7101  0022DC  0E00               	movlw	0
  7102  0022DE  6E1A               	movwf	___ftmul@f2,c
  7103  0022E0  0E00               	movlw	0
  7104  0022E2  6E1B               	movwf	___ftmul@f2+1,c
  7105  0022E4  0E3F               	movlw	63
  7106  0022E6  6E1C               	movwf	___ftmul@f2+2,c
  7107  0022E8  ECA3  F017         	call	___ftmul	;wreg free
  7108  0022EC  C017  F026         	movff	?___ftmul,?_fround
  7109  0022F0  C018  F027         	movff	?___ftmul+1,?_fround+1
  7110  0022F4  C019  F028         	movff	?___ftmul+2,?_fround+2
  7111  0022F8  0012               	return	
  7112  0022FA                     i2l4445:
  7113                           
  7114                           ;doprnt.c: 415: else if(prec > 10)
  7115  0022FA  0E0A               	movlw	10
  7116  0022FC  642F               	cpfsgt	fround@prec,c
  7117  0022FE  D069               	goto	i2l4453
  7118                           
  7119                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7120  002300  0E00               	movlw	0
  7121  002302  6E14               	movwf	___wmul@multiplicand+1,c
  7122  002304  0E03               	movlw	3
  7123  002306  6E13               	movwf	___wmul@multiplicand,c
  7124  002308  0E00               	movlw	0
  7125  00230A  6E04               	movwf	___awmod@divisor+1,c
  7126  00230C  0E0A               	movlw	10
  7127  00230E  6E03               	movwf	___awmod@divisor,c
  7128  002310  C02F  F001         	movff	fround@prec,___awmod@dividend
  7129  002314  6A02               	clrf	___awmod@dividend+1,c
  7130  002316  EC75  F01A         	call	___awmod	;wreg free
  7131  00231A  C001  F011         	movff	?___awmod,___wmul@multiplier
  7132  00231E  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  7133  002322  EC5F  F01E         	call	___wmul	;wreg free
  7134  002326  0E29               	movlw	low __npowers_
  7135  002328  2411               	addwf	?___wmul,w,c
  7136  00232A  6EF6               	movwf	tblptrl,c
  7137  00232C  0E0F               	movlw	high __npowers_
  7138  00232E  2012               	addwfc	?___wmul+1,w,c
  7139  002330  6EF7               	movwf	tblptrh,c
  7140  002332  6AF8               	clrf	tblptru,c
  7141  002334  0E00               	movlw	low (__mediumconst shr (0+16))
  7142  002336  22F8               	addwfc	tblptru,f,c
  7143  002338  0009               	tblrd		*+
  7144  00233A  CFF5 F01A          	movff	tablat,___ftmul@f2
  7145  00233E  0009               	tblrd		*+
  7146  002340  CFF5 F01B          	movff	tablat,___ftmul@f2+1
  7147  002344  000A               	tblrd		*-
  7148  002346  CFF5 F01C          	movff	tablat,___ftmul@f2+2
  7149  00234A  0E00               	movlw	0
  7150  00234C  6E14               	movwf	___wmul@multiplicand+1,c
  7151  00234E  0E03               	movlw	3
  7152  002350  6E13               	movwf	___wmul@multiplicand,c
  7153  002352  0E00               	movlw	0
  7154  002354  6E0B               	movwf	___awdiv@divisor+1,c
  7155  002356  0E0A               	movlw	10
  7156  002358  6E0A               	movwf	___awdiv@divisor,c
  7157  00235A  C02F  F008         	movff	fround@prec,___awdiv@dividend
  7158  00235E  6A09               	clrf	___awdiv@dividend+1,c
  7159  002360  EC72  F019         	call	___awdiv	;wreg free
  7160  002364  0E09               	movlw	9
  7161  002366  2408               	addwf	?___awdiv,w,c
  7162  002368  6E11               	movwf	___wmul@multiplier,c
  7163  00236A  0E00               	movlw	0
  7164  00236C  2009               	addwfc	?___awdiv+1,w,c
  7165  00236E  6E12               	movwf	___wmul@multiplier+1,c
  7166  002370  EC5F  F01E         	call	___wmul	;wreg free
  7167  002374  0E29               	movlw	low __npowers_
  7168  002376  2411               	addwf	?___wmul,w,c
  7169  002378  6EF6               	movwf	tblptrl,c
  7170  00237A  0E0F               	movlw	high __npowers_
  7171  00237C  2012               	addwfc	?___wmul+1,w,c
  7172  00237E  6EF7               	movwf	tblptrh,c
  7173  002380  6AF8               	clrf	tblptru,c
  7174  002382  0E00               	movlw	low (__mediumconst shr (0+16))
  7175  002384  22F8               	addwfc	tblptru,f,c
  7176  002386  0009               	tblrd		*+
  7177  002388  CFF5 F017          	movff	tablat,___ftmul@f1
  7178  00238C  0009               	tblrd		*+
  7179  00238E  CFF5 F018          	movff	tablat,___ftmul@f1+1
  7180  002392  000A               	tblrd		*-
  7181  002394  CFF5 F019          	movff	tablat,___ftmul@f1+2
  7182  002398  ECA3  F017         	call	___ftmul	;wreg free
  7183  00239C  C017  F02C         	movff	?___ftmul,_fround$1453
  7184  0023A0  C018  F02D         	movff	?___ftmul+1,_fround$1453+1
  7185  0023A4  C019  F02E         	movff	?___ftmul+2,_fround$1453+2
  7186                           
  7187                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7188  0023A8  C02C  F017         	movff	_fround$1453,___ftmul@f1
  7189  0023AC  C02D  F018         	movff	_fround$1453+1,___ftmul@f1+1
  7190  0023B0  C02E  F019         	movff	_fround$1453+2,___ftmul@f1+2
  7191  0023B4  0E00               	movlw	0
  7192  0023B6  6E1A               	movwf	___ftmul@f2,c
  7193  0023B8  0E00               	movlw	0
  7194  0023BA  6E1B               	movwf	___ftmul@f2+1,c
  7195  0023BC  0E3F               	movlw	63
  7196  0023BE  6E1C               	movwf	___ftmul@f2+2,c
  7197  0023C0  ECA3  F017         	call	___ftmul	;wreg free
  7198  0023C4  C017  F026         	movff	?___ftmul,?_fround
  7199  0023C8  C018  F027         	movff	?___ftmul+1,?_fround+1
  7200  0023CC  C019  F028         	movff	?___ftmul+2,?_fround+2
  7201  0023D0  0012               	return	
  7202  0023D2                     i2l4453:
  7203                           
  7204                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7205  0023D2  502F               	movf	fround@prec,w,c
  7206  0023D4  0D03               	mullw	3
  7207  0023D6  0E29               	movlw	low __npowers_
  7208  0023D8  24F3               	addwf	prodl,w,c
  7209  0023DA  6EF6               	movwf	tblptrl,c
  7210  0023DC  0E0F               	movlw	high __npowers_
  7211  0023DE  20F4               	addwfc	prodh,w,c
  7212  0023E0  6EF7               	movwf	tblptrh,c
  7213  0023E2  6AF8               	clrf	tblptru,c
  7214  0023E4  0E00               	movlw	low (__mediumconst shr (0+16))
  7215  0023E6  22F8               	addwfc	tblptru,f,c
  7216  0023E8  0009               	tblrd		*+
  7217  0023EA  CFF5 F017          	movff	tablat,___ftmul@f1
  7218  0023EE  0009               	tblrd		*+
  7219  0023F0  CFF5 F018          	movff	tablat,___ftmul@f1+1
  7220  0023F4  000A               	tblrd		*-
  7221  0023F6  CFF5 F019          	movff	tablat,___ftmul@f1+2
  7222  0023FA  0E00               	movlw	0
  7223  0023FC  6E1A               	movwf	___ftmul@f2,c
  7224  0023FE  0E00               	movlw	0
  7225  002400  6E1B               	movwf	___ftmul@f2+1,c
  7226  002402  0E3F               	movlw	63
  7227  002404  6E1C               	movwf	___ftmul@f2+2,c
  7228  002406  ECA3  F017         	call	___ftmul	;wreg free
  7229  00240A  C017  F026         	movff	?___ftmul,?_fround
  7230  00240E  C018  F027         	movff	?___ftmul+1,?_fround+1
  7231  002412  C019  F028         	movff	?___ftmul+2,?_fround+2
  7232  002416  0012               	return	
  7233  002418                     __end_of_fround:
  7234                           	opt stack 0
  7235                           pclatu	equ	0xFFB
  7236                           pclath	equ	0xFFA
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           intcon	equ	0xFF2
  7244                           indf0	equ	0xFEF
  7245                           fsr0h	equ	0xFEA
  7246                           fsr0l	equ	0xFE9
  7247                           wreg	equ	0xFE8
  7248                           fsr1h	equ	0xFE2
  7249                           fsr1l	equ	0xFE1
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           fsr2h	equ	0xFDA
  7254                           fsr2l	equ	0xFD9
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function ___wmul *****************
  7258 ;; Defined at:
  7259 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\wmul.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  multiplier      2   16[COMRAM] unsigned int 
  7262 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  product         2   20[COMRAM] unsigned int 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  2   16[COMRAM] unsigned int 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0, prodl, prodh
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7274 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7275 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7277 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7278 ;;Total ram usage:        6 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_fround
  7284 ;;		_scale
  7285 ;;		_sprintf
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           	psect	text30
  7290  003CBE                     __ptext30:
  7291                           	opt stack 0
  7292  003CBE                     ___wmul:
  7293                           	opt stack 19
  7294                           
  7295                           ;incstack = 0
  7296  003CBE  5011               	movf	___wmul@multiplier,w,c
  7297  003CC0  0213               	mulwf	___wmul@multiplicand,c
  7298  003CC2  CFF3 F015          	movff	prodl,___wmul@product
  7299  003CC6  CFF4 F016          	movff	prodh,___wmul@product+1
  7300  003CCA  5011               	movf	___wmul@multiplier,w,c
  7301  003CCC  0214               	mulwf	___wmul@multiplicand+1,c
  7302  003CCE  CFF3 FFF4          	movff	prodl,prodh
  7303  003CD2  6AF3               	clrf	prodl,c
  7304  003CD4  50F3               	movf	prodl,w,c
  7305  003CD6  2615               	addwf	___wmul@product,f,c
  7306  003CD8  50F4               	movf	prodh,w,c
  7307  003CDA  2216               	addwfc	___wmul@product+1,f,c
  7308  003CDC  5012               	movf	___wmul@multiplier+1,w,c
  7309  003CDE  0213               	mulwf	___wmul@multiplicand,c
  7310  003CE0  CFF3 FFF4          	movff	prodl,prodh
  7311  003CE4  6AF3               	clrf	prodl,c
  7312  003CE6  50F3               	movf	prodl,w,c
  7313  003CE8  2615               	addwf	___wmul@product,f,c
  7314  003CEA  50F4               	movf	prodh,w,c
  7315  003CEC  2216               	addwfc	___wmul@product+1,f,c
  7316  003CEE  C015  F011         	movff	___wmul@product,?___wmul
  7317  003CF2  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7318  003CF6  0012               	return	
  7319  003CF8                     __end_of___wmul:
  7320                           	opt stack 0
  7321                           pclatu	equ	0xFFB
  7322                           pclath	equ	0xFFA
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           indf0	equ	0xFEF
  7331                           fsr0h	equ	0xFEA
  7332                           fsr0l	equ	0xFE9
  7333                           wreg	equ	0xFE8
  7334                           fsr1h	equ	0xFE2
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function ___awmod *****************
  7344 ;; Defined at:
  7345 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awmod.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  dividend        2    0[COMRAM] int 
  7348 ;;  divisor         2    2[COMRAM] int 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  sign            1    6[COMRAM] unsigned char 
  7351 ;;  counter         1    5[COMRAM] unsigned char 
  7352 ;; Return value:  Size  Location     Type
  7353 ;;                  2    0[COMRAM] int 
  7354 ;; Registers used:
  7355 ;;		wreg, status,2, status,0, prodl
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7362 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7364 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7365 ;;Total ram usage:        7 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; This function calls:
  7368 ;;		Nothing
  7369 ;; This function is called by:
  7370 ;;		_fround
  7371 ;;		_scale
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text31
  7376  0034EA                     __ptext31:
  7377                           	opt stack 0
  7378  0034EA                     ___awmod:
  7379                           	opt stack 19
  7380                           
  7381                           ;incstack = 0
  7382  0034EA  6E05               	movwf	??___awmod& (0+255),c
  7383  0034EC  0E00               	movlw	0
  7384  0034EE  6E07               	movwf	___awmod@sign,c
  7385  0034F0  5005               	movf	??___awmod& (0+255),w,c
  7386  0034F2  5002               	movf	___awmod@dividend+1,w,c
  7387  0034F4  0A80               	xorlw	128
  7388  0034F6  6EF3               	movwf	prodl,c
  7389  0034F8  0E80               	movlw	128
  7390  0034FA  5CF3               	subwf	prodl,w,c
  7391  0034FC  0E00               	movlw	0
  7392  0034FE  B4D8               	btfsc	status,2,c
  7393  003500  5C01               	subwf	___awmod@dividend,w,c
  7394  003502  B0D8               	btfsc	status,0,c
  7395  003504  D008               	goto	i2l4339
  7396  003506  6C01               	negf	___awmod@dividend,c
  7397  003508  1E02               	comf	___awmod@dividend+1,f,c
  7398  00350A  B0D8               	btfsc	status,0,c
  7399  00350C  2A02               	incf	___awmod@dividend+1,f,c
  7400  00350E  6E05               	movwf	??___awmod& (0+255),c
  7401  003510  0E01               	movlw	1
  7402  003512  6E07               	movwf	___awmod@sign,c
  7403  003514  5005               	movf	??___awmod& (0+255),w,c
  7404  003516                     i2l4339:
  7405  003516  5004               	movf	___awmod@divisor+1,w,c
  7406  003518  0A80               	xorlw	128
  7407  00351A  6EF3               	movwf	prodl,c
  7408  00351C  0E80               	movlw	128
  7409  00351E  5CF3               	subwf	prodl,w,c
  7410  003520  0E00               	movlw	0
  7411  003522  B4D8               	btfsc	status,2,c
  7412  003524  5C03               	subwf	___awmod@divisor,w,c
  7413  003526  B0D8               	btfsc	status,0,c
  7414  003528  D004               	goto	i2l4343
  7415  00352A  6C03               	negf	___awmod@divisor,c
  7416  00352C  1E04               	comf	___awmod@divisor+1,f,c
  7417  00352E  B0D8               	btfsc	status,0,c
  7418  003530  2A04               	incf	___awmod@divisor+1,f,c
  7419  003532                     i2l4343:
  7420  003532  5004               	movf	___awmod@divisor+1,w,c
  7421  003534  1003               	iorwf	___awmod@divisor,w,c
  7422  003536  B4D8               	btfsc	status,2,c
  7423  003538  D01A               	goto	i2l4359
  7424  00353A  6E05               	movwf	??___awmod& (0+255),c
  7425  00353C  0E01               	movlw	1
  7426  00353E  6E06               	movwf	___awmod@counter,c
  7427  003540  5005               	movf	??___awmod& (0+255),w,c
  7428  003542  D004               	goto	i2l4349
  7429  003544                     i2l4347:
  7430  003544  90D8               	bcf	status,0,c
  7431  003546  3603               	rlcf	___awmod@divisor,f,c
  7432  003548  3604               	rlcf	___awmod@divisor+1,f,c
  7433  00354A  2A06               	incf	___awmod@counter,f,c
  7434  00354C                     i2l4349:
  7435  00354C  AE04               	btfss	___awmod@divisor+1,7,c
  7436  00354E  D7FA               	goto	i2l4347
  7437  003550                     i2l4351:
  7438  003550  5003               	movf	___awmod@divisor,w,c
  7439  003552  5C01               	subwf	___awmod@dividend,w,c
  7440  003554  5004               	movf	___awmod@divisor+1,w,c
  7441  003556  5802               	subwfb	___awmod@dividend+1,w,c
  7442  003558  A0D8               	btfss	status,0,c
  7443  00355A  D004               	goto	i2l4355
  7444  00355C  5003               	movf	___awmod@divisor,w,c
  7445  00355E  5E01               	subwf	___awmod@dividend,f,c
  7446  003560  5004               	movf	___awmod@divisor+1,w,c
  7447  003562  5A02               	subwfb	___awmod@dividend+1,f,c
  7448  003564                     i2l4355:
  7449  003564  90D8               	bcf	status,0,c
  7450  003566  3204               	rrcf	___awmod@divisor+1,f,c
  7451  003568  3203               	rrcf	___awmod@divisor,f,c
  7452  00356A  2E06               	decfsz	___awmod@counter,f,c
  7453  00356C  D7F1               	goto	i2l4351
  7454  00356E                     i2l4359:
  7455  00356E  5007               	movf	___awmod@sign,w,c
  7456  003570  B4D8               	btfsc	status,2,c
  7457  003572  D004               	goto	i2l4363
  7458  003574  6C01               	negf	___awmod@dividend,c
  7459  003576  1E02               	comf	___awmod@dividend+1,f,c
  7460  003578  B0D8               	btfsc	status,0,c
  7461  00357A  2A02               	incf	___awmod@dividend+1,f,c
  7462  00357C                     i2l4363:
  7463  00357C  C001  F001         	movff	___awmod@dividend,?___awmod
  7464  003580  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  7465  003584  0012               	return	
  7466  003586                     __end_of___awmod:
  7467                           	opt stack 0
  7468                           pclatu	equ	0xFFB
  7469                           pclath	equ	0xFFA
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           indf0	equ	0xFEF
  7478                           fsr0h	equ	0xFEA
  7479                           fsr0l	equ	0xFE9
  7480                           wreg	equ	0xFE8
  7481                           fsr1h	equ	0xFE2
  7482                           fsr1l	equ	0xFE1
  7483                           indf2	equ	0xFDF
  7484                           postinc2	equ	0xFDE
  7485                           postdec2	equ	0xFDD
  7486                           fsr2h	equ	0xFDA
  7487                           fsr2l	equ	0xFD9
  7488                           status	equ	0xFD8
  7489                           
  7490 ;; *************** function ___awdiv *****************
  7491 ;; Defined at:
  7492 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awdiv.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;  dividend        2    7[COMRAM] int 
  7495 ;;  divisor         2    9[COMRAM] int 
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;  quotient        2   14[COMRAM] int 
  7498 ;;  sign            1   13[COMRAM] unsigned char 
  7499 ;;  counter         1   12[COMRAM] unsigned char 
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  2    7[COMRAM] int 
  7502 ;; Registers used:
  7503 ;;		wreg, status,2, status,0, prodl
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7510 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7512 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7513 ;;Total ram usage:        9 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; This function calls:
  7516 ;;		Nothing
  7517 ;; This function is called by:
  7518 ;;		_fround
  7519 ;;		_scale
  7520 ;;		_sprintf
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text32
  7525  0032E4                     __ptext32:
  7526                           	opt stack 0
  7527  0032E4                     ___awdiv:
  7528                           	opt stack 19
  7529                           
  7530                           ;incstack = 0
  7531  0032E4  6E0C               	movwf	??___awdiv& (0+255),c
  7532  0032E6  0E00               	movlw	0
  7533  0032E8  6E0E               	movwf	___awdiv@sign,c
  7534  0032EA  500C               	movf	??___awdiv& (0+255),w,c
  7535  0032EC  500B               	movf	___awdiv@divisor+1,w,c
  7536  0032EE  0A80               	xorlw	128
  7537  0032F0  6EF3               	movwf	prodl,c
  7538  0032F2  0E80               	movlw	128
  7539  0032F4  5CF3               	subwf	prodl,w,c
  7540  0032F6  0E00               	movlw	0
  7541  0032F8  B4D8               	btfsc	status,2,c
  7542  0032FA  5C0A               	subwf	___awdiv@divisor,w,c
  7543  0032FC  B0D8               	btfsc	status,0,c
  7544  0032FE  D008               	goto	i2l4295
  7545  003300  6C0A               	negf	___awdiv@divisor,c
  7546  003302  1E0B               	comf	___awdiv@divisor+1,f,c
  7547  003304  B0D8               	btfsc	status,0,c
  7548  003306  2A0B               	incf	___awdiv@divisor+1,f,c
  7549  003308  6E0C               	movwf	??___awdiv& (0+255),c
  7550  00330A  0E01               	movlw	1
  7551  00330C  6E0E               	movwf	___awdiv@sign,c
  7552  00330E  500C               	movf	??___awdiv& (0+255),w,c
  7553  003310                     i2l4295:
  7554  003310  5009               	movf	___awdiv@dividend+1,w,c
  7555  003312  0A80               	xorlw	128
  7556  003314  6EF3               	movwf	prodl,c
  7557  003316  0E80               	movlw	128
  7558  003318  5CF3               	subwf	prodl,w,c
  7559  00331A  0E00               	movlw	0
  7560  00331C  B4D8               	btfsc	status,2,c
  7561  00331E  5C08               	subwf	___awdiv@dividend,w,c
  7562  003320  B0D8               	btfsc	status,0,c
  7563  003322  D006               	goto	i2l4301
  7564  003324  6C08               	negf	___awdiv@dividend,c
  7565  003326  1E09               	comf	___awdiv@dividend+1,f,c
  7566  003328  B0D8               	btfsc	status,0,c
  7567  00332A  2A09               	incf	___awdiv@dividend+1,f,c
  7568  00332C  0E01               	movlw	1
  7569  00332E  1A0E               	xorwf	___awdiv@sign,f,c
  7570  003330                     i2l4301:
  7571  003330  0E00               	movlw	0
  7572  003332  6E10               	movwf	___awdiv@quotient+1,c
  7573  003334  0E00               	movlw	0
  7574  003336  6E0F               	movwf	___awdiv@quotient,c
  7575  003338  500B               	movf	___awdiv@divisor+1,w,c
  7576  00333A  100A               	iorwf	___awdiv@divisor,w,c
  7577  00333C  B4D8               	btfsc	status,2,c
  7578  00333E  D01E               	goto	i2l4323
  7579  003340  6E0C               	movwf	??___awdiv& (0+255),c
  7580  003342  0E01               	movlw	1
  7581  003344  6E0D               	movwf	___awdiv@counter,c
  7582  003346  500C               	movf	??___awdiv& (0+255),w,c
  7583  003348  D004               	goto	i2l4309
  7584  00334A                     i2l4307:
  7585  00334A  90D8               	bcf	status,0,c
  7586  00334C  360A               	rlcf	___awdiv@divisor,f,c
  7587  00334E  360B               	rlcf	___awdiv@divisor+1,f,c
  7588  003350  2A0D               	incf	___awdiv@counter,f,c
  7589  003352                     i2l4309:
  7590  003352  AE0B               	btfss	___awdiv@divisor+1,7,c
  7591  003354  D7FA               	goto	i2l4307
  7592  003356                     i2l4311:
  7593  003356  90D8               	bcf	status,0,c
  7594  003358  360F               	rlcf	___awdiv@quotient,f,c
  7595  00335A  3610               	rlcf	___awdiv@quotient+1,f,c
  7596  00335C  500A               	movf	___awdiv@divisor,w,c
  7597  00335E  5C08               	subwf	___awdiv@dividend,w,c
  7598  003360  500B               	movf	___awdiv@divisor+1,w,c
  7599  003362  5809               	subwfb	___awdiv@dividend+1,w,c
  7600  003364  A0D8               	btfss	status,0,c
  7601  003366  D005               	goto	i2l4319
  7602  003368  500A               	movf	___awdiv@divisor,w,c
  7603  00336A  5E08               	subwf	___awdiv@dividend,f,c
  7604  00336C  500B               	movf	___awdiv@divisor+1,w,c
  7605  00336E  5A09               	subwfb	___awdiv@dividend+1,f,c
  7606  003370  800F               	bsf	___awdiv@quotient,0,c
  7607  003372                     i2l4319:
  7608  003372  90D8               	bcf	status,0,c
  7609  003374  320B               	rrcf	___awdiv@divisor+1,f,c
  7610  003376  320A               	rrcf	___awdiv@divisor,f,c
  7611  003378  2E0D               	decfsz	___awdiv@counter,f,c
  7612  00337A  D7ED               	goto	i2l4311
  7613  00337C                     i2l4323:
  7614  00337C  500E               	movf	___awdiv@sign,w,c
  7615  00337E  B4D8               	btfsc	status,2,c
  7616  003380  D004               	goto	i2l4327
  7617  003382  6C0F               	negf	___awdiv@quotient,c
  7618  003384  1E10               	comf	___awdiv@quotient+1,f,c
  7619  003386  B0D8               	btfsc	status,0,c
  7620  003388  2A10               	incf	___awdiv@quotient+1,f,c
  7621  00338A                     i2l4327:
  7622  00338A  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  7623  00338E  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  7624  003392  0012               	return	
  7625  003394                     __end_of___awdiv:
  7626                           	opt stack 0
  7627                           pclatu	equ	0xFFB
  7628                           pclath	equ	0xFFA
  7629                           tblptru	equ	0xFF8
  7630                           tblptrh	equ	0xFF7
  7631                           tblptrl	equ	0xFF6
  7632                           tablat	equ	0xFF5
  7633                           prodh	equ	0xFF4
  7634                           prodl	equ	0xFF3
  7635                           intcon	equ	0xFF2
  7636                           indf0	equ	0xFEF
  7637                           fsr0h	equ	0xFEA
  7638                           fsr0l	equ	0xFE9
  7639                           wreg	equ	0xFE8
  7640                           fsr1h	equ	0xFE2
  7641                           fsr1l	equ	0xFE1
  7642                           indf2	equ	0xFDF
  7643                           postinc2	equ	0xFDE
  7644                           postdec2	equ	0xFDD
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function __tdiv_to_l_ *****************
  7650 ;; Defined at:
  7651 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftdivl.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  f1              3    0[COMRAM] float 
  7654 ;;  f2              3    3[COMRAM] float 
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  quot            4    9[COMRAM] unsigned long 
  7657 ;;  exp1            1   14[COMRAM] unsigned char 
  7658 ;;  cntr            1   13[COMRAM] unsigned char 
  7659 ;; Return value:  Size  Location     Type
  7660 ;;                  4    0[COMRAM] unsigned long 
  7661 ;; Registers used:
  7662 ;;		wreg, status,2, status,0
  7663 ;; Tracked objects:
  7664 ;;		On entry : 0/0
  7665 ;;		On exit  : 0/0
  7666 ;;		Unchanged: 0/0
  7667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7668 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7669 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7670 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7671 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7672 ;;Total ram usage:       15 bytes
  7673 ;; Hardware stack levels used:    1
  7674 ;; This function calls:
  7675 ;;		Nothing
  7676 ;; This function is called by:
  7677 ;;		_sprintf
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text33
  7682  0029C0                     __ptext33:
  7683                           	opt stack 0
  7684  0029C0                     __tdiv_to_l_:
  7685                           	opt stack 20
  7686                           
  7687                           ;incstack = 0
  7688  0029C0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7689  0029C4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7690  0029C6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7691  0029C8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  7692  0029CA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7693  0029CC  E301               	bnc	u283_41
  7694  0029CE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7695  0029D0                     u283_41:
  7696  0029D0  5007               	movf	??__tdiv_to_l_,w,c
  7697  0029D2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  7698  0029D4  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  7699  0029D6  D009               	goto	i2l4513
  7700  0029D8  0E00               	movlw	0
  7701  0029DA  6E01               	movwf	?__tdiv_to_l_,c
  7702  0029DC  0E00               	movlw	0
  7703  0029DE  6E02               	movwf	?__tdiv_to_l_+1,c
  7704  0029E0  0E00               	movlw	0
  7705  0029E2  6E03               	movwf	?__tdiv_to_l_+2,c
  7706  0029E4  0E00               	movlw	0
  7707  0029E6  6E04               	movwf	?__tdiv_to_l_+3,c
  7708  0029E8  0012               	return	
  7709  0029EA                     i2l4513:
  7710  0029EA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7711  0029EE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7712  0029F0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7713  0029F2  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  7714  0029F4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7715  0029F6  E301               	bnc	u285_41
  7716  0029F8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7717  0029FA                     u285_41:
  7718  0029FA  5007               	movf	??__tdiv_to_l_,w,c
  7719  0029FC  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7720  0029FE  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  7721  002A00  D009               	goto	i2l4519
  7722  002A02  0E00               	movlw	0
  7723  002A04  6E01               	movwf	?__tdiv_to_l_,c
  7724  002A06  0E00               	movlw	0
  7725  002A08  6E02               	movwf	?__tdiv_to_l_+1,c
  7726  002A0A  0E00               	movlw	0
  7727  002A0C  6E03               	movwf	?__tdiv_to_l_+2,c
  7728  002A0E  0E00               	movlw	0
  7729  002A10  6E04               	movwf	?__tdiv_to_l_+3,c
  7730  002A12  0012               	return	
  7731  002A14                     i2l4519:
  7732  002A14  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  7733  002A16  0EFF               	movlw	255
  7734  002A18  1601               	andwf	__tdiv_to_l_@f1,f,c
  7735  002A1A  0EFF               	movlw	255
  7736  002A1C  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  7737  002A1E  0E00               	movlw	0
  7738  002A20  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  7739  002A22  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  7740  002A24  0EFF               	movlw	255
  7741  002A26  1604               	andwf	__tdiv_to_l_@f2,f,c
  7742  002A28  0EFF               	movlw	255
  7743  002A2A  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  7744  002A2C  0E00               	movlw	0
  7745  002A2E  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  7746  002A30  0E00               	movlw	0
  7747  002A32  6E0A               	movwf	__tdiv_to_l_@quot,c
  7748  002A34  0E00               	movlw	0
  7749  002A36  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  7750  002A38  0E00               	movlw	0
  7751  002A3A  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  7752  002A3C  0E00               	movlw	0
  7753  002A3E  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  7754  002A40  0E7F               	movlw	127
  7755  002A42  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7756  002A44  500E               	movf	__tdiv_to_l_@cntr,w,c
  7757  002A46  0F98               	addlw	152
  7758  002A48  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  7759  002A4A  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  7760  002A4C  0E18               	movlw	24
  7761  002A4E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  7762  002A50  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  7763  002A52                     i2l4533:
  7764  002A52  90D8               	bcf	status,0,c
  7765  002A54  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7766  002A56  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7767  002A58  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7768  002A5A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7769  002A5C  5004               	movf	__tdiv_to_l_@f2,w,c
  7770  002A5E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  7771  002A60  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7772  002A62  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  7773  002A64  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7774  002A66  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  7775  002A68  A0D8               	btfss	status,0,c
  7776  002A6A  D007               	goto	i2l707
  7777  002A6C  5004               	movf	__tdiv_to_l_@f2,w,c
  7778  002A6E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  7779  002A70  5005               	movf	__tdiv_to_l_@f2+1,w,c
  7780  002A72  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  7781  002A74  5006               	movf	__tdiv_to_l_@f2+2,w,c
  7782  002A76  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  7783  002A78  800A               	bsf	__tdiv_to_l_@quot,0,c
  7784  002A7A                     i2l707:
  7785  002A7A  90D8               	bcf	status,0,c
  7786  002A7C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  7787  002A7E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  7788  002A80  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  7789  002A82  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  7790  002A84  D7E6               	goto	i2l4533
  7791  002A86  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  7792  002A88  D019               	goto	i2l4553
  7793  002A8A  500F               	movf	__tdiv_to_l_@exp1,w,c
  7794  002A8C  0A80               	xorlw	128
  7795  002A8E  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  7796  002A90  0EE9               	movlw	233
  7797  002A92  0A80               	xorlw	128
  7798  002A94  5C07               	subwf	??__tdiv_to_l_,w,c
  7799  002A96  B0D8               	btfsc	status,0,c
  7800  002A98  D009               	goto	i2l4549
  7801  002A9A  0E00               	movlw	0
  7802  002A9C  6E01               	movwf	?__tdiv_to_l_,c
  7803  002A9E  0E00               	movlw	0
  7804  002AA0  6E02               	movwf	?__tdiv_to_l_+1,c
  7805  002AA2  0E00               	movlw	0
  7806  002AA4  6E03               	movwf	?__tdiv_to_l_+2,c
  7807  002AA6  0E00               	movlw	0
  7808  002AA8  6E04               	movwf	?__tdiv_to_l_+3,c
  7809  002AAA  0012               	return	
  7810  002AAC                     i2l4549:
  7811  002AAC  90D8               	bcf	status,0,c
  7812  002AAE  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7813  002AB0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7814  002AB2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7815  002AB4  320A               	rrcf	__tdiv_to_l_@quot,f,c
  7816  002AB6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  7817  002AB8  D7F9               	goto	i2l4549
  7818  002ABA  D014               	goto	i2l713
  7819  002ABC                     i2l4553:
  7820  002ABC  0E17               	movlw	23
  7821  002ABE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  7822  002AC0  D00F               	goto	i2l4561
  7823  002AC2  0E00               	movlw	0
  7824  002AC4  6E01               	movwf	?__tdiv_to_l_,c
  7825  002AC6  0E00               	movlw	0
  7826  002AC8  6E02               	movwf	?__tdiv_to_l_+1,c
  7827  002ACA  0E00               	movlw	0
  7828  002ACC  6E03               	movwf	?__tdiv_to_l_+2,c
  7829  002ACE  0E00               	movlw	0
  7830  002AD0  6E04               	movwf	?__tdiv_to_l_+3,c
  7831  002AD2  0012               	return	
  7832  002AD4                     i2l4559:
  7833  002AD4  90D8               	bcf	status,0,c
  7834  002AD6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  7835  002AD8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7836  002ADA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7837  002ADC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7838  002ADE  060F               	decf	__tdiv_to_l_@exp1,f,c
  7839  002AE0                     i2l4561:
  7840  002AE0  660F               	tstfsz	__tdiv_to_l_@exp1,c
  7841  002AE2  D7F8               	goto	i2l4559
  7842  002AE4                     i2l713:
  7843  002AE4  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7844  002AE8  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7845  002AEC  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7846  002AF0  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7847  002AF4  0012               	return	
  7848  002AF6                     __end_of__tdiv_to_l_:
  7849                           	opt stack 0
  7850                           pclatu	equ	0xFFB
  7851                           pclath	equ	0xFFA
  7852                           tblptru	equ	0xFF8
  7853                           tblptrh	equ	0xFF7
  7854                           tblptrl	equ	0xFF6
  7855                           tablat	equ	0xFF5
  7856                           prodh	equ	0xFF4
  7857                           prodl	equ	0xFF3
  7858                           intcon	equ	0xFF2
  7859                           indf0	equ	0xFEF
  7860                           fsr0h	equ	0xFEA
  7861                           fsr0l	equ	0xFE9
  7862                           wreg	equ	0xFE8
  7863                           fsr1h	equ	0xFE2
  7864                           fsr1l	equ	0xFE1
  7865                           indf2	equ	0xFDF
  7866                           postinc2	equ	0xFDE
  7867                           postdec2	equ	0xFDD
  7868                           fsr2h	equ	0xFDA
  7869                           fsr2l	equ	0xFD9
  7870                           status	equ	0xFD8
  7871                           
  7872 ;; *************** function __div_to_l_ *****************
  7873 ;; Defined at:
  7874 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\fldivl.c"
  7875 ;; Parameters:    Size  Location     Type
  7876 ;;  f1              3    0[COMRAM] unsigned long 
  7877 ;;  f2              3    3[COMRAM] unsigned long 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  quot            4   10[COMRAM] unsigned long 
  7880 ;;  exp1            1   15[COMRAM] unsigned char 
  7881 ;;  cntr            1   14[COMRAM] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  4    0[COMRAM] unsigned long 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7891 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7892 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7893 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7894 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7895 ;;Total ram usage:       16 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_sprintf
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text34
  7905  0025D0                     __ptext34:
  7906                           	opt stack 0
  7907  0025D0                     __div_to_l_:
  7908                           	opt stack 20
  7909                           
  7910                           ;incstack = 0
  7911  0025D0  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  7912  0025D4  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  7913  0025D8  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  7914  0025DC  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  7915  0025E0  0E18               	movlw	24
  7916  0025E2  D005               	goto	i2u292_40
  7917  0025E4                     i2u292_45:
  7918  0025E4  90D8               	bcf	status,0,c
  7919  0025E6  320A               	rrcf	??__div_to_l_+3,f,c
  7920  0025E8  3209               	rrcf	??__div_to_l_+2,f,c
  7921  0025EA  3208               	rrcf	??__div_to_l_+1,f,c
  7922  0025EC  3207               	rrcf	??__div_to_l_,f,c
  7923  0025EE                     i2u292_40:
  7924  0025EE  2EE8               	decfsz	wreg,f,c
  7925  0025F0  D7F9               	goto	i2u292_45
  7926  0025F2  5007               	movf	??__div_to_l_,w,c
  7927  0025F4  6E10               	movwf	__div_to_l_@exp1,c
  7928  0025F6  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  7929  0025F8  D009               	goto	i2l4569
  7930  0025FA  0E00               	movlw	0
  7931  0025FC  6E01               	movwf	?__div_to_l_,c
  7932  0025FE  0E00               	movlw	0
  7933  002600  6E02               	movwf	?__div_to_l_+1,c
  7934  002602  0E00               	movlw	0
  7935  002604  6E03               	movwf	?__div_to_l_+2,c
  7936  002606  0E00               	movlw	0
  7937  002608  6E04               	movwf	?__div_to_l_+3,c
  7938  00260A  0012               	return	
  7939  00260C                     i2l4569:
  7940  00260C  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  7941  002610  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  7942  002614  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  7943  002618  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  7944  00261C  0E18               	movlw	24
  7945  00261E  D005               	goto	i2u294_40
  7946  002620                     i2u294_45:
  7947  002620  90D8               	bcf	status,0,c
  7948  002622  320A               	rrcf	??__div_to_l_+3,f,c
  7949  002624  3209               	rrcf	??__div_to_l_+2,f,c
  7950  002626  3208               	rrcf	??__div_to_l_+1,f,c
  7951  002628  3207               	rrcf	??__div_to_l_,f,c
  7952  00262A                     i2u294_40:
  7953  00262A  2EE8               	decfsz	wreg,f,c
  7954  00262C  D7F9               	goto	i2u294_45
  7955  00262E  5007               	movf	??__div_to_l_,w,c
  7956  002630  6E0F               	movwf	__div_to_l_@cntr,c
  7957  002632  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  7958  002634  D009               	goto	i2l4575
  7959  002636  0E00               	movlw	0
  7960  002638  6E01               	movwf	?__div_to_l_,c
  7961  00263A  0E00               	movlw	0
  7962  00263C  6E02               	movwf	?__div_to_l_+1,c
  7963  00263E  0E00               	movlw	0
  7964  002640  6E03               	movwf	?__div_to_l_+2,c
  7965  002642  0E00               	movlw	0
  7966  002644  6E04               	movwf	?__div_to_l_+3,c
  7967  002646  0012               	return	
  7968  002648                     i2l4575:
  7969  002648  8E03               	bsf	__div_to_l_@f1+2,7,c
  7970  00264A  0EFF               	movlw	255
  7971  00264C  1601               	andwf	__div_to_l_@f1,f,c
  7972  00264E  0EFF               	movlw	255
  7973  002650  1602               	andwf	__div_to_l_@f1+1,f,c
  7974  002652  0EFF               	movlw	255
  7975  002654  1603               	andwf	__div_to_l_@f1+2,f,c
  7976  002656  0E00               	movlw	0
  7977  002658  1604               	andwf	__div_to_l_@f1+3,f,c
  7978  00265A  8E06               	bsf	__div_to_l_@f2+2,7,c
  7979  00265C  0EFF               	movlw	255
  7980  00265E  1604               	andwf	__div_to_l_@f2,f,c
  7981  002660  0EFF               	movlw	255
  7982  002662  1605               	andwf	__div_to_l_@f2+1,f,c
  7983  002664  0EFF               	movlw	255
  7984  002666  1606               	andwf	__div_to_l_@f2+2,f,c
  7985  002668  0E00               	movlw	0
  7986  00266A  1607               	andwf	__div_to_l_@f2+3,f,c
  7987  00266C  0E00               	movlw	0
  7988  00266E  6E0B               	movwf	__div_to_l_@quot,c
  7989  002670  0E00               	movlw	0
  7990  002672  6E0C               	movwf	__div_to_l_@quot+1,c
  7991  002674  0E00               	movlw	0
  7992  002676  6E0D               	movwf	__div_to_l_@quot+2,c
  7993  002678  0E00               	movlw	0
  7994  00267A  6E0E               	movwf	__div_to_l_@quot+3,c
  7995  00267C  0E7F               	movlw	127
  7996  00267E  5E10               	subwf	__div_to_l_@exp1,f,c
  7997  002680  500F               	movf	__div_to_l_@cntr,w,c
  7998  002682  0FA0               	addlw	160
  7999  002684  5E10               	subwf	__div_to_l_@exp1,f,c
  8000  002686  6E07               	movwf	??__div_to_l_& (0+255),c
  8001  002688  0E20               	movlw	32
  8002  00268A  6E0F               	movwf	__div_to_l_@cntr,c
  8003  00268C  5007               	movf	??__div_to_l_& (0+255),w,c
  8004  00268E                     i2l588:
  8005  00268E  90D8               	bcf	status,0,c
  8006  002690  360B               	rlcf	__div_to_l_@quot,f,c
  8007  002692  360C               	rlcf	__div_to_l_@quot+1,f,c
  8008  002694  360D               	rlcf	__div_to_l_@quot+2,f,c
  8009  002696  360E               	rlcf	__div_to_l_@quot+3,f,c
  8010  002698  5004               	movf	__div_to_l_@f2,w,c
  8011  00269A  5C01               	subwf	__div_to_l_@f1,w,c
  8012  00269C  5005               	movf	__div_to_l_@f2+1,w,c
  8013  00269E  5802               	subwfb	__div_to_l_@f1+1,w,c
  8014  0026A0  5006               	movf	__div_to_l_@f2+2,w,c
  8015  0026A2  5803               	subwfb	__div_to_l_@f1+2,w,c
  8016  0026A4  5007               	movf	__div_to_l_@f2+3,w,c
  8017  0026A6  5804               	subwfb	__div_to_l_@f1+3,w,c
  8018  0026A8  A0D8               	btfss	status,0,c
  8019  0026AA  D009               	goto	i2l4595
  8020  0026AC  5004               	movf	__div_to_l_@f2,w,c
  8021  0026AE  5E01               	subwf	__div_to_l_@f1,f,c
  8022  0026B0  5005               	movf	__div_to_l_@f2+1,w,c
  8023  0026B2  5A02               	subwfb	__div_to_l_@f1+1,f,c
  8024  0026B4  5006               	movf	__div_to_l_@f2+2,w,c
  8025  0026B6  5A03               	subwfb	__div_to_l_@f1+2,f,c
  8026  0026B8  5007               	movf	__div_to_l_@f2+3,w,c
  8027  0026BA  5A04               	subwfb	__div_to_l_@f1+3,f,c
  8028  0026BC  800B               	bsf	__div_to_l_@quot,0,c
  8029  0026BE                     i2l4595:
  8030  0026BE  90D8               	bcf	status,0,c
  8031  0026C0  3601               	rlcf	__div_to_l_@f1,f,c
  8032  0026C2  3602               	rlcf	__div_to_l_@f1+1,f,c
  8033  0026C4  3603               	rlcf	__div_to_l_@f1+2,f,c
  8034  0026C6  3604               	rlcf	__div_to_l_@f1+3,f,c
  8035  0026C8  2E0F               	decfsz	__div_to_l_@cntr,f,c
  8036  0026CA  D7E1               	goto	i2l588
  8037  0026CC  AE10               	btfss	__div_to_l_@exp1,7,c
  8038  0026CE  D019               	goto	i2l4609
  8039  0026D0  5010               	movf	__div_to_l_@exp1,w,c
  8040  0026D2  0A80               	xorlw	128
  8041  0026D4  6E07               	movwf	??__div_to_l_& (0+255),c
  8042  0026D6  0EE1               	movlw	225
  8043  0026D8  0A80               	xorlw	128
  8044  0026DA  5C07               	subwf	??__div_to_l_,w,c
  8045  0026DC  B0D8               	btfsc	status,0,c
  8046  0026DE  D009               	goto	i2l4605
  8047  0026E0  0E00               	movlw	0
  8048  0026E2  6E01               	movwf	?__div_to_l_,c
  8049  0026E4  0E00               	movlw	0
  8050  0026E6  6E02               	movwf	?__div_to_l_+1,c
  8051  0026E8  0E00               	movlw	0
  8052  0026EA  6E03               	movwf	?__div_to_l_+2,c
  8053  0026EC  0E00               	movlw	0
  8054  0026EE  6E04               	movwf	?__div_to_l_+3,c
  8055  0026F0  0012               	return	
  8056  0026F2                     i2l4605:
  8057  0026F2  90D8               	bcf	status,0,c
  8058  0026F4  320E               	rrcf	__div_to_l_@quot+3,f,c
  8059  0026F6  320D               	rrcf	__div_to_l_@quot+2,f,c
  8060  0026F8  320C               	rrcf	__div_to_l_@quot+1,f,c
  8061  0026FA  320B               	rrcf	__div_to_l_@quot,f,c
  8062  0026FC  3E10               	incfsz	__div_to_l_@exp1,f,c
  8063  0026FE  D7F9               	goto	i2l4605
  8064  002700  D014               	goto	i2l595
  8065  002702                     i2l4609:
  8066  002702  0E1F               	movlw	31
  8067  002704  6410               	cpfsgt	__div_to_l_@exp1,c
  8068  002706  D00F               	goto	i2l4617
  8069  002708  0E00               	movlw	0
  8070  00270A  6E01               	movwf	?__div_to_l_,c
  8071  00270C  0E00               	movlw	0
  8072  00270E  6E02               	movwf	?__div_to_l_+1,c
  8073  002710  0E00               	movlw	0
  8074  002712  6E03               	movwf	?__div_to_l_+2,c
  8075  002714  0E00               	movlw	0
  8076  002716  6E04               	movwf	?__div_to_l_+3,c
  8077  002718  0012               	return	
  8078  00271A                     i2l4615:
  8079  00271A  90D8               	bcf	status,0,c
  8080  00271C  360B               	rlcf	__div_to_l_@quot,f,c
  8081  00271E  360C               	rlcf	__div_to_l_@quot+1,f,c
  8082  002720  360D               	rlcf	__div_to_l_@quot+2,f,c
  8083  002722  360E               	rlcf	__div_to_l_@quot+3,f,c
  8084  002724  0610               	decf	__div_to_l_@exp1,f,c
  8085  002726                     i2l4617:
  8086  002726  6610               	tstfsz	__div_to_l_@exp1,c
  8087  002728  D7F8               	goto	i2l4615
  8088  00272A                     i2l595:
  8089  00272A  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  8090  00272E  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8091  002732  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8092  002736  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8093  00273A  0012               	return	
  8094  00273C                     __end_of__div_to_l_:
  8095                           	opt stack 0
  8096                           pclatu	equ	0xFFB
  8097                           pclath	equ	0xFFA
  8098                           tblptru	equ	0xFF8
  8099                           tblptrh	equ	0xFF7
  8100                           tblptrl	equ	0xFF6
  8101                           tablat	equ	0xFF5
  8102                           prodh	equ	0xFF4
  8103                           prodl	equ	0xFF3
  8104                           intcon	equ	0xFF2
  8105                           indf0	equ	0xFEF
  8106                           fsr0h	equ	0xFEA
  8107                           fsr0l	equ	0xFE9
  8108                           wreg	equ	0xFE8
  8109                           fsr1h	equ	0xFE2
  8110                           fsr1l	equ	0xFE1
  8111                           indf2	equ	0xFDF
  8112                           postinc2	equ	0xFDE
  8113                           postdec2	equ	0xFDD
  8114                           fsr2h	equ	0xFDA
  8115                           fsr2l	equ	0xFD9
  8116                           status	equ	0xFD8
  8117                           
  8118 ;; *************** function ___lltoft *****************
  8119 ;; Defined at:
  8120 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lltoft.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;  c               4    8[COMRAM] unsigned long 
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;  exp             1   16[COMRAM] unsigned char 
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  3    8[COMRAM] float 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8136 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8137 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8138 ;;Total ram usage:        9 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    1
  8141 ;; This function calls:
  8142 ;;		___ftpack
  8143 ;; This function is called by:
  8144 ;;		_sprintf
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	text35
  8149  00381E                     __ptext35:
  8150                           	opt stack 0
  8151  00381E                     ___lltoft:
  8152                           	opt stack 19
  8153                           
  8154                           ;incstack = 0
  8155  00381E  6E0D               	movwf	??___lltoft& (0+255),c
  8156  003820  0E8E               	movlw	142
  8157  003822  6E11               	movwf	___lltoft@exp,c
  8158  003824  500D               	movf	??___lltoft& (0+255),w,c
  8159  003826  D006               	goto	i2l4807
  8160  003828                     i2l4805:
  8161  003828  90D8               	bcf	status,0,c
  8162  00382A  320C               	rrcf	___lltoft@c+3,f,c
  8163  00382C  320B               	rrcf	___lltoft@c+2,f,c
  8164  00382E  320A               	rrcf	___lltoft@c+1,f,c
  8165  003830  3209               	rrcf	___lltoft@c,f,c
  8166  003832  2A11               	incf	___lltoft@exp,f,c
  8167  003834                     i2l4807:
  8168  003834  0E00               	movlw	0
  8169  003836  1409               	andwf	___lltoft@c,w,c
  8170  003838  6E0D               	movwf	??___lltoft& (0+255),c
  8171  00383A  0E00               	movlw	0
  8172  00383C  140A               	andwf	___lltoft@c+1,w,c
  8173  00383E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  8174  003840  0E00               	movlw	0
  8175  003842  140B               	andwf	___lltoft@c+2,w,c
  8176  003844  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  8177  003846  0EFF               	movlw	255
  8178  003848  140C               	andwf	___lltoft@c+3,w,c
  8179  00384A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  8180  00384C  5010               	movf	??___lltoft+3,w,c
  8181  00384E  100D               	iorwf	??___lltoft,w,c
  8182  003850  100E               	iorwf	??___lltoft+1,w,c
  8183  003852  100F               	iorwf	??___lltoft+2,w,c
  8184  003854  A4D8               	btfss	status,2,c
  8185  003856  D7E8               	goto	i2l4805
  8186  003858  C009  F001         	movff	___lltoft@c,___ftpack@arg
  8187  00385C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  8188  003860  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  8189  003864  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  8190  003868  6E0D               	movwf	??___lltoft& (0+255),c
  8191  00386A  0E00               	movlw	0
  8192  00386C  6E05               	movwf	___ftpack@sign,c
  8193  00386E  500D               	movf	??___lltoft& (0+255),w,c
  8194  003870  EC21  F01A         	call	___ftpack	;wreg free
  8195  003874  C001  F009         	movff	?___ftpack,?___lltoft
  8196  003878  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  8197  00387C  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  8198  003880  0012               	return	
  8199  003882                     __end_of___lltoft:
  8200                           	opt stack 0
  8201                           pclatu	equ	0xFFB
  8202                           pclath	equ	0xFFA
  8203                           tblptru	equ	0xFF8
  8204                           tblptrh	equ	0xFF7
  8205                           tblptrl	equ	0xFF6
  8206                           tablat	equ	0xFF5
  8207                           prodh	equ	0xFF4
  8208                           prodl	equ	0xFF3
  8209                           intcon	equ	0xFF2
  8210                           indf0	equ	0xFEF
  8211                           fsr0h	equ	0xFEA
  8212                           fsr0l	equ	0xFE9
  8213                           wreg	equ	0xFE8
  8214                           fsr1h	equ	0xFE2
  8215                           fsr1l	equ	0xFE1
  8216                           indf2	equ	0xFDF
  8217                           postinc2	equ	0xFDE
  8218                           postdec2	equ	0xFDD
  8219                           fsr2h	equ	0xFDA
  8220                           fsr2l	equ	0xFD9
  8221                           status	equ	0xFD8
  8222                           
  8223 ;; *************** function ___llmod *****************
  8224 ;; Defined at:
  8225 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\llmod.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  dividend        4   14[COMRAM] unsigned long 
  8228 ;;  divisor         4   18[COMRAM] unsigned long 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  counter         1   23[COMRAM] unsigned char 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;                  4   14[COMRAM] unsigned long 
  8233 ;; Registers used:
  8234 ;;		wreg, status,2, status,0
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8240 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8242 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8243 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8244 ;;Total ram usage:       10 bytes
  8245 ;; Hardware stack levels used:    1
  8246 ;; This function calls:
  8247 ;;		Nothing
  8248 ;; This function is called by:
  8249 ;;		_sprintf
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text36
  8254  0037B4                     __ptext36:
  8255                           	opt stack 0
  8256  0037B4                     ___llmod:
  8257                           	opt stack 20
  8258                           
  8259                           ;incstack = 0
  8260  0037B4  5016               	movf	___llmod@divisor+3,w,c
  8261  0037B6  1013               	iorwf	___llmod@divisor,w,c
  8262  0037B8  1014               	iorwf	___llmod@divisor+1,w,c
  8263  0037BA  1015               	iorwf	___llmod@divisor+2,w,c
  8264  0037BC  B4D8               	btfsc	status,2,c
  8265  0037BE  D026               	goto	i2l802
  8266  0037C0  6E17               	movwf	??___llmod& (0+255),c
  8267  0037C2  0E01               	movlw	1
  8268  0037C4  6E18               	movwf	___llmod@counter,c
  8269  0037C6  5017               	movf	??___llmod& (0+255),w,c
  8270  0037C8  D006               	goto	i2l4793
  8271  0037CA                     i2l4791:
  8272  0037CA  90D8               	bcf	status,0,c
  8273  0037CC  3613               	rlcf	___llmod@divisor,f,c
  8274  0037CE  3614               	rlcf	___llmod@divisor+1,f,c
  8275  0037D0  3615               	rlcf	___llmod@divisor+2,f,c
  8276  0037D2  3616               	rlcf	___llmod@divisor+3,f,c
  8277  0037D4  2A18               	incf	___llmod@counter,f,c
  8278  0037D6                     i2l4793:
  8279  0037D6  AE16               	btfss	___llmod@divisor+3,7,c
  8280  0037D8  D7F8               	goto	i2l4791
  8281  0037DA                     i2l4795:
  8282  0037DA  5013               	movf	___llmod@divisor,w,c
  8283  0037DC  5C0F               	subwf	___llmod@dividend,w,c
  8284  0037DE  5014               	movf	___llmod@divisor+1,w,c
  8285  0037E0  5810               	subwfb	___llmod@dividend+1,w,c
  8286  0037E2  5015               	movf	___llmod@divisor+2,w,c
  8287  0037E4  5811               	subwfb	___llmod@dividend+2,w,c
  8288  0037E6  5016               	movf	___llmod@divisor+3,w,c
  8289  0037E8  5812               	subwfb	___llmod@dividend+3,w,c
  8290  0037EA  A0D8               	btfss	status,0,c
  8291  0037EC  D008               	goto	i2l4799
  8292  0037EE  5013               	movf	___llmod@divisor,w,c
  8293  0037F0  5E0F               	subwf	___llmod@dividend,f,c
  8294  0037F2  5014               	movf	___llmod@divisor+1,w,c
  8295  0037F4  5A10               	subwfb	___llmod@dividend+1,f,c
  8296  0037F6  5015               	movf	___llmod@divisor+2,w,c
  8297  0037F8  5A11               	subwfb	___llmod@dividend+2,f,c
  8298  0037FA  5016               	movf	___llmod@divisor+3,w,c
  8299  0037FC  5A12               	subwfb	___llmod@dividend+3,f,c
  8300  0037FE                     i2l4799:
  8301  0037FE  90D8               	bcf	status,0,c
  8302  003800  3216               	rrcf	___llmod@divisor+3,f,c
  8303  003802  3215               	rrcf	___llmod@divisor+2,f,c
  8304  003804  3214               	rrcf	___llmod@divisor+1,f,c
  8305  003806  3213               	rrcf	___llmod@divisor,f,c
  8306  003808  2E18               	decfsz	___llmod@counter,f,c
  8307  00380A  D7E7               	goto	i2l4795
  8308  00380C                     i2l802:
  8309  00380C  C00F  F00F         	movff	___llmod@dividend,?___llmod
  8310  003810  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  8311  003814  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  8312  003818  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  8313  00381C  0012               	return	
  8314  00381E                     __end_of___llmod:
  8315                           	opt stack 0
  8316                           pclatu	equ	0xFFB
  8317                           pclath	equ	0xFFA
  8318                           tblptru	equ	0xFF8
  8319                           tblptrh	equ	0xFF7
  8320                           tblptrl	equ	0xFF6
  8321                           tablat	equ	0xFF5
  8322                           prodh	equ	0xFF4
  8323                           prodl	equ	0xFF3
  8324                           intcon	equ	0xFF2
  8325                           indf0	equ	0xFEF
  8326                           fsr0h	equ	0xFEA
  8327                           fsr0l	equ	0xFE9
  8328                           wreg	equ	0xFE8
  8329                           fsr1h	equ	0xFE2
  8330                           fsr1l	equ	0xFE1
  8331                           indf2	equ	0xFDF
  8332                           postinc2	equ	0xFDE
  8333                           postdec2	equ	0xFDD
  8334                           fsr2h	equ	0xFDA
  8335                           fsr2l	equ	0xFD9
  8336                           status	equ	0xFD8
  8337                           
  8338 ;; *************** function ___lldiv *****************
  8339 ;; Defined at:
  8340 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lldiv.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;  dividend        4    0[COMRAM] unsigned long 
  8343 ;;  divisor         4    4[COMRAM] unsigned long 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  quotient        4    9[COMRAM] unsigned long 
  8346 ;;  counter         1   13[COMRAM] unsigned char 
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  4    0[COMRAM] unsigned long 
  8349 ;; Registers used:
  8350 ;;		wreg, status,2, status,0
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8356 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8357 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8359 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8360 ;;Total ram usage:       14 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_sprintf
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text37
  8370  0036AE                     __ptext37:
  8371                           	opt stack 0
  8372  0036AE                     ___lldiv:
  8373                           	opt stack 20
  8374                           
  8375                           ;incstack = 0
  8376  0036AE  0E00               	movlw	0
  8377  0036B0  6E0A               	movwf	___lldiv@quotient,c
  8378  0036B2  0E00               	movlw	0
  8379  0036B4  6E0B               	movwf	___lldiv@quotient+1,c
  8380  0036B6  0E00               	movlw	0
  8381  0036B8  6E0C               	movwf	___lldiv@quotient+2,c
  8382  0036BA  0E00               	movlw	0
  8383  0036BC  6E0D               	movwf	___lldiv@quotient+3,c
  8384  0036BE  5008               	movf	___lldiv@divisor+3,w,c
  8385  0036C0  1005               	iorwf	___lldiv@divisor,w,c
  8386  0036C2  1006               	iorwf	___lldiv@divisor+1,w,c
  8387  0036C4  1007               	iorwf	___lldiv@divisor+2,w,c
  8388  0036C6  B4D8               	btfsc	status,2,c
  8389  0036C8  D02C               	goto	i2l792
  8390  0036CA  6E09               	movwf	??___lldiv& (0+255),c
  8391  0036CC  0E01               	movlw	1
  8392  0036CE  6E0E               	movwf	___lldiv@counter,c
  8393  0036D0  5009               	movf	??___lldiv& (0+255),w,c
  8394  0036D2  D006               	goto	i2l4773
  8395  0036D4                     i2l4771:
  8396  0036D4  90D8               	bcf	status,0,c
  8397  0036D6  3605               	rlcf	___lldiv@divisor,f,c
  8398  0036D8  3606               	rlcf	___lldiv@divisor+1,f,c
  8399  0036DA  3607               	rlcf	___lldiv@divisor+2,f,c
  8400  0036DC  3608               	rlcf	___lldiv@divisor+3,f,c
  8401  0036DE  2A0E               	incf	___lldiv@counter,f,c
  8402  0036E0                     i2l4773:
  8403  0036E0  AE08               	btfss	___lldiv@divisor+3,7,c
  8404  0036E2  D7F8               	goto	i2l4771
  8405  0036E4                     i2l4775:
  8406  0036E4  90D8               	bcf	status,0,c
  8407  0036E6  360A               	rlcf	___lldiv@quotient,f,c
  8408  0036E8  360B               	rlcf	___lldiv@quotient+1,f,c
  8409  0036EA  360C               	rlcf	___lldiv@quotient+2,f,c
  8410  0036EC  360D               	rlcf	___lldiv@quotient+3,f,c
  8411  0036EE  5005               	movf	___lldiv@divisor,w,c
  8412  0036F0  5C01               	subwf	___lldiv@dividend,w,c
  8413  0036F2  5006               	movf	___lldiv@divisor+1,w,c
  8414  0036F4  5802               	subwfb	___lldiv@dividend+1,w,c
  8415  0036F6  5007               	movf	___lldiv@divisor+2,w,c
  8416  0036F8  5803               	subwfb	___lldiv@dividend+2,w,c
  8417  0036FA  5008               	movf	___lldiv@divisor+3,w,c
  8418  0036FC  5804               	subwfb	___lldiv@dividend+3,w,c
  8419  0036FE  A0D8               	btfss	status,0,c
  8420  003700  D009               	goto	i2l4783
  8421  003702  5005               	movf	___lldiv@divisor,w,c
  8422  003704  5E01               	subwf	___lldiv@dividend,f,c
  8423  003706  5006               	movf	___lldiv@divisor+1,w,c
  8424  003708  5A02               	subwfb	___lldiv@dividend+1,f,c
  8425  00370A  5007               	movf	___lldiv@divisor+2,w,c
  8426  00370C  5A03               	subwfb	___lldiv@dividend+2,f,c
  8427  00370E  5008               	movf	___lldiv@divisor+3,w,c
  8428  003710  5A04               	subwfb	___lldiv@dividend+3,f,c
  8429  003712  800A               	bsf	___lldiv@quotient,0,c
  8430  003714                     i2l4783:
  8431  003714  90D8               	bcf	status,0,c
  8432  003716  3208               	rrcf	___lldiv@divisor+3,f,c
  8433  003718  3207               	rrcf	___lldiv@divisor+2,f,c
  8434  00371A  3206               	rrcf	___lldiv@divisor+1,f,c
  8435  00371C  3205               	rrcf	___lldiv@divisor,f,c
  8436  00371E  2E0E               	decfsz	___lldiv@counter,f,c
  8437  003720  D7E1               	goto	i2l4775
  8438  003722                     i2l792:
  8439  003722  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  8440  003726  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  8441  00372A  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  8442  00372E  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  8443  003732  0012               	return	
  8444  003734                     __end_of___lldiv:
  8445                           	opt stack 0
  8446                           pclatu	equ	0xFFB
  8447                           pclath	equ	0xFFA
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           intcon	equ	0xFF2
  8455                           indf0	equ	0xFEF
  8456                           fsr0h	equ	0xFEA
  8457                           fsr0l	equ	0xFE9
  8458                           wreg	equ	0xFE8
  8459                           fsr1h	equ	0xFE2
  8460                           fsr1l	equ	0xFE1
  8461                           indf2	equ	0xFDF
  8462                           postinc2	equ	0xFDE
  8463                           postdec2	equ	0xFDD
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function ___fttol *****************
  8469 ;; Defined at:
  8470 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\fttol.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  f1              3   44[COMRAM] float 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;  lval            4   54[COMRAM] unsigned long 
  8475 ;;  exp1            1   58[COMRAM] unsigned char 
  8476 ;;  sign1           1   53[COMRAM] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  4   44[COMRAM] long 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8486 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8487 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8488 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8489 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8490 ;;Total ram usage:       15 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		_sprintf
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text38
  8500  00303E                     __ptext38:
  8501                           	opt stack 0
  8502  00303E                     ___fttol:
  8503                           	opt stack 20
  8504                           
  8505                           ;incstack = 0
  8506  00303E  C02F  F031         	movff	___fttol@f1+2,??___fttol
  8507  003042  6A32               	clrf	(??___fttol+1)& (0+255),c
  8508  003044  6A33               	clrf	(??___fttol+2)& (0+255),c
  8509  003046  342E               	rlcf	___fttol@f1+1,w,c
  8510  003048  3631               	rlcf	??___fttol& (0+255),f,c
  8511  00304A  E301               	bnc	u314_41
  8512  00304C  8032               	bsf	(??___fttol+1)& (0+255),0,c
  8513  00304E                     u314_41:
  8514  00304E  5031               	movf	??___fttol,w,c
  8515  003050  6E3B               	movwf	___fttol@exp1,c
  8516  003052  663B               	tstfsz	___fttol@exp1& (0+255),c
  8517  003054  D009               	goto	i2l4725
  8518  003056  0E00               	movlw	0
  8519  003058  6E2D               	movwf	?___fttol,c
  8520  00305A  0E00               	movlw	0
  8521  00305C  6E2E               	movwf	?___fttol+1,c
  8522  00305E  0E00               	movlw	0
  8523  003060  6E2F               	movwf	?___fttol+2,c
  8524  003062  0E00               	movlw	0
  8525  003064  6E30               	movwf	?___fttol+3,c
  8526  003066  0012               	return	
  8527  003068                     i2l4725:
  8528  003068  0E17               	movlw	23
  8529  00306A  6E31               	movwf	??___fttol& (0+255),c
  8530  00306C  C02D  F032         	movff	___fttol@f1,??___fttol+1
  8531  003070  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  8532  003074  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  8533  003078  2831               	incf	??___fttol,w,c
  8534  00307A  6E35               	movwf	(??___fttol+4)& (0+255),c
  8535  00307C  D004               	goto	i2u316_40
  8536  00307E                     i2u316_45:
  8537  00307E  90D8               	bcf	status,0,c
  8538  003080  3234               	rrcf	??___fttol+3,f,c
  8539  003082  3233               	rrcf	??___fttol+2,f,c
  8540  003084  3232               	rrcf	??___fttol+1,f,c
  8541  003086                     i2u316_40:
  8542  003086  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  8543  003088  D7FA               	goto	i2u316_45
  8544  00308A  5032               	movf	??___fttol+1,w,c
  8545  00308C  6E36               	movwf	___fttol@sign1,c
  8546  00308E  8E2E               	bsf	___fttol@f1+1,7,c
  8547  003090  0EFF               	movlw	255
  8548  003092  162D               	andwf	___fttol@f1,f,c
  8549  003094  0EFF               	movlw	255
  8550  003096  162E               	andwf	___fttol@f1+1,f,c
  8551  003098  0E00               	movlw	0
  8552  00309A  162F               	andwf	___fttol@f1+2,f,c
  8553  00309C  502D               	movf	___fttol@f1,w,c
  8554  00309E  6E37               	movwf	___fttol@lval,c
  8555  0030A0  502E               	movf	___fttol@f1+1,w,c
  8556  0030A2  6E38               	movwf	___fttol@lval+1,c
  8557  0030A4  502F               	movf	___fttol@f1+2,w,c
  8558  0030A6  6E39               	movwf	___fttol@lval+2,c
  8559  0030A8  6A3A               	clrf	___fttol@lval+3,c
  8560  0030AA  0E8E               	movlw	142
  8561  0030AC  5E3B               	subwf	___fttol@exp1,f,c
  8562  0030AE  AE3B               	btfss	___fttol@exp1,7,c
  8563  0030B0  D019               	goto	i2l4747
  8564  0030B2  503B               	movf	___fttol@exp1,w,c
  8565  0030B4  0A80               	xorlw	128
  8566  0030B6  6E31               	movwf	??___fttol& (0+255),c
  8567  0030B8  0EF1               	movlw	241
  8568  0030BA  0A80               	xorlw	128
  8569  0030BC  5C31               	subwf	??___fttol,w,c
  8570  0030BE  B0D8               	btfsc	status,0,c
  8571  0030C0  D009               	goto	i2l4743
  8572  0030C2  0E00               	movlw	0
  8573  0030C4  6E2D               	movwf	?___fttol,c
  8574  0030C6  0E00               	movlw	0
  8575  0030C8  6E2E               	movwf	?___fttol+1,c
  8576  0030CA  0E00               	movlw	0
  8577  0030CC  6E2F               	movwf	?___fttol+2,c
  8578  0030CE  0E00               	movlw	0
  8579  0030D0  6E30               	movwf	?___fttol+3,c
  8580  0030D2  0012               	return	
  8581  0030D4                     i2l4743:
  8582  0030D4  90D8               	bcf	status,0,c
  8583  0030D6  323A               	rrcf	___fttol@lval+3,f,c
  8584  0030D8  3239               	rrcf	___fttol@lval+2,f,c
  8585  0030DA  3238               	rrcf	___fttol@lval+1,f,c
  8586  0030DC  3237               	rrcf	___fttol@lval,f,c
  8587  0030DE  3E3B               	incfsz	___fttol@exp1,f,c
  8588  0030E0  D7F9               	goto	i2l4743
  8589  0030E2  D014               	goto	i2l4757
  8590  0030E4                     i2l4747:
  8591  0030E4  0E17               	movlw	23
  8592  0030E6  643B               	cpfsgt	___fttol@exp1,c
  8593  0030E8  D00F               	goto	i2l4755
  8594  0030EA  0E00               	movlw	0
  8595  0030EC  6E2D               	movwf	?___fttol,c
  8596  0030EE  0E00               	movlw	0
  8597  0030F0  6E2E               	movwf	?___fttol+1,c
  8598  0030F2  0E00               	movlw	0
  8599  0030F4  6E2F               	movwf	?___fttol+2,c
  8600  0030F6  0E00               	movlw	0
  8601  0030F8  6E30               	movwf	?___fttol+3,c
  8602  0030FA  0012               	return	
  8603  0030FC                     i2l4753:
  8604  0030FC  90D8               	bcf	status,0,c
  8605  0030FE  3637               	rlcf	___fttol@lval,f,c
  8606  003100  3638               	rlcf	___fttol@lval+1,f,c
  8607  003102  3639               	rlcf	___fttol@lval+2,f,c
  8608  003104  363A               	rlcf	___fttol@lval+3,f,c
  8609  003106  063B               	decf	___fttol@exp1,f,c
  8610  003108                     i2l4755:
  8611  003108  663B               	tstfsz	___fttol@exp1,c
  8612  00310A  D7F8               	goto	i2l4753
  8613  00310C                     i2l4757:
  8614  00310C  5036               	movf	___fttol@sign1,w,c
  8615  00310E  B4D8               	btfsc	status,2,c
  8616  003110  D008               	goto	i2l4761
  8617  003112  1E3A               	comf	___fttol@lval+3,f,c
  8618  003114  1E39               	comf	___fttol@lval+2,f,c
  8619  003116  1E38               	comf	___fttol@lval+1,f,c
  8620  003118  6C37               	negf	___fttol@lval,c
  8621  00311A  0E00               	movlw	0
  8622  00311C  2238               	addwfc	___fttol@lval+1,f,c
  8623  00311E  2239               	addwfc	___fttol@lval+2,f,c
  8624  003120  223A               	addwfc	___fttol@lval+3,f,c
  8625  003122                     i2l4761:
  8626  003122  C037  F02D         	movff	___fttol@lval,?___fttol
  8627  003126  C038  F02E         	movff	___fttol@lval+1,?___fttol+1
  8628  00312A  C039  F02F         	movff	___fttol@lval+2,?___fttol+2
  8629  00312E  C03A  F030         	movff	___fttol@lval+3,?___fttol+3
  8630  003132  0012               	return	
  8631  003134                     __end_of___fttol:
  8632                           	opt stack 0
  8633                           pclatu	equ	0xFFB
  8634                           pclath	equ	0xFFA
  8635                           tblptru	equ	0xFF8
  8636                           tblptrh	equ	0xFF7
  8637                           tblptrl	equ	0xFF6
  8638                           tablat	equ	0xFF5
  8639                           prodh	equ	0xFF4
  8640                           prodl	equ	0xFF3
  8641                           intcon	equ	0xFF2
  8642                           indf0	equ	0xFEF
  8643                           fsr0h	equ	0xFEA
  8644                           fsr0l	equ	0xFE9
  8645                           wreg	equ	0xFE8
  8646                           fsr1h	equ	0xFE2
  8647                           fsr1l	equ	0xFE1
  8648                           indf2	equ	0xFDF
  8649                           postinc2	equ	0xFDE
  8650                           postdec2	equ	0xFDD
  8651                           fsr2h	equ	0xFDA
  8652                           fsr2l	equ	0xFD9
  8653                           status	equ	0xFD8
  8654                           
  8655 ;; *************** function ___ftneg *****************
  8656 ;; Defined at:
  8657 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftneg.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  f1              3    0[COMRAM] float 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;		None
  8662 ;; Return value:  Size  Location     Type
  8663 ;;                  3    0[COMRAM] float 
  8664 ;; Registers used:
  8665 ;;		wreg, status,2, status,0
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8671 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8674 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;Total ram usage:        3 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; This function calls:
  8678 ;;		Nothing
  8679 ;; This function is called by:
  8680 ;;		_sprintf
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           	psect	text39
  8685  003DE4                     __ptext39:
  8686                           	opt stack 0
  8687  003DE4                     ___ftneg:
  8688                           	opt stack 20
  8689                           
  8690                           ;incstack = 0
  8691  003DE4  0E7F               	movlw	127
  8692  003DE6  1403               	andwf	___ftneg@f1+2,w,c
  8693  003DE8  1002               	iorwf	___ftneg@f1+1,w,c
  8694  003DEA  1001               	iorwf	___ftneg@f1,w,c
  8695  003DEC  B4D8               	btfsc	status,2,c
  8696  003DEE  D006               	goto	i2l738
  8697  003DF0  0E00               	movlw	0
  8698  003DF2  1A01               	xorwf	___ftneg@f1,f,c
  8699  003DF4  0E00               	movlw	0
  8700  003DF6  1A02               	xorwf	___ftneg@f1+1,f,c
  8701  003DF8  0E80               	movlw	128
  8702  003DFA  1A03               	xorwf	___ftneg@f1+2,f,c
  8703  003DFC                     i2l738:
  8704  003DFC  C001  F001         	movff	___ftneg@f1,?___ftneg
  8705  003E00  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8706  003E04  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8707  003E08  0012               	return	
  8708  003E0A                     __end_of___ftneg:
  8709                           	opt stack 0
  8710                           pclatu	equ	0xFFB
  8711                           pclath	equ	0xFFA
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           intcon	equ	0xFF2
  8719                           indf0	equ	0xFEF
  8720                           fsr0h	equ	0xFEA
  8721                           fsr0l	equ	0xFE9
  8722                           wreg	equ	0xFE8
  8723                           fsr1h	equ	0xFE2
  8724                           fsr1l	equ	0xFE1
  8725                           indf2	equ	0xFDF
  8726                           postinc2	equ	0xFDE
  8727                           postdec2	equ	0xFDD
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           
  8732 ;; *************** function ___asftsub *****************
  8733 ;; Defined at:
  8734 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic18\asftsub.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  f1p             2   55[COMRAM] PTR float 
  8737 ;;		 -> sprintf@fval(3), 
  8738 ;;  f2              3   57[COMRAM] float 
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  3   55[COMRAM] float 
  8743 ;; Registers used:
  8744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8750 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8753 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8754 ;;Total ram usage:        5 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; Hardware stack levels required when called:    3
  8757 ;; This function calls:
  8758 ;;		___ftsub
  8759 ;; This function is called by:
  8760 ;;		_sprintf
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           	psect	text40
  8765  003C0A                     __ptext40:
  8766                           	opt stack 0
  8767  003C0A                     ___asftsub:
  8768                           	opt stack 17
  8769                           
  8770                           ;	Return value of ___asftsub is never used
  8771                           
  8772                           ;incstack = 0
  8773  003C0A  C038  FFD9         	movff	___asftsub@f1p,fsr2l
  8774  003C0E  C039  FFDA         	movff	___asftsub@f1p+1,fsr2h
  8775  003C12  CFDE F032          	movff	postinc2,___ftsub@f1
  8776  003C16  CFDE F033          	movff	postinc2,___ftsub@f1+1
  8777  003C1A  CFDD F034          	movff	postdec2,___ftsub@f1+2
  8778  003C1E  C03A  F035         	movff	___asftsub@f2,___ftsub@f2
  8779  003C22  C03B  F036         	movff	___asftsub@f2+1,___ftsub@f2+1
  8780  003C26  C03C  F037         	movff	___asftsub@f2+2,___ftsub@f2+2
  8781  003C2A  EC7C  F01E         	call	___ftsub	;wreg free
  8782  003C2E  C038  FFD9         	movff	___asftsub@f1p,fsr2l
  8783  003C32  C039  FFDA         	movff	___asftsub@f1p+1,fsr2h
  8784  003C36  C032  FFDE         	movff	?___ftsub,postinc2
  8785  003C3A  C033  FFDE         	movff	?___ftsub+1,postinc2
  8786  003C3E  C034  FFDD         	movff	?___ftsub+2,postdec2
  8787  003C42  52DD               	movf	postdec2,f,c
  8788  003C44  0012               	return	
  8789  003C46                     __end_of___asftsub:
  8790                           	opt stack 0
  8791                           pclatu	equ	0xFFB
  8792                           pclath	equ	0xFFA
  8793                           tblptru	equ	0xFF8
  8794                           tblptrh	equ	0xFF7
  8795                           tblptrl	equ	0xFF6
  8796                           tablat	equ	0xFF5
  8797                           prodh	equ	0xFF4
  8798                           prodl	equ	0xFF3
  8799                           intcon	equ	0xFF2
  8800                           indf0	equ	0xFEF
  8801                           fsr0h	equ	0xFEA
  8802                           fsr0l	equ	0xFE9
  8803                           wreg	equ	0xFE8
  8804                           fsr1h	equ	0xFE2
  8805                           fsr1l	equ	0xFE1
  8806                           indf2	equ	0xFDF
  8807                           postinc2	equ	0xFDE
  8808                           postdec2	equ	0xFDD
  8809                           fsr2h	equ	0xFDA
  8810                           fsr2l	equ	0xFD9
  8811                           status	equ	0xFD8
  8812                           
  8813 ;; *************** function ___ftsub *****************
  8814 ;; Defined at:
  8815 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftsub.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  f1              3   49[COMRAM] float 
  8818 ;;  f2              3   52[COMRAM] float 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;		None
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  3   49[COMRAM] float 
  8823 ;; Registers used:
  8824 ;;		wreg, status,2, status,0, cstack
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8830 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8834 ;;Total ram usage:        6 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    2
  8837 ;; This function calls:
  8838 ;;		___ftadd
  8839 ;; This function is called by:
  8840 ;;		___asftsub
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           	psect	text41
  8845  003CF8                     __ptext41:
  8846                           	opt stack 0
  8847  003CF8                     ___ftsub:
  8848                           	opt stack 17
  8849                           
  8850                           ;incstack = 0
  8851  003CF8  0E00               	movlw	0
  8852  003CFA  1A35               	xorwf	___ftsub@f2,f,c
  8853  003CFC  0E00               	movlw	0
  8854  003CFE  1A36               	xorwf	___ftsub@f2+1,f,c
  8855  003D00  0E80               	movlw	128
  8856  003D02  1A37               	xorwf	___ftsub@f2+2,f,c
  8857  003D04  C032  F026         	movff	___ftsub@f1,___ftadd@f1
  8858  003D08  C033  F027         	movff	___ftsub@f1+1,___ftadd@f1+1
  8859  003D0C  C034  F028         	movff	___ftsub@f1+2,___ftadd@f1+2
  8860  003D10  C035  F029         	movff	___ftsub@f2,___ftadd@f2
  8861  003D14  C036  F02A         	movff	___ftsub@f2+1,___ftadd@f2+1
  8862  003D18  C037  F02B         	movff	___ftsub@f2+2,___ftadd@f2+2
  8863  003D1C  EC0C  F012         	call	___ftadd	;wreg free
  8864  003D20  C026  F032         	movff	?___ftadd,?___ftsub
  8865  003D24  C027  F033         	movff	?___ftadd+1,?___ftsub+1
  8866  003D28  C028  F034         	movff	?___ftadd+2,?___ftsub+2
  8867  003D2C  0012               	return	
  8868  003D2E                     __end_of___ftsub:
  8869                           	opt stack 0
  8870                           pclatu	equ	0xFFB
  8871                           pclath	equ	0xFFA
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           indf0	equ	0xFEF
  8880                           fsr0h	equ	0xFEA
  8881                           fsr0l	equ	0xFE9
  8882                           wreg	equ	0xFE8
  8883                           fsr1h	equ	0xFE2
  8884                           fsr1l	equ	0xFE1
  8885                           indf2	equ	0xFDF
  8886                           postinc2	equ	0xFDE
  8887                           postdec2	equ	0xFDD
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function ___asftmul *****************
  8893 ;; Defined at:
  8894 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic18\asftmul.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  f1p             2   37[COMRAM] PTR float 
  8897 ;;		 -> sprintf@integ(3), 
  8898 ;;  f2              3   39[COMRAM] float 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  3   37[COMRAM] float 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8910 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8913 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8914 ;;Total ram usage:        5 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    2
  8917 ;; This function calls:
  8918 ;;		___ftmul
  8919 ;; This function is called by:
  8920 ;;		_sprintf
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text42
  8925  003C46                     __ptext42:
  8926                           	opt stack 0
  8927  003C46                     ___asftmul:
  8928                           	opt stack 18
  8929                           
  8930                           ;	Return value of ___asftmul is never used
  8931                           
  8932                           ;incstack = 0
  8933  003C46  C026  FFD9         	movff	___asftmul@f1p,fsr2l
  8934  003C4A  C027  FFDA         	movff	___asftmul@f1p+1,fsr2h
  8935  003C4E  CFDE F017          	movff	postinc2,___ftmul@f1
  8936  003C52  CFDE F018          	movff	postinc2,___ftmul@f1+1
  8937  003C56  CFDD F019          	movff	postdec2,___ftmul@f1+2
  8938  003C5A  C028  F01A         	movff	___asftmul@f2,___ftmul@f2
  8939  003C5E  C029  F01B         	movff	___asftmul@f2+1,___ftmul@f2+1
  8940  003C62  C02A  F01C         	movff	___asftmul@f2+2,___ftmul@f2+2
  8941  003C66  ECA3  F017         	call	___ftmul	;wreg free
  8942  003C6A  C026  FFD9         	movff	___asftmul@f1p,fsr2l
  8943  003C6E  C027  FFDA         	movff	___asftmul@f1p+1,fsr2h
  8944  003C72  C017  FFDE         	movff	?___ftmul,postinc2
  8945  003C76  C018  FFDE         	movff	?___ftmul+1,postinc2
  8946  003C7A  C019  FFDD         	movff	?___ftmul+2,postdec2
  8947  003C7E  52DD               	movf	postdec2,f,c
  8948  003C80  0012               	return	
  8949  003C82                     __end_of___asftmul:
  8950                           	opt stack 0
  8951                           pclatu	equ	0xFFB
  8952                           pclath	equ	0xFFA
  8953                           tblptru	equ	0xFF8
  8954                           tblptrh	equ	0xFF7
  8955                           tblptrl	equ	0xFF6
  8956                           tablat	equ	0xFF5
  8957                           prodh	equ	0xFF4
  8958                           prodl	equ	0xFF3
  8959                           intcon	equ	0xFF2
  8960                           indf0	equ	0xFEF
  8961                           fsr0h	equ	0xFEA
  8962                           fsr0l	equ	0xFE9
  8963                           wreg	equ	0xFE8
  8964                           fsr1h	equ	0xFE2
  8965                           fsr1l	equ	0xFE1
  8966                           indf2	equ	0xFDF
  8967                           postinc2	equ	0xFDE
  8968                           postdec2	equ	0xFDD
  8969                           fsr2h	equ	0xFDA
  8970                           fsr2l	equ	0xFD9
  8971                           status	equ	0xFD8
  8972                           
  8973 ;; *************** function ___asftadd *****************
  8974 ;; Defined at:
  8975 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic18\asftadd.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  f1p             2   49[COMRAM] PTR float 
  8978 ;;		 -> sprintf@fval(3), 
  8979 ;;  f2              3   51[COMRAM] float 
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;		None
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  3   49[COMRAM] float 
  8984 ;; Registers used:
  8985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8991 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8994 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8995 ;;Total ram usage:        5 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    2
  8998 ;; This function calls:
  8999 ;;		___ftadd
  9000 ;; This function is called by:
  9001 ;;		_sprintf
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text43
  9006  003C82                     __ptext43:
  9007                           	opt stack 0
  9008  003C82                     ___asftadd:
  9009                           	opt stack 18
  9010                           
  9011                           ;	Return value of ___asftadd is never used
  9012                           
  9013                           ;incstack = 0
  9014  003C82  C032  FFD9         	movff	___asftadd@f1p,fsr2l
  9015  003C86  C033  FFDA         	movff	___asftadd@f1p+1,fsr2h
  9016  003C8A  CFDE F026          	movff	postinc2,___ftadd@f1
  9017  003C8E  CFDE F027          	movff	postinc2,___ftadd@f1+1
  9018  003C92  CFDD F028          	movff	postdec2,___ftadd@f1+2
  9019  003C96  C034  F029         	movff	___asftadd@f2,___ftadd@f2
  9020  003C9A  C035  F02A         	movff	___asftadd@f2+1,___ftadd@f2+1
  9021  003C9E  C036  F02B         	movff	___asftadd@f2+2,___ftadd@f2+2
  9022  003CA2  EC0C  F012         	call	___ftadd	;wreg free
  9023  003CA6  C032  FFD9         	movff	___asftadd@f1p,fsr2l
  9024  003CAA  C033  FFDA         	movff	___asftadd@f1p+1,fsr2h
  9025  003CAE  C026  FFDE         	movff	?___ftadd,postinc2
  9026  003CB2  C027  FFDE         	movff	?___ftadd+1,postinc2
  9027  003CB6  C028  FFDD         	movff	?___ftadd+2,postdec2
  9028  003CBA  52DD               	movf	postdec2,f,c
  9029  003CBC  0012               	return	
  9030  003CBE                     __end_of___asftadd:
  9031                           	opt stack 0
  9032                           pclatu	equ	0xFFB
  9033                           pclath	equ	0xFFA
  9034                           tblptru	equ	0xFF8
  9035                           tblptrh	equ	0xFF7
  9036                           tblptrl	equ	0xFF6
  9037                           tablat	equ	0xFF5
  9038                           prodh	equ	0xFF4
  9039                           prodl	equ	0xFF3
  9040                           intcon	equ	0xFF2
  9041                           indf0	equ	0xFEF
  9042                           fsr0h	equ	0xFEA
  9043                           fsr0l	equ	0xFE9
  9044                           wreg	equ	0xFE8
  9045                           fsr1h	equ	0xFE2
  9046                           fsr1l	equ	0xFE1
  9047                           indf2	equ	0xFDF
  9048                           postinc2	equ	0xFDE
  9049                           postdec2	equ	0xFDD
  9050                           fsr2h	equ	0xFDA
  9051                           fsr2l	equ	0xFD9
  9052                           status	equ	0xFD8
  9053                           
  9054 ;; *************** function _single_axis_measure *****************
  9055 ;; Defined at:
  9056 ;;		line 122 in file "functions.c"
  9057 ;; Parameters:    Size  Location     Type
  9058 ;;  axis            2   75[COMRAM] unsigned int 
  9059 ;;  iteration       3   77[COMRAM] const float 
  9060 ;; Auto vars:     Size  Location     Type
  9061 ;;  axis_read       3   80[COMRAM] const float 
  9062 ;;  i               2   86[COMRAM] unsigned int 
  9063 ;;  axis_sum        3   88[COMRAM] float 
  9064 ;;  medium_value    3   83[COMRAM] const float 
  9065 ;; Return value:  Size  Location     Type
  9066 ;;                  3   75[COMRAM] float 
  9067 ;; Registers used:
  9068 ;;		wreg, status,2, status,0, cstack
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9074 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9075 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9077 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9078 ;;Total ram usage:       16 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    4
  9081 ;; This function calls:
  9082 ;;		___ftadd
  9083 ;;		___ftdiv
  9084 ;;		___ftge
  9085 ;;		___lwtoft
  9086 ;;		_read_accelerometer
  9087 ;;		_voltageToG
  9088 ;; This function is called by:
  9089 ;;		_showAccelerometerVal
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text44
  9094  002E46                     __ptext44:
  9095                           	opt stack 0
  9096  002E46                     _single_axis_measure:
  9097                           	opt stack 17
  9098                           
  9099                           ;functions.c: 124: float axis_sum = 0.0;
  9100                           
  9101                           ;incstack = 0
  9102  002E46  0E00               	movlw	0
  9103  002E48  6E59               	movwf	single_axis_measure@axis_sum,c
  9104  002E4A  0E00               	movlw	0
  9105  002E4C  6E5A               	movwf	single_axis_measure@axis_sum+1,c
  9106  002E4E  0E00               	movlw	0
  9107  002E50  6E5B               	movwf	single_axis_measure@axis_sum+2,c
  9108                           
  9109                           ;functions.c: 125: for(unsigned int i = 0; i < iteration; i++)
  9110  002E52  0E00               	movlw	0
  9111  002E54  6E58               	movwf	single_axis_measure@i+1,c
  9112  002E56  0E00               	movlw	0
  9113  002E58  6E57               	movwf	single_axis_measure@i,c
  9114  002E5A  C057  F009         	movff	single_axis_measure@i,___lwtoft@c
  9115  002E5E  C058  F00A         	movff	single_axis_measure@i+1,___lwtoft@c+1
  9116  002E62  ECC7  F01E         	call	___lwtoft	;wreg free
  9117  002E66  C009  F00E         	movff	?___lwtoft,___ftge@ff1
  9118  002E6A  C00A  F00F         	movff	?___lwtoft+1,___ftge@ff1+1
  9119  002E6E  C00B  F010         	movff	?___lwtoft+2,___ftge@ff1+2
  9120  002E72  C04E  F011         	movff	single_axis_measure@iteration,___ftge@ff2
  9121  002E76  C04F  F012         	movff	single_axis_measure@iteration+1,___ftge@ff2+1
  9122  002E7A  C050  F013         	movff	single_axis_measure@iteration+2,___ftge@ff2+2
  9123  002E7E  EC0F  F01B         	call	___ftge	;wreg free
  9124  002E82  B0D8               	btfsc	status,0,c
  9125  002E84  D037               	goto	i2l5169
  9126                           
  9127                           ;functions.c: 126: {
  9128                           ;functions.c: 127: const float axis_read = read_accelerometer(axis);
  9129  002E86  C04C  F047         	movff	single_axis_measure@axis,read_accelerometer@axis
  9130  002E8A  C04D  F048         	movff	single_axis_measure@axis+1,read_accelerometer@axis+1
  9131  002E8E  ECB0  F01E         	call	_read_accelerometer	;wreg free
  9132  002E92  C047  F051         	movff	?_read_accelerometer,single_axis_measure@axis_read
  9133  002E96  C048  F052         	movff	?_read_accelerometer+1,single_axis_measure@axis_read+1
  9134  002E9A  C049  F053         	movff	?_read_accelerometer+2,single_axis_measure@axis_read+2
  9135                           
  9136                           ;functions.c: 128: axis_sum = axis_sum + axis_read;
  9137  002E9E  C059  F026         	movff	single_axis_measure@axis_sum,___ftadd@f1
  9138  002EA2  C05A  F027         	movff	single_axis_measure@axis_sum+1,___ftadd@f1+1
  9139  002EA6  C05B  F028         	movff	single_axis_measure@axis_sum+2,___ftadd@f1+2
  9140  002EAA  C051  F029         	movff	single_axis_measure@axis_read,___ftadd@f2
  9141  002EAE  C052  F02A         	movff	single_axis_measure@axis_read+1,___ftadd@f2+1
  9142  002EB2  C053  F02B         	movff	single_axis_measure@axis_read+2,___ftadd@f2+2
  9143  002EB6  EC0C  F012         	call	___ftadd	;wreg free
  9144  002EBA  C026  F059         	movff	?___ftadd,single_axis_measure@axis_sum
  9145  002EBE  C027  F05A         	movff	?___ftadd+1,single_axis_measure@axis_sum+1
  9146  002EC2  C028  F05B         	movff	?___ftadd+2,single_axis_measure@axis_sum+2
  9147  002EC6  4A57               	infsnz	single_axis_measure@i,f,c
  9148  002EC8  2A58               	incf	single_axis_measure@i+1,f,c
  9149  002ECA  C057  F009         	movff	single_axis_measure@i,___lwtoft@c
  9150  002ECE  C058  F00A         	movff	single_axis_measure@i+1,___lwtoft@c+1
  9151  002ED2  ECC7  F01E         	call	___lwtoft	;wreg free
  9152  002ED6  C009  F00E         	movff	?___lwtoft,___ftge@ff1
  9153  002EDA  C00A  F00F         	movff	?___lwtoft+1,___ftge@ff1+1
  9154  002EDE  C00B  F010         	movff	?___lwtoft+2,___ftge@ff1+2
  9155  002EE2  C04E  F011         	movff	single_axis_measure@iteration,___ftge@ff2
  9156  002EE6  C04F  F012         	movff	single_axis_measure@iteration+1,___ftge@ff2+1
  9157  002EEA  C050  F013         	movff	single_axis_measure@iteration+2,___ftge@ff2+2
  9158  002EEE  EC0F  F01B         	call	___ftge	;wreg free
  9159  002EF2  D7C7               	goto	L22
  9160  002EF4                     i2l5169:
  9161                           
  9162                           ;functions.c: 129: }
  9163                           ;functions.c: 131: const float medium_value = axis_sum / iteration;
  9164  002EF4  C059  F032         	movff	single_axis_measure@axis_sum,___ftdiv@f1
  9165  002EF8  C05A  F033         	movff	single_axis_measure@axis_sum+1,___ftdiv@f1+1
  9166  002EFC  C05B  F034         	movff	single_axis_measure@axis_sum+2,___ftdiv@f1+2
  9167  002F00  C04E  F035         	movff	single_axis_measure@iteration,___ftdiv@f2
  9168  002F04  C04F  F036         	movff	single_axis_measure@iteration+1,___ftdiv@f2+1
  9169  002F08  C050  F037         	movff	single_axis_measure@iteration+2,___ftdiv@f2+2
  9170  002F0C  EC9A  F018         	call	___ftdiv	;wreg free
  9171  002F10  C032  F054         	movff	?___ftdiv,single_axis_measure@medium_value
  9172  002F14  C033  F055         	movff	?___ftdiv+1,single_axis_measure@medium_value+1
  9173  002F18  C034  F056         	movff	?___ftdiv+2,single_axis_measure@medium_value+2
  9174                           
  9175                           ;functions.c: 132: axis_sum = 0;
  9176  002F1C  0E00               	movlw	0
  9177  002F1E  6E59               	movwf	single_axis_measure@axis_sum,c
  9178  002F20  0E00               	movlw	0
  9179  002F22  6E5A               	movwf	single_axis_measure@axis_sum+1,c
  9180  002F24  0E00               	movlw	0
  9181  002F26  6E5B               	movwf	single_axis_measure@axis_sum+2,c
  9182                           
  9183                           ;functions.c: 133: return voltageToG(medium_value);
  9184  002F28  C054  F041         	movff	single_axis_measure@medium_value,voltageToG@voltage
  9185  002F2C  C055  F042         	movff	single_axis_measure@medium_value+1,voltageToG@voltage+1
  9186  002F30  C056  F043         	movff	single_axis_measure@medium_value+2,voltageToG@voltage+2
  9187  002F34  EC7D  F01D         	call	_voltageToG	;wreg free
  9188  002F38  C041  F04C         	movff	?_voltageToG,?_single_axis_measure
  9189  002F3C  C042  F04D         	movff	?_voltageToG+1,?_single_axis_measure+1
  9190  002F40  C043  F04E         	movff	?_voltageToG+2,?_single_axis_measure+2
  9191  002F44  0012               	return	
  9192  002F46                     __end_of_single_axis_measure:
  9193                           	opt stack 0
  9194                           pclatu	equ	0xFFB
  9195                           pclath	equ	0xFFA
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           intcon	equ	0xFF2
  9203                           indf0	equ	0xFEF
  9204                           fsr0h	equ	0xFEA
  9205                           fsr0l	equ	0xFE9
  9206                           wreg	equ	0xFE8
  9207                           fsr1h	equ	0xFE2
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _voltageToG *****************
  9217 ;; Defined at:
  9218 ;;		line 151 in file "functions.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  voltage         3   64[COMRAM] const float 
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;		None
  9223 ;; Return value:  Size  Location     Type
  9224 ;;                  3   64[COMRAM] float 
  9225 ;; Registers used:
  9226 ;;		wreg, status,2, status,0, cstack
  9227 ;; Tracked objects:
  9228 ;;		On entry : 0/0
  9229 ;;		On exit  : 0/0
  9230 ;;		Unchanged: 0/0
  9231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9232 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9235 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9236 ;;Total ram usage:        3 bytes
  9237 ;; Hardware stack levels used:    1
  9238 ;; Hardware stack levels required when called:    2
  9239 ;; This function calls:
  9240 ;;		___ftadd
  9241 ;;		___ftdiv
  9242 ;; This function is called by:
  9243 ;;		_single_axis_measure
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text45
  9248  003AFA                     __ptext45:
  9249                           	opt stack 0
  9250  003AFA                     _voltageToG:
  9251                           	opt stack 18
  9252                           
  9253                           ;functions.c: 153: return (voltage - 1.65) / 0.300;
  9254                           
  9255                           ;incstack = 0
  9256  003AFA  0E33               	movlw	51
  9257  003AFC  6E29               	movwf	___ftadd@f2,c
  9258  003AFE  0ED3               	movlw	211
  9259  003B00  6E2A               	movwf	___ftadd@f2+1,c
  9260  003B02  0EBF               	movlw	191
  9261  003B04  6E2B               	movwf	___ftadd@f2+2,c
  9262  003B06  C041  F026         	movff	voltageToG@voltage,___ftadd@f1
  9263  003B0A  C042  F027         	movff	voltageToG@voltage+1,___ftadd@f1+1
  9264  003B0E  C043  F028         	movff	voltageToG@voltage+2,___ftadd@f1+2
  9265  003B12  EC0C  F012         	call	___ftadd	;wreg free
  9266  003B16  C026  F032         	movff	?___ftadd,___ftdiv@f1
  9267  003B1A  C027  F033         	movff	?___ftadd+1,___ftdiv@f1+1
  9268  003B1E  C028  F034         	movff	?___ftadd+2,___ftdiv@f1+2
  9269  003B22  0E9A               	movlw	154
  9270  003B24  6E35               	movwf	___ftdiv@f2,c
  9271  003B26  0E99               	movlw	153
  9272  003B28  6E36               	movwf	___ftdiv@f2+1,c
  9273  003B2A  0E3E               	movlw	62
  9274  003B2C  6E37               	movwf	___ftdiv@f2+2,c
  9275  003B2E  EC9A  F018         	call	___ftdiv	;wreg free
  9276  003B32  C032  F041         	movff	?___ftdiv,?_voltageToG
  9277  003B36  C033  F042         	movff	?___ftdiv+1,?_voltageToG+1
  9278  003B3A  C034  F043         	movff	?___ftdiv+2,?_voltageToG+2
  9279  003B3E  0012               	return	
  9280  003B40                     __end_of_voltageToG:
  9281                           	opt stack 0
  9282                           pclatu	equ	0xFFB
  9283                           pclath	equ	0xFFA
  9284                           tblptru	equ	0xFF8
  9285                           tblptrh	equ	0xFF7
  9286                           tblptrl	equ	0xFF6
  9287                           tablat	equ	0xFF5
  9288                           prodh	equ	0xFF4
  9289                           prodl	equ	0xFF3
  9290                           intcon	equ	0xFF2
  9291                           indf0	equ	0xFEF
  9292                           fsr0h	equ	0xFEA
  9293                           fsr0l	equ	0xFE9
  9294                           wreg	equ	0xFE8
  9295                           fsr1h	equ	0xFE2
  9296                           fsr1l	equ	0xFE1
  9297                           indf2	equ	0xFDF
  9298                           postinc2	equ	0xFDE
  9299                           postdec2	equ	0xFDD
  9300                           fsr2h	equ	0xFDA
  9301                           fsr2l	equ	0xFD9
  9302                           status	equ	0xFD8
  9303                           
  9304 ;; *************** function ___ftadd *****************
  9305 ;; Defined at:
  9306 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftadd.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  f1              3   37[COMRAM] float 
  9309 ;;  f2              3   40[COMRAM] float 
  9310 ;; Auto vars:     Size  Location     Type
  9311 ;;  exp1            1   48[COMRAM] unsigned char 
  9312 ;;  exp2            1   47[COMRAM] unsigned char 
  9313 ;;  sign            1   46[COMRAM] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  3   37[COMRAM] float 
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9323 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9324 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9325 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9326 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9327 ;;Total ram usage:       12 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    1
  9330 ;; This function calls:
  9331 ;;		___ftpack
  9332 ;; This function is called by:
  9333 ;;		_readTempF
  9334 ;;		_single_axis_measure
  9335 ;;		_voltageToG
  9336 ;;		___asftadd
  9337 ;;		___ftsub
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text46
  9342  002418                     __ptext46:
  9343                           	opt stack 0
  9344  002418                     ___ftadd:
  9345                           	opt stack 17
  9346                           
  9347                           ;incstack = 0
  9348  002418  C028  F02C         	movff	___ftadd@f1+2,??___ftadd
  9349  00241C  6A2D               	clrf	(??___ftadd+1)& (0+255),c
  9350  00241E  6A2E               	clrf	(??___ftadd+2)& (0+255),c
  9351  002420  3427               	rlcf	___ftadd@f1+1,w,c
  9352  002422  362C               	rlcf	??___ftadd& (0+255),f,c
  9353  002424  E301               	bnc	u216_41
  9354  002426  802D               	bsf	(??___ftadd+1)& (0+255),0,c
  9355  002428                     u216_41:
  9356  002428  502C               	movf	??___ftadd,w,c
  9357  00242A  6E31               	movwf	___ftadd@exp1,c
  9358  00242C  C02B  F02C         	movff	___ftadd@f2+2,??___ftadd
  9359  002430  6A2D               	clrf	(??___ftadd+1)& (0+255),c
  9360  002432  6A2E               	clrf	(??___ftadd+2)& (0+255),c
  9361  002434  342A               	rlcf	___ftadd@f2+1,w,c
  9362  002436  362C               	rlcf	??___ftadd& (0+255),f,c
  9363  002438  E301               	bnc	u217_41
  9364  00243A  802D               	bsf	(??___ftadd+1)& (0+255),0,c
  9365  00243C                     u217_41:
  9366  00243C  502C               	movf	??___ftadd,w,c
  9367  00243E  6E30               	movwf	___ftadd@exp2,c
  9368  002440  5031               	movf	___ftadd@exp1,w,c
  9369  002442  B4D8               	btfsc	status,2,c
  9370  002444  D00C               	goto	i2l664
  9371  002446  5030               	movf	___ftadd@exp2,w,c
  9372  002448  5C31               	subwf	___ftadd@exp1,w,c
  9373  00244A  B0D8               	btfsc	status,0,c
  9374  00244C  D00F               	goto	i2l4037
  9375  00244E  5031               	movf	___ftadd@exp1,w,c
  9376  002450  0800               	sublw	0
  9377  002452  2430               	addwf	___ftadd@exp2,w,c
  9378  002454  6E2C               	movwf	??___ftadd& (0+255),c
  9379  002456  0E19               	movlw	25
  9380  002458  5C2C               	subwf	??___ftadd,w,c
  9381  00245A  A0D8               	btfss	status,0,c
  9382  00245C  D007               	goto	i2l4037
  9383  00245E                     i2l664:
  9384  00245E  C029  F026         	movff	___ftadd@f2,?___ftadd
  9385  002462  C02A  F027         	movff	___ftadd@f2+1,?___ftadd+1
  9386  002466  C02B  F028         	movff	___ftadd@f2+2,?___ftadd+2
  9387  00246A  0012               	return	
  9388  00246C                     i2l4037:
  9389  00246C  5030               	movf	___ftadd@exp2,w,c
  9390  00246E  B4D8               	btfsc	status,2,c
  9391  002470  D00C               	goto	i2l668
  9392  002472  5031               	movf	___ftadd@exp1,w,c
  9393  002474  5C30               	subwf	___ftadd@exp2,w,c
  9394  002476  B0D8               	btfsc	status,0,c
  9395  002478  D00F               	goto	i2l4043
  9396  00247A  5030               	movf	___ftadd@exp2,w,c
  9397  00247C  0800               	sublw	0
  9398  00247E  2431               	addwf	___ftadd@exp1,w,c
  9399  002480  6E2C               	movwf	??___ftadd& (0+255),c
  9400  002482  0E19               	movlw	25
  9401  002484  5C2C               	subwf	??___ftadd,w,c
  9402  002486  A0D8               	btfss	status,0,c
  9403  002488  D007               	goto	i2l4043
  9404  00248A                     i2l668:
  9405  00248A  C026  F026         	movff	___ftadd@f1,?___ftadd
  9406  00248E  C027  F027         	movff	___ftadd@f1+1,?___ftadd+1
  9407  002492  C028  F028         	movff	___ftadd@f1+2,?___ftadd+2
  9408  002496  0012               	return	
  9409  002498                     i2l4043:
  9410  002498  6E2C               	movwf	??___ftadd& (0+255),c
  9411  00249A  0E06               	movlw	6
  9412  00249C  6E2F               	movwf	___ftadd@sign,c
  9413  00249E  502C               	movf	??___ftadd& (0+255),w,c
  9414  0024A0  BE28               	btfsc	___ftadd@f1+2,7,c
  9415  0024A2  8E2F               	bsf	___ftadd@sign,7,c
  9416  0024A4  BE2B               	btfsc	___ftadd@f2+2,7,c
  9417  0024A6  8C2F               	bsf	___ftadd@sign,6,c
  9418  0024A8  8E27               	bsf	___ftadd@f1+1,7,c
  9419  0024AA  0EFF               	movlw	255
  9420  0024AC  1626               	andwf	___ftadd@f1,f,c
  9421  0024AE  0EFF               	movlw	255
  9422  0024B0  1627               	andwf	___ftadd@f1+1,f,c
  9423  0024B2  0E00               	movlw	0
  9424  0024B4  1628               	andwf	___ftadd@f1+2,f,c
  9425  0024B6  8E2A               	bsf	___ftadd@f2+1,7,c
  9426  0024B8  0EFF               	movlw	255
  9427  0024BA  1629               	andwf	___ftadd@f2,f,c
  9428  0024BC  0EFF               	movlw	255
  9429  0024BE  162A               	andwf	___ftadd@f2+1,f,c
  9430  0024C0  0E00               	movlw	0
  9431  0024C2  162B               	andwf	___ftadd@f2+2,f,c
  9432  0024C4  5030               	movf	___ftadd@exp2,w,c
  9433  0024C6  5C31               	subwf	___ftadd@exp1,w,c
  9434  0024C8  B0D8               	btfsc	status,0,c
  9435  0024CA  D01A               	goto	i2l4069
  9436  0024CC                     i2l4059:
  9437  0024CC  90D8               	bcf	status,0,c
  9438  0024CE  3629               	rlcf	___ftadd@f2,f,c
  9439  0024D0  362A               	rlcf	___ftadd@f2+1,f,c
  9440  0024D2  362B               	rlcf	___ftadd@f2+2,f,c
  9441  0024D4  0630               	decf	___ftadd@exp2,f,c
  9442  0024D6  5030               	movf	___ftadd@exp2,w,c
  9443  0024D8  1831               	xorwf	___ftadd@exp1,w,c
  9444  0024DA  B4D8               	btfsc	status,2,c
  9445  0024DC  D00D               	goto	i2l4067
  9446  0024DE  062F               	decf	___ftadd@sign,f,c
  9447  0024E0  C02F  F02C         	movff	___ftadd@sign,??___ftadd
  9448  0024E4  0E07               	movlw	7
  9449  0024E6  162C               	andwf	??___ftadd,f,c
  9450  0024E8  B4D8               	btfsc	status,2,c
  9451  0024EA  D006               	goto	i2l4067
  9452  0024EC  D7EF               	goto	i2l4059
  9453  0024EE                     i2l4065:
  9454  0024EE  90D8               	bcf	status,0,c
  9455  0024F0  3228               	rrcf	___ftadd@f1+2,f,c
  9456  0024F2  3227               	rrcf	___ftadd@f1+1,f,c
  9457  0024F4  3226               	rrcf	___ftadd@f1,f,c
  9458  0024F6  2A31               	incf	___ftadd@exp1,f,c
  9459  0024F8                     i2l4067:
  9460  0024F8  5030               	movf	___ftadd@exp2,w,c
  9461  0024FA  6231               	cpfseq	___ftadd@exp1,c
  9462  0024FC  D7F8               	goto	i2l4065
  9463  0024FE  D01D               	goto	i2l679
  9464  002500                     i2l4069:
  9465  002500  5031               	movf	___ftadd@exp1,w,c
  9466  002502  5C30               	subwf	___ftadd@exp2,w,c
  9467  002504  B0D8               	btfsc	status,0,c
  9468  002506  D019               	goto	i2l679
  9469  002508                     i2l4071:
  9470  002508  90D8               	bcf	status,0,c
  9471  00250A  3626               	rlcf	___ftadd@f1,f,c
  9472  00250C  3627               	rlcf	___ftadd@f1+1,f,c
  9473  00250E  3628               	rlcf	___ftadd@f1+2,f,c
  9474  002510  0631               	decf	___ftadd@exp1,f,c
  9475  002512  5030               	movf	___ftadd@exp2,w,c
  9476  002514  1831               	xorwf	___ftadd@exp1,w,c
  9477  002516  B4D8               	btfsc	status,2,c
  9478  002518  D00D               	goto	i2l4079
  9479  00251A  062F               	decf	___ftadd@sign,f,c
  9480  00251C  C02F  F02C         	movff	___ftadd@sign,??___ftadd
  9481  002520  0E07               	movlw	7
  9482  002522  162C               	andwf	??___ftadd,f,c
  9483  002524  B4D8               	btfsc	status,2,c
  9484  002526  D006               	goto	i2l4079
  9485  002528  D7EF               	goto	i2l4071
  9486  00252A                     i2l4077:
  9487  00252A  90D8               	bcf	status,0,c
  9488  00252C  322B               	rrcf	___ftadd@f2+2,f,c
  9489  00252E  322A               	rrcf	___ftadd@f2+1,f,c
  9490  002530  3229               	rrcf	___ftadd@f2,f,c
  9491  002532  2A30               	incf	___ftadd@exp2,f,c
  9492  002534                     i2l4079:
  9493  002534  5030               	movf	___ftadd@exp2,w,c
  9494  002536  6231               	cpfseq	___ftadd@exp1,c
  9495  002538  D7F8               	goto	i2l4077
  9496  00253A                     i2l679:
  9497  00253A  AE2F               	btfss	___ftadd@sign,7,c
  9498  00253C  D00C               	goto	i2l688
  9499  00253E  0EFF               	movlw	255
  9500  002540  1A26               	xorwf	___ftadd@f1,f,c
  9501  002542  0EFF               	movlw	255
  9502  002544  1A27               	xorwf	___ftadd@f1+1,f,c
  9503  002546  0EFF               	movlw	255
  9504  002548  1A28               	xorwf	___ftadd@f1+2,f,c
  9505  00254A  0E01               	movlw	1
  9506  00254C  2626               	addwf	___ftadd@f1,f,c
  9507  00254E  0E00               	movlw	0
  9508  002550  2227               	addwfc	___ftadd@f1+1,f,c
  9509  002552  0E00               	movlw	0
  9510  002554  2228               	addwfc	___ftadd@f1+2,f,c
  9511  002556                     i2l688:
  9512  002556  AC2F               	btfss	___ftadd@sign,6,c
  9513  002558  D00C               	goto	i2l4085
  9514  00255A  0EFF               	movlw	255
  9515  00255C  1A29               	xorwf	___ftadd@f2,f,c
  9516  00255E  0EFF               	movlw	255
  9517  002560  1A2A               	xorwf	___ftadd@f2+1,f,c
  9518  002562  0EFF               	movlw	255
  9519  002564  1A2B               	xorwf	___ftadd@f2+2,f,c
  9520  002566  0E01               	movlw	1
  9521  002568  2629               	addwf	___ftadd@f2,f,c
  9522  00256A  0E00               	movlw	0
  9523  00256C  222A               	addwfc	___ftadd@f2+1,f,c
  9524  00256E  0E00               	movlw	0
  9525  002570  222B               	addwfc	___ftadd@f2+2,f,c
  9526  002572                     i2l4085:
  9527  002572  6E2C               	movwf	??___ftadd& (0+255),c
  9528  002574  0E00               	movlw	0
  9529  002576  6E2F               	movwf	___ftadd@sign,c
  9530  002578  502C               	movf	??___ftadd& (0+255),w,c
  9531  00257A  5026               	movf	___ftadd@f1,w,c
  9532  00257C  2629               	addwf	___ftadd@f2,f,c
  9533  00257E  5027               	movf	___ftadd@f1+1,w,c
  9534  002580  222A               	addwfc	___ftadd@f2+1,f,c
  9535  002582  5028               	movf	___ftadd@f1+2,w,c
  9536  002584  222B               	addwfc	___ftadd@f2+2,f,c
  9537  002586  AE2B               	btfss	___ftadd@f2+2,7,c
  9538  002588  D010               	goto	i2l4095
  9539  00258A  0EFF               	movlw	255
  9540  00258C  1A29               	xorwf	___ftadd@f2,f,c
  9541  00258E  0EFF               	movlw	255
  9542  002590  1A2A               	xorwf	___ftadd@f2+1,f,c
  9543  002592  0EFF               	movlw	255
  9544  002594  1A2B               	xorwf	___ftadd@f2+2,f,c
  9545  002596  0E01               	movlw	1
  9546  002598  2629               	addwf	___ftadd@f2,f,c
  9547  00259A  0E00               	movlw	0
  9548  00259C  222A               	addwfc	___ftadd@f2+1,f,c
  9549  00259E  0E00               	movlw	0
  9550  0025A0  222B               	addwfc	___ftadd@f2+2,f,c
  9551  0025A2  6E2C               	movwf	??___ftadd& (0+255),c
  9552  0025A4  0E01               	movlw	1
  9553  0025A6  6E2F               	movwf	___ftadd@sign,c
  9554  0025A8  502C               	movf	??___ftadd& (0+255),w,c
  9555  0025AA                     i2l4095:
  9556  0025AA  C029  F001         	movff	___ftadd@f2,___ftpack@arg
  9557  0025AE  C02A  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9558  0025B2  C02B  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9559  0025B6  C031  F004         	movff	___ftadd@exp1,___ftpack@exp
  9560  0025BA  C02F  F005         	movff	___ftadd@sign,___ftpack@sign
  9561  0025BE  EC21  F01A         	call	___ftpack	;wreg free
  9562  0025C2  C001  F026         	movff	?___ftpack,?___ftadd
  9563  0025C6  C002  F027         	movff	?___ftpack+1,?___ftadd+1
  9564  0025CA  C003  F028         	movff	?___ftpack+2,?___ftadd+2
  9565  0025CE  0012               	return	
  9566  0025D0                     __end_of___ftadd:
  9567                           	opt stack 0
  9568                           pclatu	equ	0xFFB
  9569                           pclath	equ	0xFFA
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           intcon	equ	0xFF2
  9577                           indf0	equ	0xFEF
  9578                           fsr0h	equ	0xFEA
  9579                           fsr0l	equ	0xFE9
  9580                           wreg	equ	0xFE8
  9581                           fsr1h	equ	0xFE2
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           postdec2	equ	0xFDD
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           
  9590 ;; *************** function _read_accelerometer *****************
  9591 ;; Defined at:
  9592 ;;		line 137 in file "functions.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;  axis            2   70[COMRAM] const unsigned int 
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;  axis_point      2   73[COMRAM] const unsigned int 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  3   70[COMRAM] float 
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9606 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9609 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9610 ;;Total ram usage:        5 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    3
  9613 ;; This function calls:
  9614 ;;		_pointToVoltage
  9615 ;;		_read
  9616 ;; This function is called by:
  9617 ;;		_single_axis_measure
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text47
  9622  003D60                     __ptext47:
  9623                           	opt stack 0
  9624  003D60                     _read_accelerometer:
  9625                           	opt stack 17
  9626                           
  9627                           ;functions.c: 139: const unsigned int axis_point = read(axis);
  9628                           
  9629                           ;incstack = 0
  9630  003D60  C047  F001         	movff	read_accelerometer@axis,read@channel
  9631  003D64  C048  F002         	movff	read_accelerometer@axis+1,read@channel+1
  9632  003D68  EC0D  F019         	call	_read	;wreg free
  9633  003D6C  C001  F04A         	movff	?_read,read_accelerometer@axis_point
  9634  003D70  C002  F04B         	movff	?_read+1,read_accelerometer@axis_point+1
  9635                           
  9636                           ;functions.c: 140: return pointToVoltage(axis_point);
  9637  003D74  C04A  F041         	movff	read_accelerometer@axis_point,pointToVoltage@point
  9638  003D78  C04B  F042         	movff	read_accelerometer@axis_point+1,pointToVoltage@point+1
  9639  003D7C  ECA2  F01C         	call	_pointToVoltage	;wreg free
  9640  003D80  C041  F047         	movff	?_pointToVoltage,?_read_accelerometer
  9641  003D84  C042  F048         	movff	?_pointToVoltage+1,?_read_accelerometer+1
  9642  003D88  C043  F049         	movff	?_pointToVoltage+2,?_read_accelerometer+2
  9643  003D8C  0012               	return	
  9644  003D8E                     __end_of_read_accelerometer:
  9645                           	opt stack 0
  9646                           pclatu	equ	0xFFB
  9647                           pclath	equ	0xFFA
  9648                           tblptru	equ	0xFF8
  9649                           tblptrh	equ	0xFF7
  9650                           tblptrl	equ	0xFF6
  9651                           tablat	equ	0xFF5
  9652                           prodh	equ	0xFF4
  9653                           prodl	equ	0xFF3
  9654                           intcon	equ	0xFF2
  9655                           indf0	equ	0xFEF
  9656                           fsr0h	equ	0xFEA
  9657                           fsr0l	equ	0xFE9
  9658                           wreg	equ	0xFE8
  9659                           fsr1h	equ	0xFE2
  9660                           fsr1l	equ	0xFE1
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           fsr2h	equ	0xFDA
  9665                           fsr2l	equ	0xFD9
  9666                           status	equ	0xFD8
  9667                           
  9668 ;; *************** function _read *****************
  9669 ;; Defined at:
  9670 ;;		line 16 in file "functions.c"
  9671 ;; Parameters:    Size  Location     Type
  9672 ;;  channel         2    0[COMRAM] int 
  9673 ;; Auto vars:     Size  Location     Type
  9674 ;;  value           2    4[COMRAM] int 
  9675 ;; Return value:  Size  Location     Type
  9676 ;;                  2    0[COMRAM] int 
  9677 ;; Registers used:
  9678 ;;		wreg, status,2, status,0
  9679 ;; Tracked objects:
  9680 ;;		On entry : 0/0
  9681 ;;		On exit  : 0/0
  9682 ;;		Unchanged: 0/0
  9683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9687 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9688 ;;Total ram usage:        6 bytes
  9689 ;; Hardware stack levels used:    1
  9690 ;; This function calls:
  9691 ;;		Nothing
  9692 ;; This function is called by:
  9693 ;;		_readTempF
  9694 ;;		_readLight
  9695 ;;		_read_accelerometer
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           	psect	text48
  9700  00321A                     __ptext48:
  9701                           	opt stack 0
  9702  00321A                     _read:
  9703                           	opt stack 20
  9704                           
  9705                           ;functions.c: 18: int value = 0;
  9706                           
  9707                           ;incstack = 0
  9708  00321A  0E00               	movlw	0
  9709  00321C  6E06               	movwf	read@value+1,c
  9710  00321E  0E00               	movlw	0
  9711  003220  6E05               	movwf	read@value,c
  9712                           
  9713                           ;functions.c: 19: switch(channel)
  9714  003222  D02C               	goto	i2l4263
  9715  003224                     i2l81:
  9716  003224  94C2               	bcf	4034,2,c	;volatile
  9717                           
  9718                           ;functions.c: 22: ADCON0bits.CHS1 = 0;
  9719  003226  96C2               	bcf	4034,3,c	;volatile
  9720                           
  9721                           ;functions.c: 23: ADCON0bits.CHS2 = 0;
  9722  003228  98C2               	bcf	4034,4,c	;volatile
  9723                           
  9724                           ;functions.c: 24: ADCON0bits.CHS3 = 0;
  9725  00322A  9AC2               	bcf	4034,5,c	;volatile
  9726                           
  9727                           ;functions.c: 26: ANCON0 &= 0b11111110;
  9728  00322C  010F               	movlb	15	; () banked
  9729  00322E  010F               	movlb	15	; () banked
  9730  003230  9148               	bcf	72,0,b	;volatile
  9731  003232  D01F               	goto	L27
  9732  003234                     i2l83:
  9733  003234  84C2               	bsf	4034,2,c	;volatile
  9734                           
  9735                           ;functions.c: 31: ADCON0bits.CHS1 = 0;
  9736  003236  96C2               	bcf	4034,3,c	;volatile
  9737                           
  9738                           ;functions.c: 32: ADCON0bits.CHS2 = 0;
  9739  003238  98C2               	bcf	4034,4,c	;volatile
  9740                           
  9741                           ;functions.c: 33: ADCON0bits.CHS3 = 0;
  9742  00323A  9AC2               	bcf	4034,5,c	;volatile
  9743                           
  9744                           ;functions.c: 35: ANCON0 &= 0b11111101;
  9745  00323C  010F               	movlb	15	; () banked
  9746  00323E  010F               	movlb	15	; () banked
  9747  003240  9348               	bcf	72,1,b	;volatile
  9748  003242  D017               	goto	L27
  9749  003244                     i2l84:
  9750  003244  94C2               	bcf	4034,2,c	;volatile
  9751                           
  9752                           ;functions.c: 40: ADCON0bits.CHS1 = 1;
  9753  003246  86C2               	bsf	4034,3,c	;volatile
  9754                           
  9755                           ;functions.c: 41: ADCON0bits.CHS2 = 0;
  9756  003248  98C2               	bcf	4034,4,c	;volatile
  9757                           
  9758                           ;functions.c: 42: ADCON0bits.CHS3 = 0;
  9759  00324A  9AC2               	bcf	4034,5,c	;volatile
  9760                           
  9761                           ;functions.c: 44: ANCON0 &= 0b11111011;
  9762  00324C  010F               	movlb	15	; () banked
  9763  00324E  010F               	movlb	15	; () banked
  9764  003250  9548               	bcf	72,2,b	;volatile
  9765  003252  D00F               	goto	L27
  9766  003254                     i2l85:
  9767  003254  84C2               	bsf	4034,2,c	;volatile
  9768                           
  9769                           ;functions.c: 48: ADCON0bits.CHS1 = 1;
  9770  003256  86C2               	bsf	4034,3,c	;volatile
  9771                           
  9772                           ;functions.c: 49: ADCON0bits.CHS2 = 0;
  9773  003258  98C2               	bcf	4034,4,c	;volatile
  9774                           
  9775                           ;functions.c: 50: ADCON0bits.CHS3 = 0;
  9776  00325A  9AC2               	bcf	4034,5,c	;volatile
  9777                           
  9778                           ;functions.c: 52: ANCON0 &= 0b11110111;
  9779  00325C  010F               	movlb	15	; () banked
  9780  00325E  010F               	movlb	15	; () banked
  9781  003260  9748               	bcf	72,3,b	;volatile
  9782  003262  D007               	goto	L27
  9783  003264                     i2l86:
  9784  003264  84C2               	bsf	4034,2,c	;volatile
  9785                           
  9786                           ;functions.c: 56: ADCON0bits.CHS1 = 1;
  9787  003266  86C2               	bsf	4034,3,c	;volatile
  9788                           
  9789                           ;functions.c: 57: ADCON0bits.CHS2 = 1;
  9790  003268  88C2               	bsf	4034,4,c	;volatile
  9791                           
  9792                           ;functions.c: 58: ADCON0bits.CHS3 = 0;
  9793  00326A  9AC2               	bcf	4034,5,c	;volatile
  9794                           
  9795                           ;functions.c: 60: ANCON0 &= 0b01111111;
  9796  00326C  010F               	movlb	15	; () banked
  9797  00326E  010F               	movlb	15	; () banked
  9798  003270  9F48               	bcf	72,7,b	;volatile
  9799  003272                     L27:
  9800                           
  9801                           ; BSR set to: 15
  9802                           ;functions.c: 61: ANCON1 |= 0b00001111;
  9803  003272  0E0F               	movlw	15
  9804  003274  010F               	movlb	15	; () banked
  9805  003276  010F               	movlb	15	; () banked
  9806  003278  1349               	iorwf	73,f,b	;volatile
  9807                           
  9808                           ;functions.c: 62: break;
  9809  00327A  D018               	goto	i2l82
  9810  00327C                     i2l4263:
  9811  00327C  C001  F003         	movff	read@channel,??_read
  9812  003280  C002  F004         	movff	read@channel+1,??_read+1
  9813                           
  9814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9815                           ; Switch size 1, requested type "space"
  9816                           ; Number of cases is 1, Range of values is 0 to 0
  9817                           ; switch strategies available:
  9818                           ; Name         Instructions Cycles
  9819                           ; simple_byte            4     3 (average)
  9820                           ;	Chosen strategy is simple_byte
  9821  003284  5004               	movf	??_read+1,w,c
  9822  003286  0A00               	xorlw	0	; case 0
  9823  003288  A4D8               	btfss	status,2,c
  9824  00328A  D010               	goto	i2l82
  9825                           
  9826                           ; Switch size 1, requested type "space"
  9827                           ; Number of cases is 5, Range of values is 0 to 4
  9828                           ; switch strategies available:
  9829                           ; Name         Instructions Cycles
  9830                           ; simple_byte           16     9 (average)
  9831                           ;	Chosen strategy is simple_byte
  9832  00328C  5003               	movf	??_read,w,c
  9833  00328E  0A00               	xorlw	0	; case 0
  9834  003290  B4D8               	btfsc	status,2,c
  9835  003292  D7C8               	goto	i2l81
  9836  003294  0A01               	xorlw	1	; case 1
  9837  003296  B4D8               	btfsc	status,2,c
  9838  003298  D7CD               	goto	i2l83
  9839  00329A  0A03               	xorlw	3	; case 2
  9840  00329C  B4D8               	btfsc	status,2,c
  9841  00329E  D7D2               	goto	i2l84
  9842  0032A0  0A01               	xorlw	1	; case 3
  9843  0032A2  B4D8               	btfsc	status,2,c
  9844  0032A4  D7D7               	goto	i2l85
  9845  0032A6  0A07               	xorlw	7	; case 4
  9846  0032A8  B4D8               	btfsc	status,2,c
  9847  0032AA  D7DC               	goto	i2l86
  9848  0032AC                     i2l82:
  9849                           
  9850                           ;functions.c: 65: ADCON0bits.VCFG0 = 0;
  9851  0032AC  9CC2               	bcf	4034,6,c	;volatile
  9852                           
  9853                           ;functions.c: 66: ADCON0bits.VCFG1 = 0;
  9854  0032AE  9EC2               	bcf	4034,7,c	;volatile
  9855                           
  9856                           ;functions.c: 68: ADCON1bits.ADFM = 1;
  9857  0032B0  8EC1               	bsf	4033,7,c	;volatile
  9858                           
  9859                           ;functions.c: 70: ADCON1bits.ACQT0 = 0;
  9860  0032B2  96C1               	bcf	4033,3,c	;volatile
  9861                           
  9862                           ;functions.c: 71: ADCON1bits.ACQT1 = 1;
  9863  0032B4  88C1               	bsf	4033,4,c	;volatile
  9864                           
  9865                           ;functions.c: 72: ADCON1bits.ACQT2 = 1;
  9866  0032B6  8AC1               	bsf	4033,5,c	;volatile
  9867                           
  9868                           ;functions.c: 74: ADCON1bits.ADCS0 = 0;
  9869  0032B8  90C1               	bcf	4033,0,c	;volatile
  9870                           
  9871                           ;functions.c: 75: ADCON1bits.ADCS1 = 0;
  9872  0032BA  92C1               	bcf	4033,1,c	;volatile
  9873                           
  9874                           ;functions.c: 76: ADCON1bits.ADCS2 = 0;
  9875  0032BC  94C1               	bcf	4033,2,c	;volatile
  9876                           
  9877                           ;functions.c: 78: ADCON0bits.ADON = 1;
  9878  0032BE  80C2               	bsf	4034,0,c	;volatile
  9879                           
  9880                           ;functions.c: 79: GO_DONE = 1;
  9881  0032C0  82C2               	bsf	4034,1,c	;volatile
  9882  0032C2                     i2l87:
  9883  0032C2  B2C2               	btfsc	4034,1,c	;volatile
  9884  0032C4  D7FE               	goto	i2l87
  9885                           
  9886                           ;functions.c: 81: value = ((ADRESH << 8) + ADRESL);
  9887  0032C6  50C4               	movf	4036,w,c	;volatile
  9888  0032C8  6E04               	movwf	(??_read+1)& (0+255),c
  9889  0032CA  6A03               	clrf	??_read& (0+255),c
  9890  0032CC  50C3               	movf	4035,w,c	;volatile
  9891  0032CE  2403               	addwf	??_read,w,c
  9892  0032D0  6E05               	movwf	read@value,c
  9893  0032D2  0E00               	movlw	0
  9894  0032D4  2004               	addwfc	??_read+1,w,c
  9895  0032D6  6E06               	movwf	read@value+1,c
  9896                           
  9897                           ;functions.c: 83: ADCON0bits.ADON = 0;
  9898  0032D8  90C2               	bcf	4034,0,c	;volatile
  9899                           
  9900                           ;functions.c: 85: return value;
  9901  0032DA  C005  F001         	movff	read@value,?_read
  9902  0032DE  C006  F002         	movff	read@value+1,?_read+1
  9903  0032E2  0012               	return	
  9904  0032E4                     __end_of_read:
  9905                           	opt stack 0
  9906                           pclatu	equ	0xFFB
  9907                           pclath	equ	0xFFA
  9908                           tblptru	equ	0xFF8
  9909                           tblptrh	equ	0xFF7
  9910                           tblptrl	equ	0xFF6
  9911                           tablat	equ	0xFF5
  9912                           prodh	equ	0xFF4
  9913                           prodl	equ	0xFF3
  9914                           intcon	equ	0xFF2
  9915                           indf0	equ	0xFEF
  9916                           fsr0h	equ	0xFEA
  9917                           fsr0l	equ	0xFE9
  9918                           wreg	equ	0xFE8
  9919                           fsr1h	equ	0xFE2
  9920                           fsr1l	equ	0xFE1
  9921                           indf2	equ	0xFDF
  9922                           postinc2	equ	0xFDE
  9923                           postdec2	equ	0xFDD
  9924                           fsr2h	equ	0xFDA
  9925                           fsr2l	equ	0xFD9
  9926                           status	equ	0xFD8
  9927                           
  9928 ;; *************** function _pointToVoltage *****************
  9929 ;; Defined at:
  9930 ;;		line 144 in file "functions.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  point           2   64[COMRAM] const unsigned int 
  9933 ;; Auto vars:     Size  Location     Type
  9934 ;;  fPoint          3   67[COMRAM] const float 
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  3   64[COMRAM] float 
  9937 ;; Registers used:
  9938 ;;		wreg, status,2, status,0, cstack
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9944 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9945 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9947 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9948 ;;Total ram usage:        6 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; Hardware stack levels required when called:    2
  9951 ;; This function calls:
  9952 ;;		___ftdiv
  9953 ;;		___ftmul
  9954 ;;		___lwtoft
  9955 ;; This function is called by:
  9956 ;;		_read_accelerometer
  9957 ;; This function uses a non-reentrant model
  9958 ;;
  9959                           
  9960                           	psect	text49
  9961  003944                     __ptext49:
  9962                           	opt stack 0
  9963  003944                     _pointToVoltage:
  9964                           	opt stack 17
  9965                           
  9966                           ;functions.c: 146: const float fPoint = (float)point;
  9967                           
  9968                           ;incstack = 0
  9969  003944  C041  F009         	movff	pointToVoltage@point,___lwtoft@c
  9970  003948  C042  F00A         	movff	pointToVoltage@point+1,___lwtoft@c+1
  9971  00394C  ECC7  F01E         	call	___lwtoft	;wreg free
  9972  003950  C009  F044         	movff	?___lwtoft,pointToVoltage@fPoint
  9973  003954  C00A  F045         	movff	?___lwtoft+1,pointToVoltage@fPoint+1
  9974  003958  C00B  F046         	movff	?___lwtoft+2,pointToVoltage@fPoint+2
  9975                           
  9976                           ;functions.c: 147: return (3.3 * fPoint) / 4096;
  9977  00395C  0E33               	movlw	51
  9978  00395E  6E1A               	movwf	___ftmul@f2,c
  9979  003960  0E53               	movlw	83
  9980  003962  6E1B               	movwf	___ftmul@f2+1,c
  9981  003964  0E40               	movlw	64
  9982  003966  6E1C               	movwf	___ftmul@f2+2,c
  9983  003968  C044  F017         	movff	pointToVoltage@fPoint,___ftmul@f1
  9984  00396C  C045  F018         	movff	pointToVoltage@fPoint+1,___ftmul@f1+1
  9985  003970  C046  F019         	movff	pointToVoltage@fPoint+2,___ftmul@f1+2
  9986  003974  ECA3  F017         	call	___ftmul	;wreg free
  9987  003978  C017  F032         	movff	?___ftmul,___ftdiv@f1
  9988  00397C  C018  F033         	movff	?___ftmul+1,___ftdiv@f1+1
  9989  003980  C019  F034         	movff	?___ftmul+2,___ftdiv@f1+2
  9990  003984  0E00               	movlw	0
  9991  003986  6E35               	movwf	___ftdiv@f2,c
  9992  003988  0E80               	movlw	128
  9993  00398A  6E36               	movwf	___ftdiv@f2+1,c
  9994  00398C  0E45               	movlw	69
  9995  00398E  6E37               	movwf	___ftdiv@f2+2,c
  9996  003990  EC9A  F018         	call	___ftdiv	;wreg free
  9997  003994  C032  F041         	movff	?___ftdiv,?_pointToVoltage
  9998  003998  C033  F042         	movff	?___ftdiv+1,?_pointToVoltage+1
  9999  00399C  C034  F043         	movff	?___ftdiv+2,?_pointToVoltage+2
 10000  0039A0  0012               	return	
 10001  0039A2                     __end_of_pointToVoltage:
 10002                           	opt stack 0
 10003                           pclatu	equ	0xFFB
 10004                           pclath	equ	0xFFA
 10005                           tblptru	equ	0xFF8
 10006                           tblptrh	equ	0xFF7
 10007                           tblptrl	equ	0xFF6
 10008                           tablat	equ	0xFF5
 10009                           prodh	equ	0xFF4
 10010                           prodl	equ	0xFF3
 10011                           intcon	equ	0xFF2
 10012                           indf0	equ	0xFEF
 10013                           fsr0h	equ	0xFEA
 10014                           fsr0l	equ	0xFE9
 10015                           wreg	equ	0xFE8
 10016                           fsr1h	equ	0xFE2
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           fsr2h	equ	0xFDA
 10022                           fsr2l	equ	0xFD9
 10023                           status	equ	0xFD8
 10024                           
 10025 ;; *************** function ___lwtoft *****************
 10026 ;; Defined at:
 10027 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lwtoft.c"
 10028 ;; Parameters:    Size  Location     Type
 10029 ;;  c               2    8[COMRAM] unsigned int 
 10030 ;; Auto vars:     Size  Location     Type
 10031 ;;		None
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  3    8[COMRAM] float 
 10034 ;; Registers used:
 10035 ;;		wreg, status,2, status,0, cstack
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10041 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10044 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10045 ;;Total ram usage:        5 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    1
 10048 ;; This function calls:
 10049 ;;		___ftpack
 10050 ;; This function is called by:
 10051 ;;		_single_axis_measure
 10052 ;;		_pointToVoltage
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text50
 10057  003D8E                     __ptext50:
 10058                           	opt stack 0
 10059  003D8E                     ___lwtoft:
 10060                           	opt stack 17
 10061                           
 10062                           ;incstack = 0
 10063  003D8E  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 10064  003D92  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 10065  003D96  6A03               	clrf	___ftpack@arg+2,c
 10066  003D98  6E0C               	movwf	??___lwtoft& (0+255),c
 10067  003D9A  0E8E               	movlw	142
 10068  003D9C  6E04               	movwf	___ftpack@exp,c
 10069  003D9E  500C               	movf	??___lwtoft& (0+255),w,c
 10070  003DA0  6E0D               	movwf	(??___lwtoft+1)& (0+255),c
 10071  003DA2  0E00               	movlw	0
 10072  003DA4  6E05               	movwf	___ftpack@sign,c
 10073  003DA6  500D               	movf	(??___lwtoft+1)& (0+255),w,c
 10074  003DA8  EC21  F01A         	call	___ftpack	;wreg free
 10075  003DAC  C001  F009         	movff	?___ftpack,?___lwtoft
 10076  003DB0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 10077  003DB4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 10078  003DB8  0012               	return	
 10079  003DBA                     __end_of___lwtoft:
 10080                           	opt stack 0
 10081                           pclatu	equ	0xFFB
 10082                           pclath	equ	0xFFA
 10083                           tblptru	equ	0xFF8
 10084                           tblptrh	equ	0xFF7
 10085                           tblptrl	equ	0xFF6
 10086                           tablat	equ	0xFF5
 10087                           prodh	equ	0xFF4
 10088                           prodl	equ	0xFF3
 10089                           intcon	equ	0xFF2
 10090                           indf0	equ	0xFEF
 10091                           fsr0h	equ	0xFEA
 10092                           fsr0l	equ	0xFE9
 10093                           wreg	equ	0xFE8
 10094                           fsr1h	equ	0xFE2
 10095                           fsr1l	equ	0xFE1
 10096                           indf2	equ	0xFDF
 10097                           postinc2	equ	0xFDE
 10098                           postdec2	equ	0xFDD
 10099                           fsr2h	equ	0xFDA
 10100                           fsr2l	equ	0xFD9
 10101                           status	equ	0xFD8
 10102                           
 10103 ;; *************** function ___ftmul *****************
 10104 ;; Defined at:
 10105 ;;		line 51 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftmul.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;  f1              3   22[COMRAM] float 
 10108 ;;  f2              3   25[COMRAM] float 
 10109 ;; Auto vars:     Size  Location     Type
 10110 ;;  f3_as_produc    3   32[COMRAM] unsigned um
 10111 ;;  sign            1   36[COMRAM] unsigned char 
 10112 ;;  cntr            1   35[COMRAM] unsigned char 
 10113 ;;  exp             1   31[COMRAM] unsigned char 
 10114 ;; Return value:  Size  Location     Type
 10115 ;;                  3   22[COMRAM] float 
 10116 ;; Registers used:
 10117 ;;		wreg, status,2, status,0, cstack
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10123 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10124 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10125 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10126 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10127 ;;Total ram usage:       15 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    1
 10130 ;; This function calls:
 10131 ;;		___ftpack
 10132 ;; This function is called by:
 10133 ;;		_readTempF
 10134 ;;		_pointToVoltage
 10135 ;;		_fround
 10136 ;;		_scale
 10137 ;;		_sprintf
 10138 ;;		___asftmul
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           	psect	text51
 10143  002F46                     __ptext51:
 10144                           	opt stack 0
 10145  002F46                     ___ftmul:
 10146                           	opt stack 18
 10147                           
 10148                           ;incstack = 0
 10149  002F46  C019  F01D         	movff	___ftmul@f1+2,??___ftmul
 10150  002F4A  6A1E               	clrf	(??___ftmul+1)& (0+255),c
 10151  002F4C  6A1F               	clrf	(??___ftmul+2)& (0+255),c
 10152  002F4E  3418               	rlcf	___ftmul@f1+1,w,c
 10153  002F50  361D               	rlcf	??___ftmul& (0+255),f,c
 10154  002F52  E301               	bnc	u242_41
 10155  002F54  801E               	bsf	(??___ftmul+1)& (0+255),0,c
 10156  002F56                     u242_41:
 10157  002F56  501D               	movf	??___ftmul,w,c
 10158  002F58  6E20               	movwf	___ftmul@exp,c
 10159  002F5A  6620               	tstfsz	___ftmul@exp& (0+255),c
 10160  002F5C  D007               	goto	i2l4149
 10161  002F5E  0E00               	movlw	0
 10162  002F60  6E17               	movwf	?___ftmul,c
 10163  002F62  0E00               	movlw	0
 10164  002F64  6E18               	movwf	?___ftmul+1,c
 10165  002F66  0E00               	movlw	0
 10166  002F68  6E19               	movwf	?___ftmul+2,c
 10167  002F6A  0012               	return	
 10168  002F6C                     i2l4149:
 10169  002F6C  C01C  F01D         	movff	___ftmul@f2+2,??___ftmul
 10170  002F70  6A1E               	clrf	(??___ftmul+1)& (0+255),c
 10171  002F72  6A1F               	clrf	(??___ftmul+2)& (0+255),c
 10172  002F74  341B               	rlcf	___ftmul@f2+1,w,c
 10173  002F76  361D               	rlcf	??___ftmul& (0+255),f,c
 10174  002F78  E301               	bnc	u244_41
 10175  002F7A  801E               	bsf	(??___ftmul+1)& (0+255),0,c
 10176  002F7C                     u244_41:
 10177  002F7C  501D               	movf	??___ftmul,w,c
 10178  002F7E  6E25               	movwf	___ftmul@sign,c
 10179  002F80  6625               	tstfsz	___ftmul@sign& (0+255),c
 10180  002F82  D007               	goto	i2l4155
 10181  002F84  0E00               	movlw	0
 10182  002F86  6E17               	movwf	?___ftmul,c
 10183  002F88  0E00               	movlw	0
 10184  002F8A  6E18               	movwf	?___ftmul+1,c
 10185  002F8C  0E00               	movlw	0
 10186  002F8E  6E19               	movwf	?___ftmul+2,c
 10187  002F90  0012               	return	
 10188  002F92                     i2l4155:
 10189  002F92  5025               	movf	___ftmul@sign,w,c
 10190  002F94  0F7B               	addlw	123
 10191  002F96  2620               	addwf	___ftmul@exp,f,c
 10192  002F98  C019  F025         	movff	___ftmul@f1+2,___ftmul@sign
 10193  002F9C  501C               	movf	___ftmul@f2+2,w,c
 10194  002F9E  1A25               	xorwf	___ftmul@sign,f,c
 10195  002FA0  0E80               	movlw	128
 10196  002FA2  1625               	andwf	___ftmul@sign,f,c
 10197  002FA4  8E18               	bsf	___ftmul@f1+1,7,c
 10198  002FA6  8E1B               	bsf	___ftmul@f2+1,7,c
 10199  002FA8  0EFF               	movlw	255
 10200  002FAA  161A               	andwf	___ftmul@f2,f,c
 10201  002FAC  0EFF               	movlw	255
 10202  002FAE  161B               	andwf	___ftmul@f2+1,f,c
 10203  002FB0  0E00               	movlw	0
 10204  002FB2  161C               	andwf	___ftmul@f2+2,f,c
 10205  002FB4  0E00               	movlw	0
 10206  002FB6  6E21               	movwf	___ftmul@f3_as_product,c
 10207  002FB8  0E00               	movlw	0
 10208  002FBA  6E22               	movwf	___ftmul@f3_as_product+1,c
 10209  002FBC  0E00               	movlw	0
 10210  002FBE  6E23               	movwf	___ftmul@f3_as_product+2,c
 10211  002FC0  6E1D               	movwf	??___ftmul& (0+255),c
 10212  002FC2  0E07               	movlw	7
 10213  002FC4  6E24               	movwf	___ftmul@cntr,c
 10214  002FC6  501D               	movf	??___ftmul& (0+255),w,c
 10215  002FC8                     i2l4169:
 10216  002FC8  A017               	btfss	___ftmul@f1,0,c
 10217  002FCA  D006               	goto	i2l4173
 10218  002FCC  501A               	movf	___ftmul@f2,w,c
 10219  002FCE  2621               	addwf	___ftmul@f3_as_product,f,c
 10220  002FD0  501B               	movf	___ftmul@f2+1,w,c
 10221  002FD2  2222               	addwfc	___ftmul@f3_as_product+1,f,c
 10222  002FD4  501C               	movf	___ftmul@f2+2,w,c
 10223  002FD6  2223               	addwfc	___ftmul@f3_as_product+2,f,c
 10224  002FD8                     i2l4173:
 10225  002FD8  90D8               	bcf	status,0,c
 10226  002FDA  3219               	rrcf	___ftmul@f1+2,f,c
 10227  002FDC  3218               	rrcf	___ftmul@f1+1,f,c
 10228  002FDE  3217               	rrcf	___ftmul@f1,f,c
 10229  002FE0  90D8               	bcf	status,0,c
 10230  002FE2  361A               	rlcf	___ftmul@f2,f,c
 10231  002FE4  361B               	rlcf	___ftmul@f2+1,f,c
 10232  002FE6  361C               	rlcf	___ftmul@f2+2,f,c
 10233  002FE8  2E24               	decfsz	___ftmul@cntr,f,c
 10234  002FEA  D7EE               	goto	i2l4169
 10235  002FEC  6E1D               	movwf	??___ftmul& (0+255),c
 10236  002FEE  0E09               	movlw	9
 10237  002FF0  6E24               	movwf	___ftmul@cntr,c
 10238  002FF2  501D               	movf	??___ftmul& (0+255),w,c
 10239  002FF4                     i2l4179:
 10240  002FF4  A017               	btfss	___ftmul@f1,0,c
 10241  002FF6  D006               	goto	i2l4183
 10242  002FF8  501A               	movf	___ftmul@f2,w,c
 10243  002FFA  2621               	addwf	___ftmul@f3_as_product,f,c
 10244  002FFC  501B               	movf	___ftmul@f2+1,w,c
 10245  002FFE  2222               	addwfc	___ftmul@f3_as_product+1,f,c
 10246  003000  501C               	movf	___ftmul@f2+2,w,c
 10247  003002  2223               	addwfc	___ftmul@f3_as_product+2,f,c
 10248  003004                     i2l4183:
 10249  003004  90D8               	bcf	status,0,c
 10250  003006  3219               	rrcf	___ftmul@f1+2,f,c
 10251  003008  3218               	rrcf	___ftmul@f1+1,f,c
 10252  00300A  3217               	rrcf	___ftmul@f1,f,c
 10253  00300C  90D8               	bcf	status,0,c
 10254  00300E  3223               	rrcf	___ftmul@f3_as_product+2,f,c
 10255  003010  3222               	rrcf	___ftmul@f3_as_product+1,f,c
 10256  003012  3221               	rrcf	___ftmul@f3_as_product,f,c
 10257  003014  2E24               	decfsz	___ftmul@cntr,f,c
 10258  003016  D7EE               	goto	i2l4179
 10259  003018  C021  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10260  00301C  C022  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10261  003020  C023  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10262  003024  C020  F004         	movff	___ftmul@exp,___ftpack@exp
 10263  003028  C025  F005         	movff	___ftmul@sign,___ftpack@sign
 10264  00302C  EC21  F01A         	call	___ftpack	;wreg free
 10265  003030  C001  F017         	movff	?___ftpack,?___ftmul
 10266  003034  C002  F018         	movff	?___ftpack+1,?___ftmul+1
 10267  003038  C003  F019         	movff	?___ftpack+2,?___ftmul+2
 10268  00303C  0012               	return	
 10269  00303E                     __end_of___ftmul:
 10270                           	opt stack 0
 10271                           pclatu	equ	0xFFB
 10272                           pclath	equ	0xFFA
 10273                           tblptru	equ	0xFF8
 10274                           tblptrh	equ	0xFF7
 10275                           tblptrl	equ	0xFF6
 10276                           tablat	equ	0xFF5
 10277                           prodh	equ	0xFF4
 10278                           prodl	equ	0xFF3
 10279                           intcon	equ	0xFF2
 10280                           indf0	equ	0xFEF
 10281                           fsr0h	equ	0xFEA
 10282                           fsr0l	equ	0xFE9
 10283                           wreg	equ	0xFE8
 10284                           fsr1h	equ	0xFE2
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           fsr2h	equ	0xFDA
 10290                           fsr2l	equ	0xFD9
 10291                           status	equ	0xFD8
 10292                           
 10293 ;; *************** function ___ftdiv *****************
 10294 ;; Defined at:
 10295 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftdiv.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;  f1              3   49[COMRAM] float 
 10298 ;;  f2              3   52[COMRAM] float 
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;  f3              3   59[COMRAM] float 
 10301 ;;  sign            1   63[COMRAM] unsigned char 
 10302 ;;  exp             1   62[COMRAM] unsigned char 
 10303 ;;  cntr            1   58[COMRAM] unsigned char 
 10304 ;; Return value:  Size  Location     Type
 10305 ;;                  3   49[COMRAM] float 
 10306 ;; Registers used:
 10307 ;;		wreg, status,2, status,0, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10313 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10314 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10315 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10316 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10317 ;;Total ram usage:       15 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    1
 10320 ;; This function calls:
 10321 ;;		___ftpack
 10322 ;; This function is called by:
 10323 ;;		_readTempF
 10324 ;;		_single_axis_measure
 10325 ;;		_pointToVoltage
 10326 ;;		_voltageToG
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           	psect	text52
 10331  003134                     __ptext52:
 10332                           	opt stack 0
 10333  003134                     ___ftdiv:
 10334                           	opt stack 19
 10335                           
 10336                           ;incstack = 0
 10337  003134  C034  F038         	movff	___ftdiv@f1+2,??___ftdiv
 10338  003138  6A39               	clrf	(??___ftdiv+1)& (0+255),c
 10339  00313A  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
 10340  00313C  3433               	rlcf	___ftdiv@f1+1,w,c
 10341  00313E  3638               	rlcf	??___ftdiv& (0+255),f,c
 10342  003140  E301               	bnc	u237_41
 10343  003142  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
 10344  003144                     u237_41:
 10345  003144  5038               	movf	??___ftdiv,w,c
 10346  003146  6E3F               	movwf	___ftdiv@exp,c
 10347  003148  663F               	tstfsz	___ftdiv@exp& (0+255),c
 10348  00314A  D007               	goto	i2l4105
 10349  00314C  0E00               	movlw	0
 10350  00314E  6E32               	movwf	?___ftdiv,c
 10351  003150  0E00               	movlw	0
 10352  003152  6E33               	movwf	?___ftdiv+1,c
 10353  003154  0E00               	movlw	0
 10354  003156  6E34               	movwf	?___ftdiv+2,c
 10355  003158  0012               	return	
 10356  00315A                     i2l4105:
 10357  00315A  C037  F038         	movff	___ftdiv@f2+2,??___ftdiv
 10358  00315E  6A39               	clrf	(??___ftdiv+1)& (0+255),c
 10359  003160  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
 10360  003162  3436               	rlcf	___ftdiv@f2+1,w,c
 10361  003164  3638               	rlcf	??___ftdiv& (0+255),f,c
 10362  003166  E301               	bnc	u239_41
 10363  003168  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
 10364  00316A                     u239_41:
 10365  00316A  5038               	movf	??___ftdiv,w,c
 10366  00316C  6E40               	movwf	___ftdiv@sign,c
 10367  00316E  6640               	tstfsz	___ftdiv@sign& (0+255),c
 10368  003170  D007               	goto	i2l4111
 10369  003172  0E00               	movlw	0
 10370  003174  6E32               	movwf	?___ftdiv,c
 10371  003176  0E00               	movlw	0
 10372  003178  6E33               	movwf	?___ftdiv+1,c
 10373  00317A  0E00               	movlw	0
 10374  00317C  6E34               	movwf	?___ftdiv+2,c
 10375  00317E  0012               	return	
 10376  003180                     i2l4111:
 10377  003180  0E00               	movlw	0
 10378  003182  6E3C               	movwf	___ftdiv@f3,c
 10379  003184  0E00               	movlw	0
 10380  003186  6E3D               	movwf	___ftdiv@f3+1,c
 10381  003188  0E00               	movlw	0
 10382  00318A  6E3E               	movwf	___ftdiv@f3+2,c
 10383  00318C  5040               	movf	___ftdiv@sign,w,c
 10384  00318E  0F89               	addlw	137
 10385  003190  5E3F               	subwf	___ftdiv@exp,f,c
 10386  003192  C034  F040         	movff	___ftdiv@f1+2,___ftdiv@sign
 10387  003196  5037               	movf	___ftdiv@f2+2,w,c
 10388  003198  1A40               	xorwf	___ftdiv@sign,f,c
 10389  00319A  0E80               	movlw	128
 10390  00319C  1640               	andwf	___ftdiv@sign,f,c
 10391  00319E  8E33               	bsf	___ftdiv@f1+1,7,c
 10392  0031A0  0EFF               	movlw	255
 10393  0031A2  1632               	andwf	___ftdiv@f1,f,c
 10394  0031A4  0EFF               	movlw	255
 10395  0031A6  1633               	andwf	___ftdiv@f1+1,f,c
 10396  0031A8  0E00               	movlw	0
 10397  0031AA  1634               	andwf	___ftdiv@f1+2,f,c
 10398  0031AC  8E36               	bsf	___ftdiv@f2+1,7,c
 10399  0031AE  0EFF               	movlw	255
 10400  0031B0  1635               	andwf	___ftdiv@f2,f,c
 10401  0031B2  0EFF               	movlw	255
 10402  0031B4  1636               	andwf	___ftdiv@f2+1,f,c
 10403  0031B6  0E00               	movlw	0
 10404  0031B8  1637               	andwf	___ftdiv@f2+2,f,c
 10405  0031BA  6E38               	movwf	??___ftdiv& (0+255),c
 10406  0031BC  0E18               	movlw	24
 10407  0031BE  6E3B               	movwf	___ftdiv@cntr,c
 10408  0031C0  5038               	movf	??___ftdiv& (0+255),w,c
 10409  0031C2                     i2l698:
 10410  0031C2  90D8               	bcf	status,0,c
 10411  0031C4  363C               	rlcf	___ftdiv@f3,f,c
 10412  0031C6  363D               	rlcf	___ftdiv@f3+1,f,c
 10413  0031C8  363E               	rlcf	___ftdiv@f3+2,f,c
 10414  0031CA  5035               	movf	___ftdiv@f2,w,c
 10415  0031CC  5C32               	subwf	___ftdiv@f1,w,c
 10416  0031CE  5036               	movf	___ftdiv@f2+1,w,c
 10417  0031D0  5833               	subwfb	___ftdiv@f1+1,w,c
 10418  0031D2  5037               	movf	___ftdiv@f2+2,w,c
 10419  0031D4  5834               	subwfb	___ftdiv@f1+2,w,c
 10420  0031D6  A0D8               	btfss	status,0,c
 10421  0031D8  D007               	goto	i2l699
 10422  0031DA  5035               	movf	___ftdiv@f2,w,c
 10423  0031DC  5E32               	subwf	___ftdiv@f1,f,c
 10424  0031DE  5036               	movf	___ftdiv@f2+1,w,c
 10425  0031E0  5A33               	subwfb	___ftdiv@f1+1,f,c
 10426  0031E2  5037               	movf	___ftdiv@f2+2,w,c
 10427  0031E4  5A34               	subwfb	___ftdiv@f1+2,f,c
 10428  0031E6  803C               	bsf	___ftdiv@f3,0,c
 10429  0031E8                     i2l699:
 10430  0031E8  90D8               	bcf	status,0,c
 10431  0031EA  3632               	rlcf	___ftdiv@f1,f,c
 10432  0031EC  3633               	rlcf	___ftdiv@f1+1,f,c
 10433  0031EE  3634               	rlcf	___ftdiv@f1+2,f,c
 10434  0031F0  2E3B               	decfsz	___ftdiv@cntr,f,c
 10435  0031F2  D7E7               	goto	i2l698
 10436  0031F4  C03C  F001         	movff	___ftdiv@f3,___ftpack@arg
 10437  0031F8  C03D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10438  0031FC  C03E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10439  003200  C03F  F004         	movff	___ftdiv@exp,___ftpack@exp
 10440  003204  C040  F005         	movff	___ftdiv@sign,___ftpack@sign
 10441  003208  EC21  F01A         	call	___ftpack	;wreg free
 10442  00320C  C001  F032         	movff	?___ftpack,?___ftdiv
 10443  003210  C002  F033         	movff	?___ftpack+1,?___ftdiv+1
 10444  003214  C003  F034         	movff	?___ftpack+2,?___ftdiv+2
 10445  003218  0012               	return	
 10446  00321A                     __end_of___ftdiv:
 10447                           	opt stack 0
 10448                           pclatu	equ	0xFFB
 10449                           pclath	equ	0xFFA
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           indf0	equ	0xFEF
 10458                           fsr0h	equ	0xFEA
 10459                           fsr0l	equ	0xFE9
 10460                           wreg	equ	0xFE8
 10461                           fsr1h	equ	0xFE2
 10462                           fsr1l	equ	0xFE1
 10463                           indf2	equ	0xFDF
 10464                           postinc2	equ	0xFDE
 10465                           postdec2	equ	0xFDD
 10466                           fsr2h	equ	0xFDA
 10467                           fsr2l	equ	0xFD9
 10468                           status	equ	0xFD8
 10469                           
 10470 ;; *************** function ___ftpack *****************
 10471 ;; Defined at:
 10472 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\float.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;  arg             3    0[COMRAM] unsigned um
 10475 ;;  exp             1    3[COMRAM] unsigned char 
 10476 ;;  sign            1    4[COMRAM] unsigned char 
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;		None
 10479 ;; Return value:  Size  Location     Type
 10480 ;;                  3    0[COMRAM] float 
 10481 ;; Registers used:
 10482 ;;		wreg, status,2, status,0
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10488 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10491 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10492 ;;Total ram usage:        8 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; This function calls:
 10495 ;;		Nothing
 10496 ;; This function is called by:
 10497 ;;		___awtoft
 10498 ;;		___ftadd
 10499 ;;		___ftdiv
 10500 ;;		___ftmul
 10501 ;;		___lltoft
 10502 ;;		___lwtoft
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           	psect	text53
 10507  003442                     __ptext53:
 10508                           	opt stack 0
 10509  003442                     ___ftpack:
 10510                           	opt stack 18
 10511                           
 10512                           ;incstack = 0
 10513  003442  5004               	movf	___ftpack@exp,w,c
 10514  003444  B4D8               	btfsc	status,2,c
 10515  003446  D005               	goto	i2l3981
 10516  003448  5001               	movf	___ftpack@arg,w,c
 10517  00344A  1002               	iorwf	___ftpack@arg+1,w,c
 10518  00344C  1003               	iorwf	___ftpack@arg+2,w,c
 10519  00344E  A4D8               	btfss	status,2,c
 10520  003450  D00C               	goto	i2l3987
 10521  003452                     i2l3981:
 10522  003452  0E00               	movlw	0
 10523  003454  6E01               	movwf	?___ftpack,c
 10524  003456  0E00               	movlw	0
 10525  003458  6E02               	movwf	?___ftpack+1,c
 10526  00345A  0E00               	movlw	0
 10527  00345C  6E03               	movwf	?___ftpack+2,c
 10528  00345E  0012               	return	
 10529  003460                     i2l3985:
 10530  003460  2A04               	incf	___ftpack@exp,f,c
 10531  003462  90D8               	bcf	status,0,c
 10532  003464  3203               	rrcf	___ftpack@arg+2,f,c
 10533  003466  3202               	rrcf	___ftpack@arg+1,f,c
 10534  003468  3201               	rrcf	___ftpack@arg,f,c
 10535  00346A                     i2l3987:
 10536  00346A  0E00               	movlw	0
 10537  00346C  1401               	andwf	___ftpack@arg,w,c
 10538  00346E  6E06               	movwf	??___ftpack& (0+255),c
 10539  003470  0E00               	movlw	0
 10540  003472  1402               	andwf	___ftpack@arg+1,w,c
 10541  003474  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10542  003476  0EFE               	movlw	254
 10543  003478  1403               	andwf	___ftpack@arg+2,w,c
 10544  00347A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10545  00347C  5006               	movf	??___ftpack,w,c
 10546  00347E  1007               	iorwf	??___ftpack+1,w,c
 10547  003480  1008               	iorwf	??___ftpack+2,w,c
 10548  003482  B4D8               	btfsc	status,2,c
 10549  003484  D00C               	goto	i2l3993
 10550  003486  D7EC               	goto	i2l3985
 10551  003488                     i2l3989:
 10552  003488  2A04               	incf	___ftpack@exp,f,c
 10553  00348A  0E01               	movlw	1
 10554  00348C  2601               	addwf	___ftpack@arg,f,c
 10555  00348E  0E00               	movlw	0
 10556  003490  2202               	addwfc	___ftpack@arg+1,f,c
 10557  003492  0E00               	movlw	0
 10558  003494  2203               	addwfc	___ftpack@arg+2,f,c
 10559  003496  90D8               	bcf	status,0,c
 10560  003498  3203               	rrcf	___ftpack@arg+2,f,c
 10561  00349A  3202               	rrcf	___ftpack@arg+1,f,c
 10562  00349C  3201               	rrcf	___ftpack@arg,f,c
 10563  00349E                     i2l3993:
 10564  00349E  0E00               	movlw	0
 10565  0034A0  1401               	andwf	___ftpack@arg,w,c
 10566  0034A2  6E06               	movwf	??___ftpack& (0+255),c
 10567  0034A4  0E00               	movlw	0
 10568  0034A6  1402               	andwf	___ftpack@arg+1,w,c
 10569  0034A8  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10570  0034AA  0EFF               	movlw	255
 10571  0034AC  1403               	andwf	___ftpack@arg+2,w,c
 10572  0034AE  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10573  0034B0  5006               	movf	??___ftpack,w,c
 10574  0034B2  1007               	iorwf	??___ftpack+1,w,c
 10575  0034B4  1008               	iorwf	??___ftpack+2,w,c
 10576  0034B6  B4D8               	btfsc	status,2,c
 10577  0034B8  D006               	goto	i2l3997
 10578  0034BA  D7E6               	goto	i2l3989
 10579  0034BC                     i2l3995:
 10580  0034BC  0604               	decf	___ftpack@exp,f,c
 10581  0034BE  90D8               	bcf	status,0,c
 10582  0034C0  3601               	rlcf	___ftpack@arg,f,c
 10583  0034C2  3602               	rlcf	___ftpack@arg+1,f,c
 10584  0034C4  3603               	rlcf	___ftpack@arg+2,f,c
 10585  0034C6                     i2l3997:
 10586  0034C6  AE02               	btfss	___ftpack@arg+1,7,c
 10587  0034C8  D7F9               	goto	i2l3995
 10588  0034CA  A004               	btfss	___ftpack@exp,0,c
 10589  0034CC  9E02               	bcf	___ftpack@arg+1,7,c
 10590  0034CE  90D8               	bcf	status,0,c
 10591  0034D0  3204               	rrcf	___ftpack@exp,f,c
 10592  0034D2  5004               	movf	___ftpack@exp,w,c
 10593  0034D4  1203               	iorwf	___ftpack@arg+2,f,c
 10594  0034D6  5005               	movf	___ftpack@sign,w,c
 10595  0034D8  A4D8               	btfss	status,2,c
 10596  0034DA  8E03               	bsf	___ftpack@arg+2,7,c
 10597  0034DC  C001  F001         	movff	___ftpack@arg,?___ftpack
 10598  0034E0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10599  0034E4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10600  0034E8  0012               	return	
 10601  0034EA                     __end_of___ftpack:
 10602                           	opt stack 0
 10603                           pclatu	equ	0xFFB
 10604                           pclath	equ	0xFFA
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           indf0	equ	0xFEF
 10613                           fsr0h	equ	0xFEA
 10614                           fsr0l	equ	0xFE9
 10615                           wreg	equ	0xFE8
 10616                           fsr1h	equ	0xFE2
 10617                           fsr1l	equ	0xFE1
 10618                           indf2	equ	0xFDF
 10619                           postinc2	equ	0xFDE
 10620                           postdec2	equ	0xFDD
 10621                           fsr2h	equ	0xFDA
 10622                           fsr2l	equ	0xFD9
 10623                           status	equ	0xFD8
 10624                           
 10625 ;; *************** function ___ftge *****************
 10626 ;; Defined at:
 10627 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftge.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;  ff1             3   13[COMRAM] float 
 10630 ;;  ff2             3   16[COMRAM] float 
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;		None
 10633 ;; Return value:  Size  Location     Type
 10634 ;;		None               void
 10635 ;; Registers used:
 10636 ;;		wreg, status,2, status,0
 10637 ;; Tracked objects:
 10638 ;;		On entry : 0/0
 10639 ;;		On exit  : 0/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10642 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10644 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10645 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10646 ;;Total ram usage:        9 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; This function calls:
 10649 ;;		Nothing
 10650 ;; This function is called by:
 10651 ;;		_single_axis_measure
 10652 ;;		_sprintf
 10653 ;; This function uses a non-reentrant model
 10654 ;;
 10655                           
 10656                           	psect	text54
 10657  00361E                     __ptext54:
 10658                           	opt stack 0
 10659  00361E                     ___ftge:
 10660                           	opt stack 20
 10661                           
 10662                           ;incstack = 0
 10663  00361E  AE10               	btfss	___ftge@ff1+2,7,c
 10664  003620  D016               	goto	i2l4701
 10665  003622  C00E  F014         	movff	___ftge@ff1,??___ftge
 10666  003626  C00F  F015         	movff	___ftge@ff1+1,??___ftge+1
 10667  00362A  C010  F016         	movff	___ftge@ff1+2,??___ftge+2
 10668  00362E  1E14               	comf	??___ftge,f,c
 10669  003630  1E15               	comf	??___ftge+1,f,c
 10670  003632  1E16               	comf	??___ftge+2,f,c
 10671  003634  2A14               	incf	??___ftge,f,c
 10672  003636  0E00               	movlw	0
 10673  003638  2215               	addwfc	??___ftge+1,f,c
 10674  00363A  2216               	addwfc	??___ftge+2,f,c
 10675  00363C  0E00               	movlw	0
 10676  00363E  2414               	addwf	??___ftge,w,c
 10677  003640  6E0E               	movwf	___ftge@ff1,c
 10678  003642  0E00               	movlw	0
 10679  003644  2015               	addwfc	??___ftge+1,w,c
 10680  003646  6E0F               	movwf	___ftge@ff1+1,c
 10681  003648  0E80               	movlw	128
 10682  00364A  2016               	addwfc	??___ftge+2,w,c
 10683  00364C  6E10               	movwf	___ftge@ff1+2,c
 10684  00364E                     i2l4701:
 10685  00364E  AE13               	btfss	___ftge@ff2+2,7,c
 10686  003650  D016               	goto	i2l4705
 10687  003652  C011  F014         	movff	___ftge@ff2,??___ftge
 10688  003656  C012  F015         	movff	___ftge@ff2+1,??___ftge+1
 10689  00365A  C013  F016         	movff	___ftge@ff2+2,??___ftge+2
 10690  00365E  1E14               	comf	??___ftge,f,c
 10691  003660  1E15               	comf	??___ftge+1,f,c
 10692  003662  1E16               	comf	??___ftge+2,f,c
 10693  003664  2A14               	incf	??___ftge,f,c
 10694  003666  0E00               	movlw	0
 10695  003668  2215               	addwfc	??___ftge+1,f,c
 10696  00366A  2216               	addwfc	??___ftge+2,f,c
 10697  00366C  0E00               	movlw	0
 10698  00366E  2414               	addwf	??___ftge,w,c
 10699  003670  6E11               	movwf	___ftge@ff2,c
 10700  003672  0E00               	movlw	0
 10701  003674  2015               	addwfc	??___ftge+1,w,c
 10702  003676  6E12               	movwf	___ftge@ff2+1,c
 10703  003678  0E80               	movlw	128
 10704  00367A  2016               	addwfc	??___ftge+2,w,c
 10705  00367C  6E13               	movwf	___ftge@ff2+2,c
 10706  00367E                     i2l4705:
 10707  00367E  0E00               	movlw	0
 10708  003680  1A0E               	xorwf	___ftge@ff1,f,c
 10709  003682  0E00               	movlw	0
 10710  003684  1A0F               	xorwf	___ftge@ff1+1,f,c
 10711  003686  0E80               	movlw	128
 10712  003688  1A10               	xorwf	___ftge@ff1+2,f,c
 10713  00368A  0E00               	movlw	0
 10714  00368C  1A11               	xorwf	___ftge@ff2,f,c
 10715  00368E  0E00               	movlw	0
 10716  003690  1A12               	xorwf	___ftge@ff2+1,f,c
 10717  003692  0E80               	movlw	128
 10718  003694  1A13               	xorwf	___ftge@ff2+2,f,c
 10719  003696  5011               	movf	___ftge@ff2,w,c
 10720  003698  5C0E               	subwf	___ftge@ff1,w,c
 10721  00369A  5012               	movf	___ftge@ff2+1,w,c
 10722  00369C  580F               	subwfb	___ftge@ff1+1,w,c
 10723  00369E  5013               	movf	___ftge@ff2+2,w,c
 10724  0036A0  5810               	subwfb	___ftge@ff1+2,w,c
 10725  0036A2  B0D8               	btfsc	status,0,c
 10726  0036A4  D002               	goto	i2l4711
 10727  0036A6  90D8               	bcf	status,0,c
 10728  0036A8  0012               	return	
 10729  0036AA                     i2l4711:
 10730  0036AA  80D8               	bsf	status,0,c
 10731  0036AC  0012               	return	
 10732  0036AE                     __end_of___ftge:
 10733                           	opt stack 0
 10734                           pclatu	equ	0xFFB
 10735                           pclath	equ	0xFFA
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           indf0	equ	0xFEF
 10744                           fsr0h	equ	0xFEA
 10745                           fsr0l	equ	0xFE9
 10746                           wreg	equ	0xFE8
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           pclatu	equ	0xFFB
 10756                           pclath	equ	0xFFA
 10757                           tblptru	equ	0xFF8
 10758                           tblptrh	equ	0xFF7
 10759                           tblptrl	equ	0xFF6
 10760                           tablat	equ	0xFF5
 10761                           prodh	equ	0xFF4
 10762                           prodl	equ	0xFF3
 10763                           intcon	equ	0xFF2
 10764                           indf0	equ	0xFEF
 10765                           fsr0h	equ	0xFEA
 10766                           fsr0l	equ	0xFE9
 10767                           wreg	equ	0xFE8
 10768                           fsr1h	equ	0xFE2
 10769                           fsr1l	equ	0xFE1
 10770                           indf2	equ	0xFDF
 10771                           postinc2	equ	0xFDE
 10772                           postdec2	equ	0xFDD
 10773                           fsr2h	equ	0xFDA
 10774                           fsr2l	equ	0xFD9
 10775                           status	equ	0xFD8
 10776                           
 10777                           	psect	rparam
 10778  0000                     pclatu	equ	0xFFB
 10779                           pclath	equ	0xFFA
 10780                           tblptru	equ	0xFF8
 10781                           tblptrh	equ	0xFF7
 10782                           tblptrl	equ	0xFF6
 10783                           tablat	equ	0xFF5
 10784                           prodh	equ	0xFF4
 10785                           prodl	equ	0xFF3
 10786                           intcon	equ	0xFF2
 10787                           indf0	equ	0xFEF
 10788                           fsr0h	equ	0xFEA
 10789                           fsr0l	equ	0xFE9
 10790                           wreg	equ	0xFE8
 10791                           fsr1h	equ	0xFE2
 10792                           fsr1l	equ	0xFE1
 10793                           indf2	equ	0xFDF
 10794                           postinc2	equ	0xFDE
 10795                           postdec2	equ	0xFDD
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     92      92
    BANK0           160     86      86
    BANK1           256     17      17
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[6]), STR_2(CODE[10]), 
		 -> STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> showAccelerometerVal@buffer(BANK0[10]), showTempLight@buffer(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S822$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    lcdWriteStrC@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_8(CODE[14]), STR_7(CODE[9]), showAccelerometerVal@buffer(BANK0[10]), STR_3(CODE[15]), 
		 -> showTempLight@buffer(BANK0[10]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_showAccelerometerVal
    _ISR->_showTempLight
    _readTempF->___ftdiv
    ___awtoft->___ftpack
    _readLight->___aldiv
    ___aldiv->___lmul
    _showAccelerometerVal->_single_axis_measure
    i2_lcdWriteStrC->i2_lcdWriteChar
    i2_lcdWriteChar->i2_writeByte
    i2_lcdSetPos->i2_lcdWriteCmd
    i2_lcdClear->i2_lcdWriteCmd
    i2_lcdWriteCmd->i2_writeByte
    i2_writeByte->i2_writeDigit
    _sprintf->_single_axis_measure
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->___ftadd
    _single_axis_measure->_read_accelerometer
    _voltageToG->___ftdiv
    ___ftadd->___ftmul
    _read_accelerometer->_pointToVoltage
    _pointToVoltage->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftadd
    ___ftge->___lwtoft

Critical Paths under _main in BANK0

    _intro->_lcdClean
    _lcdWriteStrC->_lcdWriteChar
    _lcdClean->_lcdSetPos
    _lcdWriteChar->_writeByte
    _lcdSetPos->_lcdWriteCmd
    _lcdClear->_lcdWriteCmd
    _lcdWriteCmd->_writeByte
    _writeByte->_writeDigit

Critical Paths under _ISR in BANK0

    _ISR->_showAccelerometerVal
    _ISR->_showTempLight
    _showTempLight->_sprintf
    _showAccelerometerVal->_sprintf

Critical Paths under _main in BANK1

    _main->_lcdInit
    _lcdInit->_intro

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5    3125
                                             12 BANK1      5     0      5
                            _lcdInit
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              9     9      0    3125
                                              3 BANK1      9     9      0
                              _intro
                        _lcdWriteCmd
                         _writeDigit
 ---------------------------------------------------------------------------------
 (2) _intro                                                3     3      0    2631
                                              0 BANK1      3     3      0
                           _lcdClean
                          _lcdSetPos
                       _lcdWriteStrC
 ---------------------------------------------------------------------------------
 (3) _lcdWriteStrC                                         2     0      2     467
                                             77 BANK0      2     0      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (3) _lcdClean                                             3     3      0    1360
                                             83 BANK0      3     3      0
                           _lcdClear
                          _lcdSetPos
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (4) _lcdWriteChar                                         1     1      0     154
                                             76 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (3) _lcdSetPos                                            3     2      1     758
                                             80 BANK0      3     2      1
                        _lcdWriteCmd
 ---------------------------------------------------------------------------------
 (4) _lcdClear                                             0     0      0     222
                        _lcdWriteCmd
 ---------------------------------------------------------------------------------
 (2) _lcdWriteCmd                                          4     4      0     222
                                             76 BANK0      4     4      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (3) _writeByte                                            1     1      0     132
                                             75 BANK0      1     1      0
                         _writeDigit
 ---------------------------------------------------------------------------------
 (2) _writeDigit                                           1     1      0      88
                                             74 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 14    14      0  128657
                                             60 BANK0     14    14      0
               _showAccelerometerVal
                      _showTempLight
 ---------------------------------------------------------------------------------
 (9) _showTempLight                                       11    11      0   58762
                                             91 COMRAM     1     1      0
                                             50 BANK0     10    10      0
                          _readLight
                          _readTempF
                            _sprintf
                         i2_lcdClear
                        i2_lcdSetPos
                     i2_lcdWriteStrC
 ---------------------------------------------------------------------------------
 (10) _readTempF                                          11     8      3   12056
                                             64 COMRAM    11     8      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                               _read
 ---------------------------------------------------------------------------------
 (11) ___awtoft                                            5     2      3    1907
                                              8 COMRAM     5     2      3
                           ___ftpack
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (10) _readLight                                          10     8      2     912
                                             27 COMRAM    10     8      2
                            ___aldiv
                             ___lmul
                               _read
 ---------------------------------------------------------------------------------
 (11) ___lmul                                             12     4      8     278
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (11) ___aldiv                                            15     7      8     406
                                             12 COMRAM    15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _showAccelerometerVal                                11    11      0   69895
                                             91 COMRAM     1     1      0
                                             50 BANK0     10    10      0
                _single_axis_measure
                            _sprintf
                         i2_lcdClear
                        i2_lcdSetPos
                     i2_lcdWriteChar
                     i2_lcdWriteStrC
 ---------------------------------------------------------------------------------
 (10) i2_lcdWriteStrC                                      2     0      2     355
                                              3 COMRAM     2     0      2
                     i2_lcdWriteChar
 ---------------------------------------------------------------------------------
 (11) i2_lcdWriteChar                                      1     1      0     154
                                              2 COMRAM     1     1      0
                        i2_writeByte
 ---------------------------------------------------------------------------------
 (10) i2_lcdSetPos                                         3     2      1     437
                                              6 COMRAM     3     2      1
                      i2_lcdWriteCmd
 ---------------------------------------------------------------------------------
 (10) i2_lcdClear                                          0     0      0     222
                      i2_lcdWriteCmd
 ---------------------------------------------------------------------------------
 (11) i2_lcdWriteCmd                                       4     4      0     222
                                              2 COMRAM     4     4      0
                        i2_writeByte
 ---------------------------------------------------------------------------------
 (12) i2_writeByte                                         1     1      0     132
                                              1 COMRAM     1     1      0
                       i2_writeDigit
 ---------------------------------------------------------------------------------
 (13) i2_writeDigit                                        1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _sprintf                                            54    47      7   44664
                                              0 BANK0     50    43      7
                          ___asftadd
                          ___asftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                          _readLight (ARG)
                          _readTempF (ARG)
                              _scale
                _single_axis_measure (ARG)
 ---------------------------------------------------------------------------------
 (11) _scale                                              10     7      3    9057
                                             37 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) _isdigit                                             3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) _fround                                             13    10      3    8859
                                             37 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (12) ___wmul                                              6     2      4    2067
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (12) ___awmod                                             7     3      4    1250
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) ___awdiv                                             9     5      4    1360
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (11) __tdiv_to_l_                                        15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (11) __div_to_l_                                         16    10      6     552
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (11) ___lltoft                                            9     5      4    1885
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___llmod                                            10     2      8     583
                                             14 COMRAM    10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lldiv                                            14     6      8     480
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (11) ___fttol                                            15    11      4     411
                                             44 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftneg                                             3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (11) ___asftsub                                           5     0      5    3562
                                             55 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (12) ___ftsub                                             6     0      6    3390
                                             49 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (11) ___asftmul                                           5     0      5    4063
                                             37 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (11) ___asftadd                                           5     0      5    3411
                                             49 COMRAM     5     0      5
                            ___ftadd
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (10) _single_axis_measure                                16    11      5   23903
                                             75 COMRAM    16    11      5
                            ___ftadd
                            ___ftdiv
                             ___ftge
                           ___lwtoft
                 _read_accelerometer
                         _voltageToG
 ---------------------------------------------------------------------------------
 (11) _voltageToG                                          3     0      3    5967
                                             64 COMRAM     3     0      3
                            ___ftadd
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (13) ___ftadd                                            12     6      6    3239
                                             37 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (11) _read_accelerometer                                  5     2      3    8889
                                             70 COMRAM     5     2      3
                     _pointToVoltage
                               _read
 ---------------------------------------------------------------------------------
 (11) _read                                                6     4      2     205
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (12) _pointToVoltage                                      6     3      3    8586
                                             64 COMRAM     6     3      3
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (13) ___lwtoft                                            5     2      3    1944
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftmul                                            15     9      6    3891
                                             22 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (11) ___ftdiv                                            15     9      6    2653
                                             49 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (13) ___ftpack                                            8     3      5    1763
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (11) ___ftge                                              9     3      6     666
                                             13 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdInit
     _intro
       _lcdClean
         _lcdClear
           _lcdWriteCmd
             _writeByte
               _writeDigit
         _lcdSetPos
           _lcdWriteCmd
             _writeByte
               _writeDigit
         _lcdWriteChar
           _writeByte
             _writeDigit
       _lcdSetPos
         _lcdWriteCmd
           _writeByte
             _writeDigit
       _lcdWriteStrC
         _lcdWriteChar
           _writeByte
             _writeDigit
     _lcdWriteCmd
       _writeByte
         _writeDigit
     _writeDigit

 _ISR (ROOT)
   _showAccelerometerVal
     _single_axis_measure
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _read (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _read_accelerometer
         _pointToVoltage
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft
             ___ftpack
         _read
       _voltageToG
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
     _sprintf
       ___asftadd
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftmul
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _readLight (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         _read
       _readTempF (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _read
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _single_axis_measure (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
         _read_accelerometer
           _pointToVoltage
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft
               ___ftpack
           _read
         _voltageToG
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
     i2_lcdClear
       i2_lcdWriteCmd
         i2_writeByte
           i2_writeDigit
     i2_lcdSetPos
       i2_lcdWriteCmd
         i2_writeByte
           i2_writeDigit
     i2_lcdWriteChar
       i2_writeByte
         i2_writeDigit
     i2_lcdWriteStrC
       i2_lcdWriteChar
         i2_writeByte
           i2_writeDigit
   _showTempLight
     _readLight
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _read
     _readTempF
       ___awtoft
         ___ftpack
         _read (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _read (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _read
     _sprintf
       ___asftadd
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftmul
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _readLight (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         _read
       _readTempF (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _read
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _single_axis_measure (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
         _read_accelerometer
           _pointToVoltage
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft
               ___ftpack
           _read
         _voltageToG
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
     i2_lcdClear
       i2_lcdWriteCmd
         i2_writeByte
           i2_writeDigit
     i2_lcdSetPos
       i2_lcdWriteCmd
         i2_writeByte
           i2_writeDigit
     i2_lcdWriteStrC
       i2_lcdWriteChar
         i2_writeByte
           i2_writeDigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     5C      5C       1       96.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      56       5       53.8%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     11      11       8        6.6%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BIGRAM             EAF      0       0      35        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Wed Oct 01 10:30:34 2014

           ??_read_accelerometer 004A                     ___asftadd@f2 0034  
                  ___asftadd@f1p 0032                               l41 3E28  
                   ___awdiv@sign 000E              ___wmul@multiplicand 0013  
                   ___asftmul@f2 0028                     __CFG_CP0$OFF 000000  
                   ___asftsub@f2 003A                     lcdWriteCmd@i 00AE  
                   lcdWriteCmd@n 00AD                      __CFG_OSC$HS 000000  
                   ___ftadd@exp1 0031                     ___ftadd@exp2 0030  
                   ___ftadd@sign 002F                              l131 3BF6  
                            l133 3C04                              l134 3C06  
                            l127 3BDA                              l129 3BE8  
                            _ISR 0008                     ___awmod@sign 0007  
               ??i2_lcdWriteChar 0003                              wreg 000FE8  
                   __CFG_IESO$ON 000000                 ??i2_lcdWriteStrC 0006  
                  ___asftmul@f1p 0026                      _sprintf$833 0070  
                     i2_lcdClear 3E92                    ___asftsub@f1p 0038  
                 ??_lcdWriteChar 00AC                    lcdWriteChar@n 00AC  
                 ??_lcdWriteStrC 00AF                  ??_showTempLight 005C  
           _showAccelerometerVal 2880                             ?_ISR 0001  
                   ___ftdiv@cntr 003B                     ___ftdiv@sign 0040  
                           l4027 39F2                             l4221 38FA  
                           l4223 3904                             l4217 38EA  
                           l4219 38F0                             l4227 3914  
                           l4229 3932                             l4405 279A  
                           l4433 287A                             l5241 2C78  
                           l4419 281C                             l4381 38B6  
                           l5253 2CB0                             l4377 3884  
                           l5193 3618                             l5265 2CE8  
                           l5277 2D20                             l3971 3BF8  
                           l3963 3BDC                             l3967 3BEA  
             __CFG_WPFP$PAGE_127 000000                             STR_1 0F94  
                           STR_2 0FA0                             STR_3 0F77  
                           STR_4 0FB3                             STR_5 0FB3  
                           STR_6 0FB3                             STR_7 0FAA  
                           STR_8 0F86                             u4107 2808  
                           u4117 2866                             u4037 2C36  
                           u4127 3E5A                             u4047 2C6A  
                           u4137 39E4                             u4057 2CA2  
                           u2650 38AA                             u4147 39F4  
                           u4067 2CDA                             u2660 38DC  
                           u4077 2D12                             u4087 3604  
                           u4097 2786                             u2657 38A0  
                           u2667 38D2                             i2l51 005A  
                           i2l81 3224                             i2l82 32AC  
                           i2l83 3234                             i2l84 3244  
                           i2l85 3254                             i2l86 3264  
                           i2l87 32C2                    lcdWriteStrC@s 00AD  
                  __CFG_FCMEN$ON 000000                             _main 3E0A  
                   ___ftpack@arg 0001                             _read 321A  
                   ___ftpack@exp 0004                             fsr0h 000FEA  
                           fsr1h 000FE2                             indf0 000FEF  
                           fsr0l 000FE9                             fsr2h 000FDA  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9              __end_ofi2_writeByte 3E76  
                           pclat 000FFA                             prodh 000FF4  
                           prodl 000FF3                             start 0094  
                   _sprintf$1456 006D      __end_of_single_axis_measure 2F46  
                   ___ftmul@cntr 0024                     ___ftmul@sign 0025  
                          ??_ISR 009C                     ___fttol@exp1 003B  
                    i2_lcdSetPos 3B40                     ___fttol@lval 0037  
                  __CFG_PLLDIV$1 000000                  __end_of___aldiv 2E46  
                          ?_main 010C                            ?_read 0001  
                __end_of___awdiv 3394                  __end_of___ftadd 25D0  
                __end_of___awmod 3586                  __end_of___ftdiv 321A  
                __end_of___ftneg 3E0A                  __end_of___lldiv 3734  
                __end_of___ftmul 303E                  ___awdiv@divisor 000A  
                __end_of___llmod 381E                  __end_of___ftsub 3D2E  
                __end_of___fttol 3134              showTempLight@buffer 0092  
                          i2l131 3D50                            i2l133 3D5A  
                          i2l134 3D5C                            i2l127 3D3C  
                          i2l129 3D46                            i2l285 17BE  
                          i2l713 2AE4                            i2l802 380C  
                          i2l707 2A7A                            i2l664 245E  
                          i2l738 3DFC                            i2l595 272A  
                          i2l668 248A                            i2l588 268E  
                          i2l679 253A                            i2l688 2556  
                          i2l792 3722                            i2l698 31C2  
                          i2l699 31E8                  ___awdiv@counter 000D  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISD 000F95              ___lmul@multiplicand 0005  
                   ___lltoft@exp 0011                  __end_of_lcdInit 2D3E  
          ?_showAccelerometerVal 0001                    ___awtoft@sign 000D  
                __end_of_dpowers 0F29                            _scale 1D4E  
                __end_of_isdigit 3DE4                            _intro 3586  
                  ___ftpack@sign 0005             __end_ofi2_writeDigit 3D60  
                          tablat 000FF5                            status 000FD8  
                __end_of_sprintf 1D4E          __CFG_DSWDTOSC$INTOSCREF 000000  
                __initialization 3E9A                     __end_of_main 3E2A  
                   __end_of_read 32E4                           ??_main 00B6  
                  ___fttol@sign1 0036                           ??_read 0003  
                  __activetblptr 000003             __size_of__tdiv_to_l_ 0136  
                    read@channel 0001                      ?i2_lcdClear 0001  
                    i2_writeByte 3E60                 ___llmod@dividend 000F  
                         ?_scale 0026                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           ?_intro 0001  
                         _ANCON0 000F48                           _ANCON1 000F49  
               ___awdiv@dividend 0008                 __end_of___awtoft 3AFA  
               __end_of___ftpack 34EA             single_axis_measure@i 0057  
               __end_of___lltoft 3882                           i2l4111 3180  
                         i2l4105 315A                           i2l4201 3D3E  
                         i2l4043 2498                           i2l4037 246C  
                         i2l4301 3330                           i2l5101 1ABC  
                         i2l5013 16AE                           i2l5021 1752  
                         i2l5005 1668                           i2l4205 3D48  
                 __CFG_WDTEN$OFF 000000                           i2l4071 2508  
                         i2l4311 3356                           i2l5111 1B34  
                         i2l5023 1762                           i2l4065 24EE  
                         i2l5105 1AFC                           i2l4209 3D52  
                         i2l5201 3B4C                           i2l4155 2F92  
                         i2l4067 24F8                           i2l4059 24CC  
                         i2l4307 334A                           i2l4323 337C  
                         i2l5123 1BD0                           i2l5043 17FA  
                         i2l5035 17C2                           i2l5203 3B52  
                         i2l5211 3B7A                           i2l4173 2FD8  
                         i2l4149 2F6C                           i2l4085 2572  
                         i2l4077 252A                           i2l4069 2500  
                         i2l4309 3352                           i2l5133 1C12  
                         i2l5125 1BDE                           i2l5117 1B7E  
                         i2l5029 1780                           i2l5205 3B58  
                         i2l5221 3A7C                           i2l4183 3004  
                         i2l4263 327C                           i2l4095 25AA  
                         i2l4079 2534                           i2l4327 338A  
                         i2l4319 3372                           i2l4351 3550  
                         i2l4343 3532                           i2l4503 3DDC  
                         i2l5127 1BEA                           i2l5119 1B8C  
                         i2l5047 184E                           i2l4169 2FC8  
                         i2l4513 29EA                           i2l5145 1CF4  
                         i2l5065 1976                           i2l5057 1948  
                         i2l5209 3B60                           i2l5217 3A52  
                         i2l4179 2FF4                           i2l4363 357C  
                         i2l4355 3564                           i2l4347 3544  
                         i2l4339 3516                           i2l5139 1C42  
                         i2l5083 1A2A                           i2l5059 1958  
                         i2l5067 1984                           i2l5147 1D0A  
                         i2l4701 364E                           i2l4605 26F2  
                         i2l4533 2A52                           i2l4349 354C  
                         i2l4453 23D2                           i2l4445 22FA  
                         i2l5077 1A06                           i2l5149 1D40  
                         i2l4711 36AA                           i2l4615 271A  
                         i2l4519 2A14                           i2l4295 3310  
                         i2l4359 356E                           i2l4705 367E  
                         i2l5169 2EF4                           i2l4617 2726  
                         i2l4609 2702                           i2l4561 2AE0  
                         i2l4553 2ABC                           i2l4473 1F52  
                         i2l5097 1A8E                           i2l4641 2DDC  
                         i2l4633 2DAA                           i2l4491 2176  
                         i2l4467 1E96                           i2l4651 2E10  
                         i2l4643 2DE0                           i2l4627 2D7A  
                         u216_41 2428                           i2l4725 3068  
                         i2l4805 3828                           i2l4549 2AAC  
                         i2l4485 20BA                           i2l4477 1F7C  
                         i2l4743 30D4                           i2l4807 3834  
                         i2l4575 2648                           i2l4559 2AD4  
                         i2l5199 3B46                           i2l4639 2DD0  
                         i2l4655 2E1E                           i2l4761 3122  
                         i2l4753 30FC                           i2l4569 260C  
                         i2l4905 11F2                           i2l4681 3A1E  
                         i2l4755 3108                           i2l4747 30E4  
                         i2l4771 36D4                           i2l4595 26BE  
                         i2l4931 1330                           i2l4915 125C  
                         i2l4659 2E34                           i2l3981 3452  
                         u217_41 243C                           i2l4757 310C  
                         i2l4773 36E0                           i2l4829 3BC0  
                         i2l4677 3A0A                           i2l4693 3AD2  
                         i2l4783 3714                           i2l4775 36E4  
                         i2l4791 37CA                           i2l4943 13B8  
                         i2l4863 0FF8                           i2l3993 349E  
                         i2l3985 3460                           i2l4793 37D6  
                         i2l4857 0FD2                           i2l4849 2B60  
                         i2l3995 34BC                           i2l3987 346A  
                         i2l4795 37DA                           i2l4971 1504  
                         i2l4955 1464                           i2l4947 13F6  
                         i2l4939 1390                           i2l4883 10FE  
                         i2l3997 34C6                           i2l3989 3488  
                         u242_41 2F56                           u314_41 304E  
                         i2l4893 117A                           i2l4869 103E  
                         i2l4877 10C6                           i2l4799 37FE  
                         i2l4991 15C6                           i2l4959 148A  
                         i2l4887 1146                           i2l4977 1562  
                         i2l4897 1182                           i2l4889 1164  
                         i2l4995 1626                           i2l4899 11D0  
                         i2l4999 164A                           u244_41 2F7C  
                         u237_41 3144                           u239_41 316A  
               __end_of___lwtoft 3DBA                           u283_41 29D0  
                         u285_41 29FA                   __CFG_WPCFG$OFF 000000  
                 __CFG_WPDIS$OFF 000000                 __end_of_lcdClean 2880  
               __end_of_lcdClear 3E92             __size_of_lcdWriteCmd 0058  
                 __CFG_XINST$OFF 000000                 __end_of__powers_ 0F77  
                         ___ftge 361E                           ___lmul 39FA  
                      ??___aldiv 0015                           ___wmul 3CBE  
                      ??___awdiv 000C             __end_of_lcdWriteChar 3E60  
                      ??___ftadd 002C                        ??___awmod 0005  
                      ??___ftdiv 0038                        ??___ftneg 0004  
                      ??___lldiv 0009                        ??___ftmul 001D  
                      ??___llmod 0017                        ??___ftsub 0038  
                      ??___fttol 0031             __end_of_lcdWriteStrC 38E4  
                         _fround 21A0                  __CFG_CLKOEC$OFF 000000  
               ___awdiv@quotient 000F                  ___awmod@divisor 0003  
                      ??_lcdInit 0103                  ___awmod@counter 0006  
            pointToVoltage@point 0041            ___ftmul@f3_as_product 0021  
                      ??_isdigit 0001           __size_ofi2_lcdWriteCmd 0044  
                 i2lcdWriteCmd@i 0005                           intro@i 0101  
                 i2lcdWriteCmd@n 0004                     __mediumconst 0000  
         ??_showAccelerometerVal 005C                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ??_sprintf 0067                  __CFG_DSBOREN$ON 000000  
             __size_of___asftadd 003C               __size_of___asftmul 003C  
             __size_of___asftsub 003C             __CFG_LS48MHZ$SYS48X8 000000  
                     __accesstop 0060          __end_of__initialization 3E9A  
                     ___ftadd@f1 0026                       ___ftadd@f2 0029  
                     ___ftge@ff1 000E                       ___ftge@ff2 0011  
                     ___ftdiv@f1 0032                       ___ftdiv@f2 0035  
                     ___ftdiv@f3 003C                       ___ftneg@f1 0001  
                     ___awtoft@c 0009             __CFG_WPEND$PAGE_WPFP 000000  
                     ___ftmul@f1 0017                       ___ftmul@f2 001A  
                     ___ftsub@f1 0032                       ___ftsub@f2 0035  
                     ___fttol@f1 002D                   __pcstackCOMRAM 0001  
            __size_ofi2_lcdClear 0008                       ___lltoft@c 0009  
                  __end_of_scale 21A0                    __end_of_intro 361E  
   read_accelerometer@axis_point 004A                  __CFG_DSWDTPS$G2 000000  
                   i2lcdSetPos@p 0008                     i2lcdSetPos@x 0009  
                   i2lcdSetPos@y 0007                       ___lwtoft@c 0009  
                     __div_to_l_ 25D0               __size_of_lcdSetPos 0060  
          __size_ofi2_writeDigit 0032                  __div_to_l_@exp1 0010  
                __div_to_l_@cntr 000F                     sprintf@integ 007E  
                        ??_scale 0029                          ??_intro 0100  
                __div_to_l_@quot 000B                     sprintf@width 0083  
     showAccelerometerVal@buffer 0092               __size_of_readLight 0080  
             __size_of_readTempF 0128                    __div_to_l_@f1 0001  
                  __div_to_l_@f2 0004                    i2_lcdWriteCmd 3B84  
                        ?___ftge 000E                          ?___lmul 0001  
                  i2writeDigit@n 0001      __size_of_read_accelerometer 002E  
                        ?___wmul 0011                     ?i2_lcdSetPos 0007  
                   i2_writeDigit 3D2E                __end_of___asftadd 3CBE  
                        ?_fround 0026                   ___lmul@product 0009  
              __end_of___asftmul 3C82                __end_of___asftsub 3C46  
                      ?___awtoft 0009                        ?___ftpack 0001  
                      ?___lltoft 0009                        ?___lwtoft 0009  
                        _GO_DONE 007E11                        ?_lcdClean 0001  
                      ?_lcdClear 0001            __end_of_showTempLight 3442  
                 ?i2_lcdWriteCmd 0001               __size_of_writeByte 001E  
          __size_of_lcdWriteChar 0018                __end_of_lcdSetPos 3944  
          __size_of_lcdWriteStrC 0062                __end_of__npowers_ 0F50  
                        __Hparam 0000                       _scale$1455 0029  
                        __Lparam 0000     single_axis_measure@axis_read 0051  
                        ___aldiv 2D3E      single_axis_measure@axis_sum 0059  
                __size_of___ftge 0090                          ___awdiv 32E4  
                __size_of___lmul 0056                          ___ftadd 2418  
                        ___awmod 34EA                          ___ftdiv 3134  
                        ___ftneg 3DE4                          ___lldiv 36AE  
                __size_of___wmul 003A                          ___ftmul 2F46  
                        ___llmod 37B4                          ___ftsub 3CF8  
                        ___fttol 303E          __size_of_pointToVoltage 005E  
                   __psmallconst 0F00                  __CFG_STVREN$OFF 000000  
              voltageToG@voltage 0041                          __pcinit 3E9A  
                     ??___awtoft 000C                       ??___ftpack 0006  
                __size_of_fround 0278                          __ramtop 0F00  
                        _lcdInit 2C1E                       ??___lltoft 000D  
   __size_of_single_axis_measure 0100                          __ptext0 3E0A  
                        __ptext1 2C1E                          __ptext2 3586  
                        __ptext3 3882                          __ptext4 273C  
                        __ptext5 3E48                          __ptext6 38E4  
                        __ptext7 3E8A                          __ptext8 39A2  
                        __ptext9 3E2A                       ??___lwtoft 000C  
   single_axis_measure@iteration 004E                     __size_of_ISR 008C  
                    ?__div_to_l_ 0001                __end_of_readLight 37B4  
                        _dpowers 0F01                __end_of_readTempF 2C1E  
                        _isdigit 3DBA                 ___awmod@dividend 0001  
        single_axis_measure@axis 004C                 ___aldiv@dividend 000D  
           pointToVoltage@fPoint 0044                     ??i2_lcdClear 0007  
                     ??_lcdClean 00B3                       ??_lcdClear 00B0  
                   ?i2_writeByte 0001                          _sprintf 0FBA  
                   _lcdWriteChar 3E48             end_of_initialization 3E9A  
                   _lcdWriteStrC 3882          __size_ofi2_lcdWriteChar 0014  
                i2lcdWriteChar@n 0003          __size_ofi2_lcdWriteStrC 0056  
                ___lldiv@divisor 0005                  ___lldiv@counter 000E  
                i2lcdWriteStrC@s 0004                 ___aldiv@quotient 0018  
                        postdec2 000FDD                          postinc2 000FDE  
             __end_ofi2_lcdClear 3E9A                   __tdiv_to_l_@f1 0001  
                 __tdiv_to_l_@f2 0004                       lcdSetPos@p 00B1  
                  ??__tdiv_to_l_ 0007                       lcdSetPos@x 00B2  
                     lcdSetPos@y 00B0                        _PORTBbits 000F81  
              __end_of_writeByte 3E48                 __CFG_CPUDIV$OSC1 000000  
                      _TRISDbits 000F95                        _TRISEbits 000F96  
              __CFG_SOSCSEL$HIGH 000000                  ??i2_lcdWriteCmd 0003  
                  ??_lcdWriteCmd 00AC                      ___ftdiv@exp 003F  
               __CFG_IOL1WAY$OFF 000000              __size_of__div_to_l_ 016C  
                     _voltageToG 3AFA              __CFG_MSSP7B_EN$MSK7 000000  
                    ___ftmul@exp 0020                       _writeDigit 3BC8  
                 __end_of___ftge 36AE                   __end_of___lmul 3A50  
                 __end_of___wmul 3CF8             __size_ofi2_lcdSetPos 0044  
                 __end_of_fround 2418                 __CFG_DSWDTEN$OFF 000000  
            start_initialization 3E9A                      __end_of_ISR 0094  
            __end_of__tdiv_to_l_ 2AF6    __size_of_showAccelerometerVal 0140  
                ___llmod@divisor 0013                  ___llmod@counter 0018  
                     readLight@j 0022                       readTempF@i 0047  
                     readTempF@j 0049              __end_of_lcdWriteCmd 39FA  
                       ??___ftge 0014                         ??___lmul 0009  
                       ??___wmul 0015                   _pointToVoltage 3944  
                  sprintf@vd_835 0078                __CFG_ADCSEL$BIT12 000000  
                       ??_fround 0029                       fround@prec 002F  
              __size_of___awtoft 0054                __size_of___ftpack 00A8  
                      ___asftadd 3C82                        ___asftmul 3C46  
                      ___asftsub 3C0A                __size_of___lltoft 0064  
              __size_of___lwtoft 002C                    __pcstackBANK0 0060  
                  __pcstackBANK1 0100              __end_of__stringdata 0FB9  
                   _isdigit$1108 0002                __size_of_lcdClean 0144  
              __size_of_lcdClear 0008             __size_ofi2_writeByte 0016  
                 i2_lcdWriteChar 3E76                      sprintf@_val 0085  
                    sprintf@flag 0081              _single_axis_measure 2E46  
                    sprintf@fval 008C                      sprintf@prec 008F  
                 i2_lcdWriteStrC 3A50       __end_of_read_accelerometer 3D8E  
                    ?_voltageToG 0041           __end_of_pointToVoltage 39A2  
                      __pintcode 0008                         ?___aldiv 000D  
                   i2writeByte@n 0002                         ?___awdiv 0008  
                       ?___ftadd 0026                         ?___awmod 0001  
                       ?___ftdiv 0032                         ?___ftneg 0001  
                    ?_writeDigit 0001                        _lcdSetPos 38E4  
                       ?___lldiv 0001                         ?___ftmul 0017  
                       ?___llmod 000F                         ?___ftsub 0032  
                      __npowers_ 0F29                         ?___fttol 002D  
           ?_single_axis_measure 004C                         ?_lcdInit 0001  
                    __tdiv_to_l_ 29C0                     ??__div_to_l_ 0007  
                    __smallconst 0F00                       ?___asftadd 0032  
                       ?_isdigit 0001                       ?___asftmul 0026  
                     ?___asftsub 0038             __CFG_RTCOSC$T1OSCREF 000000  
                      _readLight 3734                        _readTempF 2AF6  
                       ?_sprintf 0060                   __size_of_scale 0452  
                 __size_of_intro 0098           __end_ofi2_lcdWriteChar 3E8A  
         __end_ofi2_lcdWriteStrC 3AA6                  ___aldiv@divisor 0011  
                ___aldiv@counter 0016                   ___wmul@product 0015  
                    _lcdWriteCmd 39A2                         _LATDbits 000F8C  
                       _LATEbits 000F8D                        lcdClean@i 00B4  
                       i2u301_45 2D5E                         i2u302_45 2D92  
                       i2u316_40 3086                         i2u316_45 307E  
                       i2u341_45 1234                         i2u343_40 12B0  
                       i2u343_45 12A4                         i2u415_47 0046  
                       i2u416_47 3E84               __end_of__div_to_l_ 273C  
                       i2u417_47 3BB6                         i2u418_47 3BC2  
                       i2u292_40 25EE                         i2u292_45 25E4  
                       i2u294_40 262A                         i2u294_45 2620  
                       i2u366_45 19DA                         i2u388_40 3A74  
                       i2u388_47 3A6A                      writeDigit@n 00AA  
                       i2u389_40 3A9E                         i2u389_47 3A94  
                ?_pointToVoltage 0041                 __CFG_WDTPS$32768 000000  
                     ?_lcdSetPos 00B0            ??_single_axis_measure 0051  
         __size_of_showTempLight 00AE                       _ADCON0bits 000FC2  
                     _ADCON1bits 000FC1                      __stringdata 0F77  
              ___wmul@multiplier 0011                __CFG_CFGPLLEN$OFF 000000  
            __size_of_voltageToG 0046                       ?_readLight 001C  
                     ?_readTempF 0041                        _writeByte 3E2A  
              ___lmul@multiplier 0001                  ?i2_lcdWriteChar 0001  
            __size_of_writeDigit 0042                  ?i2_lcdWriteStrC 0004  
single_axis_measure@medium_value 0054                        read@value 0005  
                       __Hrparam 0000                         __Lrparam 0000  
               __size_of___aldiv 0108                 __size_of___awdiv 00B0  
               __size_of___ftadd 01B8                 __size_of___awmod 009C  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0026  
               __size_of___lldiv 0086                 __size_of___ftmul 00F8  
               __size_of___llmod 006A                 __size_of___ftsub 0036  
               __size_of___fttol 00F6                         ___awtoft 3AA6  
                       ___ftpack 3442                      _fround$1453 002C  
                    _fround$1454 0029                         ___lltoft 381E  
                       ___lwtoft 3D8E                 __size_of_lcdInit 0120  
                  readTempF@temp 0044                      ??___asftadd 0037  
                     sprintf@exp 008A                      ??___asftmul 002B  
                    ??___asftsub 003D                 __size_of_isdigit 002A  
                       _lcdClean 273C                         _lcdClear 3E8A  
                       __ptext10 3BC8                         __ptext20 3E76  
                       __ptext12 3394                         __ptext21 3B40  
                       __ptext13 2AF6                         __ptext30 3CBE  
                       __ptext22 3E92                         __ptext14 3AA6  
                       __ptext31 34EA                         __ptext23 3B84  
                       __ptext15 3734                         __ptext40 3C0A  
                       __ptext32 32E4                         __ptext24 3E60  
                       __ptext16 39FA                         __ptext41 3CF8  
                       __ptext33 29C0                         __ptext25 3D2E  
                       __ptext17 2D3E                         __ptext50 3D8E  
                       __ptext42 3C46                         __ptext34 25D0  
                       __ptext26 0FBA                         __ptext18 2880  
                       __ptext51 2F46                         __ptext43 3C82  
                       __ptext35 381E                         __ptext27 1D4E  
                       __ptext19 3A50                         __ptext52 3134  
                       __ptext44 2E46                         __ptext36 37B4  
                       __ptext28 3DBA                         __ptext53 3442  
                       __ptext45 3AFA                         __ptext37 36AE  
                       __ptext29 21A0                         __ptext54 361E  
                       __ptext46 2418                         __ptext38 303E  
                       __ptext47 3D60                         __ptext39 3DE4  
                       __ptext48 321A                         __ptext49 3944  
         read_accelerometer@axis 0047                       ?_writeByte 0001  
                       __powers_ 0F50                 __size_of_sprintf 0D94  
                  _showTempLight 3394                    __size_of_main 0020  
                  __size_of_read 00CA            __end_ofi2_lcdWriteCmd 3BC8  
                       lcdInit@i 0104                     lcdInit@i_760 010A  
                   lcdInit@i_758 0106                     lcdInit@i_759 0108  
   __end_of_showAccelerometerVal 29C0                       writeByte@n 00AB  
                  ??i2_lcdSetPos 0008                      ??_lcdSetPos 00B1  
                  ?i2_writeDigit 0001                         main@argc 010C  
                       main@argv 010E                       _INTCONbits 000FF2  
                    ??_readLight 001E                         isdigit@c 0003  
                    ??_readTempF 0044                         scale@scl 002C  
                       intlevel2 0000                        sprintf@ap 007C  
               __tdiv_to_l_@exp1 000F                   ?_showTempLight 0001  
                      sprintf@vd 0074                 __tdiv_to_l_@cntr 000E  
                      sprintf@sp 0060                 __tdiv_to_l_@quot 000A  
               ___lldiv@dividend 0001                     ??_voltageToG 0044  
                 ??i2_writeDigit 0001                     ??_writeDigit 00AA  
                   ?__tdiv_to_l_ 0001               _read_accelerometer 3D60  
                       sprintf@c 0091                         sprintf@f 0062  
            __end_ofi2_lcdSetPos 3B84                 ___lldiv@quotient 000A  
                   ___aldiv@sign 0017                    ??i2_writeByte 0002  
            ?_read_accelerometer 0047                      ??_writeByte 00AB  
             __end_of_voltageToG 3B40                    ?_lcdWriteChar 0001  
                  ?_lcdWriteStrC 00AD               __end_of_writeDigit 3C0A  
               ??_pointToVoltage 0044                     ?_lcdWriteCmd 0001  
