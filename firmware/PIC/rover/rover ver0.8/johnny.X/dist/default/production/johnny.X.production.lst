

Microchip Technology PIC18 LITE Macro Assembler V1.31 build 56723 
                                                                                               Mon Jan 05 00:55:42 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1
    54                           	psect	text44,global,reloc=2,class=CODE,delta=1
    55                           	psect	text45,global,reloc=2,class=CODE,delta=1
    56                           	psect	text46,global,reloc=2,class=CODE,delta=1
    57                           	psect	text47,global,reloc=2,class=CODE,delta=1
    58                           	psect	text48,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           	psect	mediumconst
    64  00FE58                     __pmediumconst:
    65                           	opt stack 0
    66  00FE58  00                 	db	0
    67  00FE59                     _dpowers:
    68                           	opt stack 0
    69  00FE59  0001               	dw	1
    70  00FE5B  0000               	dw	0
    71  00FE5D  000A               	dw	10
    72  00FE5F  0000               	dw	0
    73  00FE61  0064               	dw	100
    74  00FE63  0000               	dw	0
    75  00FE65  03E8               	dw	1000
    76  00FE67  0000               	dw	0
    77  00FE69  2710               	dw	10000
    78  00FE6B  0000               	dw	0
    79  00FE6D  86A0               	dw	34464
    80  00FE6F  0001               	dw	1
    81  00FE71  4240               	dw	16960
    82  00FE73  000F               	dw	15
    83  00FE75  9680               	dw	38528
    84  00FE77  0098               	dw	152
    85  00FE79  E100               	dw	57600
    86  00FE7B  05F5               	dw	1525
    87  00FE7D  CA00               	dw	51712
    88  00FE7F  3B9A               	dw	15258
    89  00FE81                     __end_of_dpowers:
    90                           	opt stack 0
    91  00FE81                     __npowers_:
    92                           	opt stack 0
    93  00FE81  00                 	db	0
    94  00FE82  80                 	db	128
    95  00FE83  3F                 	db	63
    96  00FE84  CD                 	db	205
    97  00FE85  CC                 	db	204
    98  00FE86  3D                 	db	61
    99  00FE87  D7                 	db	215
   100  00FE88  23                 	db	35
   101  00FE89  3C                 	db	60
   102  00FE8A  12                 	db	18
   103  00FE8B  83                 	db	131
   104  00FE8C  3A                 	db	58
   105  00FE8D  B7                 	db	183
   106  00FE8E  D1                 	db	209
   107  00FE8F  38                 	db	56
   108  00FE90  C6                 	db	198
   109  00FE91  27                 	db	39
   110  00FE92  37                 	db	55
   111  00FE93  38                 	db	56
   112  00FE94  86                 	db	134
   113  00FE95  35                 	db	53
   114  00FE96  C0                 	db	192
   115  00FE97  D6                 	db	214
   116  00FE98  33                 	db	51
   117  00FE99  CC                 	db	204
   118  00FE9A  2B                 	db	43
   119  00FE9B  32                 	db	50
   120  00FE9C  70                 	db	112
   121  00FE9D  89                 	db	137
   122  00FE9E  30                 	db	48
   123  00FE9F  E7                 	db	231
   124  00FEA0  DB                 	db	219
   125  00FEA1  2E                 	db	46
   126  00FEA2  E5                 	db	229
   127  00FEA3  3C                 	db	60
   128  00FEA4  1E                 	db	30
   129  00FEA5  42                 	db	66
   130  00FEA6  A2                 	db	162
   131  00FEA7  0D                 	db	13
   132  00FEA8                     __end_of__npowers_:
   133                           	opt stack 0
   134  00FEA8                     __powers_:
   135                           	opt stack 0
   136  00FEA8  00                 	db	0
   137  00FEA9  80                 	db	128
   138  00FEAA  3F                 	db	63
   139  00FEAB  00                 	db	0
   140  00FEAC  20                 	db	32
   141  00FEAD  41                 	db	65
   142  00FEAE  00                 	db	0
   143  00FEAF  C8                 	db	200
   144  00FEB0  42                 	db	66
   145  00FEB1  00                 	db	0
   146  00FEB2  7A                 	db	122
   147  00FEB3  44                 	db	68
   148  00FEB4  40                 	db	64
   149  00FEB5  1C                 	db	28
   150  00FEB6  46                 	db	70
   151  00FEB7  50                 	db	80
   152  00FEB8  C3                 	db	195
   153  00FEB9  47                 	db	71
   154  00FEBA  24                 	db	36
   155  00FEBB  74                 	db	116
   156  00FEBC  49                 	db	73
   157  00FEBD  97                 	db	151
   158  00FEBE  18                 	db	24
   159  00FEBF  4B                 	db	75
   160  00FEC0  BC                 	db	188
   161  00FEC1  BE                 	db	190
   162  00FEC2  4C                 	db	76
   163  00FEC3  6B                 	db	107
   164  00FEC4  6E                 	db	110
   165  00FEC5  4E                 	db	78
   166  00FEC6  03                 	db	3
   167  00FEC7  15                 	db	21
   168  00FEC8  50                 	db	80
   169  00FEC9  79                 	db	121
   170  00FECA  AD                 	db	173
   171  00FECB  60                 	db	96
   172  00FECC  F3                 	db	243
   173  00FECD  49                 	db	73
   174  00FECE  71                 	db	113
   175  00FECF                     __end_of__powers_:
   176                           	opt stack 0
   177  0000                     _ADCON0bits	set	4034
   178  0000                     _ADCON1bits	set	4033
   179  0000                     _ADRESH	set	4036
   180  0000                     _ADRESL	set	4035
   181  0000                     _ANCON0	set	3912
   182  0000                     _ANCON1	set	3913
   183  0000                     _CCP4CONbits	set	3858
   184  0000                     _CCP5CONbits	set	3855
   185  0000                     _CCPR4L	set	3859
   186  0000                     _CCPR5L	set	3856
   187  0000                     _CCPTMRS1bits	set	3921
   188  0000                     _EECON2	set	4007
   189  0000                     _INTCON2bits	set	4081
   190  0000                     _INTCON3bits	set	4080
   191  0000                     _INTCONbits	set	4082
   192  0000                     _LATBbits	set	3978
   193  0000                     _LATCbits	set	3979
   194  0000                     _LATDbits	set	3980
   195  0000                     _LATEbits	set	3981
   196  0000                     _PORTBbits	set	3969
   197  0000                     _PORTEbits	set	3972
   198  0000                     _PPSCONbits	set	3775
   199  0000                     _PR2	set	4043
   200  0000                     _PR4	set	3959
   201  0000                     _RPINR1	set	3809
   202  0000                     _T1CONbits	set	4045
   203  0000                     _T2CONbits	set	4042
   204  0000                     _T4CONbits	set	3958
   205  0000                     _TMR1H	set	4047
   206  0000                     _TMR1L	set	4046
   207  0000                     _TRISAbits	set	3986
   208  0000                     _TRISBbits	set	3987
   209  0000                     _TRISCbits	set	3988
   210  0000                     _TRISDbits	set	3989
   211  0000                     _TRISEbits	set	3990
   212  0000                     _GO_DONE	set	32273
   213  00FECF                     __stringdata:
   214                           	opt stack 0
   215  00FECF  54                 	db	84	;'T'
   216  00FED0  65                 	db	101	;'e'
   217  00FED1  73                 	db	115	;'s'
   218  00FED2  74                 	db	116	;'t'
   219  00FED3  20                 	db	32
   220  00FED4  41                 	db	65	;'A'
   221  00FED5  6E                 	db	110	;'n'
   222  00FED6  74                 	db	116	;'t'
   223  00FED7  69                 	db	105	;'i'
   224  00FED8  63                 	db	99	;'c'
   225  00FED9  6C                 	db	108	;'l'
   226  00FEDA  6F                 	db	111	;'o'
   227  00FEDB  63                 	db	99	;'c'
   228  00FEDC  6B                 	db	107	;'k'
   229  00FEDD  77                 	db	119	;'w'
   230  00FEDE  69                 	db	105	;'i'
   231  00FEDF  73                 	db	115	;'s'
   232  00FEE0  65                 	db	101	;'e'
   233  00FEE1  20                 	db	32
   234  00FEE2  00                 	db	0
   235  00FEE3  44                 	db	68	;'D'
   236  00FEE4  69                 	db	105	;'i'
   237  00FEE5  73                 	db	115	;'s'
   238  00FEE6  74                 	db	116	;'t'
   239  00FEE7  61                 	db	97	;'a'
   240  00FEE8  6E                 	db	110	;'n'
   241  00FEE9  63                 	db	99	;'c'
   242  00FEEA  65                 	db	101	;'e'
   243  00FEEB  3A                 	db	58	;':'
   244  00FEEC  20                 	db	32
   245  00FEED  5B                 	db	91	;'['
   246  00FEEE  63                 	db	99	;'c'
   247  00FEEF  6D                 	db	109	;'m'
   248  00FEF0  2F                 	db	47
   249  00FEF1  75                 	db	117	;'u'
   250  00FEF2  53                 	db	83	;'S'
   251  00FEF3  5D                 	db	93	;']'
   252  00FEF4  00                 	db	0
   253  00FEF5                     STR_12:
   254  00FEF5  20                 	db	32
   255  00FEF6  20                 	db	32
   256  00FEF7  20                 	db	32
   257  00FEF8  20                 	db	32
   258  00FEF9  20                 	db	32
   259  00FEFA  70                 	db	112	;'p'
   260  00FEFB  61                 	db	97	;'a'
   261  00FEFC  73                 	db	115	;'s'
   262  00FEFD  73                 	db	115	;'s'
   263  00FEFE  65                 	db	101	;'e'
   264  00FEFF  64                 	db	100	;'d'
   265  00FF00  20                 	db	32
   266  00FF01  20                 	db	32
   267  00FF02  20                 	db	32
   268  00FF03  20                 	db	32
   269  00FF04  20                 	db	32
   270  00FF05  00                 	db	0
   271  00FF06  20                 	db	32
   272  00FF07  20                 	db	32
   273  00FF08  20                 	db	32
   274  00FF09  20                 	db	32
   275  00FF0A  20                 	db	32
   276  00FF0B  74                 	db	116	;'t'
   277  00FF0C  65                 	db	101	;'e'
   278  00FF0D  73                 	db	115	;'s'
   279  00FF0E  74                 	db	116	;'t'
   280  00FF0F  69                 	db	105	;'i'
   281  00FF10  6E                 	db	110	;'n'
   282  00FF11  67                 	db	103	;'g'
   283  00FF12  20                 	db	32
   284  00FF13  20                 	db	32
   285  00FF14  20                 	db	32
   286  00FF15  20                 	db	32
   287  00FF16  00                 	db	0
   288  00FF17                     STR_5:
   289  00FF17  20                 	db	32
   290  00FF18  20                 	db	32
   291  00FF19  20                 	db	32
   292  00FF1A  20                 	db	32
   293  00FF1B  4D                 	db	77	;'M'
   294  00FF1C  61                 	db	97	;'a'
   295  00FF1D  69                 	db	105	;'i'
   296  00FF1E  6E                 	db	110	;'n'
   297  00FF1F  74                 	db	116	;'t'
   298  00FF20  61                 	db	97	;'a'
   299  00FF21  69                 	db	105	;'i'
   300  00FF22  6E                 	db	110	;'n'
   301  00FF23  20                 	db	32
   302  00FF24  20                 	db	32
   303  00FF25  20                 	db	32
   304  00FF26  20                 	db	32
   305  00FF27  00                 	db	0
   306  00FF28  20                 	db	32
   307  00FF29  20                 	db	32
   308  00FF2A  20                 	db	32
   309  00FF2B  4D                 	db	77	;'M'
   310  00FF2C  6F                 	db	111	;'o'
   311  00FF2D  74                 	db	116	;'t'
   312  00FF2E  6F                 	db	111	;'o'
   313  00FF2F  72                 	db	114	;'r'
   314  00FF30  20                 	db	32
   315  00FF31  54                 	db	84	;'T'
   316  00FF32  45                 	db	69	;'E'
   317  00FF33  53                 	db	83	;'S'
   318  00FF34  54                 	db	84	;'T'
   319  00FF35  20                 	db	32
   320  00FF36  20                 	db	32
   321  00FF37  20                 	db	32
   322  00FF38  00                 	db	0
   323  00FF39  20                 	db	32
   324  00FF3A  20                 	db	32
   325  00FF3B  20                 	db	32
   326  00FF3C  4D                 	db	77	;'M'
   327  00FF3D  6F                 	db	111	;'o'
   328  00FF3E  74                 	db	116	;'t'
   329  00FF3F  6F                 	db	111	;'o'
   330  00FF40  72                 	db	114	;'r'
   331  00FF41  20                 	db	32
   332  00FF42  6D                 	db	109	;'m'
   333  00FF43  6F                 	db	111	;'o'
   334  00FF44  76                 	db	118	;'v'
   335  00FF45  65                 	db	101	;'e'
   336  00FF46  20                 	db	32
   337  00FF47  20                 	db	32
   338  00FF48  20                 	db	32
   339  00FF49  00                 	db	0
   340  00FF4A                     STR_4:
   341  00FF4A  20                 	db	32
   342  00FF4B  20                 	db	32
   343  00FF4C  41                 	db	65	;'A'
   344  00FF4D  63                 	db	99	;'c'
   345  00FF4E  63                 	db	99	;'c'
   346  00FF4F  65                 	db	101	;'e'
   347  00FF50  6C                 	db	108	;'l'
   348  00FF51  65                 	db	101	;'e'
   349  00FF52  72                 	db	114	;'r'
   350  00FF53  61                 	db	97	;'a'
   351  00FF54  74                 	db	116	;'t'
   352  00FF55  69                 	db	105	;'i'
   353  00FF56  6E                 	db	110	;'n'
   354  00FF57  67                 	db	103	;'g'
   355  00FF58  20                 	db	32
   356  00FF59  20                 	db	32
   357  00FF5A  00                 	db	0
   358  00FF5B                     STR_6:
   359  00FF5B  20                 	db	32
   360  00FF5C  20                 	db	32
   361  00FF5D  44                 	db	68	;'D'
   362  00FF5E  65                 	db	101	;'e'
   363  00FF5F  63                 	db	99	;'c'
   364  00FF60  65                 	db	101	;'e'
   365  00FF61  6C                 	db	108	;'l'
   366  00FF62  65                 	db	101	;'e'
   367  00FF63  72                 	db	114	;'r'
   368  00FF64  61                 	db	97	;'a'
   369  00FF65  74                 	db	116	;'t'
   370  00FF66  69                 	db	105	;'i'
   371  00FF67  6E                 	db	110	;'n'
   372  00FF68  67                 	db	103	;'g'
   373  00FF69  20                 	db	32
   374  00FF6A  20                 	db	32
   375  00FF6B  00                 	db	0
   376  00FF6C                     STR_15:
   377  00FF6C  20                 	db	32
   378  00FF6D  46                 	db	70	;'F'
   379  00FF6E  6F                 	db	111	;'o'
   380  00FF6F  72                 	db	114	;'r'
   381  00FF70  77                 	db	119	;'w'
   382  00FF71  61                 	db	97	;'a'
   383  00FF72  72                 	db	114	;'r'
   384  00FF73  64                 	db	100	;'d'
   385  00FF74  20                 	db	32
   386  00FF75  73                 	db	115	;'s'
   387  00FF76  70                 	db	112	;'p'
   388  00FF77  65                 	db	101	;'e'
   389  00FF78  65                 	db	101	;'e'
   390  00FF79  64                 	db	100	;'d'
   391  00FF7A  3A                 	db	58	;':'
   392  00FF7B  20                 	db	32
   393  00FF7C  00                 	db	0
   394  00FF7D  74                 	db	116	;'t'
   395  00FF7E  75                 	db	117	;'u'
   396  00FF7F  72                 	db	114	;'r'
   397  00FF80  6E                 	db	110	;'n'
   398  00FF81  20                 	db	32
   399  00FF82  72                 	db	114	;'r'
   400  00FF83  69                 	db	105	;'i'
   401  00FF84  67                 	db	103	;'g'
   402  00FF85  68                 	db	104	;'h'
   403  00FF86  74                 	db	116	;'t'
   404  00FF87  20                 	db	32
   405  00FF88  73                 	db	115	;'s'
   406  00FF89  70                 	db	112	;'p'
   407  00FF8A  65                 	db	101	;'e'
   408  00FF8B  65                 	db	101	;'e'
   409  00FF8C  64                 	db	100	;'d'
   410  00FF8D  00                 	db	0
   411  00FF8E  4A                 	db	74	;'J'
   412  00FF8F  6F                 	db	111	;'o'
   413  00FF90  68                 	db	104	;'h'
   414  00FF91  6E                 	db	110	;'n'
   415  00FF92  6E                 	db	110	;'n'
   416  00FF93  79                 	db	121	;'y'
   417  00FF94  20                 	db	32
   418  00FF95  56                 	db	86	;'V'
   419  00FF96  30                 	db	48	;'0'
   420  00FF97  2E                 	db	46
   421  00FF98  30                 	db	48	;'0'
   422  00FF99  30                 	db	48	;'0'
   423  00FF9A  30                 	db	48	;'0'
   424  00FF9B  30                 	db	48	;'0'
   425  00FF9C  30                 	db	48	;'0'
   426  00FF9D  31                 	db	49	;'1'
   427  00FF9E  00                 	db	0
   428  00FF9F  54                 	db	84	;'T'
   429  00FFA0  65                 	db	101	;'e'
   430  00FFA1  73                 	db	115	;'s'
   431  00FFA2  74                 	db	116	;'t'
   432  00FFA3  20                 	db	32
   433  00FFA4  43                 	db	67	;'C'
   434  00FFA5  6C                 	db	108	;'l'
   435  00FFA6  6F                 	db	111	;'o'
   436  00FFA7  63                 	db	99	;'c'
   437  00FFA8  6B                 	db	107	;'k'
   438  00FFA9  77                 	db	119	;'w'
   439  00FFAA  69                 	db	105	;'i'
   440  00FFAB  73                 	db	115	;'s'
   441  00FFAC  65                 	db	101	;'e'
   442  00FFAD  20                 	db	32
   443  00FFAE  00                 	db	0
   444  00FFAF  74                 	db	116	;'t'
   445  00FFB0  75                 	db	117	;'u'
   446  00FFB1  72                 	db	114	;'r'
   447  00FFB2  6E                 	db	110	;'n'
   448  00FFB3  20                 	db	32
   449  00FFB4  6C                 	db	108	;'l'
   450  00FFB5  65                 	db	101	;'e'
   451  00FFB6  66                 	db	102	;'f'
   452  00FFB7  74                 	db	116	;'t'
   453  00FFB8  20                 	db	32
   454  00FFB9  73                 	db	115	;'s'
   455  00FFBA  70                 	db	112	;'p'
   456  00FFBB  65                 	db	101	;'e'
   457  00FFBC  65                 	db	101	;'e'
   458  00FFBD  64                 	db	100	;'d'
   459  00FFBE  00                 	db	0
   460  00FFBF                     STR_31:
   461  00FFBF  41                 	db	65	;'A'
   462  00FFC0  63                 	db	99	;'c'
   463  00FFC1  6C                 	db	108	;'l'
   464  00FFC2  6D                 	db	109	;'m'
   465  00FFC3  74                 	db	116	;'t'
   466  00FFC4  72                 	db	114	;'r'
   467  00FFC5  20                 	db	32
   468  00FFC6  76                 	db	118	;'v'
   469  00FFC7  61                 	db	97	;'a'
   470  00FFC8  6C                 	db	108	;'l'
   471  00FFC9  75                 	db	117	;'u'
   472  00FFCA  65                 	db	101	;'e'
   473  00FFCB  73                 	db	115	;'s'
   474  00FFCC  3A                 	db	58	;':'
   475  00FFCD  00                 	db	0
   476  00FFCE                     STR_29:
   477  00FFCE  74                 	db	116	;'t'
   478  00FFCF  65                 	db	101	;'e'
   479  00FFD0  6D                 	db	109	;'m'
   480  00FFD1  70                 	db	112	;'p'
   481  00FFD2  3A                 	db	58	;':'
   482  00FFD3  20                 	db	32
   483  00FFD4  25                 	db	37
   484  00FFD5  31                 	db	49	;'1'
   485  00FFD6  2E                 	db	46
   486  00FFD7  33                 	db	51	;'3'
   487  00FFD8  66                 	db	102	;'f'
   488  00FFD9  00                 	db	0
   489  00FFDA                     STR_30:
   490  00FFDA  6C                 	db	108	;'l'
   491  00FFDB  69                 	db	105	;'i'
   492  00FFDC  67                 	db	103	;'g'
   493  00FFDD  68                 	db	104	;'h'
   494  00FFDE  74                 	db	116	;'t'
   495  00FFDF  3A                 	db	58	;':'
   496  00FFE0  20                 	db	32
   497  00FFE1  25                 	db	37
   498  00FFE2  64                 	db	100	;'d'
   499  00FFE3  00                 	db	0
   500  00FFE4  53                 	db	83	;'S'
   501  00FFE5  69                 	db	105	;'i'
   502  00FFE6  6E                 	db	110	;'n'
   503  00FFE7  67                 	db	103	;'g'
   504  00FFE8  68                 	db	104	;'h'
   505  00FFE9  20                 	db	32
   506  00FFEA  42                 	db	66	;'B'
   507  00FFEB  65                 	db	101	;'e'
   508  00FFEC  00                 	db	0
   509  00FFED                     STR_32:
   510  00FFED  25                 	db	37
   511  00FFEE  31                 	db	49	;'1'
   512  00FFEF  2E                 	db	46
   513  00FFF0  32                 	db	50	;'2'
   514  00FFF1  66                 	db	102	;'f'
   515  00FFF2  00                 	db	0
   516  00FFF3  25                 	db	37
   517  00FFF4  33                 	db	51	;'3'
   518  00FFF5  2E                 	db	46
   519  00FFF6  33                 	db	51	;'3'
   520  00FFF7  66                 	db	102	;'f'
   521  00FFF8  00                 	db	0
   522  00FFF9                     STR_17:
   523  00FFF9  25                 	db	37
   524  00FFFA  30                 	db	48	;'0'
   525  00FFFB  35                 	db	53	;'5'
   526  00FFFC  64                 	db	100	;'d'
   527  00FFFD  00                 	db	0
   528  00FFFE                     __end_of__stringdata:
   529                           	opt stack 0
   530                           
   531                           ; #config settings
   532  00FFFE  00                 	db	0	; dummy byte at the end
   533  0000                     
   534                           	psect	nvCOMRAM
   535  00004C                     __pnvCOMRAM:
   536                           	opt stack 0
   537  00004C                     _degree_per_signal:
   538                           	opt stack 0
   539  00004C                     	ds	3
   540  00004F                     _encoder_signal_to_turn_reduction:
   541                           	opt stack 0
   542  00004F                     	ds	3
   543                           
   544                           	psect	cinit
   545  012FD6                     __pcinit:
   546                           	opt stack 0
   547  012FD6                     start_initialization:
   548                           	opt stack 0
   549  012FD6                     __initialization:
   550                           	opt stack 0
   551  012FD6                     end_of_initialization:
   552                           	opt stack 0
   553  012FD6                     __end_of__initialization:
   554                           	opt stack 0
   555  012FD6  0100               	movlb	0
   556  012FD8  EF03  F090         	goto	_main	;jump to C main() function
   557                           
   558                           	psect	cstackBANK0
   559  000060                     __pcstackBANK0:
   560                           	opt stack 0
   561  000060                     ___ftdiv@cntr:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x0
   565  000060                     	ds	1
   566  000061                     ___ftdiv@f3:
   567                           	opt stack 0
   568                           
   569                           ; 3 bytes @ 0x1
   570  000061                     	ds	3
   571  000064                     ___ftdiv@exp:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x4
   575  000064                     	ds	1
   576  000065                     ___ftdiv@sign:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x5
   580  000065                     	ds	1
   581  000066                     readTempF@i:
   582                           	opt stack 0
   583  000066                     pointToVoltage@fPoint:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x6
   587  000066                     	ds	2
   588  000068                     readTempF@temp:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x8
   592  000068                     	ds	1
   593  000069                     ?_read_accelerometer:
   594                           	opt stack 0
   595  000069                     read_accelerometer@axis:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x9
   599  000069                     	ds	3
   600  00006C                     read_accelerometer@axis_point:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0xC
   604  00006C                     	ds	2
   605  00006E                     ?_single_axis_measure:
   606                           	opt stack 0
   607  00006E                     single_axis_measure@axis:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0xE
   611  00006E                     	ds	2
   612  000070                     single_axis_measure@iteration:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x10
   616  000070                     	ds	3
   617  000073                     single_axis_measure@axis_read:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x13
   621  000073                     	ds	3
   622  000076                     single_axis_measure@medium_value:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x16
   626  000076                     	ds	3
   627  000079                     single_axis_measure@i:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x19
   631  000079                     	ds	2
   632  00007B                     single_axis_measure@axis_sum:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x1B
   636  00007B                     	ds	3
   637  00007E                     ?_sprintf:
   638                           	opt stack 0
   639  00007E                     sprintf@sp:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1E
   643  00007E                     	ds	2
   644  000080                     sprintf@f:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x20
   648  000080                     	ds	5
   649  000085                     ??_sprintf:
   650                           
   651                           ; 0 bytes @ 0x25
   652  000085                     	ds	6
   653  00008B                     _sprintf$2562:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x2B
   657  00008B                     	ds	3
   658  00008E                     _sprintf$1885:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x2E
   662  00008E                     	ds	4
   663  000092                     sprintf@vd:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0x32
   667  000092                     	ds	4
   668  000096                     sprintf@vd_1887:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x36
   672  000096                     	ds	4
   673  00009A                     sprintf@ap:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x3A
   677  00009A                     	ds	2
   678  00009C                     sprintf@integ:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x3C
   682  00009C                     	ds	3
   683  00009F                     sprintf@_val:
   684                           	opt stack 0
   685                           
   686                           ; 5 bytes @ 0x3F
   687  00009F                     	ds	5
   688  0000A4                     sprintf@exp:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x44
   692  0000A4                     	ds	2
   693  0000A6                     sprintf@flag:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x46
   697  0000A6                     	ds	2
   698  0000A8                     sprintf@width:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x48
   702  0000A8                     	ds	2
   703  0000AA                     sprintf@fval:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x4A
   707  0000AA                     	ds	3
   708  0000AD                     sprintf@prec:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x4D
   712  0000AD                     	ds	2
   713  0000AF                     sprintf@c:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x4F
   717  0000AF                     	ds	1
   718  0000B0                     ??_showTempLight:
   719  0000B0                     ??_showAccelerometerVal:
   720                           
   721                           ; 0 bytes @ 0x50
   722  0000B0                     	ds	1
   723  0000B1                     showTempLight@buffer:
   724                           	opt stack 0
   725  0000B1                     showAccelerometerVal@buffer:
   726                           	opt stack 0
   727                           
   728                           ; 10 bytes @ 0x51
   729  0000B1                     	ds	10
   730  0000BB                     
   731                           ; 2 bytes @ 0x5B
   732  0000BB                     	ds	2
   733  0000BD                     
   734                           ; 3 bytes @ 0x5D
   735  0000BD                     	ds	3
   736  0000C0                     ??_main:
   737                           
   738                           ; 0 bytes @ 0x60
   739  0000C0                     	ds	1
   740  0000C1                     main@i:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x61
   744  0000C1                     	ds	2
   745  0000C3                     main@i_233:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x63
   749  0000C3                     	ds	2
   750  0000C5                     main@j:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x65
   754  0000C5                     	ds	2
   755  0000C7                     main@j_232:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x67
   759  0000C7                     	ds	2
   760                           
   761                           	psect	cstackCOMRAM
   762  000001                     __pcstackCOMRAM:
   763                           	opt stack 0
   764  000001                     ??_ISR:
   765  000001                     
   766                           ; 0 bytes @ 0x0
   767  000001                     	ds	14
   768  00000F                     ??_isdigit:
   769  00000F                     ?_read:
   770                           	opt stack 0
   771  00000F                     ?___awmod:
   772                           	opt stack 0
   773  00000F                     ?___ftpack:
   774                           	opt stack 0
   775  00000F                     ?___ftneg:
   776                           	opt stack 0
   777  00000F                     ?__tdiv_to_l_:
   778                           	opt stack 0
   779  00000F                     ?__div_to_l_:
   780                           	opt stack 0
   781  00000F                     ?___lmul:
   782                           	opt stack 0
   783  00000F                     ?___lldiv:
   784                           	opt stack 0
   785  00000F                     writeDigit@n:
   786                           	opt stack 0
   787  00000F                     read@channel:
   788                           	opt stack 0
   789  00000F                     setServo@degree:
   790                           	opt stack 0
   791  00000F                     ___awmod@dividend:
   792                           	opt stack 0
   793  00000F                     __div_to_l_@f1:
   794                           	opt stack 0
   795  00000F                     ___ftpack@arg:
   796                           	opt stack 0
   797  00000F                     __tdiv_to_l_@f1:
   798                           	opt stack 0
   799  00000F                     ___ftneg@f1:
   800                           	opt stack 0
   801  00000F                     ___lldiv@dividend:
   802                           	opt stack 0
   803  00000F                     ___lmul@multiplier:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0xE
   807  00000F                     	ds	1
   808  000010                     writeByte@n:
   809                           	opt stack 0
   810  000010                     _isdigit$2160:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0xF
   814  000010                     	ds	1
   815  000011                     ??_setServo:
   816  000011                     ??_lcdWriteCmd:
   817  000011                     ??_read:
   818  000011                     lcdWriteChar@n:
   819                           	opt stack 0
   820  000011                     isdigit@c:
   821                           	opt stack 0
   822  000011                     ___awmod@divisor:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x10
   826  000011                     	ds	1
   827  000012                     lcdWriteCmd@n:
   828                           	opt stack 0
   829  000012                     ___ftpack@exp:
   830                           	opt stack 0
   831  000012                     lcdWriteStrC@s:
   832                           	opt stack 0
   833  000012                     setServo@i_1178:
   834                           	opt stack 0
   835  000012                     __div_to_l_@f2:
   836                           	opt stack 0
   837  000012                     __tdiv_to_l_@f2:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x11
   841  000012                     	ds	1
   842  000013                     ??___awmod:
   843  000013                     ___ftpack@sign:
   844                           	opt stack 0
   845  000013                     lcdWriteCmd@i:
   846                           	opt stack 0
   847  000013                     read@value:
   848                           	opt stack 0
   849  000013                     ___lldiv@divisor:
   850                           	opt stack 0
   851  000013                     ___lmul@multiplicand:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x12
   855  000013                     	ds	1
   856  000014                     ??___ftpack:
   857  000014                     ___awmod@counter:
   858                           	opt stack 0
   859  000014                     setServo@j:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x13
   863  000014                     	ds	1
   864  000015                     ??_lcdInit:
   865  000015                     ??__tdiv_to_l_:
   866  000015                     ??__div_to_l_:
   867  000015                     lcdSetPos@y:
   868                           	opt stack 0
   869  000015                     ___awmod@sign:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x14
   873  000015                     	ds	1
   874  000016                     ?___awdiv:
   875                           	opt stack 0
   876  000016                     lcdSetPos@p:
   877                           	opt stack 0
   878  000016                     lcdInit@i:
   879                           	opt stack 0
   880  000016                     setServo@i:
   881                           	opt stack 0
   882  000016                     ___awdiv@dividend:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x15
   886  000016                     	ds	1
   887  000017                     ??___lldiv:
   888  000017                     ?___awtoft:
   889                           	opt stack 0
   890  000017                     ?___lltoft:
   891                           	opt stack 0
   892  000017                     ?___lwtoft:
   893                           	opt stack 0
   894  000017                     lcdSetPos@x:
   895                           	opt stack 0
   896  000017                     ___awtoft@c:
   897                           	opt stack 0
   898  000017                     ___lwtoft@c:
   899                           	opt stack 0
   900  000017                     ___lltoft@c:
   901                           	opt stack 0
   902  000017                     ___lmul@product:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x16
   906  000017                     	ds	1
   907  000018                     lcdInit@i_487:
   908                           	opt stack 0
   909  000018                     ___awdiv@divisor:
   910                           	opt stack 0
   911  000018                     __tdiv_to_l_@quot:
   912                           	opt stack 0
   913  000018                     ___lldiv@quotient:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x17
   917  000018                     	ds	1
   918  000019                     __div_to_l_@quot:
   919                           	opt stack 0
   920                           
   921                           ; 4 bytes @ 0x18
   922  000019                     	ds	1
   923  00001A                     ??___awdiv:
   924  00001A                     ??___awtoft:
   925  00001A                     ??___lwtoft:
   926  00001A                     lcdInit@i_488:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x19
   930  00001A                     	ds	1
   931  00001B                     ??___lltoft:
   932  00001B                     ?___aldiv:
   933                           	opt stack 0
   934  00001B                     ___awdiv@counter:
   935                           	opt stack 0
   936  00001B                     ___awtoft@sign:
   937                           	opt stack 0
   938  00001B                     ___aldiv@dividend:
   939                           	opt stack 0
   940                           
   941                           ; 4 bytes @ 0x1A
   942  00001B                     	ds	1
   943  00001C                     ___awdiv@sign:
   944                           	opt stack 0
   945  00001C                     __tdiv_to_l_@cntr:
   946                           	opt stack 0
   947  00001C                     ___lldiv@counter:
   948                           	opt stack 0
   949  00001C                     lcdInit@i_489:
   950                           	opt stack 0
   951  00001C                     ___ftge@ff1:
   952                           	opt stack 0
   953                           
   954                           ; 3 bytes @ 0x1B
   955  00001C                     	ds	1
   956  00001D                     ?___llmod:
   957                           	opt stack 0
   958  00001D                     __div_to_l_@cntr:
   959                           	opt stack 0
   960  00001D                     __tdiv_to_l_@exp1:
   961                           	opt stack 0
   962  00001D                     ___awdiv@quotient:
   963                           	opt stack 0
   964  00001D                     ___llmod@dividend:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x1C
   968  00001D                     	ds	1
   969  00001E                     __div_to_l_@exp1:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x1D
   973  00001E                     	ds	1
   974  00001F                     ?___wmul:
   975                           	opt stack 0
   976  00001F                     ___lltoft@exp:
   977                           	opt stack 0
   978  00001F                     ___wmul@multiplier:
   979                           	opt stack 0
   980  00001F                     ___ftge@ff2:
   981                           	opt stack 0
   982  00001F                     ___aldiv@divisor:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x1E
   986  00001F                     	ds	2
   987  000021                     ___wmul@multiplicand:
   988                           	opt stack 0
   989  000021                     ___llmod@divisor:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x20
   993  000021                     	ds	1
   994  000022                     ??___ftge:
   995                           
   996                           ; 0 bytes @ 0x21
   997  000022                     	ds	1
   998  000023                     ??___aldiv:
   999  000023                     ___wmul@product:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x22
  1003  000023                     	ds	1
  1004  000024                     ___aldiv@counter:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x23
  1008  000024                     	ds	1
  1009  000025                     ??___llmod:
  1010  000025                     ?___ftmul:
  1011                           	opt stack 0
  1012  000025                     ___aldiv@sign:
  1013                           	opt stack 0
  1014  000025                     ___ftmul@f1:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x24
  1018  000025                     	ds	1
  1019  000026                     ___llmod@counter:
  1020                           	opt stack 0
  1021  000026                     ___aldiv@quotient:
  1022                           	opt stack 0
  1023                           
  1024                           ; 4 bytes @ 0x25
  1025  000026                     	ds	2
  1026  000028                     ___ftmul@f2:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x27
  1030  000028                     	ds	2
  1031  00002A                     ?_readLight:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x29
  1035  00002A                     	ds	1
  1036  00002B                     ??___ftmul:
  1037                           
  1038                           ; 0 bytes @ 0x2A
  1039  00002B                     	ds	1
  1040  00002C                     readLight@j:
  1041                           	opt stack 0
  1042                           
  1043                           ; 4 bytes @ 0x2B
  1044  00002C                     	ds	2
  1045  00002E                     ___ftmul@exp:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x2D
  1049  00002E                     	ds	1
  1050  00002F                     ___ftmul@f3_as_product:
  1051                           	opt stack 0
  1052                           
  1053                           ; 3 bytes @ 0x2E
  1054  00002F                     	ds	3
  1055  000032                     ___ftmul@cntr:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x31
  1059  000032                     	ds	1
  1060  000033                     ___ftmul@sign:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x32
  1064  000033                     	ds	1
  1065  000034                     ?___ftadd:
  1066                           	opt stack 0
  1067  000034                     ?_fround:
  1068                           	opt stack 0
  1069  000034                     ?_scale:
  1070                           	opt stack 0
  1071  000034                     ___asftmul@f1p:
  1072                           	opt stack 0
  1073  000034                     ___ftadd@f1:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x33
  1077  000034                     	ds	2
  1078  000036                     ___asftmul@f2:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x35
  1082  000036                     	ds	1
  1083  000037                     ___ftadd@f2:
  1084                           	opt stack 0
  1085  000037                     _fround$2560:
  1086                           	opt stack 0
  1087  000037                     _scale$2561:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x36
  1091  000037                     	ds	2
  1092  000039                     
  1093                           ; 0 bytes @ 0x38
  1094  000039                     	ds	1
  1095  00003A                     ??___ftadd:
  1096  00003A                     scale@scl:
  1097                           	opt stack 0
  1098  00003A                     _fround$2559:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x39
  1102  00003A                     	ds	1
  1103  00003B                     ?___fttol:
  1104                           	opt stack 0
  1105  00003B                     ___fttol@f1:
  1106                           	opt stack 0
  1107                           
  1108                           ; 3 bytes @ 0x3A
  1109  00003B                     	ds	2
  1110  00003D                     fround@prec:
  1111                           	opt stack 0
  1112  00003D                     ___ftadd@sign:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x3C
  1116  00003D                     	ds	1
  1117  00003E                     ___ftadd@exp2:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x3D
  1121  00003E                     	ds	1
  1122  00003F                     ??___fttol:
  1123  00003F                     ___ftadd@exp1:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x3E
  1127  00003F                     	ds	1
  1128  000040                     ?___ftdiv:
  1129                           	opt stack 0
  1130  000040                     ?___ftsub:
  1131                           	opt stack 0
  1132  000040                     ___asftadd@f1p:
  1133                           	opt stack 0
  1134  000040                     ___ftdiv@f1:
  1135                           	opt stack 0
  1136  000040                     ___ftsub@f1:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x3F
  1140  000040                     	ds	2
  1141  000042                     ___asftadd@f2:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x41
  1145  000042                     	ds	1
  1146  000043                     ___ftdiv@f2:
  1147                           	opt stack 0
  1148  000043                     ___ftsub@f2:
  1149                           	opt stack 0
  1150                           
  1151                           ; 3 bytes @ 0x42
  1152  000043                     	ds	1
  1153  000044                     ___fttol@sign1:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x43
  1157  000044                     	ds	1
  1158  000045                     ___fttol@lval:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x44
  1162  000045                     	ds	1
  1163  000046                     ??___ftdiv:
  1164  000046                     ___asftsub@f1p:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x45
  1168  000046                     	ds	2
  1169  000048                     ___asftsub@f2:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x47
  1173  000048                     	ds	1
  1174  000049                     ?_readTempF:
  1175                           	opt stack 0
  1176  000049                     ?_voltageToG:
  1177                           	opt stack 0
  1178  000049                     ?_pointToVoltage:
  1179                           	opt stack 0
  1180  000049                     ___fttol@exp1:
  1181                           	opt stack 0
  1182  000049                     pointToVoltage@point:
  1183                           	opt stack 0
  1184  000049                     voltageToG@voltage:
  1185                           	opt stack 0
  1186                           
  1187                           ; 3 bytes @ 0x48
  1188  000049                     	ds	2
  1189  00004B                     
  1190                           ; 0 bytes @ 0x4A
  1191  00004B                     	ds	1
  1192  00004C                     
  1193                           ; 0 bytes @ 0x4B
  1194 ;;
  1195 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1196 ;;
  1197 ;; *************** function _main *****************
  1198 ;; Defined at:
  1199 ;;		line 25 in file "main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  argc            2   91[BANK0 ] int 
  1202 ;;  argv            3   93[BANK0 ] PTR PTR unsigned char 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  i               2   99[BANK0 ] int 
  1205 ;;  i               2   97[BANK0 ] int 
  1206 ;;  j               2  103[BANK0 ] int 
  1207 ;;  j               2  101[BANK0 ] int 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   91[BANK0 ] int 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1217 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1218 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1220 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1221 ;;Total ram usage:       14 bytes
  1222 ;; Hardware stack levels required when called:    7
  1223 ;; This function calls:
  1224 ;;		_MOTOR_init
  1225 ;;		_configSense
  1226 ;;		_config_init
  1227 ;;		_lcdInit
  1228 ;;		_setServo
  1229 ;;		_showAccelerometerVal
  1230 ;;		_showTempLight
  1231 ;; This function is called by:
  1232 ;;		Startup code after reset
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text0
  1237  012006                     __ptext0:
  1238                           	opt stack 0
  1239  012006                     _main:
  1240                           	opt stack 24
  1241                           
  1242                           ;main.c: 27: config_init();
  1243                           
  1244                           ;incstack = 0
  1245  012006  EC45  F097         	call	_config_init	;wreg free
  1246                           
  1247                           ;main.c: 28: MOTOR_init();
  1248  01200A  ECD4  F092         	call	_MOTOR_init	;wreg free
  1249                           
  1250                           ;main.c: 29: lcdInit();
  1251  01200E  EC08  F092         	call	_lcdInit	;wreg free
  1252                           
  1253                           ;main.c: 30: configSense();
  1254  012012  ECEE  F097         	call	_configSense	;wreg free
  1255  012016                     l8401:
  1256                           
  1257                           ;main.c: 40: for( int j = 0; j < 180; j+=10)
  1258  012016  0E00               	movlw	0
  1259  012018  0100               	movlb	0	; () banked
  1260  01201A  0100               	movlb	0	; () banked
  1261  01201C  6FC6               	movwf	(main@j+1)& (0+255),b
  1262  01201E  0E00               	movlw	0
  1263  012020  0100               	movlb	0	; () banked
  1264  012022  6FC5               	movwf	main@j& (0+255),b
  1265  012024                     
  1266                           ; BSR set to: 0
  1267  012024  0100               	movlb	0	; () banked
  1268  012026  0100               	movlb	0	; () banked
  1269  012028  51C6               	movf	(main@j+1)& (0+255),w,b
  1270  01202A  0A80               	xorlw	128
  1271  01202C  0F80               	addlw	-128
  1272  01202E  0EB4               	movlw	180
  1273  012030  B4D8               	btfsc	status,2,c
  1274  012032  5DC5               	subwf	main@j& (0+255),w,b
  1275  012034  B0D8               	btfsc	status,0,c
  1276  012036  D02F               	goto	l8423
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;main.c: 41: {
  1280                           ;main.c: 42: setServo(j);
  1281                           
  1282                           ; BSR set to: 0
  1283                           
  1284                           ; BSR set to: 0
  1285  012038  C0C5  F00F         	movff	main@j,setServo@degree
  1286  01203C  C0C6  F010         	movff	main@j+1,setServo@degree+1
  1287  012040  ECF3  F094         	call	_setServo	;wreg free
  1288                           
  1289                           ;main.c: 43: showTempLight();
  1290  012044  EC79  F092         	call	_showTempLight	;wreg free
  1291                           
  1292                           ;main.c: 44: for(int i = 0; i < 20; i++) _delay((unsigned long)((10)*(12000000/4000.0)));
  1293  012048  0E00               	movlw	0
  1294  01204A  0100               	movlb	0	; () banked
  1295  01204C  0100               	movlb	0	; () banked
  1296  01204E  6FC2               	movwf	(main@i+1)& (0+255),b
  1297  012050  0E00               	movlw	0
  1298  012052  0100               	movlb	0	; () banked
  1299  012054  6FC1               	movwf	main@i& (0+255),b
  1300  012056                     
  1301                           ; BSR set to: 0
  1302  012056  0100               	movlb	0	; () banked
  1303  012058  0100               	movlb	0	; () banked
  1304  01205A  51C2               	movf	(main@i+1)& (0+255),w,b
  1305  01205C  0A80               	xorlw	128
  1306  01205E  0F80               	addlw	-128
  1307  012060  0E14               	movlw	20
  1308  012062  B4D8               	btfsc	status,2,c
  1309  012064  5DC1               	subwf	main@i& (0+255),w,b
  1310  012066  B0D8               	btfsc	status,0,c
  1311  012068  D00E               	goto	l8421
  1312                           
  1313                           ; BSR set to: 0
  1314                           
  1315                           ; BSR set to: 0
  1316                           
  1317                           ; BSR set to: 0
  1318  01206A  0E27               	movlw	39
  1319  01206C  0100               	movlb	0	; () banked
  1320  01206E  6FC0               	movwf	??_main& (0+255),b
  1321  012070  0EF5               	movlw	245
  1322  012072                     u7237:
  1323  012072  2EE8               	decfsz	wreg,f,c
  1324  012074  D7FE               	goto	u7237
  1325  012076  2FC0               	decfsz	??_main& (0+255),f,b
  1326  012078  D7FC               	goto	u7237
  1327  01207A  F000               	nop	
  1328  01207C  0100               	movlb	0	; () banked
  1329  01207E  0100               	movlb	0	; () banked
  1330  012080  4BC1               	infsnz	main@i& (0+255),f,b
  1331  012082  2BC2               	incf	(main@i+1)& (0+255),f,b
  1332  012084  D7E8               	goto	L1
  1333  012086                     l8421:
  1334                           
  1335                           ; BSR set to: 0
  1336  012086  0E0A               	movlw	10
  1337  012088  0100               	movlb	0	; () banked
  1338  01208A  0100               	movlb	0	; () banked
  1339  01208C  27C5               	addwf	main@j& (0+255),f,b
  1340  01208E  0E00               	movlw	0
  1341  012090  0100               	movlb	0	; () banked
  1342  012092  23C6               	addwfc	(main@j+1)& (0+255),f,b
  1343  012094  D7C7               	goto	L2
  1344  012096                     l8423:
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 45: }
  1348                           ;main.c: 46: for( int j = 180; j > 0; j-=10)
  1349  012096  0E00               	movlw	0
  1350  012098  0100               	movlb	0	; () banked
  1351  01209A  0100               	movlb	0	; () banked
  1352  01209C  6FC8               	movwf	(main@j_232+1)& (0+255),b
  1353  01209E  0EB4               	movlw	180
  1354  0120A0  0100               	movlb	0	; () banked
  1355  0120A2  6FC7               	movwf	main@j_232& (0+255),b
  1356  0120A4                     
  1357                           ; BSR set to: 0
  1358  0120A4  0100               	movlb	0	; () banked
  1359  0120A6  0100               	movlb	0	; () banked
  1360  0120A8  51C8               	movf	(main@j_232+1)& (0+255),w,b
  1361  0120AA  0A80               	xorlw	128
  1362  0120AC  6EF3               	movwf	prodl,c
  1363  0120AE  0E80               	movlw	128
  1364  0120B0  5CF3               	subwf	prodl,w,c
  1365  0120B2  0E01               	movlw	1
  1366  0120B4  B4D8               	btfsc	status,2,c
  1367  0120B6  5DC7               	subwf	main@j_232& (0+255),w,b
  1368  0120B8  A0D8               	btfss	status,0,c
  1369  0120BA  D7AD               	goto	l8401
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 47: {
  1373                           ;main.c: 48: setServo(j);
  1374                           
  1375                           ; BSR set to: 0
  1376                           
  1377                           ; BSR set to: 0
  1378  0120BC  C0C7  F00F         	movff	main@j_232,setServo@degree
  1379  0120C0  C0C8  F010         	movff	main@j_232+1,setServo@degree+1
  1380  0120C4  ECF3  F094         	call	_setServo	;wreg free
  1381                           
  1382                           ;main.c: 49: showAccelerometerVal();
  1383  0120C8  EC96  F08B         	call	_showAccelerometerVal	;wreg free
  1384                           
  1385                           ;main.c: 50: for(int i = 0; i < 20; i++) _delay((unsigned long)((10)*(12000000/4000.0)));
  1386  0120CC  0E00               	movlw	0
  1387  0120CE  0100               	movlb	0	; () banked
  1388  0120D0  0100               	movlb	0	; () banked
  1389  0120D2  6FC4               	movwf	(main@i_233+1)& (0+255),b
  1390  0120D4  0E00               	movlw	0
  1391  0120D6  0100               	movlb	0	; () banked
  1392  0120D8  6FC3               	movwf	main@i_233& (0+255),b
  1393  0120DA                     
  1394                           ; BSR set to: 0
  1395  0120DA  0100               	movlb	0	; () banked
  1396  0120DC  0100               	movlb	0	; () banked
  1397  0120DE  51C4               	movf	(main@i_233+1)& (0+255),w,b
  1398  0120E0  0A80               	xorlw	128
  1399  0120E2  0F80               	addlw	-128
  1400  0120E4  0E14               	movlw	20
  1401  0120E6  B4D8               	btfsc	status,2,c
  1402  0120E8  5DC3               	subwf	main@i_233& (0+255),w,b
  1403  0120EA  B0D8               	btfsc	status,0,c
  1404  0120EC  D00E               	goto	l8443
  1405                           
  1406                           ; BSR set to: 0
  1407                           
  1408                           ; BSR set to: 0
  1409                           
  1410                           ; BSR set to: 0
  1411  0120EE  0E27               	movlw	39
  1412  0120F0  0100               	movlb	0	; () banked
  1413  0120F2  6FC0               	movwf	??_main& (0+255),b
  1414  0120F4  0EF5               	movlw	245
  1415  0120F6                     u7247:
  1416  0120F6  2EE8               	decfsz	wreg,f,c
  1417  0120F8  D7FE               	goto	u7247
  1418  0120FA  2FC0               	decfsz	??_main& (0+255),f,b
  1419  0120FC  D7FC               	goto	u7247
  1420  0120FE  F000               	nop	
  1421  012100  0100               	movlb	0	; () banked
  1422  012102  0100               	movlb	0	; () banked
  1423  012104  4BC3               	infsnz	main@i_233& (0+255),f,b
  1424  012106  2BC4               	incf	(main@i_233+1)& (0+255),f,b
  1425  012108  D7E8               	goto	L3
  1426  01210A                     l8443:
  1427                           
  1428                           ; BSR set to: 0
  1429  01210A  0100               	movlb	0	; () banked
  1430  01210C  0EF6               	movlw	246
  1431  01210E  0100               	movlb	0	; () banked
  1432  012110  27C7               	addwf	main@j_232& (0+255),f,b
  1433  012112  0EFF               	movlw	255
  1434  012114  0100               	movlb	0	; () banked
  1435  012116  23C8               	addwfc	(main@j_232+1)& (0+255),f,b
  1436  012118  D7C5               	goto	L4
  1437  01211A                     __end_of_main:
  1438                           	opt stack 0
  1439                           prodl	equ	0xFF3
  1440                           wreg	equ	0xFE8
  1441                           status	equ	0xFD8
  1442                           
  1443 ;; *************** function _showTempLight *****************
  1444 ;; Defined at:
  1445 ;;		line 23 in file "userInterface.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  buffer         10   81[BANK0 ] unsigned char [10]
  1450 ;; Return value:  Size  Location     Type
  1451 ;;		None               void
  1452 ;; Registers used:
  1453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1460 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1462 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1463 ;;Total ram usage:       11 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:    6
  1466 ;; This function calls:
  1467 ;;		_lcdClear
  1468 ;;		_lcdSetPos
  1469 ;;		_lcdWriteStrC
  1470 ;;		_readLight
  1471 ;;		_readTempF
  1472 ;;		_sprintf
  1473 ;; This function is called by:
  1474 ;;		_main
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text1
  1479  0124F2                     __ptext1:
  1480                           	opt stack 0
  1481  0124F2                     _showTempLight:
  1482                           	opt stack 24
  1483                           
  1484                           ;userInterface.c: 24: char buffer [10];
  1485                           ;userInterface.c: 25: lcdClear();
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;incstack = 0
  1489  0124F2  ECE7  F097         	call	_lcdClear	;wreg free
  1490                           
  1491                           ;userInterface.c: 26: lcdSetPos(0, 0);
  1492  0124F6  0100               	movlb	0	; () banked
  1493  0124F8  6FB0               	movwf	??_showTempLight& (0+255),b
  1494  0124FA  0E00               	movlw	0
  1495  0124FC  6E15               	movwf	lcdSetPos@y,c
  1496  0124FE  0100               	movlb	0	; () banked
  1497  012500  51B0               	movf	??_showTempLight& (0+255),w,b
  1498  012502  0E00               	movlw	0
  1499  012504  EC6C  F096         	call	_lcdSetPos
  1500                           
  1501                           ;userInterface.c: 27: sprintf(buffer, "temp: %1.3f", readTempF());
  1502  012508  0100               	movlb	0	; () banked
  1503  01250A  0E00               	movlw	high showTempLight@buffer
  1504  01250C  0100               	movlb	0	; () banked
  1505  01250E  0100               	movlb	0	; () banked
  1506  012510  6F7F               	movwf	(sprintf@sp+1)& (0+255),b
  1507  012512  0100               	movlb	0	; () banked
  1508  012514  0EB1               	movlw	low showTempLight@buffer
  1509  012516  0100               	movlb	0	; () banked
  1510  012518  0100               	movlb	0	; () banked
  1511  01251A  6F7E               	movwf	sprintf@sp& (0+255),b
  1512  01251C  0EFF               	movlw	high STR_29
  1513  01251E  0100               	movlb	0	; () banked
  1514  012520  0100               	movlb	0	; () banked
  1515  012522  6F81               	movwf	(sprintf@f+1)& (0+255),b
  1516  012524  0ECE               	movlw	low STR_29
  1517  012526  0100               	movlb	0	; () banked
  1518  012528  0100               	movlb	0	; () banked
  1519  01252A  6F80               	movwf	sprintf@f& (0+255),b
  1520  01252C  EC09  F08D         	call	_readTempF	;wreg free
  1521  012530  C049  F082         	movff	?_readTempF,?_sprintf+4
  1522  012534  C04A  F083         	movff	?_readTempF+1,?_sprintf+5
  1523  012538  C04B  F084         	movff	?_readTempF+2,?_sprintf+6
  1524  01253C  EC00  F080         	call	_sprintf	;wreg free
  1525                           
  1526                           ;userInterface.c: 28: lcdWriteStrC(buffer);
  1527  012540  0100               	movlb	0	; () banked
  1528  012542  0E00               	movlw	high showTempLight@buffer
  1529  012544  6E13               	movwf	lcdWriteStrC@s+1,c
  1530  012546  0100               	movlb	0	; () banked
  1531  012548  0EB1               	movlw	low showTempLight@buffer
  1532  01254A  6E12               	movwf	lcdWriteStrC@s,c
  1533  01254C  ECF4  F095         	call	_lcdWriteStrC	;wreg free
  1534                           
  1535                           ;userInterface.c: 29: lcdSetPos(0, 1);
  1536  012550  0100               	movlb	0	; () banked
  1537  012552  6FB0               	movwf	??_showTempLight& (0+255),b
  1538  012554  0E01               	movlw	1
  1539  012556  6E15               	movwf	lcdSetPos@y,c
  1540  012558  0100               	movlb	0	; () banked
  1541  01255A  51B0               	movf	??_showTempLight& (0+255),w,b
  1542  01255C  0E00               	movlw	0
  1543  01255E  EC6C  F096         	call	_lcdSetPos
  1544                           
  1545                           ;userInterface.c: 30: sprintf(buffer, "light: %d", readLight());
  1546  012562  0100               	movlb	0	; () banked
  1547  012564  0E00               	movlw	high showTempLight@buffer
  1548  012566  0100               	movlb	0	; () banked
  1549  012568  0100               	movlb	0	; () banked
  1550  01256A  6F7F               	movwf	(sprintf@sp+1)& (0+255),b
  1551  01256C  0100               	movlb	0	; () banked
  1552  01256E  0EB1               	movlw	low showTempLight@buffer
  1553  012570  0100               	movlb	0	; () banked
  1554  012572  0100               	movlb	0	; () banked
  1555  012574  6F7E               	movwf	sprintf@sp& (0+255),b
  1556  012576  0EFF               	movlw	high STR_30
  1557  012578  0100               	movlb	0	; () banked
  1558  01257A  0100               	movlb	0	; () banked
  1559  01257C  6F81               	movwf	(sprintf@f+1)& (0+255),b
  1560  01257E  0EDA               	movlw	low STR_30
  1561  012580  0100               	movlb	0	; () banked
  1562  012582  0100               	movlb	0	; () banked
  1563  012584  6F80               	movwf	sprintf@f& (0+255),b
  1564  012586  ECB3  F094         	call	_readLight	;wreg free
  1565  01258A  C02A  F082         	movff	?_readLight,?_sprintf+4
  1566  01258E  C02B  F083         	movff	?_readLight+1,?_sprintf+5
  1567  012592  EC00  F080         	call	_sprintf	;wreg free
  1568                           
  1569                           ;userInterface.c: 31: lcdWriteStrC(buffer);
  1570  012596  0100               	movlb	0	; () banked
  1571  012598  0E00               	movlw	high showTempLight@buffer
  1572  01259A  6E13               	movwf	lcdWriteStrC@s+1,c
  1573  01259C  0100               	movlb	0	; () banked
  1574  01259E  0EB1               	movlw	low showTempLight@buffer
  1575  0125A0  6E12               	movwf	lcdWriteStrC@s,c
  1576  0125A2  ECF4  F095         	call	_lcdWriteStrC	;wreg free
  1577  0125A6  0012               	return	
  1578  0125A8                     __end_of_showTempLight:
  1579                           	opt stack 0
  1580                           prodl	equ	0xFF3
  1581                           wreg	equ	0xFE8
  1582                           status	equ	0xFD8
  1583                           
  1584 ;; *************** function _readTempF *****************
  1585 ;; Defined at:
  1586 ;;		line 216 in file "functions.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  i               2    6[BANK0 ] int 
  1591 ;;  temp            3    8[BANK0 ] float 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  3   72[COMRAM] float 
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0, prodl, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1601 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1602 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1604 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1605 ;;Total ram usage:        8 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    3
  1608 ;; This function calls:
  1609 ;;		___awtoft
  1610 ;;		___ftadd
  1611 ;;		___ftdiv
  1612 ;;		___ftmul
  1613 ;;		_read
  1614 ;; This function is called by:
  1615 ;;		_showTempLight
  1616 ;;		_readDistance
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text2
  1621  011A12                     __ptext2:
  1622                           	opt stack 0
  1623  011A12                     _readTempF:
  1624                           	opt stack 26
  1625                           
  1626                           ;functions.c: 217: float temp = 0;
  1627                           
  1628                           ;incstack = 0
  1629  011A12  0E00               	movlw	0
  1630  011A14  0100               	movlb	0	; () banked
  1631  011A16  0100               	movlb	0	; () banked
  1632  011A18  6F68               	movwf	readTempF@temp& (0+255),b
  1633  011A1A  0E00               	movlw	0
  1634  011A1C  0100               	movlb	0	; () banked
  1635  011A1E  0100               	movlb	0	; () banked
  1636  011A20  6F69               	movwf	(readTempF@temp+1)& (0+255),b
  1637  011A22  0E00               	movlw	0
  1638  011A24  0100               	movlb	0	; () banked
  1639  011A26  0100               	movlb	0	; () banked
  1640  011A28  6F6A               	movwf	(readTempF@temp+2)& (0+255),b
  1641                           
  1642                           ;functions.c: 218: for (int i = 0; i < 5; i++)
  1643  011A2A  0E00               	movlw	0
  1644  011A2C  0100               	movlb	0	; () banked
  1645  011A2E  0100               	movlb	0	; () banked
  1646  011A30  6F67               	movwf	(readTempF@i+1)& (0+255),b
  1647  011A32  0E00               	movlw	0
  1648  011A34  0100               	movlb	0	; () banked
  1649  011A36  6F66               	movwf	readTempF@i& (0+255),b
  1650  011A38                     
  1651                           ; BSR set to: 0
  1652  011A38  0100               	movlb	0	; () banked
  1653  011A3A  0100               	movlb	0	; () banked
  1654  011A3C  5167               	movf	(readTempF@i+1)& (0+255),w,b
  1655  011A3E  0A80               	xorlw	128
  1656  011A40  0F80               	addlw	-128
  1657  011A42  0E05               	movlw	5
  1658  011A44  B4D8               	btfsc	status,2,c
  1659  011A46  5D66               	subwf	readTempF@i& (0+255),w,b
  1660  011A48  B0D8               	btfsc	status,0,c
  1661  011A4A  D025               	goto	l7847
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;functions.c: 219: temp = (float) read(0) + temp;
  1665                           
  1666                           ; BSR set to: 0
  1667                           
  1668                           ; BSR set to: 0
  1669  011A4C  0E00               	movlw	0
  1670  011A4E  6E10               	movwf	read@channel+1,c
  1671  011A50  0E00               	movlw	0
  1672  011A52  6E0F               	movwf	read@channel,c
  1673  011A54  ECAA  F08D         	call	_read	;wreg free
  1674  011A58  C00F  F017         	movff	?_read,___awtoft@c
  1675  011A5C  C010  F018         	movff	?_read+1,___awtoft@c+1
  1676  011A60  EC1F  F096         	call	___awtoft	;wreg free
  1677  011A64  C017  F034         	movff	?___awtoft,___ftadd@f1
  1678  011A68  C018  F035         	movff	?___awtoft+1,___ftadd@f1+1
  1679  011A6C  C019  F036         	movff	?___awtoft+2,___ftadd@f1+2
  1680  011A70  C068  F037         	movff	readTempF@temp,___ftadd@f2
  1681  011A74  C069  F038         	movff	readTempF@temp+1,___ftadd@f2+1
  1682  011A78  C06A  F039         	movff	readTempF@temp+2,___ftadd@f2+2
  1683  011A7C  ECBA  F08A         	call	___ftadd	;wreg free
  1684  011A80  C034  F068         	movff	?___ftadd,readTempF@temp
  1685  011A84  C035  F069         	movff	?___ftadd+1,readTempF@temp+1
  1686  011A88  C036  F06A         	movff	?___ftadd+2,readTempF@temp+2
  1687  011A8C  0100               	movlb	0	; () banked
  1688  011A8E  0100               	movlb	0	; () banked
  1689  011A90  4B66               	infsnz	readTempF@i& (0+255),f,b
  1690  011A92  2B67               	incf	(readTempF@i+1)& (0+255),f,b
  1691  011A94  D7D1               	goto	L5
  1692  011A96                     l7847:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;functions.c: 220: temp = temp / 5;
  1696  011A96  C068  F040         	movff	readTempF@temp,___ftdiv@f1
  1697  011A9A  C069  F041         	movff	readTempF@temp+1,___ftdiv@f1+1
  1698  011A9E  C06A  F042         	movff	readTempF@temp+2,___ftdiv@f1+2
  1699  011AA2  0E00               	movlw	0
  1700  011AA4  6E43               	movwf	___ftdiv@f2,c
  1701  011AA6  0EA0               	movlw	160
  1702  011AA8  6E44               	movwf	___ftdiv@f2+1,c
  1703  011AAA  0E40               	movlw	64
  1704  011AAC  6E45               	movwf	___ftdiv@f2+2,c
  1705  011AAE  EC72  F08F         	call	___ftdiv	;wreg free
  1706  011AB2  C040  F068         	movff	?___ftdiv,readTempF@temp
  1707  011AB6  C041  F069         	movff	?___ftdiv+1,readTempF@temp+1
  1708  011ABA  C042  F06A         	movff	?___ftdiv+2,readTempF@temp+2
  1709                           
  1710                           ;functions.c: 221: temp = ((temp * 3.3) / 4096);
  1711  011ABE  0E33               	movlw	51
  1712  011AC0  6E28               	movwf	___ftmul@f2,c
  1713  011AC2  0E53               	movlw	83
  1714  011AC4  6E29               	movwf	___ftmul@f2+1,c
  1715  011AC6  0E40               	movlw	64
  1716  011AC8  6E2A               	movwf	___ftmul@f2+2,c
  1717  011ACA  C068  F025         	movff	readTempF@temp,___ftmul@f1
  1718  011ACE  C069  F026         	movff	readTempF@temp+1,___ftmul@f1+1
  1719  011AD2  C06A  F027         	movff	readTempF@temp+2,___ftmul@f1+2
  1720  011AD6  EC11  F091         	call	___ftmul	;wreg free
  1721  011ADA  C025  F040         	movff	?___ftmul,___ftdiv@f1
  1722  011ADE  C026  F041         	movff	?___ftmul+1,___ftdiv@f1+1
  1723  011AE2  C027  F042         	movff	?___ftmul+2,___ftdiv@f1+2
  1724  011AE6  0E00               	movlw	0
  1725  011AE8  6E43               	movwf	___ftdiv@f2,c
  1726  011AEA  0E80               	movlw	128
  1727  011AEC  6E44               	movwf	___ftdiv@f2+1,c
  1728  011AEE  0E45               	movlw	69
  1729  011AF0  6E45               	movwf	___ftdiv@f2+2,c
  1730  011AF2  EC72  F08F         	call	___ftdiv	;wreg free
  1731  011AF6  C040  F068         	movff	?___ftdiv,readTempF@temp
  1732  011AFA  C041  F069         	movff	?___ftdiv+1,readTempF@temp+1
  1733  011AFE  C042  F06A         	movff	?___ftdiv+2,readTempF@temp+2
  1734                           
  1735                           ;functions.c: 222: temp = (18.181818 * temp) - 10;
  1736  011B02  0E74               	movlw	116
  1737  011B04  6E28               	movwf	___ftmul@f2,c
  1738  011B06  0E91               	movlw	145
  1739  011B08  6E29               	movwf	___ftmul@f2+1,c
  1740  011B0A  0E41               	movlw	65
  1741  011B0C  6E2A               	movwf	___ftmul@f2+2,c
  1742  011B0E  C068  F025         	movff	readTempF@temp,___ftmul@f1
  1743  011B12  C069  F026         	movff	readTempF@temp+1,___ftmul@f1+1
  1744  011B16  C06A  F027         	movff	readTempF@temp+2,___ftmul@f1+2
  1745  011B1A  EC11  F091         	call	___ftmul	;wreg free
  1746  011B1E  C025  F034         	movff	?___ftmul,___ftadd@f1
  1747  011B22  C026  F035         	movff	?___ftmul+1,___ftadd@f1+1
  1748  011B26  C027  F036         	movff	?___ftmul+2,___ftadd@f1+2
  1749  011B2A  0E00               	movlw	0
  1750  011B2C  6E37               	movwf	___ftadd@f2,c
  1751  011B2E  0E20               	movlw	32
  1752  011B30  6E38               	movwf	___ftadd@f2+1,c
  1753  011B32  0EC1               	movlw	193
  1754  011B34  6E39               	movwf	___ftadd@f2+2,c
  1755  011B36  ECBA  F08A         	call	___ftadd	;wreg free
  1756  011B3A  C034  F068         	movff	?___ftadd,readTempF@temp
  1757  011B3E  C035  F069         	movff	?___ftadd+1,readTempF@temp+1
  1758  011B42  C036  F06A         	movff	?___ftadd+2,readTempF@temp+2
  1759                           
  1760                           ;functions.c: 224: return temp;
  1761  011B46  C068  F049         	movff	readTempF@temp,?_readTempF
  1762  011B4A  C069  F04A         	movff	readTempF@temp+1,?_readTempF+1
  1763  011B4E  C06A  F04B         	movff	readTempF@temp+2,?_readTempF+2
  1764  011B52  0012               	return	
  1765  011B54                     __end_of_readTempF:
  1766                           	opt stack 0
  1767                           prodl	equ	0xFF3
  1768                           wreg	equ	0xFE8
  1769                           status	equ	0xFD8
  1770                           
  1771 ;; *************** function ___awtoft *****************
  1772 ;; Defined at:
  1773 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awtoft.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  c               2   22[COMRAM] int 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  sign            1   26[COMRAM] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  3   22[COMRAM] float 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0, prodl, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1787 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1790 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1791 ;;Total ram usage:        5 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    2
  1794 ;; This function calls:
  1795 ;;		___ftpack
  1796 ;; This function is called by:
  1797 ;;		_readTempF
  1798 ;;		_readDistance
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text3
  1803  012C3E                     __ptext3:
  1804                           	opt stack 0
  1805  012C3E                     ___awtoft:
  1806                           	opt stack 26
  1807                           
  1808                           ;incstack = 0
  1809  012C3E  6E1A               	movwf	??___awtoft& (0+255),c
  1810  012C40  0E00               	movlw	0
  1811  012C42  6E1B               	movwf	___awtoft@sign,c
  1812  012C44  501A               	movf	??___awtoft& (0+255),w,c
  1813  012C46  5018               	movf	___awtoft@c+1,w,c
  1814  012C48  0A80               	xorlw	128
  1815  012C4A  6EF3               	movwf	prodl,c
  1816  012C4C  0E80               	movlw	128
  1817  012C4E  5CF3               	subwf	prodl,w,c
  1818  012C50  0E00               	movlw	0
  1819  012C52  B4D8               	btfsc	status,2,c
  1820  012C54  5C17               	subwf	___awtoft@c,w,c
  1821  012C56  B0D8               	btfsc	status,0,c
  1822  012C58  D008               	goto	l7821
  1823  012C5A  6C17               	negf	___awtoft@c,c
  1824  012C5C  1E18               	comf	___awtoft@c+1,f,c
  1825  012C5E  B0D8               	btfsc	status,0,c
  1826  012C60  2A18               	incf	___awtoft@c+1,f,c
  1827  012C62  6E1A               	movwf	??___awtoft& (0+255),c
  1828  012C64  0E01               	movlw	1
  1829  012C66  6E1B               	movwf	___awtoft@sign,c
  1830  012C68  501A               	movf	??___awtoft& (0+255),w,c
  1831  012C6A                     l7821:
  1832  012C6A  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  1833  012C6E  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  1834  012C72  6A11               	clrf	___ftpack@arg+2,c
  1835  012C74  6E1A               	movwf	??___awtoft& (0+255),c
  1836  012C76  0E8E               	movlw	142
  1837  012C78  6E12               	movwf	___ftpack@exp,c
  1838  012C7A  501A               	movf	??___awtoft& (0+255),w,c
  1839  012C7C  C01B  F013         	movff	___awtoft@sign,___ftpack@sign
  1840  012C80  EC86  F093         	call	___ftpack	;wreg free
  1841  012C84  C00F  F017         	movff	?___ftpack,?___awtoft
  1842  012C88  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  1843  012C8C  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  1844  012C90  0012               	return	
  1845  012C92                     __end_of___awtoft:
  1846                           	opt stack 0
  1847                           prodl	equ	0xFF3
  1848                           wreg	equ	0xFE8
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _readLight *****************
  1852 ;; Defined at:
  1853 ;;		line 229 in file "functions.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  j               4   43[COMRAM] long 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  2   41[COMRAM] int 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1867 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1868 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1870 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1871 ;;Total ram usage:        6 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    2
  1874 ;; This function calls:
  1875 ;;		___aldiv
  1876 ;;		___lmul
  1877 ;;		_read
  1878 ;; This function is called by:
  1879 ;;		_showTempLight
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text4
  1884  012966                     __ptext4:
  1885                           	opt stack 0
  1886  012966                     _readLight:
  1887                           	opt stack 27
  1888                           
  1889                           ;functions.c: 230: long j = read(1);
  1890                           
  1891                           ;incstack = 0
  1892  012966  0E00               	movlw	0
  1893  012968  6E10               	movwf	read@channel+1,c
  1894  01296A  0E01               	movlw	1
  1895  01296C  6E0F               	movwf	read@channel,c
  1896  01296E  ECAA  F08D         	call	_read	;wreg free
  1897  012972  C00F  F02C         	movff	?_read,readLight@j
  1898  012976  C010  F02D         	movff	?_read+1,readLight@j+1
  1899  01297A  0E00               	movlw	0
  1900  01297C  BE2D               	btfsc	readLight@j+1,7,c
  1901  01297E  0EFF               	movlw	-1
  1902  012980  6E2E               	movwf	readLight@j+2,c
  1903  012982  6E2F               	movwf	readLight@j+3,c
  1904                           
  1905                           ;functions.c: 231: j = ((j * 100) / 4096);
  1906  012984  0E64               	movlw	100
  1907  012986  6E13               	movwf	___lmul@multiplicand,c
  1908  012988  0E00               	movlw	0
  1909  01298A  6E14               	movwf	___lmul@multiplicand+1,c
  1910  01298C  0E00               	movlw	0
  1911  01298E  6E15               	movwf	___lmul@multiplicand+2,c
  1912  012990  0E00               	movlw	0
  1913  012992  6E16               	movwf	___lmul@multiplicand+3,c
  1914  012994  C02C  F00F         	movff	readLight@j,___lmul@multiplier
  1915  012998  C02D  F010         	movff	readLight@j+1,___lmul@multiplier+1
  1916  01299C  C02E  F011         	movff	readLight@j+2,___lmul@multiplier+2
  1917  0129A0  C02F  F012         	movff	readLight@j+3,___lmul@multiplier+3
  1918  0129A4  ECC9  F095         	call	___lmul	;wreg free
  1919  0129A8  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  1920  0129AC  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  1921  0129B0  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  1922  0129B4  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  1923  0129B8  0E00               	movlw	0
  1924  0129BA  6E1F               	movwf	___aldiv@divisor,c
  1925  0129BC  0E10               	movlw	16
  1926  0129BE  6E20               	movwf	___aldiv@divisor+1,c
  1927  0129C0  0E00               	movlw	0
  1928  0129C2  6E21               	movwf	___aldiv@divisor+2,c
  1929  0129C4  0E00               	movlw	0
  1930  0129C6  6E22               	movwf	___aldiv@divisor+3,c
  1931  0129C8  EC8D  F090         	call	___aldiv	;wreg free
  1932  0129CC  C01B  F02C         	movff	?___aldiv,readLight@j
  1933  0129D0  C01C  F02D         	movff	?___aldiv+1,readLight@j+1
  1934  0129D4  C01D  F02E         	movff	?___aldiv+2,readLight@j+2
  1935  0129D8  C01E  F02F         	movff	?___aldiv+3,readLight@j+3
  1936                           
  1937                           ;functions.c: 232: return j;
  1938  0129DC  C02C  F02A         	movff	readLight@j,?_readLight
  1939  0129E0  C02D  F02B         	movff	readLight@j+1,?_readLight+1
  1940  0129E4  0012               	return	
  1941  0129E6                     __end_of_readLight:
  1942                           	opt stack 0
  1943                           prodl	equ	0xFF3
  1944                           wreg	equ	0xFE8
  1945                           status	equ	0xFD8
  1946                           
  1947 ;; *************** function ___lmul *****************
  1948 ;; Defined at:
  1949 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lmul.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  multiplier      4   14[COMRAM] unsigned long 
  1952 ;;  multiplicand    4   18[COMRAM] unsigned long 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  product         4   22[COMRAM] unsigned long 
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  4   14[COMRAM] unsigned long 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1964 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1965 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1967 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1968 ;;Total ram usage:       12 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    1
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		_readLight
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text5
  1979  012B92                     __ptext5:
  1980                           	opt stack 0
  1981  012B92                     ___lmul:
  1982                           	opt stack 27
  1983                           
  1984                           ;incstack = 0
  1985  012B92  0E00               	movlw	0
  1986  012B94  6E17               	movwf	___lmul@product,c
  1987  012B96  0E00               	movlw	0
  1988  012B98  6E18               	movwf	___lmul@product+1,c
  1989  012B9A  0E00               	movlw	0
  1990  012B9C  6E19               	movwf	___lmul@product+2,c
  1991  012B9E  0E00               	movlw	0
  1992  012BA0  6E1A               	movwf	___lmul@product+3,c
  1993  012BA2                     l5921:
  1994  012BA2  A00F               	btfss	___lmul@multiplier,0,c
  1995  012BA4  D008               	goto	l5925
  1996  012BA6  5013               	movf	___lmul@multiplicand,w,c
  1997  012BA8  2617               	addwf	___lmul@product,f,c
  1998  012BAA  5014               	movf	___lmul@multiplicand+1,w,c
  1999  012BAC  2218               	addwfc	___lmul@product+1,f,c
  2000  012BAE  5015               	movf	___lmul@multiplicand+2,w,c
  2001  012BB0  2219               	addwfc	___lmul@product+2,f,c
  2002  012BB2  5016               	movf	___lmul@multiplicand+3,w,c
  2003  012BB4  221A               	addwfc	___lmul@product+3,f,c
  2004  012BB6                     l5925:
  2005  012BB6  90D8               	bcf	status,0,c
  2006  012BB8  3613               	rlcf	___lmul@multiplicand,f,c
  2007  012BBA  3614               	rlcf	___lmul@multiplicand+1,f,c
  2008  012BBC  3615               	rlcf	___lmul@multiplicand+2,f,c
  2009  012BBE  3616               	rlcf	___lmul@multiplicand+3,f,c
  2010  012BC0  90D8               	bcf	status,0,c
  2011  012BC2  3212               	rrcf	___lmul@multiplier+3,f,c
  2012  012BC4  3211               	rrcf	___lmul@multiplier+2,f,c
  2013  012BC6  3210               	rrcf	___lmul@multiplier+1,f,c
  2014  012BC8  320F               	rrcf	___lmul@multiplier,f,c
  2015  012BCA  5012               	movf	___lmul@multiplier+3,w,c
  2016  012BCC  100F               	iorwf	___lmul@multiplier,w,c
  2017  012BCE  1010               	iorwf	___lmul@multiplier+1,w,c
  2018  012BD0  1011               	iorwf	___lmul@multiplier+2,w,c
  2019  012BD2  A4D8               	btfss	status,2,c
  2020  012BD4  D7E6               	goto	l5921
  2021  012BD6  C017  F00F         	movff	___lmul@product,?___lmul
  2022  012BDA  C018  F010         	movff	___lmul@product+1,?___lmul+1
  2023  012BDE  C019  F011         	movff	___lmul@product+2,?___lmul+2
  2024  012BE2  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  2025  012BE6  0012               	return	
  2026  012BE8                     __end_of___lmul:
  2027                           	opt stack 0
  2028                           prodl	equ	0xFF3
  2029                           wreg	equ	0xFE8
  2030                           status	equ	0xFD8
  2031                           
  2032 ;; *************** function ___aldiv *****************
  2033 ;; Defined at:
  2034 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\aldiv.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  dividend        4   26[COMRAM] long 
  2037 ;;  divisor         4   30[COMRAM] long 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  quotient        4   37[COMRAM] long 
  2040 ;;  sign            1   36[COMRAM] unsigned char 
  2041 ;;  counter         1   35[COMRAM] unsigned char 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  4   26[COMRAM] long 
  2044 ;; Registers used:
  2045 ;;		wreg, status,2, status,0
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2051 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2052 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2053 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2054 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2055 ;;Total ram usage:       15 bytes
  2056 ;; Hardware stack levels used:    1
  2057 ;; Hardware stack levels required when called:    1
  2058 ;; This function calls:
  2059 ;;		Nothing
  2060 ;; This function is called by:
  2061 ;;		_readLight
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	text6
  2066  01211A                     __ptext6:
  2067                           	opt stack 0
  2068  01211A                     ___aldiv:
  2069                           	opt stack 27
  2070                           
  2071                           ;incstack = 0
  2072  01211A  6E23               	movwf	??___aldiv& (0+255),c
  2073  01211C  0E00               	movlw	0
  2074  01211E  6E25               	movwf	___aldiv@sign,c
  2075  012120  5023               	movf	??___aldiv& (0+255),w,c
  2076  012122  5022               	movf	___aldiv@divisor+3,w,c
  2077  012124  0A80               	xorlw	128
  2078  012126  0F80               	addlw	128
  2079  012128  E108               	bnz	u3635
  2080  01212A  0E00               	movlw	0
  2081  01212C  5C21               	subwf	___aldiv@divisor+2,w,c
  2082  01212E  E105               	bnz	u3635
  2083  012130  0E00               	movlw	0
  2084  012132  5C20               	subwf	___aldiv@divisor+1,w,c
  2085  012134  E102               	bnz	u3635
  2086  012136  0E00               	movlw	0
  2087  012138  5C1F               	subwf	___aldiv@divisor,w,c
  2088  01213A                     u3635:
  2089  01213A  B0D8               	btfsc	status,0,c
  2090  01213C  D00C               	goto	l5871
  2091  01213E  1E22               	comf	___aldiv@divisor+3,f,c
  2092  012140  1E21               	comf	___aldiv@divisor+2,f,c
  2093  012142  1E20               	comf	___aldiv@divisor+1,f,c
  2094  012144  6C1F               	negf	___aldiv@divisor,c
  2095  012146  0E00               	movlw	0
  2096  012148  2220               	addwfc	___aldiv@divisor+1,f,c
  2097  01214A  2221               	addwfc	___aldiv@divisor+2,f,c
  2098  01214C  2222               	addwfc	___aldiv@divisor+3,f,c
  2099  01214E  6E23               	movwf	??___aldiv& (0+255),c
  2100  012150  0E01               	movlw	1
  2101  012152  6E25               	movwf	___aldiv@sign,c
  2102  012154  5023               	movf	??___aldiv& (0+255),w,c
  2103  012156                     l5871:
  2104  012156  501E               	movf	___aldiv@dividend+3,w,c
  2105  012158  0A80               	xorlw	128
  2106  01215A  0F80               	addlw	128
  2107  01215C  E108               	bnz	u3645
  2108  01215E  0E00               	movlw	0
  2109  012160  5C1D               	subwf	___aldiv@dividend+2,w,c
  2110  012162  E105               	bnz	u3645
  2111  012164  0E00               	movlw	0
  2112  012166  5C1C               	subwf	___aldiv@dividend+1,w,c
  2113  012168  E102               	bnz	u3645
  2114  01216A  0E00               	movlw	0
  2115  01216C  5C1B               	subwf	___aldiv@dividend,w,c
  2116  01216E                     u3645:
  2117  01216E  B0D8               	btfsc	status,0,c
  2118  012170  D00A               	goto	l5877
  2119  012172  1E1E               	comf	___aldiv@dividend+3,f,c
  2120  012174  1E1D               	comf	___aldiv@dividend+2,f,c
  2121  012176  1E1C               	comf	___aldiv@dividend+1,f,c
  2122  012178  6C1B               	negf	___aldiv@dividend,c
  2123  01217A  0E00               	movlw	0
  2124  01217C  221C               	addwfc	___aldiv@dividend+1,f,c
  2125  01217E  221D               	addwfc	___aldiv@dividend+2,f,c
  2126  012180  221E               	addwfc	___aldiv@dividend+3,f,c
  2127  012182  0E01               	movlw	1
  2128  012184  1A25               	xorwf	___aldiv@sign,f,c
  2129  012186                     l5877:
  2130  012186  0E00               	movlw	0
  2131  012188  6E26               	movwf	___aldiv@quotient,c
  2132  01218A  0E00               	movlw	0
  2133  01218C  6E27               	movwf	___aldiv@quotient+1,c
  2134  01218E  0E00               	movlw	0
  2135  012190  6E28               	movwf	___aldiv@quotient+2,c
  2136  012192  0E00               	movlw	0
  2137  012194  6E29               	movwf	___aldiv@quotient+3,c
  2138  012196  5022               	movf	___aldiv@divisor+3,w,c
  2139  012198  101F               	iorwf	___aldiv@divisor,w,c
  2140  01219A  1020               	iorwf	___aldiv@divisor+1,w,c
  2141  01219C  1021               	iorwf	___aldiv@divisor+2,w,c
  2142  01219E  B4D8               	btfsc	status,2,c
  2143  0121A0  D02C               	goto	l5899
  2144  0121A2  6E23               	movwf	??___aldiv& (0+255),c
  2145  0121A4  0E01               	movlw	1
  2146  0121A6  6E24               	movwf	___aldiv@counter,c
  2147  0121A8  5023               	movf	??___aldiv& (0+255),w,c
  2148  0121AA  D006               	goto	l5885
  2149  0121AC                     l5883:
  2150  0121AC  90D8               	bcf	status,0,c
  2151  0121AE  361F               	rlcf	___aldiv@divisor,f,c
  2152  0121B0  3620               	rlcf	___aldiv@divisor+1,f,c
  2153  0121B2  3621               	rlcf	___aldiv@divisor+2,f,c
  2154  0121B4  3622               	rlcf	___aldiv@divisor+3,f,c
  2155  0121B6  2A24               	incf	___aldiv@counter,f,c
  2156  0121B8                     l5885:
  2157  0121B8  AE22               	btfss	___aldiv@divisor+3,7,c
  2158  0121BA  D7F8               	goto	l5883
  2159  0121BC                     l5887:
  2160  0121BC  90D8               	bcf	status,0,c
  2161  0121BE  3626               	rlcf	___aldiv@quotient,f,c
  2162  0121C0  3627               	rlcf	___aldiv@quotient+1,f,c
  2163  0121C2  3628               	rlcf	___aldiv@quotient+2,f,c
  2164  0121C4  3629               	rlcf	___aldiv@quotient+3,f,c
  2165  0121C6  501F               	movf	___aldiv@divisor,w,c
  2166  0121C8  5C1B               	subwf	___aldiv@dividend,w,c
  2167  0121CA  5020               	movf	___aldiv@divisor+1,w,c
  2168  0121CC  581C               	subwfb	___aldiv@dividend+1,w,c
  2169  0121CE  5021               	movf	___aldiv@divisor+2,w,c
  2170  0121D0  581D               	subwfb	___aldiv@dividend+2,w,c
  2171  0121D2  5022               	movf	___aldiv@divisor+3,w,c
  2172  0121D4  581E               	subwfb	___aldiv@dividend+3,w,c
  2173  0121D6  A0D8               	btfss	status,0,c
  2174  0121D8  D009               	goto	l5895
  2175  0121DA  501F               	movf	___aldiv@divisor,w,c
  2176  0121DC  5E1B               	subwf	___aldiv@dividend,f,c
  2177  0121DE  5020               	movf	___aldiv@divisor+1,w,c
  2178  0121E0  5A1C               	subwfb	___aldiv@dividend+1,f,c
  2179  0121E2  5021               	movf	___aldiv@divisor+2,w,c
  2180  0121E4  5A1D               	subwfb	___aldiv@dividend+2,f,c
  2181  0121E6  5022               	movf	___aldiv@divisor+3,w,c
  2182  0121E8  5A1E               	subwfb	___aldiv@dividend+3,f,c
  2183  0121EA  8026               	bsf	___aldiv@quotient,0,c
  2184  0121EC                     l5895:
  2185  0121EC  90D8               	bcf	status,0,c
  2186  0121EE  3222               	rrcf	___aldiv@divisor+3,f,c
  2187  0121F0  3221               	rrcf	___aldiv@divisor+2,f,c
  2188  0121F2  3220               	rrcf	___aldiv@divisor+1,f,c
  2189  0121F4  321F               	rrcf	___aldiv@divisor,f,c
  2190  0121F6  2E24               	decfsz	___aldiv@counter,f,c
  2191  0121F8  D7E1               	goto	l5887
  2192  0121FA                     l5899:
  2193  0121FA  5025               	movf	___aldiv@sign,w,c
  2194  0121FC  B4D8               	btfsc	status,2,c
  2195  0121FE  D008               	goto	l5903
  2196  012200  1E29               	comf	___aldiv@quotient+3,f,c
  2197  012202  1E28               	comf	___aldiv@quotient+2,f,c
  2198  012204  1E27               	comf	___aldiv@quotient+1,f,c
  2199  012206  6C26               	negf	___aldiv@quotient,c
  2200  012208  0E00               	movlw	0
  2201  01220A  2227               	addwfc	___aldiv@quotient+1,f,c
  2202  01220C  2228               	addwfc	___aldiv@quotient+2,f,c
  2203  01220E  2229               	addwfc	___aldiv@quotient+3,f,c
  2204  012210                     l5903:
  2205  012210  C026  F01B         	movff	___aldiv@quotient,?___aldiv
  2206  012214  C027  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
  2207  012218  C028  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
  2208  01221C  C029  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
  2209  012220  0012               	return	
  2210  012222                     __end_of___aldiv:
  2211                           	opt stack 0
  2212                           prodl	equ	0xFF3
  2213                           wreg	equ	0xFE8
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _showAccelerometerVal *****************
  2217 ;; Defined at:
  2218 ;;		line 34 in file "userInterface.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  buffer         10   81[BANK0 ] unsigned char [10]
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2233 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2235 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2236 ;;Total ram usage:       11 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    6
  2239 ;; This function calls:
  2240 ;;		_lcdClear
  2241 ;;		_lcdSetPos
  2242 ;;		_lcdWriteChar
  2243 ;;		_lcdWriteStrC
  2244 ;;		_single_axis_measure
  2245 ;;		_sprintf
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text7
  2252  01172C                     __ptext7:
  2253                           	opt stack 0
  2254  01172C                     _showAccelerometerVal:
  2255                           	opt stack 24
  2256                           
  2257                           ;userInterface.c: 35: char buffer [10];
  2258                           ;userInterface.c: 36: lcdClear();
  2259                           
  2260                           ;incstack = 0
  2261  01172C  ECE7  F097         	call	_lcdClear	;wreg free
  2262                           
  2263                           ;userInterface.c: 37: lcdWriteStrC("Aclmtr values:");
  2264  011730  0EFF               	movlw	high STR_31
  2265  011732  6E13               	movwf	lcdWriteStrC@s+1,c
  2266  011734  0EBF               	movlw	low STR_31
  2267  011736  6E12               	movwf	lcdWriteStrC@s,c
  2268  011738  ECF4  F095         	call	_lcdWriteStrC	;wreg free
  2269                           
  2270                           ;userInterface.c: 38: lcdSetPos(0, 1);
  2271  01173C  0100               	movlb	0	; () banked
  2272  01173E  6FB0               	movwf	??_showAccelerometerVal& (0+255),b
  2273  011740  0E01               	movlw	1
  2274  011742  6E15               	movwf	lcdSetPos@y,c
  2275  011744  0100               	movlb	0	; () banked
  2276  011746  51B0               	movf	??_showAccelerometerVal& (0+255),w,b
  2277  011748  0E00               	movlw	0
  2278  01174A  EC6C  F096         	call	_lcdSetPos
  2279                           
  2280                           ;userInterface.c: 39: sprintf(buffer, "%1.2f", single_axis_measure(2, 10));
  2281  01174E  0100               	movlb	0	; () banked
  2282  011750  0E00               	movlw	high showAccelerometerVal@buffer
  2283  011752  0100               	movlb	0	; () banked
  2284  011754  0100               	movlb	0	; () banked
  2285  011756  6F7F               	movwf	(sprintf@sp+1)& (0+255),b
  2286  011758  0100               	movlb	0	; () banked
  2287  01175A  0EB1               	movlw	low showAccelerometerVal@buffer
  2288  01175C  0100               	movlb	0	; () banked
  2289  01175E  0100               	movlb	0	; () banked
  2290  011760  6F7E               	movwf	sprintf@sp& (0+255),b
  2291  011762  0EFF               	movlw	high STR_32
  2292  011764  0100               	movlb	0	; () banked
  2293  011766  0100               	movlb	0	; () banked
  2294  011768  6F81               	movwf	(sprintf@f+1)& (0+255),b
  2295  01176A  0EED               	movlw	low STR_32
  2296  01176C  0100               	movlb	0	; () banked
  2297  01176E  0100               	movlb	0	; () banked
  2298  011770  6F80               	movwf	sprintf@f& (0+255),b
  2299  011772  0E00               	movlw	0
  2300  011774  0100               	movlb	0	; () banked
  2301  011776  0100               	movlb	0	; () banked
  2302  011778  6F6F               	movwf	(single_axis_measure@axis+1)& (0+255),b
  2303  01177A  0E02               	movlw	2
  2304  01177C  0100               	movlb	0	; () banked
  2305  01177E  6F6E               	movwf	single_axis_measure@axis& (0+255),b
  2306  011780  0E00               	movlw	0
  2307  011782  0100               	movlb	0	; () banked
  2308  011784  0100               	movlb	0	; () banked
  2309  011786  6F70               	movwf	single_axis_measure@iteration& (0+255),b
  2310  011788  0E20               	movlw	32
  2311  01178A  0100               	movlb	0	; () banked
  2312  01178C  0100               	movlb	0	; () banked
  2313  01178E  6F71               	movwf	(single_axis_measure@iteration+1)& (0+255),b
  2314  011790  0E41               	movlw	65
  2315  011792  0100               	movlb	0	; () banked
  2316  011794  0100               	movlb	0	; () banked
  2317  011796  6F72               	movwf	(single_axis_measure@iteration+2)& (0+255),b
  2318  011798  ECE1  F08E         	call	_single_axis_measure	;wreg free
  2319  01179C  C06E  F082         	movff	?_single_axis_measure,?_sprintf+4
  2320  0117A0  C06F  F083         	movff	?_single_axis_measure+1,?_sprintf+5
  2321  0117A4  C070  F084         	movff	?_single_axis_measure+2,?_sprintf+6
  2322  0117A8  EC00  F080         	call	_sprintf	;wreg free
  2323                           
  2324                           ;userInterface.c: 40: lcdWriteStrC(buffer);
  2325  0117AC  0100               	movlb	0	; () banked
  2326  0117AE  0E00               	movlw	high showAccelerometerVal@buffer
  2327  0117B0  6E13               	movwf	lcdWriteStrC@s+1,c
  2328  0117B2  0100               	movlb	0	; () banked
  2329  0117B4  0EB1               	movlw	low showAccelerometerVal@buffer
  2330  0117B6  6E12               	movwf	lcdWriteStrC@s,c
  2331  0117B8  ECF4  F095         	call	_lcdWriteStrC	;wreg free
  2332                           
  2333                           ;userInterface.c: 41: lcdWriteChar(' ');
  2334  0117BC  0E20               	movlw	32
  2335  0117BE  ECDD  F097         	call	_lcdWriteChar
  2336                           
  2337                           ;userInterface.c: 42: sprintf(buffer, "%1.2f", single_axis_measure(3, 10));
  2338  0117C2  0100               	movlb	0	; () banked
  2339  0117C4  0E00               	movlw	high showAccelerometerVal@buffer
  2340  0117C6  0100               	movlb	0	; () banked
  2341  0117C8  0100               	movlb	0	; () banked
  2342  0117CA  6F7F               	movwf	(sprintf@sp+1)& (0+255),b
  2343  0117CC  0100               	movlb	0	; () banked
  2344  0117CE  0EB1               	movlw	low showAccelerometerVal@buffer
  2345  0117D0  0100               	movlb	0	; () banked
  2346  0117D2  0100               	movlb	0	; () banked
  2347  0117D4  6F7E               	movwf	sprintf@sp& (0+255),b
  2348  0117D6  0EFF               	movlw	high STR_32
  2349  0117D8  0100               	movlb	0	; () banked
  2350  0117DA  0100               	movlb	0	; () banked
  2351  0117DC  6F81               	movwf	(sprintf@f+1)& (0+255),b
  2352  0117DE  0EED               	movlw	low STR_32
  2353  0117E0  0100               	movlb	0	; () banked
  2354  0117E2  0100               	movlb	0	; () banked
  2355  0117E4  6F80               	movwf	sprintf@f& (0+255),b
  2356  0117E6  0E00               	movlw	0
  2357  0117E8  0100               	movlb	0	; () banked
  2358  0117EA  0100               	movlb	0	; () banked
  2359  0117EC  6F6F               	movwf	(single_axis_measure@axis+1)& (0+255),b
  2360  0117EE  0E03               	movlw	3
  2361  0117F0  0100               	movlb	0	; () banked
  2362  0117F2  6F6E               	movwf	single_axis_measure@axis& (0+255),b
  2363  0117F4  0E00               	movlw	0
  2364  0117F6  0100               	movlb	0	; () banked
  2365  0117F8  0100               	movlb	0	; () banked
  2366  0117FA  6F70               	movwf	single_axis_measure@iteration& (0+255),b
  2367  0117FC  0E20               	movlw	32
  2368  0117FE  0100               	movlb	0	; () banked
  2369  011800  0100               	movlb	0	; () banked
  2370  011802  6F71               	movwf	(single_axis_measure@iteration+1)& (0+255),b
  2371  011804  0E41               	movlw	65
  2372  011806  0100               	movlb	0	; () banked
  2373  011808  0100               	movlb	0	; () banked
  2374  01180A  6F72               	movwf	(single_axis_measure@iteration+2)& (0+255),b
  2375  01180C  ECE1  F08E         	call	_single_axis_measure	;wreg free
  2376  011810  C06E  F082         	movff	?_single_axis_measure,?_sprintf+4
  2377  011814  C06F  F083         	movff	?_single_axis_measure+1,?_sprintf+5
  2378  011818  C070  F084         	movff	?_single_axis_measure+2,?_sprintf+6
  2379  01181C  EC00  F080         	call	_sprintf	;wreg free
  2380                           
  2381                           ;userInterface.c: 43: lcdWriteStrC(buffer);
  2382  011820  0100               	movlb	0	; () banked
  2383  011822  0E00               	movlw	high showAccelerometerVal@buffer
  2384  011824  6E13               	movwf	lcdWriteStrC@s+1,c
  2385  011826  0100               	movlb	0	; () banked
  2386  011828  0EB1               	movlw	low showAccelerometerVal@buffer
  2387  01182A  6E12               	movwf	lcdWriteStrC@s,c
  2388  01182C  ECF4  F095         	call	_lcdWriteStrC	;wreg free
  2389                           
  2390                           ;userInterface.c: 44: lcdWriteChar(' ');
  2391  011830  0E20               	movlw	32
  2392  011832  ECDD  F097         	call	_lcdWriteChar
  2393                           
  2394                           ;userInterface.c: 45: sprintf(buffer, "%1.2f", single_axis_measure(4, 10));
  2395  011836  0100               	movlb	0	; () banked
  2396  011838  0E00               	movlw	high showAccelerometerVal@buffer
  2397  01183A  0100               	movlb	0	; () banked
  2398  01183C  0100               	movlb	0	; () banked
  2399  01183E  6F7F               	movwf	(sprintf@sp+1)& (0+255),b
  2400  011840  0100               	movlb	0	; () banked
  2401  011842  0EB1               	movlw	low showAccelerometerVal@buffer
  2402  011844  0100               	movlb	0	; () banked
  2403  011846  0100               	movlb	0	; () banked
  2404  011848  6F7E               	movwf	sprintf@sp& (0+255),b
  2405  01184A  0EFF               	movlw	high STR_32
  2406  01184C  0100               	movlb	0	; () banked
  2407  01184E  0100               	movlb	0	; () banked
  2408  011850  6F81               	movwf	(sprintf@f+1)& (0+255),b
  2409  011852  0EED               	movlw	low STR_32
  2410  011854  0100               	movlb	0	; () banked
  2411  011856  0100               	movlb	0	; () banked
  2412  011858  6F80               	movwf	sprintf@f& (0+255),b
  2413  01185A  0E00               	movlw	0
  2414  01185C  0100               	movlb	0	; () banked
  2415  01185E  0100               	movlb	0	; () banked
  2416  011860  6F6F               	movwf	(single_axis_measure@axis+1)& (0+255),b
  2417  011862  0E04               	movlw	4
  2418  011864  0100               	movlb	0	; () banked
  2419  011866  6F6E               	movwf	single_axis_measure@axis& (0+255),b
  2420  011868  0E00               	movlw	0
  2421  01186A  0100               	movlb	0	; () banked
  2422  01186C  0100               	movlb	0	; () banked
  2423  01186E  6F70               	movwf	single_axis_measure@iteration& (0+255),b
  2424  011870  0E20               	movlw	32
  2425  011872  0100               	movlb	0	; () banked
  2426  011874  0100               	movlb	0	; () banked
  2427  011876  6F71               	movwf	(single_axis_measure@iteration+1)& (0+255),b
  2428  011878  0E41               	movlw	65
  2429  01187A  0100               	movlb	0	; () banked
  2430  01187C  0100               	movlb	0	; () banked
  2431  01187E  6F72               	movwf	(single_axis_measure@iteration+2)& (0+255),b
  2432  011880  ECE1  F08E         	call	_single_axis_measure	;wreg free
  2433  011884  C06E  F082         	movff	?_single_axis_measure,?_sprintf+4
  2434  011888  C06F  F083         	movff	?_single_axis_measure+1,?_sprintf+5
  2435  01188C  C070  F084         	movff	?_single_axis_measure+2,?_sprintf+6
  2436  011890  EC00  F080         	call	_sprintf	;wreg free
  2437                           
  2438                           ;userInterface.c: 46: lcdWriteStrC(buffer);
  2439  011894  0100               	movlb	0	; () banked
  2440  011896  0E00               	movlw	high showAccelerometerVal@buffer
  2441  011898  6E13               	movwf	lcdWriteStrC@s+1,c
  2442  01189A  0100               	movlb	0	; () banked
  2443  01189C  0EB1               	movlw	low showAccelerometerVal@buffer
  2444  01189E  6E12               	movwf	lcdWriteStrC@s,c
  2445  0118A0  ECF4  F095         	call	_lcdWriteStrC	;wreg free
  2446  0118A4  0012               	return	
  2447  0118A6                     __end_of_showAccelerometerVal:
  2448                           	opt stack 0
  2449                           prodl	equ	0xFF3
  2450                           wreg	equ	0xFE8
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _sprintf *****************
  2454 ;; Defined at:
  2455 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\doprnt.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  sp              2   30[BANK0 ] PTR unsigned char 
  2458 ;;		 -> showAccelerometerVal@buffer(10), showTempLight@buffer(10), showDistance@buffer(10), MOTOR_turnLeft@buffer(10), 
  2459 ;;		 -> MOTOR_turnRight@buffer(10), MOTOR_backward@buffer(10), MOTOR_forward@buffer(10), 
  2460 ;;  f               2   32[BANK0 ] PTR const unsigned char 
  2461 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_30(10), 
  2462 ;;		 -> STR_29(12), STR_28(6), STR_26(5), STR_23(5), 
  2463 ;;		 -> STR_20(5), STR_17(5), 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  vd              4   50[BANK0 ] unsigned long 
  2466 ;;  vd              4   54[BANK0 ] unsigned long 
  2467 ;;  _val            5   63[BANK0 ] struct .
  2468 ;;  fval            3   74[BANK0 ] struct .
  2469 ;;  integ           3   60[BANK0 ] struct .
  2470 ;;  ival            3    0        struct .
  2471 ;;  prec            2   77[BANK0 ] int 
  2472 ;;  width           2   72[BANK0 ] int 
  2473 ;;  flag            2   70[BANK0 ] unsigned short 
  2474 ;;  exp             2   68[BANK0 ] int 
  2475 ;;  ap              2   58[BANK0 ] PTR void [1]
  2476 ;;		 -> ?_sprintf(2), 
  2477 ;;  c               1   79[BANK0 ] char 
  2478 ;;  d               1    0        unsigned char 
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  2   30[BANK0 ] int 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2488 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2489 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2490 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2491 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2492 ;;Total ram usage:       50 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    5
  2495 ;; This function calls:
  2496 ;;		___asftadd
  2497 ;;		___asftmul
  2498 ;;		___asftsub
  2499 ;;		___awdiv
  2500 ;;		___ftge
  2501 ;;		___ftmul
  2502 ;;		___ftneg
  2503 ;;		___fttol
  2504 ;;		___lldiv
  2505 ;;		___llmod
  2506 ;;		___lltoft
  2507 ;;		___wmul
  2508 ;;		__div_to_l_
  2509 ;;		__tdiv_to_l_
  2510 ;;		_fround
  2511 ;;		_isdigit
  2512 ;;		_scale
  2513 ;; This function is called by:
  2514 ;;		_showTempLight
  2515 ;;		_showAccelerometerVal
  2516 ;;		_MOTOR_forward
  2517 ;;		_MOTOR_backward
  2518 ;;		_MOTOR_turnRight
  2519 ;;		_MOTOR_turnLeft
  2520 ;;		_showDistance
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text8
  2525  010000                     __ptext8:
  2526                           	opt stack 0
  2527  010000                     _sprintf:
  2528                           	opt stack 24
  2529                           
  2530                           ;doprnt.c: 494: va_list ap;
  2531                           ;doprnt.c: 499: signed char c;
  2532                           ;doprnt.c: 501: int width;
  2533                           ;doprnt.c: 504: int prec;
  2534                           ;doprnt.c: 508: unsigned short flag;
  2535                           ;doprnt.c: 515: char d;
  2536                           ;doprnt.c: 516: double fval, integ;
  2537                           ;doprnt.c: 517: int exp;
  2538                           ;doprnt.c: 518: double ival;
  2539                           ;doprnt.c: 519: union {
  2540                           ;doprnt.c: 520: unsigned long _val;
  2541                           ;doprnt.c: 521: struct {
  2542                           ;doprnt.c: 522: const char * _cp;
  2543                           ;doprnt.c: 523: unsigned _len;
  2544                           ;doprnt.c: 524: } _str;
  2545                           ;doprnt.c: 525: } _val;
  2546                           ;doprnt.c: 542: *ap = __va_start();
  2547                           
  2548                           ;incstack = 0
  2549  010000  0100               	movlb	0	; () banked
  2550  010002  0E00               	movlw	high (?_sprintf+4)
  2551  010004  0100               	movlb	0	; () banked
  2552  010006  0100               	movlb	0	; () banked
  2553  010008  6F9B               	movwf	(sprintf@ap+1)& (0+255),b
  2554  01000A  0100               	movlb	0	; () banked
  2555  01000C  0E82               	movlw	low (?_sprintf+4)
  2556  01000E  0100               	movlb	0	; () banked
  2557  010010  0100               	movlb	0	; () banked
  2558  010012  6F9A               	movwf	sprintf@ap& (0+255),b
  2559                           
  2560                           ;doprnt.c: 545: while(c = *f++) {
  2561  010014  EF33  F087         	goto	l8203
  2562  010018                     l7875:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;doprnt.c: 547: if(c != '%')
  2566  010018  0100               	movlb	0	; () banked
  2567  01001A  0100               	movlb	0	; () banked
  2568  01001C  51AF               	movf	sprintf@c& (0+255),w,b
  2569  01001E  0A25               	xorlw	37
  2570  010020  B4D8               	btfsc	status,2,c
  2571  010022  D00D               	goto	l7881
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;doprnt.c: 549: {
  2575                           ;doprnt.c: 550: ((*sp++ = (c)));
  2576  010024  C07E  FFD9         	movff	sprintf@sp,fsr2l
  2577  010028  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  2578  01002C  0100               	movlb	0	; () banked
  2579  01002E  C0AF  FFDF         	movff	sprintf@c,indf2
  2580                           
  2581                           ; BSR set to: 0
  2582  010032  0100               	movlb	0	; () banked
  2583  010034  0100               	movlb	0	; () banked
  2584  010036  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  2585  010038  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  2586                           
  2587                           ;doprnt.c: 551: continue;
  2588  01003A  EF33  F087         	goto	l8203
  2589  01003E                     l7881:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 552: }
  2593                           ;doprnt.c: 555: width = 0;
  2594  01003E  0E00               	movlw	0
  2595  010040  0100               	movlb	0	; () banked
  2596  010042  0100               	movlb	0	; () banked
  2597  010044  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  2598  010046  0E00               	movlw	0
  2599  010048  0100               	movlb	0	; () banked
  2600  01004A  6FA8               	movwf	sprintf@width& (0+255),b
  2601                           
  2602                           ;doprnt.c: 557: flag = 0;
  2603  01004C  0E00               	movlw	0
  2604  01004E  0100               	movlb	0	; () banked
  2605  010050  0100               	movlb	0	; () banked
  2606  010052  6FA7               	movwf	(sprintf@flag+1)& (0+255),b
  2607  010054  0E00               	movlw	0
  2608  010056  0100               	movlb	0	; () banked
  2609  010058  6FA6               	movwf	sprintf@flag& (0+255),b
  2610  01005A  D007               	goto	l7887
  2611  01005C                     l7883:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 589: flag |= 0x04;
  2615  01005C  0100               	movlb	0	; () banked
  2616  01005E  0100               	movlb	0	; () banked
  2617  010060  85A6               	bsf	sprintf@flag& (0+255),2,b
  2618                           
  2619                           ;doprnt.c: 590: f++;
  2620  010062  0100               	movlb	0	; () banked
  2621  010064  0100               	movlb	0	; () banked
  2622  010066  4B80               	infsnz	sprintf@f& (0+255),f,b
  2623  010068  2B81               	incf	(sprintf@f+1)& (0+255),f,b
  2624  01006A                     l7887:
  2625                           
  2626                           ; BSR set to: 0
  2627  01006A  0100               	movlb	0	; () banked
  2628  01006C  C080  FFF6         	movff	sprintf@f,tblptrl
  2629  010070  0100               	movlb	0	; () banked
  2630  010072  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2631  010076  0E00               	movlw	low (__mediumconst shr (0+16))
  2632  010078  6EF8               	movwf	tblptru,c
  2633  01007A  0008               	tblrd		*
  2634  01007C  50F5               	movf	tablat,w,c
  2635                           
  2636                           ; Switch size 1, requested type "space"
  2637                           ; Number of cases is 1, Range of values is 48 to 48
  2638                           ; switch strategies available:
  2639                           ; Name         Instructions Cycles
  2640                           ; simple_byte            4     3 (average)
  2641                           ;	Chosen strategy is simple_byte
  2642  01007E  0A30               	xorlw	48	; case 48
  2643  010080  B4D8               	btfsc	status,2,c
  2644  010082  D7EC               	goto	l7883
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2648                           
  2649                           ; BSR set to: 0
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;doprnt.c: 595: }
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 594: break;
  2656  010084  0100               	movlb	0	; () banked
  2657  010086  C080  FFF6         	movff	sprintf@f,tblptrl
  2658  01008A  0100               	movlb	0	; () banked
  2659  01008C  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2660  010090  0E00               	movlw	low (__mediumconst shr (0+16))
  2661  010092  6EF8               	movwf	tblptru,c
  2662  010094  0008               	tblrd		*
  2663  010096  50F5               	movf	tablat,w,c
  2664  010098  ECAA  F097         	call	_isdigit
  2665  01009C  A0D8               	btfss	status,0,c
  2666  01009E  D04B               	goto	l7901
  2667                           
  2668                           ;doprnt.c: 607: width = 0;
  2669  0100A0  0E00               	movlw	0
  2670  0100A2  0100               	movlb	0	; () banked
  2671  0100A4  0100               	movlb	0	; () banked
  2672  0100A6  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  2673  0100A8  0E00               	movlw	0
  2674  0100AA  0100               	movlb	0	; () banked
  2675  0100AC  6FA8               	movwf	sprintf@width& (0+255),b
  2676  0100AE                     l7893:
  2677                           
  2678                           ;doprnt.c: 609: width *= 10;
  2679  0100AE  C0A8  F01F         	movff	sprintf@width,___wmul@multiplier
  2680  0100B2  C0A9  F020         	movff	sprintf@width+1,___wmul@multiplier+1
  2681  0100B6  0E00               	movlw	0
  2682  0100B8  6E22               	movwf	___wmul@multiplicand+1,c
  2683  0100BA  0E0A               	movlw	10
  2684  0100BC  6E21               	movwf	___wmul@multiplicand,c
  2685  0100BE  EC28  F097         	call	___wmul	;wreg free
  2686  0100C2  C01F  F0A8         	movff	?___wmul,sprintf@width
  2687  0100C6  C020  F0A9         	movff	?___wmul+1,sprintf@width+1
  2688                           
  2689                           ;doprnt.c: 610: width += *f++ - '0';
  2690  0100CA  0ED0               	movlw	208
  2691  0100CC  0100               	movlb	0	; () banked
  2692  0100CE  6F85               	movwf	??_sprintf& (0+255),b
  2693  0100D0  0EFF               	movlw	255
  2694  0100D2  6F86               	movwf	(??_sprintf+1)& (0+255),b
  2695  0100D4  0100               	movlb	0	; () banked
  2696  0100D6  C080  FFF6         	movff	sprintf@f,tblptrl
  2697  0100DA  0100               	movlb	0	; () banked
  2698  0100DC  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2699  0100E0  0E00               	movlw	low (__mediumconst shr (0+16))
  2700  0100E2  6EF8               	movwf	tblptru,c
  2701  0100E4  0008               	tblrd		*
  2702  0100E6  50F5               	movf	tablat,w,c
  2703  0100E8  0100               	movlb	0	; () banked
  2704  0100EA  6F87               	movwf	(??_sprintf+2)& (0+255),b
  2705  0100EC  6B88               	clrf	(??_sprintf+3)& (0+255),b
  2706  0100EE  0100               	movlb	0	; () banked
  2707  0100F0  5185               	movf	??_sprintf& (0+255),w,b
  2708  0100F2  0100               	movlb	0	; () banked
  2709  0100F4  2787               	addwf	(??_sprintf+2)& (0+255),f,b
  2710  0100F6  0100               	movlb	0	; () banked
  2711  0100F8  5186               	movf	(??_sprintf+1)& (0+255),w,b
  2712  0100FA  0100               	movlb	0	; () banked
  2713  0100FC  2388               	addwfc	(??_sprintf+3)& (0+255),f,b
  2714  0100FE  0100               	movlb	0	; () banked
  2715  010100  5187               	movf	(??_sprintf+2)& (0+255),w,b
  2716  010102  0100               	movlb	0	; () banked
  2717  010104  0100               	movlb	0	; () banked
  2718  010106  27A8               	addwf	sprintf@width& (0+255),f,b
  2719  010108  0100               	movlb	0	; () banked
  2720  01010A  5188               	movf	(??_sprintf+3)& (0+255),w,b
  2721  01010C  0100               	movlb	0	; () banked
  2722  01010E  0100               	movlb	0	; () banked
  2723  010110  23A9               	addwfc	(sprintf@width+1)& (0+255),f,b
  2724                           
  2725                           ; BSR set to: 0
  2726  010112  0100               	movlb	0	; () banked
  2727  010114  0100               	movlb	0	; () banked
  2728  010116  4B80               	infsnz	sprintf@f& (0+255),f,b
  2729  010118  2B81               	incf	(sprintf@f+1)& (0+255),f,b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2733  01011A  0100               	movlb	0	; () banked
  2734  01011C  C080  FFF6         	movff	sprintf@f,tblptrl
  2735  010120  0100               	movlb	0	; () banked
  2736  010122  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2737  010126  0E00               	movlw	low (__mediumconst shr (0+16))
  2738  010128  6EF8               	movwf	tblptru,c
  2739  01012A  0008               	tblrd		*
  2740  01012C  50F5               	movf	tablat,w,c
  2741  01012E  ECAA  F097         	call	_isdigit
  2742  010132  B0D8               	btfsc	status,0,c
  2743  010134  D7BC               	goto	l7893
  2744  010136                     l7901:
  2745                           
  2746                           ;doprnt.c: 617: }
  2747                           ;doprnt.c: 620: if(*f == '.') {
  2748  010136  0100               	movlb	0	; () banked
  2749  010138  C080  FFF6         	movff	sprintf@f,tblptrl
  2750  01013C  0100               	movlb	0	; () banked
  2751  01013E  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2752  010142  0E00               	movlw	low (__mediumconst shr (0+16))
  2753  010144  6EF8               	movwf	tblptru,c
  2754  010146  0008               	tblrd		*
  2755  010148  50F5               	movf	tablat,w,c
  2756  01014A  0A2E               	xorlw	46
  2757  01014C  A4D8               	btfss	status,2,c
  2758  01014E  D042               	goto	l7913
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 621: flag |= 0x4000;
  2762  010150  0100               	movlb	0	; () banked
  2763  010152  0100               	movlb	0	; () banked
  2764  010154  8DA7               	bsf	(sprintf@flag+1)& (0+255),6,b
  2765                           
  2766                           ;doprnt.c: 622: f++;
  2767  010156  0100               	movlb	0	; () banked
  2768  010158  0100               	movlb	0	; () banked
  2769  01015A  4B80               	infsnz	sprintf@f& (0+255),f,b
  2770  01015C  2B81               	incf	(sprintf@f+1)& (0+255),f,b
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;doprnt.c: 629: {
  2774                           ;doprnt.c: 630: prec = 0;
  2775  01015E  0E00               	movlw	0
  2776  010160  0100               	movlb	0	; () banked
  2777  010162  0100               	movlb	0	; () banked
  2778  010164  6FAE               	movwf	(sprintf@prec+1)& (0+255),b
  2779  010166  0E00               	movlw	0
  2780  010168  0100               	movlb	0	; () banked
  2781  01016A  6FAD               	movwf	sprintf@prec& (0+255),b
  2782                           
  2783                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2784  01016C  D024               	goto	l7911
  2785  01016E                     l7907:
  2786                           
  2787                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2788  01016E  C0AD  F01F         	movff	sprintf@prec,___wmul@multiplier
  2789  010172  C0AE  F020         	movff	sprintf@prec+1,___wmul@multiplier+1
  2790  010176  0E00               	movlw	0
  2791  010178  6E22               	movwf	___wmul@multiplicand+1,c
  2792  01017A  0E0A               	movlw	10
  2793  01017C  6E21               	movwf	___wmul@multiplicand,c
  2794  01017E  EC28  F097         	call	___wmul	;wreg free
  2795  010182  0100               	movlb	0	; () banked
  2796  010184  C080  FFF6         	movff	sprintf@f,tblptrl
  2797  010188  0100               	movlb	0	; () banked
  2798  01018A  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2799  01018E  0E00               	movlw	low (__mediumconst shr (0+16))
  2800  010190  6EF8               	movwf	tblptru,c
  2801  010192  0008               	tblrd		*
  2802  010194  50F5               	movf	tablat,w,c
  2803  010196  261F               	addwf	?___wmul,f,c
  2804  010198  0E00               	movlw	0
  2805  01019A  2220               	addwfc	?___wmul+1,f,c
  2806  01019C  0ED0               	movlw	208
  2807  01019E  241F               	addwf	?___wmul,w,c
  2808  0101A0  0100               	movlb	0	; () banked
  2809  0101A2  0100               	movlb	0	; () banked
  2810  0101A4  6FAD               	movwf	sprintf@prec& (0+255),b
  2811  0101A6  0EFF               	movlw	255
  2812  0101A8  2020               	addwfc	?___wmul+1,w,c
  2813  0101AA  0100               	movlb	0	; () banked
  2814  0101AC  6FAE               	movwf	(sprintf@prec+1)& (0+255),b
  2815                           
  2816                           ; BSR set to: 0
  2817  0101AE  0100               	movlb	0	; () banked
  2818  0101B0  0100               	movlb	0	; () banked
  2819  0101B2  4B80               	infsnz	sprintf@f& (0+255),f,b
  2820  0101B4  2B81               	incf	(sprintf@f+1)& (0+255),f,b
  2821  0101B6                     l7911:
  2822                           
  2823                           ; BSR set to: 0
  2824  0101B6  0100               	movlb	0	; () banked
  2825  0101B8  C080  FFF6         	movff	sprintf@f,tblptrl
  2826  0101BC  0100               	movlb	0	; () banked
  2827  0101BE  C081  FFF7         	movff	sprintf@f+1,tblptrh
  2828  0101C2  0E00               	movlw	low (__mediumconst shr (0+16))
  2829  0101C4  6EF8               	movwf	tblptru,c
  2830  0101C6  0008               	tblrd		*
  2831  0101C8  50F5               	movf	tablat,w,c
  2832  0101CA  ECAA  F097         	call	_isdigit
  2833  0101CE  A0D8               	btfss	status,0,c
  2834  0101D0  D010               	goto	l7921
  2835  0101D2  D7CD               	goto	l7907
  2836  0101D4                     l7913:
  2837                           
  2838                           ;doprnt.c: 635: prec = 0;
  2839  0101D4  0E00               	movlw	0
  2840  0101D6  0100               	movlb	0	; () banked
  2841  0101D8  0100               	movlb	0	; () banked
  2842  0101DA  6FAE               	movwf	(sprintf@prec+1)& (0+255),b
  2843  0101DC  0E00               	movlw	0
  2844  0101DE  0100               	movlb	0	; () banked
  2845  0101E0  6FAD               	movwf	sprintf@prec& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;doprnt.c: 637: flag |= 0x1000;
  2849  0101E2  0100               	movlb	0	; () banked
  2850  0101E4  0100               	movlb	0	; () banked
  2851  0101E6  89A7               	bsf	(sprintf@flag+1)& (0+255),4,b
  2852  0101E8  D004               	goto	l7921
  2853  0101EA                     l7917:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;doprnt.c: 672: flag |= 0x400;
  2857  0101EA  0100               	movlb	0	; () banked
  2858  0101EC  0100               	movlb	0	; () banked
  2859  0101EE  85A7               	bsf	(sprintf@flag+1)& (0+255),2,b
  2860                           
  2861                           ;doprnt.c: 673: break;
  2862  0101F0  D027               	goto	l7923
  2863  0101F2                     l7921:
  2864  0101F2  0100               	movlb	0	; () banked
  2865  0101F4  0100               	movlb	0	; () banked
  2866  0101F6  5180               	movf	sprintf@f& (0+255),w,b
  2867  0101F8  0100               	movlb	0	; () banked
  2868  0101FA  6F85               	movwf	??_sprintf& (0+255),b
  2869  0101FC  0100               	movlb	0	; () banked
  2870  0101FE  0100               	movlb	0	; () banked
  2871  010200  5181               	movf	(sprintf@f+1)& (0+255),w,b
  2872  010202  0100               	movlb	0	; () banked
  2873  010204  6F86               	movwf	(??_sprintf+1)& (0+255),b
  2874  010206  0100               	movlb	0	; () banked
  2875  010208  4B80               	infsnz	sprintf@f& (0+255),f,b
  2876  01020A  2B81               	incf	(sprintf@f+1)& (0+255),f,b
  2877  01020C  C085  FFF6         	movff	??_sprintf,tblptrl
  2878  010210  C086  FFF7         	movff	??_sprintf+1,tblptrh
  2879  010214  0E00               	movlw	low (__mediumconst shr (0+16))
  2880  010216  6EF8               	movwf	tblptru,c
  2881  010218  0008               	tblrd		*
  2882  01021A  0100               	movlb	0	; () banked
  2883  01021C  CFF5 F0AF          	movff	tablat,sprintf@c
  2884  010220  0100               	movlb	0	; () banked
  2885  010222  51AF               	movf	sprintf@c& (0+255),w,b
  2886                           
  2887                           ; Switch size 1, requested type "space"
  2888                           ; Number of cases is 4, Range of values is 0 to 105
  2889                           ; switch strategies available:
  2890                           ; Name         Instructions Cycles
  2891                           ; simple_byte           13     7 (average)
  2892                           ;	Chosen strategy is simple_byte
  2893  010224  0A00               	xorlw	0	; case 0
  2894  010226  B4D8               	btfsc	status,2,c
  2895  010228  EF4E  F087         	goto	l8205
  2896  01022C  0A64               	xorlw	100	; case 100
  2897  01022E  B4D8               	btfsc	status,2,c
  2898  010230  D007               	goto	l7923
  2899  010232  0A02               	xorlw	2	; case 102
  2900  010234  B4D8               	btfsc	status,2,c
  2901  010236  D7D9               	goto	l7917
  2902  010238  0A0F               	xorlw	15	; case 105
  2903  01023A  A4D8               	btfss	status,2,c
  2904  01023C  EF33  F087         	goto	l8203
  2905  010240                     l7923:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;doprnt.c: 834: if(flag & (0x700)) {
  2909  010240  0E07               	movlw	7
  2910  010242  0100               	movlb	0	; () banked
  2911  010244  0100               	movlb	0	; () banked
  2912  010246  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  2913  010248  B4D8               	btfsc	status,2,c
  2914  01024A  EF3B  F085         	goto	l8107
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;doprnt.c: 836: if(flag & 0x1000)
  2918  01024E  0100               	movlb	0	; () banked
  2919  010250  0100               	movlb	0	; () banked
  2920  010252  A9A7               	btfss	(sprintf@flag+1)& (0+255),4,b
  2921  010254  D007               	goto	l7929
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;doprnt.c: 838: prec = 6;
  2925  010256  0E00               	movlw	0
  2926  010258  0100               	movlb	0	; () banked
  2927  01025A  0100               	movlb	0	; () banked
  2928  01025C  6FAE               	movwf	(sprintf@prec+1)& (0+255),b
  2929  01025E  0E06               	movlw	6
  2930  010260  0100               	movlb	0	; () banked
  2931  010262  6FAD               	movwf	sprintf@prec& (0+255),b
  2932  010264                     l7929:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2936  010264  C09A  FFD9         	movff	sprintf@ap,fsr2l
  2937  010268  C09B  FFDA         	movff	sprintf@ap+1,fsr2h
  2938  01026C  0100               	movlb	0	; () banked
  2939  01026E  CFDE F0AA          	movff	postinc2,sprintf@fval
  2940  010272  0100               	movlb	0	; () banked
  2941  010274  CFDE F0AB          	movff	postinc2,sprintf@fval+1
  2942  010278  0100               	movlb	0	; () banked
  2943  01027A  CFDD F0AC          	movff	postdec2,sprintf@fval+2
  2944                           
  2945                           ; BSR set to: 0
  2946  01027E  0E03               	movlw	3
  2947  010280  0100               	movlb	0	; () banked
  2948  010282  0100               	movlb	0	; () banked
  2949  010284  279A               	addwf	sprintf@ap& (0+255),f,b
  2950  010286  0E00               	movlw	0
  2951  010288  0100               	movlb	0	; () banked
  2952  01028A  239B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;doprnt.c: 840: if(fval < 0.0) {
  2956  01028C  0100               	movlb	0	; () banked
  2957  01028E  0100               	movlb	0	; () banked
  2958  010290  51AC               	movf	(sprintf@fval+2)& (0+255),w,b
  2959  010292  0A80               	xorlw	128
  2960  010294  0F80               	addlw	128
  2961  010296  E107               	bnz	u6115
  2962  010298  0E00               	movlw	0
  2963  01029A  0100               	movlb	0	; () banked
  2964  01029C  5DAB               	subwf	(sprintf@fval+1)& (0+255),w,b
  2965  01029E  E103               	bnz	u6115
  2966  0102A0  0E00               	movlw	0
  2967  0102A2  0100               	movlb	0	; () banked
  2968  0102A4  5DAA               	subwf	sprintf@fval& (0+255),w,b
  2969  0102A6                     u6115:
  2970  0102A6  B0D8               	btfsc	status,0,c
  2971  0102A8  D012               	goto	l7939
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;doprnt.c: 841: fval = -fval;
  2975  0102AA  C0AA  F00F         	movff	sprintf@fval,___ftneg@f1
  2976  0102AE  C0AB  F010         	movff	sprintf@fval+1,___ftneg@f1+1
  2977  0102B2  C0AC  F011         	movff	sprintf@fval+2,___ftneg@f1+2
  2978  0102B6  ECBF  F097         	call	___ftneg	;wreg free
  2979  0102BA  C00F  F0AA         	movff	?___ftneg,sprintf@fval
  2980  0102BE  C010  F0AB         	movff	?___ftneg+1,sprintf@fval+1
  2981  0102C2  C011  F0AC         	movff	?___ftneg+2,sprintf@fval+2
  2982                           
  2983                           ;doprnt.c: 842: flag |= 0x03;
  2984  0102C6  0E03               	movlw	3
  2985  0102C8  0100               	movlb	0	; () banked
  2986  0102CA  0100               	movlb	0	; () banked
  2987  0102CC  13A6               	iorwf	sprintf@flag& (0+255),f,b
  2988  0102CE                     l7939:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;doprnt.c: 843: }
  2992                           ;doprnt.c: 844: exp = 0;
  2993  0102CE  0E00               	movlw	0
  2994  0102D0  0100               	movlb	0	; () banked
  2995  0102D2  0100               	movlb	0	; () banked
  2996  0102D4  6FA5               	movwf	(sprintf@exp+1)& (0+255),b
  2997  0102D6  0E00               	movlw	0
  2998  0102D8  0100               	movlb	0	; () banked
  2999  0102DA  6FA4               	movwf	sprintf@exp& (0+255),b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;doprnt.c: 845: if( fval!=0) {
  3003  0102DC  0E7F               	movlw	127
  3004  0102DE  0100               	movlb	0	; () banked
  3005  0102E0  0100               	movlb	0	; () banked
  3006  0102E2  15AC               	andwf	(sprintf@fval+2)& (0+255),w,b
  3007  0102E4  0100               	movlb	0	; () banked
  3008  0102E6  11AB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3009  0102E8  0100               	movlb	0	; () banked
  3010  0102EA  11AA               	iorwf	sprintf@fval& (0+255),w,b
  3011  0102EC  B4D8               	btfsc	status,2,c
  3012  0102EE  D09D               	goto	l7967
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3016  0102F0  0E82               	movlw	130
  3017  0102F2  0100               	movlb	0	; () banked
  3018  0102F4  6F85               	movwf	??_sprintf& (0+255),b
  3019  0102F6  0EFF               	movlw	255
  3020  0102F8  6F86               	movwf	(??_sprintf+1)& (0+255),b
  3021  0102FA  0100               	movlb	0	; () banked
  3022  0102FC  C0AA  F087         	movff	sprintf@fval,??_sprintf+2
  3023  010300  0100               	movlb	0	; () banked
  3024  010302  C0AB  F088         	movff	sprintf@fval+1,??_sprintf+3
  3025  010306  0100               	movlb	0	; () banked
  3026  010308  C0AC  F089         	movff	sprintf@fval+2,??_sprintf+4
  3027  01030C  0100               	movlb	0	; () banked
  3028  01030E  C0AD  F08A         	movff	sprintf@fval+3,??_sprintf+5
  3029  010312  0E10               	movlw	16
  3030  010314  D006               	goto	u6130
  3031  010316                     u6135:
  3032  010316  0100               	movlb	0	; () banked
  3033  010318  90D8               	bcf	status,0,c
  3034  01031A  338A               	rrcf	(??_sprintf+5)& (0+255),f,b
  3035  01031C  3389               	rrcf	(??_sprintf+4)& (0+255),f,b
  3036  01031E  3388               	rrcf	(??_sprintf+3)& (0+255),f,b
  3037  010320  3387               	rrcf	(??_sprintf+2)& (0+255),f,b
  3038  010322                     u6130:
  3039  010322  2EE8               	decfsz	wreg,f,c
  3040  010324  D7F8               	goto	u6135
  3041  010326  0100               	movlb	0	; () banked
  3042  010328  5187               	movf	(??_sprintf+2)& (0+255),w,b
  3043  01032A  0100               	movlb	0	; () banked
  3044  01032C  2585               	addwf	??_sprintf& (0+255),w,b
  3045  01032E  0100               	movlb	0	; () banked
  3046  010330  0100               	movlb	0	; () banked
  3047  010332  6FA4               	movwf	sprintf@exp& (0+255),b
  3048  010334  0100               	movlb	0	; () banked
  3049  010336  0100               	movlb	0	; () banked
  3050  010338  0E00               	movlw	0
  3051  01033A  2186               	addwfc	(??_sprintf+1)& (0+255),w,b
  3052  01033C  6FA5               	movwf	(sprintf@exp+1)& (0+255),b
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;doprnt.c: 847: exp--;
  3056  01033E  0100               	movlb	0	; () banked
  3057  010340  0100               	movlb	0	; () banked
  3058  010342  07A4               	decf	sprintf@exp& (0+255),f,b
  3059  010344  A0D8               	btfss	status,0,c
  3060  010346  07A5               	decf	(sprintf@exp+1)& (0+255),f,b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;doprnt.c: 848: exp *= 3;
  3064  010348  C0A4  F01F         	movff	sprintf@exp,___wmul@multiplier
  3065  01034C  C0A5  F020         	movff	sprintf@exp+1,___wmul@multiplier+1
  3066  010350  0E00               	movlw	0
  3067  010352  6E22               	movwf	___wmul@multiplicand+1,c
  3068  010354  0E03               	movlw	3
  3069  010356  6E21               	movwf	___wmul@multiplicand,c
  3070  010358  EC28  F097         	call	___wmul	;wreg free
  3071  01035C  C01F  F0A4         	movff	?___wmul,sprintf@exp
  3072  010360  C020  F0A5         	movff	?___wmul+1,sprintf@exp+1
  3073                           
  3074                           ;doprnt.c: 849: exp /= 10;
  3075  010364  C0A4  F016         	movff	sprintf@exp,___awdiv@dividend
  3076  010368  C0A5  F017         	movff	sprintf@exp+1,___awdiv@dividend+1
  3077  01036C  0E00               	movlw	0
  3078  01036E  6E19               	movwf	___awdiv@divisor+1,c
  3079  010370  0E0A               	movlw	10
  3080  010372  6E18               	movwf	___awdiv@divisor,c
  3081  010374  EC2E  F093         	call	___awdiv	;wreg free
  3082  010378  C016  F0A4         	movff	?___awdiv,sprintf@exp
  3083  01037C  C017  F0A5         	movff	?___awdiv+1,sprintf@exp+1
  3084                           
  3085                           ;doprnt.c: 850: if(exp < 0)
  3086  010380  0100               	movlb	0	; () banked
  3087  010382  0100               	movlb	0	; () banked
  3088  010384  51A5               	movf	(sprintf@exp+1)& (0+255),w,b
  3089  010386  0A80               	xorlw	128
  3090  010388  6EF3               	movwf	prodl,c
  3091  01038A  0E80               	movlw	128
  3092  01038C  5CF3               	subwf	prodl,w,c
  3093  01038E  0E00               	movlw	0
  3094  010390  B4D8               	btfsc	status,2,c
  3095  010392  5DA4               	subwf	sprintf@exp& (0+255),w,b
  3096  010394  B0D8               	btfsc	status,0,c
  3097  010396  D005               	goto	l7955
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;doprnt.c: 851: exp--;
  3101  010398  0100               	movlb	0	; () banked
  3102  01039A  0100               	movlb	0	; () banked
  3103  01039C  07A4               	decf	sprintf@exp& (0+255),f,b
  3104  01039E  A0D8               	btfss	status,0,c
  3105  0103A0  07A5               	decf	(sprintf@exp+1)& (0+255),f,b
  3106  0103A2                     l7955:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 855: integ = scale(-exp);
  3110  0103A2  0100               	movlb	0	; () banked
  3111  0103A4  0100               	movlb	0	; () banked
  3112  0103A6  51A4               	movf	sprintf@exp& (0+255),w,b
  3113  0103A8  0800               	sublw	0
  3114  0103AA  EC55  F087         	call	_scale
  3115  0103AE  C034  F09C         	movff	?_scale,sprintf@integ
  3116  0103B2  C035  F09D         	movff	?_scale+1,sprintf@integ+1
  3117  0103B6  C036  F09E         	movff	?_scale+2,sprintf@integ+2
  3118                           
  3119                           ;doprnt.c: 856: integ *= fval;
  3120  0103BA  0100               	movlb	0	; () banked
  3121  0103BC  0E00               	movlw	high sprintf@integ
  3122  0103BE  6E35               	movwf	___asftmul@f1p+1,c
  3123  0103C0  0100               	movlb	0	; () banked
  3124  0103C2  0E9C               	movlw	low sprintf@integ
  3125  0103C4  6E34               	movwf	___asftmul@f1p,c
  3126  0103C6  C0AA  F036         	movff	sprintf@fval,___asftmul@f2
  3127  0103CA  C0AB  F037         	movff	sprintf@fval+1,___asftmul@f2+1
  3128  0103CE  C0AC  F038         	movff	sprintf@fval+2,___asftmul@f2+2
  3129  0103D2  ECCE  F096         	call	___asftmul	;wreg free
  3130                           
  3131                           ;doprnt.c: 857: if(integ < 1.0)
  3132  0103D6  C09C  F01C         	movff	sprintf@integ,___ftge@ff1
  3133  0103DA  C09D  F01D         	movff	sprintf@integ+1,___ftge@ff1+1
  3134  0103DE  C09E  F01E         	movff	sprintf@integ+2,___ftge@ff1+2
  3135  0103E2  0E00               	movlw	0
  3136  0103E4  6E1F               	movwf	___ftge@ff2,c
  3137  0103E6  0E80               	movlw	128
  3138  0103E8  6E20               	movwf	___ftge@ff2+1,c
  3139  0103EA  0E3F               	movlw	63
  3140  0103EC  6E21               	movwf	___ftge@ff2+2,c
  3141  0103EE  EC28  F094         	call	___ftge	;wreg free
  3142  0103F2  B0D8               	btfsc	status,0,c
  3143  0103F4  D006               	goto	l7963
  3144                           
  3145                           ;doprnt.c: 858: exp--;
  3146  0103F6  0100               	movlb	0	; () banked
  3147  0103F8  0100               	movlb	0	; () banked
  3148  0103FA  07A4               	decf	sprintf@exp& (0+255),f,b
  3149  0103FC  A0D8               	btfss	status,0,c
  3150  0103FE  07A5               	decf	(sprintf@exp+1)& (0+255),f,b
  3151  010400  D014               	goto	l7967
  3152  010402                     l7963:
  3153                           
  3154                           ;doprnt.c: 859: else if(integ >= 10.0)
  3155  010402  C09C  F01C         	movff	sprintf@integ,___ftge@ff1
  3156  010406  C09D  F01D         	movff	sprintf@integ+1,___ftge@ff1+1
  3157  01040A  C09E  F01E         	movff	sprintf@integ+2,___ftge@ff1+2
  3158  01040E  0E00               	movlw	0
  3159  010410  6E1F               	movwf	___ftge@ff2,c
  3160  010412  0E20               	movlw	32
  3161  010414  6E20               	movwf	___ftge@ff2+1,c
  3162  010416  0E41               	movlw	65
  3163  010418  6E21               	movwf	___ftge@ff2+2,c
  3164  01041A  EC28  F094         	call	___ftge	;wreg free
  3165  01041E  A0D8               	btfss	status,0,c
  3166  010420  D004               	goto	l7967
  3167                           
  3168                           ;doprnt.c: 860: exp++;
  3169  010422  0100               	movlb	0	; () banked
  3170  010424  0100               	movlb	0	; () banked
  3171  010426  4BA4               	infsnz	sprintf@exp& (0+255),f,b
  3172  010428  2BA5               	incf	(sprintf@exp+1)& (0+255),f,b
  3173  01042A                     l7967:
  3174                           
  3175                           ;doprnt.c: 861: }
  3176                           ;doprnt.c: 1121: if(prec <= 12)
  3177  01042A  0100               	movlb	0	; () banked
  3178  01042C  0100               	movlb	0	; () banked
  3179  01042E  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  3180  010430  0A80               	xorlw	128
  3181  010432  6EF3               	movwf	prodl,c
  3182  010434  0E80               	movlw	128
  3183  010436  5CF3               	subwf	prodl,w,c
  3184  010438  0E0D               	movlw	13
  3185  01043A  B4D8               	btfsc	status,2,c
  3186  01043C  5DAD               	subwf	sprintf@prec& (0+255),w,b
  3187  01043E  B0D8               	btfsc	status,0,c
  3188  010440  D013               	goto	l7971
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;doprnt.c: 1122: fval += fround(prec);
  3192  010442  0100               	movlb	0	; () banked
  3193  010444  0E00               	movlw	high sprintf@fval
  3194  010446  6E41               	movwf	___asftadd@f1p+1,c
  3195  010448  0100               	movlb	0	; () banked
  3196  01044A  0EAA               	movlw	low sprintf@fval
  3197  01044C  6E40               	movwf	___asftadd@f1p,c
  3198  01044E  0100               	movlb	0	; () banked
  3199  010450  0100               	movlb	0	; () banked
  3200  010452  51AD               	movf	sprintf@prec& (0+255),w,b
  3201  010454  EC7E  F089         	call	_fround
  3202  010458  C034  F042         	movff	?_fround,___asftadd@f2
  3203  01045C  C035  F043         	movff	?_fround+1,___asftadd@f2+1
  3204  010460  C036  F044         	movff	?_fround+2,___asftadd@f2+2
  3205  010464  ECEC  F096         	call	___asftadd	;wreg free
  3206  010468                     l7971:
  3207                           
  3208                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3209  010468  0100               	movlb	0	; () banked
  3210  01046A  0100               	movlb	0	; () banked
  3211  01046C  51A5               	movf	(sprintf@exp+1)& (0+255),w,b
  3212  01046E  0A80               	xorlw	128
  3213  010470  6EF3               	movwf	prodl,c
  3214  010472  0E80               	movlw	128
  3215  010474  5CF3               	subwf	prodl,w,c
  3216  010476  0E0A               	movlw	10
  3217  010478  B4D8               	btfsc	status,2,c
  3218  01047A  5DA4               	subwf	sprintf@exp& (0+255),w,b
  3219  01047C  B0D8               	btfsc	status,0,c
  3220  01047E  D02B               	goto	l7979
  3221                           
  3222                           ; BSR set to: 0
  3223  010480  0E7F               	movlw	127
  3224  010482  0100               	movlb	0	; () banked
  3225  010484  0100               	movlb	0	; () banked
  3226  010486  15AC               	andwf	(sprintf@fval+2)& (0+255),w,b
  3227  010488  0100               	movlb	0	; () banked
  3228  01048A  11AB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3229  01048C  0100               	movlb	0	; () banked
  3230  01048E  11AA               	iorwf	sprintf@fval& (0+255),w,b
  3231  010490  B4D8               	btfsc	status,2,c
  3232  010492  D071               	goto	l7995
  3233                           
  3234                           ; BSR set to: 0
  3235  010494  C0AA  F03B         	movff	sprintf@fval,___fttol@f1
  3236  010498  C0AB  F03C         	movff	sprintf@fval+1,___fttol@f1+1
  3237  01049C  C0AC  F03D         	movff	sprintf@fval+2,___fttol@f1+2
  3238  0104A0  EC8D  F091         	call	___fttol	;wreg free
  3239  0104A4  C03B  F085         	movff	?___fttol,??_sprintf
  3240  0104A8  C03C  F086         	movff	?___fttol+1,??_sprintf+1
  3241  0104AC  C03D  F087         	movff	?___fttol+2,??_sprintf+2
  3242  0104B0  C03E  F088         	movff	?___fttol+3,??_sprintf+3
  3243  0104B4  0100               	movlb	0	; () banked
  3244  0104B6  5188               	movf	(??_sprintf+3)& (0+255),w,b
  3245  0104B8  1185               	iorwf	??_sprintf& (0+255),w,b
  3246  0104BA  1186               	iorwf	(??_sprintf+1)& (0+255),w,b
  3247  0104BC  1187               	iorwf	(??_sprintf+2)& (0+255),w,b
  3248  0104BE  A4D8               	btfss	status,2,c
  3249  0104C0  D05A               	goto	l7995
  3250                           
  3251                           ; BSR set to: 0
  3252  0104C2  0100               	movlb	0	; () banked
  3253  0104C4  0100               	movlb	0	; () banked
  3254  0104C6  51A5               	movf	(sprintf@exp+1)& (0+255),w,b
  3255  0104C8  0A80               	xorlw	128
  3256  0104CA  0F80               	addlw	-128
  3257  0104CC  0E02               	movlw	2
  3258  0104CE  B4D8               	btfsc	status,2,c
  3259  0104D0  5DA4               	subwf	sprintf@exp& (0+255),w,b
  3260  0104D2  A0D8               	btfss	status,0,c
  3261  0104D4  D050               	goto	l7995
  3262  0104D6                     l7979:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;doprnt.c: 1129: if(integ < 4.294967296){
  3266  0104D6  C09C  F01C         	movff	sprintf@integ,___ftge@ff1
  3267  0104DA  C09D  F01D         	movff	sprintf@integ+1,___ftge@ff1+1
  3268  0104DE  C09E  F01E         	movff	sprintf@integ+2,___ftge@ff1+2
  3269  0104E2  0E70               	movlw	112
  3270  0104E4  6E1F               	movwf	___ftge@ff2,c
  3271  0104E6  0E89               	movlw	137
  3272  0104E8  6E20               	movwf	___ftge@ff2+1,c
  3273  0104EA  0E40               	movlw	64
  3274  0104EC  6E21               	movwf	___ftge@ff2+2,c
  3275  0104EE  EC28  F094         	call	___ftge	;wreg free
  3276  0104F2  B0D8               	btfsc	status,0,c
  3277  0104F4  D003               	goto	l7983
  3278                           
  3279                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3280  0104F6  0100               	movlb	0	; () banked
  3281  0104F8  0EF7               	movlw	247
  3282  0104FA  D002               	goto	L6
  3283  0104FC                     l7983:
  3284                           
  3285                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3286  0104FC  0100               	movlb	0	; () banked
  3287  0104FE  0EF8               	movlw	248
  3288  010500                     L6:
  3289  010500  0100               	movlb	0	; () banked
  3290  010502  27A4               	addwf	sprintf@exp& (0+255),f,b
  3291  010504  0EFF               	movlw	255
  3292  010506  0100               	movlb	0	; () banked
  3293  010508  23A5               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;doprnt.c: 1133: }
  3297                           ;doprnt.c: 1134: integ = scale(exp);
  3298                           
  3299                           ; BSR set to: 0
  3300  01050A  0100               	movlb	0	; () banked
  3301  01050C  0100               	movlb	0	; () banked
  3302  01050E  51A4               	movf	sprintf@exp& (0+255),w,b
  3303  010510  EC55  F087         	call	_scale
  3304  010514  C034  F09C         	movff	?_scale,sprintf@integ
  3305  010518  C035  F09D         	movff	?_scale+1,sprintf@integ+1
  3306  01051C  C036  F09E         	movff	?_scale+2,sprintf@integ+2
  3307                           
  3308                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3309  010520  C0AA  F00F         	movff	sprintf@fval,__tdiv_to_l_@f1
  3310  010524  C0AB  F010         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3311  010528  C0AC  F011         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3312  01052C  C09C  F012         	movff	sprintf@integ,__tdiv_to_l_@f2
  3313  010530  C09D  F013         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  3314  010534  C09E  F014         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  3315  010538  EC46  F08E         	call	__tdiv_to_l_	;wreg free
  3316  01053C  C00F  F08E         	movff	?__tdiv_to_l_,_sprintf$1885
  3317  010540  C010  F08F         	movff	?__tdiv_to_l_+1,_sprintf$1885+1
  3318  010544  C011  F090         	movff	?__tdiv_to_l_+2,_sprintf$1885+2
  3319  010548  C012  F091         	movff	?__tdiv_to_l_+3,_sprintf$1885+3
  3320  01054C  C08E  F09F         	movff	_sprintf$1885,sprintf@_val
  3321  010550  C08F  F0A0         	movff	_sprintf$1885+1,sprintf@_val+1
  3322  010554  C090  F0A1         	movff	_sprintf$1885+2,sprintf@_val+2
  3323  010558  C091  F0A2         	movff	_sprintf$1885+3,sprintf@_val+3
  3324                           
  3325                           ;doprnt.c: 1138: fval = 0.0;
  3326  01055C  0E00               	movlw	0
  3327  01055E  0100               	movlb	0	; () banked
  3328  010560  0100               	movlb	0	; () banked
  3329  010562  6FAA               	movwf	sprintf@fval& (0+255),b
  3330  010564  0E00               	movlw	0
  3331  010566  0100               	movlb	0	; () banked
  3332  010568  0100               	movlb	0	; () banked
  3333  01056A  6FAB               	movwf	(sprintf@fval+1)& (0+255),b
  3334  01056C  0E00               	movlw	0
  3335  01056E  0100               	movlb	0	; () banked
  3336  010570  0100               	movlb	0	; () banked
  3337  010572  6FAC               	movwf	(sprintf@fval+2)& (0+255),b
  3338                           
  3339                           ;doprnt.c: 1139: } else {
  3340  010574  D02F               	goto	l8001
  3341  010576                     l7995:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3345  010576  C0AA  F03B         	movff	sprintf@fval,___fttol@f1
  3346  01057A  C0AB  F03C         	movff	sprintf@fval+1,___fttol@f1+1
  3347  01057E  C0AC  F03D         	movff	sprintf@fval+2,___fttol@f1+2
  3348  010582  EC8D  F091         	call	___fttol	;wreg free
  3349  010586  C03B  F09F         	movff	?___fttol,sprintf@_val
  3350  01058A  C03C  F0A0         	movff	?___fttol+1,sprintf@_val+1
  3351  01058E  C03D  F0A1         	movff	?___fttol+2,sprintf@_val+2
  3352  010592  C03E  F0A2         	movff	?___fttol+3,sprintf@_val+3
  3353                           
  3354                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3355  010596  0100               	movlb	0	; () banked
  3356  010598  0E00               	movlw	high sprintf@fval
  3357  01059A  6E47               	movwf	___asftsub@f1p+1,c
  3358  01059C  0100               	movlb	0	; () banked
  3359  01059E  0EAA               	movlw	low sprintf@fval
  3360  0105A0  6E46               	movwf	___asftsub@f1p,c
  3361  0105A2  C09F  F017         	movff	sprintf@_val,___lltoft@c
  3362  0105A6  C0A0  F018         	movff	sprintf@_val+1,___lltoft@c+1
  3363  0105AA  C0A1  F019         	movff	sprintf@_val+2,___lltoft@c+2
  3364  0105AE  C0A2  F01A         	movff	sprintf@_val+3,___lltoft@c+3
  3365  0105B2  EC68  F095         	call	___lltoft	;wreg free
  3366  0105B6  C017  F048         	movff	?___lltoft,___asftsub@f2
  3367  0105BA  C018  F049         	movff	?___lltoft+1,___asftsub@f2+1
  3368  0105BE  C019  F04A         	movff	?___lltoft+2,___asftsub@f2+2
  3369  0105C2  ECB0  F096         	call	___asftsub	;wreg free
  3370                           
  3371                           ;doprnt.c: 1142: exp = 0;
  3372  0105C6  0E00               	movlw	0
  3373  0105C8  0100               	movlb	0	; () banked
  3374  0105CA  0100               	movlb	0	; () banked
  3375  0105CC  6FA5               	movwf	(sprintf@exp+1)& (0+255),b
  3376  0105CE  0E00               	movlw	0
  3377  0105D0  0100               	movlb	0	; () banked
  3378  0105D2  6FA4               	movwf	sprintf@exp& (0+255),b
  3379  0105D4                     l8001:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 1143: }
  3383                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3384  0105D4  0100               	movlb	0	; () banked
  3385  0105D6  6F85               	movwf	??_sprintf& (0+255),b
  3386  0105D8  0E01               	movlw	1
  3387  0105DA  0100               	movlb	0	; () banked
  3388  0105DC  0100               	movlb	0	; () banked
  3389  0105DE  6FAF               	movwf	sprintf@c& (0+255),b
  3390  0105E0  0100               	movlb	0	; () banked
  3391  0105E2  5185               	movf	??_sprintf& (0+255),w,b
  3392  0105E4                     
  3393                           ; BSR set to: 0
  3394  0105E4  0100               	movlb	0	; () banked
  3395  0105E6  0100               	movlb	0	; () banked
  3396  0105E8  51AF               	movf	sprintf@c& (0+255),w,b
  3397  0105EA  0A0A               	xorlw	10
  3398  0105EC  B4D8               	btfsc	status,2,c
  3399  0105EE  D024               	goto	l8015
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3403                           
  3404                           ; BSR set to: 0
  3405                           
  3406                           ; BSR set to: 0
  3407  0105F0  0100               	movlb	0	; () banked
  3408  0105F2  0100               	movlb	0	; () banked
  3409  0105F4  51AF               	movf	sprintf@c& (0+255),w,b
  3410  0105F6  0D04               	mullw	4
  3411  0105F8  0E59               	movlw	low _dpowers
  3412  0105FA  24F3               	addwf	prodl,w,c
  3413  0105FC  6EF6               	movwf	tblptrl,c
  3414  0105FE  0EFE               	movlw	high _dpowers
  3415  010600  20F4               	addwfc	prodh,w,c
  3416  010602  6EF7               	movwf	tblptrh,c
  3417  010604  6AF8               	clrf	tblptru,c
  3418  010606  0E00               	movlw	low (__mediumconst shr (0+16))
  3419  010608  22F8               	addwfc	tblptru,f,c
  3420  01060A  0009               	tblrd		*+
  3421  01060C  50F5               	movf	tablat,w,c
  3422  01060E  0100               	movlb	0	; () banked
  3423  010610  0100               	movlb	0	; () banked
  3424  010612  5D9F               	subwf	sprintf@_val& (0+255),w,b
  3425  010614  0009               	tblrd		*+
  3426  010616  50F5               	movf	tablat,w,c
  3427  010618  0100               	movlb	0	; () banked
  3428  01061A  59A0               	subwfb	(sprintf@_val+1)& (0+255),w,b
  3429  01061C  0009               	tblrd		*+
  3430  01061E  50F5               	movf	tablat,w,c
  3431  010620  0100               	movlb	0	; () banked
  3432  010622  59A1               	subwfb	(sprintf@_val+2)& (0+255),w,b
  3433  010624  0009               	tblrd		*+
  3434  010626  50F5               	movf	tablat,w,c
  3435  010628  0100               	movlb	0	; () banked
  3436  01062A  59A2               	subwfb	(sprintf@_val+3)& (0+255),w,b
  3437  01062C  A0D8               	btfss	status,0,c
  3438  01062E  D004               	goto	l8015
  3439                           
  3440                           ; BSR set to: 0
  3441                           
  3442                           ; BSR set to: 0
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;doprnt.c: 1147: break;
  3446  010630  0100               	movlb	0	; () banked
  3447  010632  0100               	movlb	0	; () banked
  3448  010634  2BAF               	incf	sprintf@c& (0+255),f,b
  3449  010636  D7D6               	goto	L7
  3450  010638                     l8015:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;doprnt.c: 1151: width -= prec + c + exp;
  3454  010638  0100               	movlb	0	; () banked
  3455  01063A  C0AF  F085         	movff	sprintf@c,??_sprintf
  3456  01063E  0100               	movlb	0	; () banked
  3457  010640  6B86               	clrf	(??_sprintf+1)& (0+255),b
  3458  010642  BF85               	btfsc	??_sprintf& (0+255),7,b
  3459  010644  0786               	decf	(??_sprintf+1)& (0+255),f,b
  3460  010646  0100               	movlb	0	; () banked
  3461  010648  0100               	movlb	0	; () banked
  3462  01064A  51AD               	movf	sprintf@prec& (0+255),w,b
  3463  01064C  0100               	movlb	0	; () banked
  3464  01064E  2785               	addwf	??_sprintf& (0+255),f,b
  3465  010650  0100               	movlb	0	; () banked
  3466  010652  0100               	movlb	0	; () banked
  3467  010654  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  3468  010656  0100               	movlb	0	; () banked
  3469  010658  2386               	addwfc	(??_sprintf+1)& (0+255),f,b
  3470  01065A  0100               	movlb	0	; () banked
  3471  01065C  0100               	movlb	0	; () banked
  3472  01065E  51A4               	movf	sprintf@exp& (0+255),w,b
  3473  010660  0100               	movlb	0	; () banked
  3474  010662  2785               	addwf	??_sprintf& (0+255),f,b
  3475  010664  0100               	movlb	0	; () banked
  3476  010666  0100               	movlb	0	; () banked
  3477  010668  51A5               	movf	(sprintf@exp+1)& (0+255),w,b
  3478  01066A  0100               	movlb	0	; () banked
  3479  01066C  2386               	addwfc	(??_sprintf+1)& (0+255),f,b
  3480  01066E  0100               	movlb	0	; () banked
  3481  010670  5185               	movf	??_sprintf& (0+255),w,b
  3482  010672  0100               	movlb	0	; () banked
  3483  010674  0100               	movlb	0	; () banked
  3484  010676  5FA8               	subwf	sprintf@width& (0+255),f,b
  3485  010678  0100               	movlb	0	; () banked
  3486  01067A  5186               	movf	(??_sprintf+1)& (0+255),w,b
  3487  01067C  0100               	movlb	0	; () banked
  3488  01067E  0100               	movlb	0	; () banked
  3489  010680  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3490                           
  3491                           ;doprnt.c: 1152: if(
  3492                           ;doprnt.c: 1156: prec)
  3493  010682  0100               	movlb	0	; () banked
  3494  010684  0100               	movlb	0	; () banked
  3495  010686  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  3496  010688  11AD               	iorwf	sprintf@prec& (0+255),w,b
  3497  01068A  B4D8               	btfsc	status,2,c
  3498  01068C  D005               	goto	l8019
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;doprnt.c: 1157: width--;
  3502  01068E  0100               	movlb	0	; () banked
  3503  010690  0100               	movlb	0	; () banked
  3504  010692  07A8               	decf	sprintf@width& (0+255),f,b
  3505  010694  A0D8               	btfss	status,0,c
  3506  010696  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3507  010698                     l8019:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;doprnt.c: 1158: if(flag & 0x03)
  3511  010698  0E03               	movlw	3
  3512  01069A  0100               	movlb	0	; () banked
  3513  01069C  0100               	movlb	0	; () banked
  3514  01069E  15A6               	andwf	sprintf@flag& (0+255),w,b
  3515  0106A0  0100               	movlb	0	; () banked
  3516  0106A2  6F85               	movwf	??_sprintf& (0+255),b
  3517  0106A4  0E00               	movlw	0
  3518  0106A6  0100               	movlb	0	; () banked
  3519  0106A8  0100               	movlb	0	; () banked
  3520  0106AA  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3521  0106AC  0100               	movlb	0	; () banked
  3522  0106AE  6F86               	movwf	(??_sprintf+1)& (0+255),b
  3523  0106B0  0100               	movlb	0	; () banked
  3524  0106B2  5186               	movf	(??_sprintf+1)& (0+255),w,b
  3525  0106B4  1185               	iorwf	??_sprintf& (0+255),w,b
  3526  0106B6  B4D8               	btfsc	status,2,c
  3527  0106B8  D005               	goto	l8023
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;doprnt.c: 1159: width--;
  3531  0106BA  0100               	movlb	0	; () banked
  3532  0106BC  0100               	movlb	0	; () banked
  3533  0106BE  07A8               	decf	sprintf@width& (0+255),f,b
  3534  0106C0  A0D8               	btfss	status,0,c
  3535  0106C2  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3536  0106C4                     l8023:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;doprnt.c: 1162: if(flag & 0x04) {
  3540  0106C4  0100               	movlb	0	; () banked
  3541  0106C6  0100               	movlb	0	; () banked
  3542  0106C8  A5A6               	btfss	sprintf@flag& (0+255),2,b
  3543  0106CA  D047               	goto	l8045
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;doprnt.c: 1166: if(flag & 0x03)
  3547  0106CC  0E03               	movlw	3
  3548  0106CE  0100               	movlb	0	; () banked
  3549  0106D0  0100               	movlb	0	; () banked
  3550  0106D2  15A6               	andwf	sprintf@flag& (0+255),w,b
  3551  0106D4  0100               	movlb	0	; () banked
  3552  0106D6  6F85               	movwf	??_sprintf& (0+255),b
  3553  0106D8  0E00               	movlw	0
  3554  0106DA  0100               	movlb	0	; () banked
  3555  0106DC  0100               	movlb	0	; () banked
  3556  0106DE  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3557  0106E0  0100               	movlb	0	; () banked
  3558  0106E2  6F86               	movwf	(??_sprintf+1)& (0+255),b
  3559  0106E4  0100               	movlb	0	; () banked
  3560  0106E6  5186               	movf	(??_sprintf+1)& (0+255),w,b
  3561  0106E8  1185               	iorwf	??_sprintf& (0+255),w,b
  3562  0106EA  B4D8               	btfsc	status,2,c
  3563  0106EC  D01A               	goto	l8037
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;doprnt.c: 1168: ((*sp++ = ('-')));
  3567  0106EE  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3568  0106F2  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3569  0106F6  0E2D               	movlw	45
  3570  0106F8  6EDF               	movwf	indf2,c
  3571                           
  3572                           ; BSR set to: 0
  3573  0106FA  0100               	movlb	0	; () banked
  3574  0106FC  0100               	movlb	0	; () banked
  3575  0106FE  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3576  010700  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3577  010702  D00F               	goto	l8037
  3578  010704                     l8031:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1178: ((*sp++ = ('0')));
  3582  010704  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3583  010708  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3584  01070C  0E30               	movlw	48
  3585  01070E  6EDF               	movwf	indf2,c
  3586                           
  3587                           ; BSR set to: 0
  3588  010710  0100               	movlb	0	; () banked
  3589  010712  0100               	movlb	0	; () banked
  3590  010714  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3591  010716  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;doprnt.c: 1179: width--;
  3595  010718  0100               	movlb	0	; () banked
  3596  01071A  0100               	movlb	0	; () banked
  3597  01071C  07A8               	decf	sprintf@width& (0+255),f,b
  3598  01071E  A0D8               	btfss	status,0,c
  3599  010720  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3600  010722                     l8037:
  3601                           
  3602                           ; BSR set to: 0
  3603  010722  0100               	movlb	0	; () banked
  3604  010724  0100               	movlb	0	; () banked
  3605  010726  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  3606  010728  0A80               	xorlw	128
  3607  01072A  6EF3               	movwf	prodl,c
  3608  01072C  0E80               	movlw	128
  3609  01072E  5CF3               	subwf	prodl,w,c
  3610  010730  0E01               	movlw	1
  3611  010732  B4D8               	btfsc	status,2,c
  3612  010734  5DA8               	subwf	sprintf@width& (0+255),w,b
  3613  010736  A0D8               	btfss	status,0,c
  3614  010738  D085               	goto	l8061
  3615  01073A  D7E4               	goto	l8031
  3616  01073C                     l8039:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  3620  01073C  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3621  010740  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3622  010744  0E20               	movlw	32
  3623  010746  6EDF               	movwf	indf2,c
  3624                           
  3625                           ; BSR set to: 0
  3626  010748  0100               	movlb	0	; () banked
  3627  01074A  0100               	movlb	0	; () banked
  3628  01074C  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3629  01074E  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;doprnt.c: 1191: width--;
  3633  010750  0100               	movlb	0	; () banked
  3634  010752  0100               	movlb	0	; () banked
  3635  010754  07A8               	decf	sprintf@width& (0+255),f,b
  3636  010756  A0D8               	btfss	status,0,c
  3637  010758  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  3638  01075A                     l8045:
  3639                           
  3640                           ; BSR set to: 0
  3641  01075A  0100               	movlb	0	; () banked
  3642  01075C  0100               	movlb	0	; () banked
  3643  01075E  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  3644  010760  0A80               	xorlw	128
  3645  010762  6EF3               	movwf	prodl,c
  3646  010764  0E80               	movlw	128
  3647  010766  5CF3               	subwf	prodl,w,c
  3648  010768  0E01               	movlw	1
  3649  01076A  B4D8               	btfsc	status,2,c
  3650  01076C  5DA8               	subwf	sprintf@width& (0+255),w,b
  3651  01076E  B0D8               	btfsc	status,0,c
  3652  010770  D7E5               	goto	l8039
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;doprnt.c: 1192: }
  3656                           ;doprnt.c: 1197: if(flag & 0x03)
  3657                           
  3658                           ; BSR set to: 0
  3659  010772  0E03               	movlw	3
  3660  010774  0100               	movlb	0	; () banked
  3661  010776  0100               	movlb	0	; () banked
  3662  010778  15A6               	andwf	sprintf@flag& (0+255),w,b
  3663  01077A  0100               	movlb	0	; () banked
  3664  01077C  6F85               	movwf	??_sprintf& (0+255),b
  3665  01077E  0E00               	movlw	0
  3666  010780  0100               	movlb	0	; () banked
  3667  010782  0100               	movlb	0	; () banked
  3668  010784  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  3669  010786  0100               	movlb	0	; () banked
  3670  010788  6F86               	movwf	(??_sprintf+1)& (0+255),b
  3671  01078A  0100               	movlb	0	; () banked
  3672  01078C  5186               	movf	(??_sprintf+1)& (0+255),w,b
  3673  01078E  1185               	iorwf	??_sprintf& (0+255),w,b
  3674  010790  B4D8               	btfsc	status,2,c
  3675  010792  D058               	goto	l8061
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  3679  010794  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3680  010798  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3681  01079C  0E2D               	movlw	45
  3682  01079E  D04D               	goto	L8
  3683  0107A0                     l8053:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;doprnt.c: 1209: {
  3687                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3688  0107A0  C09F  F00F         	movff	sprintf@_val,___lldiv@dividend
  3689  0107A4  C0A0  F010         	movff	sprintf@_val+1,___lldiv@dividend+1
  3690  0107A8  C0A1  F011         	movff	sprintf@_val+2,___lldiv@dividend+2
  3691  0107AC  C0A2  F012         	movff	sprintf@_val+3,___lldiv@dividend+3
  3692  0107B0  0100               	movlb	0	; () banked
  3693  0107B2  0100               	movlb	0	; () banked
  3694  0107B4  51AF               	movf	sprintf@c& (0+255),w,b
  3695  0107B6  0D04               	mullw	4
  3696  0107B8  0E59               	movlw	low _dpowers
  3697  0107BA  24F3               	addwf	prodl,w,c
  3698  0107BC  6EF6               	movwf	tblptrl,c
  3699  0107BE  0EFE               	movlw	high _dpowers
  3700  0107C0  20F4               	addwfc	prodh,w,c
  3701  0107C2  6EF7               	movwf	tblptrh,c
  3702  0107C4  6AF8               	clrf	tblptru,c
  3703  0107C6  0E00               	movlw	low (__mediumconst shr (0+16))
  3704  0107C8  22F8               	addwfc	tblptru,f,c
  3705  0107CA  0009               	tblrd		*+
  3706  0107CC  CFF5 F013          	movff	tablat,___lldiv@divisor
  3707  0107D0  0009               	tblrd		*+
  3708  0107D2  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3709  0107D6  0009               	tblrd		*+
  3710  0107D8  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3711  0107DC  000A               	tblrd		*-
  3712  0107DE  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3713  0107E2  EC70  F094         	call	___lldiv	;wreg free
  3714  0107E6  C00F  F092         	movff	?___lldiv,sprintf@vd
  3715  0107EA  C010  F093         	movff	?___lldiv+1,sprintf@vd+1
  3716  0107EE  C011  F094         	movff	?___lldiv+2,sprintf@vd+2
  3717  0107F2  C012  F095         	movff	?___lldiv+3,sprintf@vd+3
  3718                           
  3719                           ;doprnt.c: 1211: vd %= 10;
  3720  0107F6  C092  F01D         	movff	sprintf@vd,___llmod@dividend
  3721  0107FA  C093  F01E         	movff	sprintf@vd+1,___llmod@dividend+1
  3722  0107FE  C094  F01F         	movff	sprintf@vd+2,___llmod@dividend+2
  3723  010802  C095  F020         	movff	sprintf@vd+3,___llmod@dividend+3
  3724  010806  0E0A               	movlw	10
  3725  010808  6E21               	movwf	___llmod@divisor,c
  3726  01080A  0E00               	movlw	0
  3727  01080C  6E22               	movwf	___llmod@divisor+1,c
  3728  01080E  0E00               	movlw	0
  3729  010810  6E23               	movwf	___llmod@divisor+2,c
  3730  010812  0E00               	movlw	0
  3731  010814  6E24               	movwf	___llmod@divisor+3,c
  3732  010816  EC33  F095         	call	___llmod	;wreg free
  3733  01081A  C01D  F092         	movff	?___llmod,sprintf@vd
  3734  01081E  C01E  F093         	movff	?___llmod+1,sprintf@vd+1
  3735  010822  C01F  F094         	movff	?___llmod+2,sprintf@vd+2
  3736  010826  C020  F095         	movff	?___llmod+3,sprintf@vd+3
  3737                           
  3738                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  3739  01082A  0100               	movlb	0	; () banked
  3740  01082C  0100               	movlb	0	; () banked
  3741  01082E  5192               	movf	sprintf@vd& (0+255),w,b
  3742  010830  0F30               	addlw	48
  3743  010832  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3744  010836  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3745  01083A                     L8:
  3746  01083A  6EDF               	movwf	indf2,c
  3747                           
  3748                           ; BSR set to: 0
  3749  01083C  0100               	movlb	0	; () banked
  3750  01083E  0100               	movlb	0	; () banked
  3751  010840  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3752  010842  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3753  010844                     l8061:
  3754                           
  3755                           ; BSR set to: 0
  3756  010844  0100               	movlb	0	; () banked
  3757  010846  0100               	movlb	0	; () banked
  3758  010848  07AF               	decf	sprintf@c& (0+255),f,b
  3759  01084A  0100               	movlb	0	; () banked
  3760  01084C  29AF               	incf	sprintf@c& (0+255),w,b
  3761  01084E  B4D8               	btfsc	status,2,c
  3762  010850  D010               	goto	l8069
  3763  010852  D7A6               	goto	l8053
  3764  010854                     l8063:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  3768  010854  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3769  010858  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3770  01085C  0E30               	movlw	48
  3771  01085E  6EDF               	movwf	indf2,c
  3772                           
  3773                           ; BSR set to: 0
  3774  010860  0100               	movlb	0	; () banked
  3775  010862  0100               	movlb	0	; () banked
  3776  010864  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3777  010866  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 1218: exp--;
  3781  010868  0100               	movlb	0	; () banked
  3782  01086A  0100               	movlb	0	; () banked
  3783  01086C  07A4               	decf	sprintf@exp& (0+255),f,b
  3784  01086E  A0D8               	btfss	status,0,c
  3785  010870  07A5               	decf	(sprintf@exp+1)& (0+255),f,b
  3786  010872                     l8069:
  3787                           
  3788                           ; BSR set to: 0
  3789  010872  0100               	movlb	0	; () banked
  3790  010874  0100               	movlb	0	; () banked
  3791  010876  51A5               	movf	(sprintf@exp+1)& (0+255),w,b
  3792  010878  0A80               	xorlw	128
  3793  01087A  6EF3               	movwf	prodl,c
  3794  01087C  0E80               	movlw	128
  3795  01087E  5CF3               	subwf	prodl,w,c
  3796  010880  0E01               	movlw	1
  3797  010882  B4D8               	btfsc	status,2,c
  3798  010884  5DA4               	subwf	sprintf@exp& (0+255),w,b
  3799  010886  B0D8               	btfsc	status,0,c
  3800  010888  D7E5               	goto	l8063
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;doprnt.c: 1219: }
  3804                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3805                           
  3806                           ; BSR set to: 0
  3807  01088A  0100               	movlb	0	; () banked
  3808  01088C  0100               	movlb	0	; () banked
  3809  01088E  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  3810  010890  0A80               	xorlw	128
  3811  010892  0F80               	addlw	-128
  3812  010894  0E09               	movlw	9
  3813  010896  B4D8               	btfsc	status,2,c
  3814  010898  5DAD               	subwf	sprintf@prec& (0+255),w,b
  3815  01089A  A0D8               	btfss	status,0,c
  3816  01089C  D009               	goto	l591
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3820  01089E  0100               	movlb	0	; () banked
  3821  0108A0  6F85               	movwf	??_sprintf& (0+255),b
  3822  0108A2  0E08               	movlw	8
  3823  0108A4  0100               	movlb	0	; () banked
  3824  0108A6  0100               	movlb	0	; () banked
  3825  0108A8  6FAF               	movwf	sprintf@c& (0+255),b
  3826  0108AA  0100               	movlb	0	; () banked
  3827  0108AC  5185               	movf	??_sprintf& (0+255),w,b
  3828  0108AE  D002               	goto	l8075
  3829  0108B0                     l591:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;doprnt.c: 1222: else
  3833                           ;doprnt.c: 1223: c = prec;
  3834  0108B0  C0AD  F0AF         	movff	sprintf@prec,sprintf@c
  3835  0108B4                     l8075:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 1224: prec -= c;
  3839  0108B4  0100               	movlb	0	; () banked
  3840  0108B6  0100               	movlb	0	; () banked
  3841  0108B8  51AF               	movf	sprintf@c& (0+255),w,b
  3842  0108BA  0100               	movlb	0	; () banked
  3843  0108BC  0100               	movlb	0	; () banked
  3844  0108BE  5FAD               	subwf	sprintf@prec& (0+255),f,b
  3845  0108C0  0E00               	movlw	0
  3846  0108C2  0100               	movlb	0	; () banked
  3847  0108C4  BFAF               	btfsc	sprintf@c& (0+255),7,b
  3848  0108C6  0EFF               	movlw	255
  3849  0108C8  0100               	movlb	0	; () banked
  3850  0108CA  0100               	movlb	0	; () banked
  3851  0108CC  5BAE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;doprnt.c: 1228: if(c)
  3855  0108CE  0100               	movlb	0	; () banked
  3856  0108D0  0100               	movlb	0	; () banked
  3857  0108D2  51AF               	movf	sprintf@c& (0+255),w,b
  3858  0108D4  B4D8               	btfsc	status,2,c
  3859  0108D6  D00A               	goto	l8083
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  3863  0108D8  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3864  0108DC  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3865  0108E0  0E2E               	movlw	46
  3866  0108E2  6EDF               	movwf	indf2,c
  3867                           
  3868                           ; BSR set to: 0
  3869  0108E4  0100               	movlb	0	; () banked
  3870  0108E6  0100               	movlb	0	; () banked
  3871  0108E8  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3872  0108EA  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3873  0108EC                     l8083:
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3877  0108EC  0100               	movlb	0	; () banked
  3878  0108EE  0100               	movlb	0	; () banked
  3879  0108F0  51AF               	movf	sprintf@c& (0+255),w,b
  3880  0108F2  EC55  F087         	call	_scale
  3881  0108F6  C034  F08B         	movff	?_scale,_sprintf$2562
  3882  0108FA  C035  F08C         	movff	?_scale+1,_sprintf$2562+1
  3883  0108FE  C036  F08D         	movff	?_scale+2,_sprintf$2562+2
  3884                           
  3885                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3886  010902  C0AA  F028         	movff	sprintf@fval,___ftmul@f2
  3887  010906  C0AB  F029         	movff	sprintf@fval+1,___ftmul@f2+1
  3888  01090A  C0AC  F02A         	movff	sprintf@fval+2,___ftmul@f2+2
  3889  01090E  C08B  F025         	movff	_sprintf$2562,___ftmul@f1
  3890  010912  C08C  F026         	movff	_sprintf$2562+1,___ftmul@f1+1
  3891  010916  C08D  F027         	movff	_sprintf$2562+2,___ftmul@f1+2
  3892  01091A  EC11  F091         	call	___ftmul	;wreg free
  3893  01091E  C025  F03B         	movff	?___ftmul,___fttol@f1
  3894  010922  C026  F03C         	movff	?___ftmul+1,___fttol@f1+1
  3895  010926  C027  F03D         	movff	?___ftmul+2,___fttol@f1+2
  3896  01092A  EC8D  F091         	call	___fttol	;wreg free
  3897  01092E  C03B  F09F         	movff	?___fttol,sprintf@_val
  3898  010932  C03C  F0A0         	movff	?___fttol+1,sprintf@_val+1
  3899  010936  C03D  F0A1         	movff	?___fttol+2,sprintf@_val+2
  3900  01093A  C03E  F0A2         	movff	?___fttol+3,sprintf@_val+3
  3901                           
  3902                           ;doprnt.c: 1237: while(c--) {
  3903  01093E  D07D               	goto	l8097
  3904  010940                     l8087:
  3905                           
  3906                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3907  010940  C09F  F00F         	movff	sprintf@_val,___lldiv@dividend
  3908  010944  C0A0  F010         	movff	sprintf@_val+1,___lldiv@dividend+1
  3909  010948  C0A1  F011         	movff	sprintf@_val+2,___lldiv@dividend+2
  3910  01094C  C0A2  F012         	movff	sprintf@_val+3,___lldiv@dividend+3
  3911  010950  0100               	movlb	0	; () banked
  3912  010952  0100               	movlb	0	; () banked
  3913  010954  51AF               	movf	sprintf@c& (0+255),w,b
  3914  010956  0D04               	mullw	4
  3915  010958  0E59               	movlw	low _dpowers
  3916  01095A  24F3               	addwf	prodl,w,c
  3917  01095C  6EF6               	movwf	tblptrl,c
  3918  01095E  0EFE               	movlw	high _dpowers
  3919  010960  20F4               	addwfc	prodh,w,c
  3920  010962  6EF7               	movwf	tblptrh,c
  3921  010964  6AF8               	clrf	tblptru,c
  3922  010966  0E00               	movlw	low (__mediumconst shr (0+16))
  3923  010968  22F8               	addwfc	tblptru,f,c
  3924  01096A  0009               	tblrd		*+
  3925  01096C  CFF5 F013          	movff	tablat,___lldiv@divisor
  3926  010970  0009               	tblrd		*+
  3927  010972  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3928  010976  0009               	tblrd		*+
  3929  010978  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3930  01097C  000A               	tblrd		*-
  3931  01097E  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3932  010982  EC70  F094         	call	___lldiv	;wreg free
  3933  010986  C00F  F096         	movff	?___lldiv,sprintf@vd_1887
  3934  01098A  C010  F097         	movff	?___lldiv+1,sprintf@vd_1887+1
  3935  01098E  C011  F098         	movff	?___lldiv+2,sprintf@vd_1887+2
  3936  010992  C012  F099         	movff	?___lldiv+3,sprintf@vd_1887+3
  3937                           
  3938                           ;doprnt.c: 1239: vd %= 10;
  3939  010996  C096  F01D         	movff	sprintf@vd_1887,___llmod@dividend
  3940  01099A  C097  F01E         	movff	sprintf@vd_1887+1,___llmod@dividend+1
  3941  01099E  C098  F01F         	movff	sprintf@vd_1887+2,___llmod@dividend+2
  3942  0109A2  C099  F020         	movff	sprintf@vd_1887+3,___llmod@dividend+3
  3943  0109A6  0E0A               	movlw	10
  3944  0109A8  6E21               	movwf	___llmod@divisor,c
  3945  0109AA  0E00               	movlw	0
  3946  0109AC  6E22               	movwf	___llmod@divisor+1,c
  3947  0109AE  0E00               	movlw	0
  3948  0109B0  6E23               	movwf	___llmod@divisor+2,c
  3949  0109B2  0E00               	movlw	0
  3950  0109B4  6E24               	movwf	___llmod@divisor+3,c
  3951  0109B6  EC33  F095         	call	___llmod	;wreg free
  3952  0109BA  C01D  F096         	movff	?___llmod,sprintf@vd_1887
  3953  0109BE  C01E  F097         	movff	?___llmod+1,sprintf@vd_1887+1
  3954  0109C2  C01F  F098         	movff	?___llmod+2,sprintf@vd_1887+2
  3955  0109C6  C020  F099         	movff	?___llmod+3,sprintf@vd_1887+3
  3956                           
  3957                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  3958  0109CA  0100               	movlb	0	; () banked
  3959  0109CC  0100               	movlb	0	; () banked
  3960  0109CE  5196               	movf	sprintf@vd_1887& (0+255),w,b
  3961  0109D0  0F30               	addlw	48
  3962  0109D2  C07E  FFD9         	movff	sprintf@sp,fsr2l
  3963  0109D6  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  3964  0109DA  6EDF               	movwf	indf2,c
  3965                           
  3966                           ; BSR set to: 0
  3967  0109DC  0100               	movlb	0	; () banked
  3968  0109DE  0100               	movlb	0	; () banked
  3969  0109E0  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  3970  0109E2  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  3974  0109E4  C09F  F01D         	movff	sprintf@_val,___llmod@dividend
  3975  0109E8  C0A0  F01E         	movff	sprintf@_val+1,___llmod@dividend+1
  3976  0109EC  C0A1  F01F         	movff	sprintf@_val+2,___llmod@dividend+2
  3977  0109F0  C0A2  F020         	movff	sprintf@_val+3,___llmod@dividend+3
  3978  0109F4  0100               	movlb	0	; () banked
  3979  0109F6  0100               	movlb	0	; () banked
  3980  0109F8  51AF               	movf	sprintf@c& (0+255),w,b
  3981  0109FA  0D04               	mullw	4
  3982  0109FC  0E59               	movlw	low _dpowers
  3983  0109FE  24F3               	addwf	prodl,w,c
  3984  010A00  6EF6               	movwf	tblptrl,c
  3985  010A02  0EFE               	movlw	high _dpowers
  3986  010A04  20F4               	addwfc	prodh,w,c
  3987  010A06  6EF7               	movwf	tblptrh,c
  3988  010A08  6AF8               	clrf	tblptru,c
  3989  010A0A  0E00               	movlw	low (__mediumconst shr (0+16))
  3990  010A0C  22F8               	addwfc	tblptru,f,c
  3991  010A0E  0009               	tblrd		*+
  3992  010A10  CFF5 F021          	movff	tablat,___llmod@divisor
  3993  010A14  0009               	tblrd		*+
  3994  010A16  CFF5 F022          	movff	tablat,___llmod@divisor+1
  3995  010A1A  0009               	tblrd		*+
  3996  010A1C  CFF5 F023          	movff	tablat,___llmod@divisor+2
  3997  010A20  000A               	tblrd		*-
  3998  010A22  CFF5 F024          	movff	tablat,___llmod@divisor+3
  3999  010A26  EC33  F095         	call	___llmod	;wreg free
  4000  010A2A  C01D  F09F         	movff	?___llmod,sprintf@_val
  4001  010A2E  C01E  F0A0         	movff	?___llmod+1,sprintf@_val+1
  4002  010A32  C01F  F0A1         	movff	?___llmod+2,sprintf@_val+2
  4003  010A36  C020  F0A2         	movff	?___llmod+3,sprintf@_val+3
  4004  010A3A                     l8097:
  4005  010A3A  0100               	movlb	0	; () banked
  4006  010A3C  0100               	movlb	0	; () banked
  4007  010A3E  07AF               	decf	sprintf@c& (0+255),f,b
  4008  010A40  0100               	movlb	0	; () banked
  4009  010A42  29AF               	incf	sprintf@c& (0+255),w,b
  4010  010A44  B4D8               	btfsc	status,2,c
  4011  010A46  D010               	goto	l8105
  4012  010A48  D77B               	goto	l8087
  4013  010A4A                     l8099:
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  4017  010A4A  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4018  010A4E  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4019  010A52  0E30               	movlw	48
  4020  010A54  6EDF               	movwf	indf2,c
  4021                           
  4022                           ; BSR set to: 0
  4023  010A56  0100               	movlb	0	; () banked
  4024  010A58  0100               	movlb	0	; () banked
  4025  010A5A  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  4026  010A5C  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 1246: prec--;
  4030  010A5E  0100               	movlb	0	; () banked
  4031  010A60  0100               	movlb	0	; () banked
  4032  010A62  07AD               	decf	sprintf@prec& (0+255),f,b
  4033  010A64  A0D8               	btfss	status,0,c
  4034  010A66  07AE               	decf	(sprintf@prec+1)& (0+255),f,b
  4035  010A68                     l8105:
  4036                           
  4037                           ; BSR set to: 0
  4038  010A68  0100               	movlb	0	; () banked
  4039  010A6A  0100               	movlb	0	; () banked
  4040  010A6C  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  4041  010A6E  11AD               	iorwf	sprintf@prec& (0+255),w,b
  4042  010A70  B4D8               	btfsc	status,2,c
  4043  010A72  D1F9               	goto	l8203
  4044  010A74  D7EA               	goto	l8099
  4045  010A76                     l8107:
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;doprnt.c: 1255: }
  4049                           ;doprnt.c: 1262: {
  4050                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4051  010A76  C09A  FFD9         	movff	sprintf@ap,fsr2l
  4052  010A7A  C09B  FFDA         	movff	sprintf@ap+1,fsr2h
  4053  010A7E  0100               	movlb	0	; () banked
  4054  010A80  CFDE F09F          	movff	postinc2,sprintf@_val
  4055  010A84  0100               	movlb	0	; () banked
  4056  010A86  CFDD F0A0          	movff	postdec2,sprintf@_val+1
  4057  010A8A  0100               	movlb	0	; () banked
  4058  010A8C  0E00               	movlw	0
  4059  010A8E  0100               	movlb	0	; () banked
  4060  010A90  BFA0               	btfsc	(sprintf@_val+1)& (0+255),7,b
  4061  010A92  0EFF               	movlw	-1
  4062  010A94  0100               	movlb	0	; () banked
  4063  010A96  6FA1               	movwf	(sprintf@_val+2)& (0+255),b
  4064  010A98  0100               	movlb	0	; () banked
  4065  010A9A  6FA2               	movwf	(sprintf@_val+3)& (0+255),b
  4066                           
  4067                           ; BSR set to: 0
  4068  010A9C  0E02               	movlw	2
  4069  010A9E  0100               	movlb	0	; () banked
  4070  010AA0  0100               	movlb	0	; () banked
  4071  010AA2  279A               	addwf	sprintf@ap& (0+255),f,b
  4072  010AA4  0E00               	movlw	0
  4073  010AA6  0100               	movlb	0	; () banked
  4074  010AA8  239B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  4078  010AAA  0100               	movlb	0	; () banked
  4079  010AAC  0100               	movlb	0	; () banked
  4080  010AAE  51A2               	movf	(sprintf@_val+3)& (0+255),w,b
  4081  010AB0  0A80               	xorlw	128
  4082  010AB2  0F80               	addlw	128
  4083  010AB4  E10B               	bnz	u6395
  4084  010AB6  0E00               	movlw	0
  4085  010AB8  0100               	movlb	0	; () banked
  4086  010ABA  5DA1               	subwf	(sprintf@_val+2)& (0+255),w,b
  4087  010ABC  E107               	bnz	u6395
  4088  010ABE  0E00               	movlw	0
  4089  010AC0  0100               	movlb	0	; () banked
  4090  010AC2  5DA0               	subwf	(sprintf@_val+1)& (0+255),w,b
  4091  010AC4  E103               	bnz	u6395
  4092  010AC6  0E00               	movlw	0
  4093  010AC8  0100               	movlb	0	; () banked
  4094  010ACA  5D9F               	subwf	sprintf@_val& (0+255),w,b
  4095  010ACC                     u6395:
  4096  010ACC  B0D8               	btfsc	status,0,c
  4097  010ACE  D014               	goto	l8117
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;doprnt.c: 1271: flag |= 0x03;
  4101  010AD0  0E03               	movlw	3
  4102  010AD2  0100               	movlb	0	; () banked
  4103  010AD4  0100               	movlb	0	; () banked
  4104  010AD6  13A6               	iorwf	sprintf@flag& (0+255),f,b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;doprnt.c: 1272: _val._val = -_val._val;
  4108  010AD8  0100               	movlb	0	; () banked
  4109  010ADA  0100               	movlb	0	; () banked
  4110  010ADC  1FA2               	comf	(sprintf@_val+3)& (0+255),f,b
  4111  010ADE  0100               	movlb	0	; () banked
  4112  010AE0  1FA1               	comf	(sprintf@_val+2)& (0+255),f,b
  4113  010AE2  0100               	movlb	0	; () banked
  4114  010AE4  1FA0               	comf	(sprintf@_val+1)& (0+255),f,b
  4115  010AE6  0100               	movlb	0	; () banked
  4116  010AE8  6D9F               	negf	sprintf@_val& (0+255),b
  4117  010AEA  0E00               	movlw	0
  4118  010AEC  0100               	movlb	0	; () banked
  4119  010AEE  23A0               	addwfc	(sprintf@_val+1)& (0+255),f,b
  4120  010AF0  0100               	movlb	0	; () banked
  4121  010AF2  23A1               	addwfc	(sprintf@_val+2)& (0+255),f,b
  4122  010AF4  0100               	movlb	0	; () banked
  4123  010AF6  23A2               	addwfc	(sprintf@_val+3)& (0+255),f,b
  4124  010AF8                     l8117:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;doprnt.c: 1273: }
  4128                           ;doprnt.c: 1275: }
  4129                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4130  010AF8  0100               	movlb	0	; () banked
  4131  010AFA  0100               	movlb	0	; () banked
  4132  010AFC  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  4133  010AFE  11AD               	iorwf	sprintf@prec& (0+255),w,b
  4134  010B00  A4D8               	btfss	status,2,c
  4135  010B02  D00C               	goto	l8123
  4136                           
  4137                           ; BSR set to: 0
  4138  010B04  0100               	movlb	0	; () banked
  4139  010B06  0100               	movlb	0	; () banked
  4140  010B08  51A2               	movf	(sprintf@_val+3)& (0+255),w,b
  4141  010B0A  119F               	iorwf	sprintf@_val& (0+255),w,b
  4142  010B0C  11A0               	iorwf	(sprintf@_val+1)& (0+255),w,b
  4143  010B0E  11A1               	iorwf	(sprintf@_val+2)& (0+255),w,b
  4144  010B10  A4D8               	btfss	status,2,c
  4145  010B12  D004               	goto	l8123
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;doprnt.c: 1300: prec++;
  4149  010B14  0100               	movlb	0	; () banked
  4150  010B16  0100               	movlb	0	; () banked
  4151  010B18  4BAD               	infsnz	sprintf@prec& (0+255),f,b
  4152  010B1A  2BAE               	incf	(sprintf@prec+1)& (0+255),f,b
  4153  010B1C                     l8123:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4157  010B1C  0100               	movlb	0	; () banked
  4158  010B1E  6F85               	movwf	??_sprintf& (0+255),b
  4159  010B20  0E01               	movlw	1
  4160  010B22  0100               	movlb	0	; () banked
  4161  010B24  0100               	movlb	0	; () banked
  4162  010B26  6FAF               	movwf	sprintf@c& (0+255),b
  4163  010B28  0100               	movlb	0	; () banked
  4164  010B2A  5185               	movf	??_sprintf& (0+255),w,b
  4165  010B2C                     
  4166                           ; BSR set to: 0
  4167  010B2C  0100               	movlb	0	; () banked
  4168  010B2E  0100               	movlb	0	; () banked
  4169  010B30  51AF               	movf	sprintf@c& (0+255),w,b
  4170  010B32  0A0A               	xorlw	10
  4171  010B34  B4D8               	btfsc	status,2,c
  4172  010B36  D024               	goto	l8137
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4176                           
  4177                           ; BSR set to: 0
  4178                           
  4179                           ; BSR set to: 0
  4180  010B38  0100               	movlb	0	; () banked
  4181  010B3A  0100               	movlb	0	; () banked
  4182  010B3C  51AF               	movf	sprintf@c& (0+255),w,b
  4183  010B3E  0D04               	mullw	4
  4184  010B40  0E59               	movlw	low _dpowers
  4185  010B42  24F3               	addwf	prodl,w,c
  4186  010B44  6EF6               	movwf	tblptrl,c
  4187  010B46  0EFE               	movlw	high _dpowers
  4188  010B48  20F4               	addwfc	prodh,w,c
  4189  010B4A  6EF7               	movwf	tblptrh,c
  4190  010B4C  6AF8               	clrf	tblptru,c
  4191  010B4E  0E00               	movlw	low (__mediumconst shr (0+16))
  4192  010B50  22F8               	addwfc	tblptru,f,c
  4193  010B52  0009               	tblrd		*+
  4194  010B54  50F5               	movf	tablat,w,c
  4195  010B56  0100               	movlb	0	; () banked
  4196  010B58  0100               	movlb	0	; () banked
  4197  010B5A  5D9F               	subwf	sprintf@_val& (0+255),w,b
  4198  010B5C  0009               	tblrd		*+
  4199  010B5E  50F5               	movf	tablat,w,c
  4200  010B60  0100               	movlb	0	; () banked
  4201  010B62  59A0               	subwfb	(sprintf@_val+1)& (0+255),w,b
  4202  010B64  0009               	tblrd		*+
  4203  010B66  50F5               	movf	tablat,w,c
  4204  010B68  0100               	movlb	0	; () banked
  4205  010B6A  59A1               	subwfb	(sprintf@_val+2)& (0+255),w,b
  4206  010B6C  0009               	tblrd		*+
  4207  010B6E  50F5               	movf	tablat,w,c
  4208  010B70  0100               	movlb	0	; () banked
  4209  010B72  59A2               	subwfb	(sprintf@_val+3)& (0+255),w,b
  4210  010B74  A0D8               	btfss	status,0,c
  4211  010B76  D004               	goto	l8137
  4212                           
  4213                           ; BSR set to: 0
  4214                           
  4215                           ; BSR set to: 0
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;doprnt.c: 1316: break;
  4219  010B78  0100               	movlb	0	; () banked
  4220  010B7A  0100               	movlb	0	; () banked
  4221  010B7C  2BAF               	incf	sprintf@c& (0+255),f,b
  4222  010B7E  D7D6               	goto	L9
  4223  010B80                     l8137:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;doprnt.c: 1348: if(c < prec)
  4227  010B80  0E80               	movlw	128
  4228  010B82  0100               	movlb	0	; () banked
  4229  010B84  0100               	movlb	0	; () banked
  4230  010B86  BFAF               	btfsc	sprintf@c& (0+255),7,b
  4231  010B88  0E7F               	movlw	127
  4232  010B8A  6F85               	movwf	??_sprintf& (0+255),b
  4233  010B8C  0100               	movlb	0	; () banked
  4234  010B8E  0100               	movlb	0	; () banked
  4235  010B90  51AD               	movf	sprintf@prec& (0+255),w,b
  4236  010B92  0100               	movlb	0	; () banked
  4237  010B94  0100               	movlb	0	; () banked
  4238  010B96  5DAF               	subwf	sprintf@c& (0+255),w,b
  4239  010B98  0100               	movlb	0	; () banked
  4240  010B9A  0100               	movlb	0	; () banked
  4241  010B9C  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  4242  010B9E  0A80               	xorlw	128
  4243  010BA0  0100               	movlb	0	; () banked
  4244  010BA2  5985               	subwfb	??_sprintf& (0+255),w,b
  4245  010BA4  B0D8               	btfsc	status,0,c
  4246  010BA6  D003               	goto	l8141
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;doprnt.c: 1349: c = prec;
  4250  010BA8  C0AD  F0AF         	movff	sprintf@prec,sprintf@c
  4251  010BAC  D020               	goto	l8145
  4252  010BAE                     l8141:
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 1350: else if(prec < c)
  4256  010BAE  0100               	movlb	0	; () banked
  4257  010BB0  0100               	movlb	0	; () banked
  4258  010BB2  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  4259  010BB4  0A80               	xorlw	128
  4260  010BB6  0100               	movlb	0	; () banked
  4261  010BB8  6F85               	movwf	??_sprintf& (0+255),b
  4262  010BBA  0100               	movlb	0	; () banked
  4263  010BBC  0100               	movlb	0	; () banked
  4264  010BBE  51AF               	movf	sprintf@c& (0+255),w,b
  4265  010BC0  0100               	movlb	0	; () banked
  4266  010BC2  0100               	movlb	0	; () banked
  4267  010BC4  5DAD               	subwf	sprintf@prec& (0+255),w,b
  4268  010BC6  0E80               	movlw	128
  4269  010BC8  0100               	movlb	0	; () banked
  4270  010BCA  0100               	movlb	0	; () banked
  4271  010BCC  BFAF               	btfsc	sprintf@c& (0+255),7,b
  4272  010BCE  0E7F               	movlw	127
  4273  010BD0  0100               	movlb	0	; () banked
  4274  010BD2  5985               	subwfb	??_sprintf& (0+255),w,b
  4275  010BD4  B0D8               	btfsc	status,0,c
  4276  010BD6  D00B               	goto	l8145
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;doprnt.c: 1351: prec = c;
  4280  010BD8  0100               	movlb	0	; () banked
  4281  010BDA  0100               	movlb	0	; () banked
  4282  010BDC  51AF               	movf	sprintf@c& (0+255),w,b
  4283  010BDE  0100               	movlb	0	; () banked
  4284  010BE0  0100               	movlb	0	; () banked
  4285  010BE2  6FAD               	movwf	sprintf@prec& (0+255),b
  4286  010BE4  0100               	movlb	0	; () banked
  4287  010BE6  6BAE               	clrf	(sprintf@prec+1)& (0+255),b
  4288  010BE8  0100               	movlb	0	; () banked
  4289  010BEA  BFAD               	btfsc	sprintf@prec& (0+255),7,b
  4290  010BEC  07AE               	decf	(sprintf@prec+1)& (0+255),f,b
  4291  010BEE                     l8145:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4295  010BEE  0100               	movlb	0	; () banked
  4296  010BF0  0100               	movlb	0	; () banked
  4297  010BF2  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4298  010BF4  11A8               	iorwf	sprintf@width& (0+255),w,b
  4299  010BF6  B4D8               	btfsc	status,2,c
  4300  010BF8  D016               	goto	l8151
  4301                           
  4302                           ; BSR set to: 0
  4303  010BFA  0E03               	movlw	3
  4304  010BFC  0100               	movlb	0	; () banked
  4305  010BFE  0100               	movlb	0	; () banked
  4306  010C00  15A6               	andwf	sprintf@flag& (0+255),w,b
  4307  010C02  0100               	movlb	0	; () banked
  4308  010C04  6F85               	movwf	??_sprintf& (0+255),b
  4309  010C06  0E00               	movlw	0
  4310  010C08  0100               	movlb	0	; () banked
  4311  010C0A  0100               	movlb	0	; () banked
  4312  010C0C  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4313  010C0E  0100               	movlb	0	; () banked
  4314  010C10  6F86               	movwf	(??_sprintf+1)& (0+255),b
  4315  010C12  0100               	movlb	0	; () banked
  4316  010C14  5186               	movf	(??_sprintf+1)& (0+255),w,b
  4317  010C16  1185               	iorwf	??_sprintf& (0+255),w,b
  4318  010C18  B4D8               	btfsc	status,2,c
  4319  010C1A  D005               	goto	l8151
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;doprnt.c: 1355: width--;
  4323  010C1C  0100               	movlb	0	; () banked
  4324  010C1E  0100               	movlb	0	; () banked
  4325  010C20  07A8               	decf	sprintf@width& (0+255),f,b
  4326  010C22  A0D8               	btfss	status,0,c
  4327  010C24  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  4328  010C26                     l8151:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;doprnt.c: 1357: if(flag & 0x4000) {
  4332  010C26  0100               	movlb	0	; () banked
  4333  010C28  0100               	movlb	0	; () banked
  4334  010C2A  ADA7               	btfss	(sprintf@flag+1)& (0+255),6,b
  4335  010C2C  D028               	goto	l8159
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 1358: if(width > prec)
  4339  010C2E  0100               	movlb	0	; () banked
  4340  010C30  0100               	movlb	0	; () banked
  4341  010C32  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  4342  010C34  0A80               	xorlw	128
  4343  010C36  0100               	movlb	0	; () banked
  4344  010C38  6F85               	movwf	??_sprintf& (0+255),b
  4345  010C3A  0100               	movlb	0	; () banked
  4346  010C3C  0100               	movlb	0	; () banked
  4347  010C3E  51A8               	movf	sprintf@width& (0+255),w,b
  4348  010C40  0100               	movlb	0	; () banked
  4349  010C42  0100               	movlb	0	; () banked
  4350  010C44  5DAD               	subwf	sprintf@prec& (0+255),w,b
  4351  010C46  0100               	movlb	0	; () banked
  4352  010C48  0100               	movlb	0	; () banked
  4353  010C4A  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4354  010C4C  0A80               	xorlw	128
  4355  010C4E  0100               	movlb	0	; () banked
  4356  010C50  5985               	subwfb	??_sprintf& (0+255),w,b
  4357  010C52  B0D8               	btfsc	status,0,c
  4358  010C54  D00D               	goto	l8157
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;doprnt.c: 1359: width -= prec;
  4362  010C56  0100               	movlb	0	; () banked
  4363  010C58  0100               	movlb	0	; () banked
  4364  010C5A  51AD               	movf	sprintf@prec& (0+255),w,b
  4365  010C5C  0100               	movlb	0	; () banked
  4366  010C5E  0100               	movlb	0	; () banked
  4367  010C60  5FA8               	subwf	sprintf@width& (0+255),f,b
  4368  010C62  0100               	movlb	0	; () banked
  4369  010C64  0100               	movlb	0	; () banked
  4370  010C66  51AE               	movf	(sprintf@prec+1)& (0+255),w,b
  4371  010C68  0100               	movlb	0	; () banked
  4372  010C6A  0100               	movlb	0	; () banked
  4373  010C6C  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4374  010C6E  D007               	goto	l8159
  4375  010C70                     l8157:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1360: else
  4379                           ;doprnt.c: 1361: width = 0;
  4380  010C70  0E00               	movlw	0
  4381  010C72  0100               	movlb	0	; () banked
  4382  010C74  0100               	movlb	0	; () banked
  4383  010C76  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  4384  010C78  0E00               	movlw	0
  4385  010C7A  0100               	movlb	0	; () banked
  4386  010C7C  6FA8               	movwf	sprintf@width& (0+255),b
  4387  010C7E                     l8159:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1362: }
  4391                           ;doprnt.c: 1390: if(width > c)
  4392  010C7E  0E80               	movlw	128
  4393  010C80  0100               	movlb	0	; () banked
  4394  010C82  0100               	movlb	0	; () banked
  4395  010C84  BFAF               	btfsc	sprintf@c& (0+255),7,b
  4396  010C86  0E7F               	movlw	127
  4397  010C88  6F85               	movwf	??_sprintf& (0+255),b
  4398  010C8A  0100               	movlb	0	; () banked
  4399  010C8C  0100               	movlb	0	; () banked
  4400  010C8E  51A8               	movf	sprintf@width& (0+255),w,b
  4401  010C90  0100               	movlb	0	; () banked
  4402  010C92  0100               	movlb	0	; () banked
  4403  010C94  5DAF               	subwf	sprintf@c& (0+255),w,b
  4404  010C96  0100               	movlb	0	; () banked
  4405  010C98  0100               	movlb	0	; () banked
  4406  010C9A  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4407  010C9C  0A80               	xorlw	128
  4408  010C9E  0100               	movlb	0	; () banked
  4409  010CA0  5985               	subwfb	??_sprintf& (0+255),w,b
  4410  010CA2  B0D8               	btfsc	status,0,c
  4411  010CA4  D00E               	goto	l8163
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;doprnt.c: 1391: width -= c;
  4415  010CA6  0100               	movlb	0	; () banked
  4416  010CA8  0100               	movlb	0	; () banked
  4417  010CAA  51AF               	movf	sprintf@c& (0+255),w,b
  4418  010CAC  0100               	movlb	0	; () banked
  4419  010CAE  0100               	movlb	0	; () banked
  4420  010CB0  5FA8               	subwf	sprintf@width& (0+255),f,b
  4421  010CB2  0E00               	movlw	0
  4422  010CB4  0100               	movlb	0	; () banked
  4423  010CB6  BFAF               	btfsc	sprintf@c& (0+255),7,b
  4424  010CB8  0EFF               	movlw	255
  4425  010CBA  0100               	movlb	0	; () banked
  4426  010CBC  0100               	movlb	0	; () banked
  4427  010CBE  5BA9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4428  010CC0  D007               	goto	l8165
  4429  010CC2                     l8163:
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;doprnt.c: 1392: else
  4433                           ;doprnt.c: 1393: width = 0;
  4434  010CC2  0E00               	movlw	0
  4435  010CC4  0100               	movlb	0	; () banked
  4436  010CC6  0100               	movlb	0	; () banked
  4437  010CC8  6FA9               	movwf	(sprintf@width+1)& (0+255),b
  4438  010CCA  0E00               	movlw	0
  4439  010CCC  0100               	movlb	0	; () banked
  4440  010CCE  6FA8               	movwf	sprintf@width& (0+255),b
  4441  010CD0                     l8165:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 1396: if(flag & 0x04) {
  4445  010CD0  0100               	movlb	0	; () banked
  4446  010CD2  0100               	movlb	0	; () banked
  4447  010CD4  A5A6               	btfss	sprintf@flag& (0+255),2,b
  4448  010CD6  D031               	goto	l8181
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;doprnt.c: 1401: if(flag & 0x03)
  4452  010CD8  0E03               	movlw	3
  4453  010CDA  0100               	movlb	0	; () banked
  4454  010CDC  0100               	movlb	0	; () banked
  4455  010CDE  15A6               	andwf	sprintf@flag& (0+255),w,b
  4456  010CE0  0100               	movlb	0	; () banked
  4457  010CE2  6F85               	movwf	??_sprintf& (0+255),b
  4458  010CE4  0E00               	movlw	0
  4459  010CE6  0100               	movlb	0	; () banked
  4460  010CE8  0100               	movlb	0	; () banked
  4461  010CEA  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4462  010CEC  0100               	movlb	0	; () banked
  4463  010CEE  6F86               	movwf	(??_sprintf+1)& (0+255),b
  4464  010CF0  0100               	movlb	0	; () banked
  4465  010CF2  5186               	movf	(??_sprintf+1)& (0+255),w,b
  4466  010CF4  1185               	iorwf	??_sprintf& (0+255),w,b
  4467  010CF6  B4D8               	btfsc	status,2,c
  4468  010CF8  D00A               	goto	l8173
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  4472  010CFA  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4473  010CFE  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4474  010D02  0E2D               	movlw	45
  4475  010D04  6EDF               	movwf	indf2,c
  4476                           
  4477                           ; BSR set to: 0
  4478  010D06  0100               	movlb	0	; () banked
  4479  010D08  0100               	movlb	0	; () banked
  4480  010D0A  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  4481  010D0C  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  4482  010D0E                     l8173:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;doprnt.c: 1424: if(width)
  4486  010D0E  0100               	movlb	0	; () banked
  4487  010D10  0100               	movlb	0	; () banked
  4488  010D12  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4489  010D14  11A8               	iorwf	sprintf@width& (0+255),w,b
  4490  010D16  B4D8               	btfsc	status,2,c
  4491  010D18  D09B               	goto	l8201
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  4495                           
  4496                           ; BSR set to: 0
  4497                           
  4498                           ;doprnt.c: 1425: do
  4499  010D1A  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4500  010D1E  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4501  010D22  0E30               	movlw	48
  4502  010D24  6EDF               	movwf	indf2,c
  4503                           
  4504                           ; BSR set to: 0
  4505  010D26  0100               	movlb	0	; () banked
  4506  010D28  0100               	movlb	0	; () banked
  4507  010D2A  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  4508  010D2C  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 1427: while(--width);
  4512  010D2E  0100               	movlb	0	; () banked
  4513  010D30  0100               	movlb	0	; () banked
  4514  010D32  07A8               	decf	sprintf@width& (0+255),f,b
  4515  010D34  A0D8               	btfss	status,0,c
  4516  010D36  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  4517  010D38  D7EB               	goto	L11
  4518  010D3A                     l8181:
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;doprnt.c: 1431: {
  4522                           ;doprnt.c: 1433: if(width
  4523                           ;doprnt.c: 1437: )
  4524  010D3A  0100               	movlb	0	; () banked
  4525  010D3C  0100               	movlb	0	; () banked
  4526  010D3E  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4527  010D40  11A8               	iorwf	sprintf@width& (0+255),w,b
  4528  010D42  B4D8               	btfsc	status,2,c
  4529  010D44  D014               	goto	l8189
  4530  010D46                     l8183:
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  4534  010D46  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4535  010D4A  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4536  010D4E  0E20               	movlw	32
  4537  010D50  6EDF               	movwf	indf2,c
  4538                           
  4539                           ; BSR set to: 0
  4540  010D52  0100               	movlb	0	; () banked
  4541  010D54  0100               	movlb	0	; () banked
  4542  010D56  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  4543  010D58  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;doprnt.c: 1440: while(--width);
  4547  010D5A  0100               	movlb	0	; () banked
  4548  010D5C  0100               	movlb	0	; () banked
  4549  010D5E  07A8               	decf	sprintf@width& (0+255),f,b
  4550  010D60  A0D8               	btfss	status,0,c
  4551  010D62  07A9               	decf	(sprintf@width+1)& (0+255),f,b
  4552  010D64  0100               	movlb	0	; () banked
  4553  010D66  51A9               	movf	(sprintf@width+1)& (0+255),w,b
  4554  010D68  11A8               	iorwf	sprintf@width& (0+255),w,b
  4555  010D6A  A4D8               	btfss	status,2,c
  4556  010D6C  D7EC               	goto	l8183
  4557  010D6E                     l8189:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 1447: if(flag & 0x03)
  4561  010D6E  0E03               	movlw	3
  4562  010D70  0100               	movlb	0	; () banked
  4563  010D72  0100               	movlb	0	; () banked
  4564  010D74  15A6               	andwf	sprintf@flag& (0+255),w,b
  4565  010D76  0100               	movlb	0	; () banked
  4566  010D78  6F85               	movwf	??_sprintf& (0+255),b
  4567  010D7A  0E00               	movlw	0
  4568  010D7C  0100               	movlb	0	; () banked
  4569  010D7E  0100               	movlb	0	; () banked
  4570  010D80  15A7               	andwf	(sprintf@flag+1)& (0+255),w,b
  4571  010D82  0100               	movlb	0	; () banked
  4572  010D84  6F86               	movwf	(??_sprintf+1)& (0+255),b
  4573  010D86  0100               	movlb	0	; () banked
  4574  010D88  5186               	movf	(??_sprintf+1)& (0+255),w,b
  4575  010D8A  1185               	iorwf	??_sprintf& (0+255),w,b
  4576  010D8C  B4D8               	btfsc	status,2,c
  4577  010D8E  D060               	goto	l8201
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4581  010D90  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4582  010D94  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4583  010D98  0E2D               	movlw	45
  4584  010D9A  6EDF               	movwf	indf2,c
  4585  010D9C  D055               	goto	L10
  4586  010D9E                     l8195:
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;doprnt.c: 1487: {
  4590                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4591  010D9E  0100               	movlb	0	; () banked
  4592  010DA0  C0AD  F085         	movff	sprintf@prec,??_sprintf
  4593  010DA4  0100               	movlb	0	; () banked
  4594  010DA6  C0AE  F086         	movff	sprintf@prec+1,??_sprintf+1
  4595  010DAA  0100               	movlb	0	; () banked
  4596  010DAC  90D8               	bcf	status,0,c
  4597  010DAE  3785               	rlcf	??_sprintf& (0+255),f,b
  4598  010DB0  3786               	rlcf	(??_sprintf+1)& (0+255),f,b
  4599  010DB2  0100               	movlb	0	; () banked
  4600  010DB4  90D8               	bcf	status,0,c
  4601  010DB6  3785               	rlcf	??_sprintf& (0+255),f,b
  4602  010DB8  3786               	rlcf	(??_sprintf+1)& (0+255),f,b
  4603  010DBA  0E59               	movlw	low _dpowers
  4604  010DBC  0100               	movlb	0	; () banked
  4605  010DBE  2585               	addwf	??_sprintf& (0+255),w,b
  4606  010DC0  6EF6               	movwf	tblptrl,c
  4607  010DC2  0EFE               	movlw	high _dpowers
  4608  010DC4  2186               	addwfc	(??_sprintf+1)& (0+255),w,b
  4609  010DC6  6EF7               	movwf	tblptrh,c
  4610  010DC8  6AF8               	clrf	tblptru,c
  4611  010DCA  0E00               	movlw	low (__mediumconst shr (0+16))
  4612  010DCC  22F8               	addwfc	tblptru,f,c
  4613  010DCE  0009               	tblrd		*+
  4614  010DD0  CFF5 F013          	movff	tablat,___lldiv@divisor
  4615  010DD4  0009               	tblrd		*+
  4616  010DD6  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  4617  010DDA  0009               	tblrd		*+
  4618  010DDC  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  4619  010DE0  000A               	tblrd		*-
  4620  010DE2  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  4621  010DE6  C09F  F00F         	movff	sprintf@_val,___lldiv@dividend
  4622  010DEA  C0A0  F010         	movff	sprintf@_val+1,___lldiv@dividend+1
  4623  010DEE  C0A1  F011         	movff	sprintf@_val+2,___lldiv@dividend+2
  4624  010DF2  C0A2  F012         	movff	sprintf@_val+3,___lldiv@dividend+3
  4625  010DF6  EC70  F094         	call	___lldiv	;wreg free
  4626  010DFA  C00F  F01D         	movff	?___lldiv,___llmod@dividend
  4627  010DFE  C010  F01E         	movff	?___lldiv+1,___llmod@dividend+1
  4628  010E02  C011  F01F         	movff	?___lldiv+2,___llmod@dividend+2
  4629  010E06  C012  F020         	movff	?___lldiv+3,___llmod@dividend+3
  4630  010E0A  0E0A               	movlw	10
  4631  010E0C  6E21               	movwf	___llmod@divisor,c
  4632  010E0E  0E00               	movlw	0
  4633  010E10  6E22               	movwf	___llmod@divisor+1,c
  4634  010E12  0E00               	movlw	0
  4635  010E14  6E23               	movwf	___llmod@divisor+2,c
  4636  010E16  0E00               	movlw	0
  4637  010E18  6E24               	movwf	___llmod@divisor+3,c
  4638  010E1A  EC33  F095         	call	___llmod	;wreg free
  4639  010E1E  C01D  F087         	movff	?___llmod,??_sprintf+2
  4640  010E22  C01E  F088         	movff	?___llmod+1,??_sprintf+3
  4641  010E26  C01F  F089         	movff	?___llmod+2,??_sprintf+4
  4642  010E2A  C020  F08A         	movff	?___llmod+3,??_sprintf+5
  4643  010E2E  0100               	movlb	0	; () banked
  4644  010E30  5187               	movf	(??_sprintf+2)& (0+255),w,b
  4645  010E32  0F30               	addlw	48
  4646  010E34  0100               	movlb	0	; () banked
  4647  010E36  0100               	movlb	0	; () banked
  4648  010E38  6FAF               	movwf	sprintf@c& (0+255),b
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;doprnt.c: 1532: }
  4652                           ;doprnt.c: 1533: ((*sp++ = (c)));
  4653  010E3A  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4654  010E3E  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4655  010E42  0100               	movlb	0	; () banked
  4656  010E44  C0AF  FFDF         	movff	sprintf@c,indf2
  4657  010E48                     L10:
  4658                           
  4659                           ; BSR set to: 0
  4660  010E48  0100               	movlb	0	; () banked
  4661  010E4A  0100               	movlb	0	; () banked
  4662  010E4C  4B7E               	infsnz	sprintf@sp& (0+255),f,b
  4663  010E4E  2B7F               	incf	(sprintf@sp+1)& (0+255),f,b
  4664  010E50                     l8201:
  4665                           
  4666                           ; BSR set to: 0
  4667  010E50  0100               	movlb	0	; () banked
  4668  010E52  0100               	movlb	0	; () banked
  4669  010E54  07AD               	decf	sprintf@prec& (0+255),f,b
  4670  010E56  A0D8               	btfss	status,0,c
  4671  010E58  07AE               	decf	(sprintf@prec+1)& (0+255),f,b
  4672  010E5A  0100               	movlb	0	; () banked
  4673  010E5C  29AD               	incf	sprintf@prec& (0+255),w,b
  4674  010E5E  B4D8               	btfsc	status,2,c
  4675  010E60  29AE               	incf	(sprintf@prec+1)& (0+255),w,b
  4676  010E62  A4D8               	btfss	status,2,c
  4677  010E64  D79C               	goto	l8195
  4678  010E66                     l8203:
  4679                           
  4680                           ; BSR set to: 0
  4681  010E66  0100               	movlb	0	; () banked
  4682  010E68  0100               	movlb	0	; () banked
  4683  010E6A  5180               	movf	sprintf@f& (0+255),w,b
  4684  010E6C  0100               	movlb	0	; () banked
  4685  010E6E  6F85               	movwf	??_sprintf& (0+255),b
  4686  010E70  0100               	movlb	0	; () banked
  4687  010E72  0100               	movlb	0	; () banked
  4688  010E74  5181               	movf	(sprintf@f+1)& (0+255),w,b
  4689  010E76  0100               	movlb	0	; () banked
  4690  010E78  6F86               	movwf	(??_sprintf+1)& (0+255),b
  4691  010E7A  0100               	movlb	0	; () banked
  4692  010E7C  4B80               	infsnz	sprintf@f& (0+255),f,b
  4693  010E7E  2B81               	incf	(sprintf@f+1)& (0+255),f,b
  4694  010E80  C085  FFF6         	movff	??_sprintf,tblptrl
  4695  010E84  C086  FFF7         	movff	??_sprintf+1,tblptrh
  4696  010E88  0E00               	movlw	low (__mediumconst shr (0+16))
  4697  010E8A  6EF8               	movwf	tblptru,c
  4698  010E8C  0008               	tblrd		*
  4699  010E8E  0100               	movlb	0	; () banked
  4700  010E90  CFF5 F0AF          	movff	tablat,sprintf@c
  4701  010E94  0100               	movlb	0	; () banked
  4702  010E96  67AF               	tstfsz	sprintf@c& (0+255),b
  4703  010E98  EF0C  F080         	goto	l7875
  4704  010E9C                     l8205:
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;doprnt.c: 1547: *sp = 0;
  4708  010E9C  C07E  FFD9         	movff	sprintf@sp,fsr2l
  4709  010EA0  C07F  FFDA         	movff	sprintf@sp+1,fsr2h
  4710  010EA4  0E00               	movlw	0
  4711  010EA6  6EDF               	movwf	indf2,c
  4712  010EA8  0012               	return	
  4713  010EAA                     __end_of_sprintf:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           wreg	equ	0xFE8
  4722                           indf2	equ	0xFDF
  4723                           postinc2	equ	0xFDE
  4724                           postdec2	equ	0xFDD
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function _scale *****************
  4730 ;; Defined at:
  4731 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\doprnt.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  scl             1    wreg     char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  scl             1   57[COMRAM] char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  3   51[COMRAM] char 
  4738 ;; Registers used:
  4739 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4745 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4746 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4748 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4749 ;;Total ram usage:        7 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    3
  4752 ;; This function calls:
  4753 ;;		___awdiv
  4754 ;;		___awmod
  4755 ;;		___ftmul
  4756 ;;		___wmul
  4757 ;; This function is called by:
  4758 ;;		_sprintf
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text9
  4763  010EAA                     __ptext9:
  4764                           	opt stack 0
  4765  010EAA                     _scale:
  4766                           	opt stack 25
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;incstack = 0
  4770                           ;scale@scl stored from wreg
  4771  010EAA  CFE8 F03A          	movff	wreg,scale@scl
  4772                           
  4773                           ;doprnt.c: 428: if(scl < 0) {
  4774  010EAE  AE3A               	btfss	scale@scl,7,c
  4775  010EB0  D113               	goto	l7783
  4776                           
  4777                           ;doprnt.c: 429: scl = -scl;
  4778  010EB2  6C3A               	negf	scale@scl,c
  4779                           
  4780                           ;doprnt.c: 430: if(scl>=110)
  4781  010EB4  503A               	movf	scale@scl,w,c
  4782  010EB6  0A80               	xorlw	128
  4783  010EB8  0F12               	addlw	-238
  4784  010EBA  A0D8               	btfss	status,0,c
  4785  010EBC  D09A               	goto	l7773
  4786                           
  4787                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4788  010EBE  0E00               	movlw	0
  4789  010EC0  6E22               	movwf	___wmul@multiplicand+1,c
  4790  010EC2  0E03               	movlw	3
  4791  010EC4  6E21               	movwf	___wmul@multiplicand,c
  4792  010EC6  0E00               	movlw	0
  4793  010EC8  6E19               	movwf	___awdiv@divisor+1,c
  4794  010ECA  0E0A               	movlw	10
  4795  010ECC  6E18               	movwf	___awdiv@divisor,c
  4796  010ECE  0E00               	movlw	0
  4797  010ED0  6E12               	movwf	___awmod@divisor+1,c
  4798  010ED2  0E64               	movlw	100
  4799  010ED4  6E11               	movwf	___awmod@divisor,c
  4800  010ED6  503A               	movf	scale@scl,w,c
  4801  010ED8  6E0F               	movwf	___awmod@dividend,c
  4802  010EDA  6A10               	clrf	___awmod@dividend+1,c
  4803  010EDC  BE0F               	btfsc	___awmod@dividend,7,c
  4804  010EDE  0610               	decf	___awmod@dividend+1,f,c
  4805  010EE0  ECDA  F093         	call	___awmod	;wreg free
  4806  010EE4  C00F  F016         	movff	?___awmod,___awdiv@dividend
  4807  010EE8  C010  F017         	movff	?___awmod+1,___awdiv@dividend+1
  4808  010EEC  EC2E  F093         	call	___awdiv	;wreg free
  4809  010EF0  0E09               	movlw	9
  4810  010EF2  2416               	addwf	?___awdiv,w,c
  4811  010EF4  6E1F               	movwf	___wmul@multiplier,c
  4812  010EF6  0E00               	movlw	0
  4813  010EF8  2017               	addwfc	?___awdiv+1,w,c
  4814  010EFA  6E20               	movwf	___wmul@multiplier+1,c
  4815  010EFC  EC28  F097         	call	___wmul	;wreg free
  4816  010F00  0E81               	movlw	low __npowers_
  4817  010F02  241F               	addwf	?___wmul,w,c
  4818  010F04  6EF6               	movwf	tblptrl,c
  4819  010F06  0EFE               	movlw	high __npowers_
  4820  010F08  2020               	addwfc	?___wmul+1,w,c
  4821  010F0A  6EF7               	movwf	tblptrh,c
  4822  010F0C  6AF8               	clrf	tblptru,c
  4823  010F0E  0E00               	movlw	low (__mediumconst shr (0+16))
  4824  010F10  22F8               	addwfc	tblptru,f,c
  4825  010F12  0009               	tblrd		*+
  4826  010F14  CFF5 F028          	movff	tablat,___ftmul@f2
  4827  010F18  0009               	tblrd		*+
  4828  010F1A  CFF5 F029          	movff	tablat,___ftmul@f2+1
  4829  010F1E  000A               	tblrd		*-
  4830  010F20  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  4831  010F24  0E00               	movlw	0
  4832  010F26  6E22               	movwf	___wmul@multiplicand+1,c
  4833  010F28  0E03               	movlw	3
  4834  010F2A  6E21               	movwf	___wmul@multiplicand,c
  4835  010F2C  0E00               	movlw	0
  4836  010F2E  6E19               	movwf	___awdiv@divisor+1,c
  4837  010F30  0E64               	movlw	100
  4838  010F32  6E18               	movwf	___awdiv@divisor,c
  4839  010F34  503A               	movf	scale@scl,w,c
  4840  010F36  6E16               	movwf	___awdiv@dividend,c
  4841  010F38  6A17               	clrf	___awdiv@dividend+1,c
  4842  010F3A  BE16               	btfsc	___awdiv@dividend,7,c
  4843  010F3C  0617               	decf	___awdiv@dividend+1,f,c
  4844  010F3E  EC2E  F093         	call	___awdiv	;wreg free
  4845  010F42  0E12               	movlw	18
  4846  010F44  2416               	addwf	?___awdiv,w,c
  4847  010F46  6E1F               	movwf	___wmul@multiplier,c
  4848  010F48  0E00               	movlw	0
  4849  010F4A  2017               	addwfc	?___awdiv+1,w,c
  4850  010F4C  6E20               	movwf	___wmul@multiplier+1,c
  4851  010F4E  EC28  F097         	call	___wmul	;wreg free
  4852  010F52  0E81               	movlw	low __npowers_
  4853  010F54  241F               	addwf	?___wmul,w,c
  4854  010F56  6EF6               	movwf	tblptrl,c
  4855  010F58  0EFE               	movlw	high __npowers_
  4856  010F5A  2020               	addwfc	?___wmul+1,w,c
  4857  010F5C  6EF7               	movwf	tblptrh,c
  4858  010F5E  6AF8               	clrf	tblptru,c
  4859  010F60  0E00               	movlw	low (__mediumconst shr (0+16))
  4860  010F62  22F8               	addwfc	tblptru,f,c
  4861  010F64  0009               	tblrd		*+
  4862  010F66  CFF5 F025          	movff	tablat,___ftmul@f1
  4863  010F6A  0009               	tblrd		*+
  4864  010F6C  CFF5 F026          	movff	tablat,___ftmul@f1+1
  4865  010F70  000A               	tblrd		*-
  4866  010F72  CFF5 F027          	movff	tablat,___ftmul@f1+2
  4867  010F76  EC11  F091         	call	___ftmul	;wreg free
  4868  010F7A  C025  F037         	movff	?___ftmul,_scale$2561
  4869  010F7E  C026  F038         	movff	?___ftmul+1,_scale$2561+1
  4870  010F82  C027  F039         	movff	?___ftmul+2,_scale$2561+2
  4871                           
  4872                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4873  010F86  C037  F025         	movff	_scale$2561,___ftmul@f1
  4874  010F8A  C038  F026         	movff	_scale$2561+1,___ftmul@f1+1
  4875  010F8E  C039  F027         	movff	_scale$2561+2,___ftmul@f1+2
  4876  010F92  0E00               	movlw	0
  4877  010F94  6E22               	movwf	___wmul@multiplicand+1,c
  4878  010F96  0E03               	movlw	3
  4879  010F98  6E21               	movwf	___wmul@multiplicand,c
  4880  010F9A  0E00               	movlw	0
  4881  010F9C  6E12               	movwf	___awmod@divisor+1,c
  4882  010F9E  0E0A               	movlw	10
  4883  010FA0  6E11               	movwf	___awmod@divisor,c
  4884  010FA2  503A               	movf	scale@scl,w,c
  4885  010FA4  6E0F               	movwf	___awmod@dividend,c
  4886  010FA6  6A10               	clrf	___awmod@dividend+1,c
  4887  010FA8  BE0F               	btfsc	___awmod@dividend,7,c
  4888  010FAA  0610               	decf	___awmod@dividend+1,f,c
  4889  010FAC  ECDA  F093         	call	___awmod	;wreg free
  4890  010FB0  C00F  F01F         	movff	?___awmod,___wmul@multiplier
  4891  010FB4  C010  F020         	movff	?___awmod+1,___wmul@multiplier+1
  4892  010FB8  EC28  F097         	call	___wmul	;wreg free
  4893  010FBC  0E81               	movlw	low __npowers_
  4894  010FBE  241F               	addwf	?___wmul,w,c
  4895  010FC0  6EF6               	movwf	tblptrl,c
  4896  010FC2  0EFE               	movlw	high __npowers_
  4897  010FC4  2020               	addwfc	?___wmul+1,w,c
  4898  010FC6  6EF7               	movwf	tblptrh,c
  4899  010FC8  6AF8               	clrf	tblptru,c
  4900  010FCA  0E00               	movlw	low (__mediumconst shr (0+16))
  4901  010FCC  22F8               	addwfc	tblptru,f,c
  4902  010FCE  0009               	tblrd		*+
  4903  010FD0  CFF5 F028          	movff	tablat,___ftmul@f2
  4904  010FD4  0009               	tblrd		*+
  4905  010FD6  CFF5 F029          	movff	tablat,___ftmul@f2+1
  4906  010FDA  000A               	tblrd		*-
  4907  010FDC  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  4908  010FE0  EC11  F091         	call	___ftmul	;wreg free
  4909  010FE4  C025  F034         	movff	?___ftmul,?_scale
  4910  010FE8  C026  F035         	movff	?___ftmul+1,?_scale+1
  4911  010FEC  C027  F036         	movff	?___ftmul+2,?_scale+2
  4912  010FF0  0012               	return	
  4913  010FF2                     l7773:
  4914                           
  4915                           ;doprnt.c: 432: else if(scl > 10)
  4916  010FF2  503A               	movf	scale@scl,w,c
  4917  010FF4  0A80               	xorlw	128
  4918  010FF6  0F75               	addlw	-139
  4919  010FF8  A0D8               	btfss	status,0,c
  4920  010FFA  D059               	goto	l7779
  4921                           
  4922                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4923  010FFC  0E00               	movlw	0
  4924  010FFE  6E22               	movwf	___wmul@multiplicand+1,c
  4925  011000  0E03               	movlw	3
  4926  011002  6E21               	movwf	___wmul@multiplicand,c
  4927  011004  0E00               	movlw	0
  4928  011006  6E19               	movwf	___awdiv@divisor+1,c
  4929  011008  0E0A               	movlw	10
  4930  01100A  6E18               	movwf	___awdiv@divisor,c
  4931  01100C  503A               	movf	scale@scl,w,c
  4932  01100E  6E16               	movwf	___awdiv@dividend,c
  4933  011010  6A17               	clrf	___awdiv@dividend+1,c
  4934  011012  BE16               	btfsc	___awdiv@dividend,7,c
  4935  011014  0617               	decf	___awdiv@dividend+1,f,c
  4936  011016  EC2E  F093         	call	___awdiv	;wreg free
  4937  01101A  0E09               	movlw	9
  4938  01101C  2416               	addwf	?___awdiv,w,c
  4939  01101E  6E1F               	movwf	___wmul@multiplier,c
  4940  011020  0E00               	movlw	0
  4941  011022  2017               	addwfc	?___awdiv+1,w,c
  4942  011024  6E20               	movwf	___wmul@multiplier+1,c
  4943  011026  EC28  F097         	call	___wmul	;wreg free
  4944  01102A  0E81               	movlw	low __npowers_
  4945  01102C  241F               	addwf	?___wmul,w,c
  4946  01102E  6EF6               	movwf	tblptrl,c
  4947  011030  0EFE               	movlw	high __npowers_
  4948  011032  2020               	addwfc	?___wmul+1,w,c
  4949  011034  6EF7               	movwf	tblptrh,c
  4950  011036  6AF8               	clrf	tblptru,c
  4951  011038  0E00               	movlw	low (__mediumconst shr (0+16))
  4952  01103A  22F8               	addwfc	tblptru,f,c
  4953  01103C  0009               	tblrd		*+
  4954  01103E  CFF5 F025          	movff	tablat,___ftmul@f1
  4955  011042  0009               	tblrd		*+
  4956  011044  CFF5 F026          	movff	tablat,___ftmul@f1+1
  4957  011048  000A               	tblrd		*-
  4958  01104A  CFF5 F027          	movff	tablat,___ftmul@f1+2
  4959  01104E  0E00               	movlw	0
  4960  011050  6E22               	movwf	___wmul@multiplicand+1,c
  4961  011052  0E03               	movlw	3
  4962  011054  6E21               	movwf	___wmul@multiplicand,c
  4963  011056  0E00               	movlw	0
  4964  011058  6E12               	movwf	___awmod@divisor+1,c
  4965  01105A  0E0A               	movlw	10
  4966  01105C  6E11               	movwf	___awmod@divisor,c
  4967  01105E  503A               	movf	scale@scl,w,c
  4968  011060  6E0F               	movwf	___awmod@dividend,c
  4969  011062  6A10               	clrf	___awmod@dividend+1,c
  4970  011064  BE0F               	btfsc	___awmod@dividend,7,c
  4971  011066  0610               	decf	___awmod@dividend+1,f,c
  4972  011068  ECDA  F093         	call	___awmod	;wreg free
  4973  01106C  C00F  F01F         	movff	?___awmod,___wmul@multiplier
  4974  011070  C010  F020         	movff	?___awmod+1,___wmul@multiplier+1
  4975  011074  EC28  F097         	call	___wmul	;wreg free
  4976  011078  0E81               	movlw	low __npowers_
  4977  01107A  241F               	addwf	?___wmul,w,c
  4978  01107C  6EF6               	movwf	tblptrl,c
  4979  01107E  0EFE               	movlw	high __npowers_
  4980  011080  2020               	addwfc	?___wmul+1,w,c
  4981  011082  6EF7               	movwf	tblptrh,c
  4982  011084  6AF8               	clrf	tblptru,c
  4983  011086  0E00               	movlw	low (__mediumconst shr (0+16))
  4984  011088  22F8               	addwfc	tblptru,f,c
  4985  01108A  0009               	tblrd		*+
  4986  01108C  CFF5 F028          	movff	tablat,___ftmul@f2
  4987  011090  0009               	tblrd		*+
  4988  011092  CFF5 F029          	movff	tablat,___ftmul@f2+1
  4989  011096  000A               	tblrd		*-
  4990  011098  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  4991  01109C  EC11  F091         	call	___ftmul	;wreg free
  4992  0110A0  C025  F034         	movff	?___ftmul,?_scale
  4993  0110A4  C026  F035         	movff	?___ftmul+1,?_scale+1
  4994  0110A8  C027  F036         	movff	?___ftmul+2,?_scale+2
  4995  0110AC  0012               	return	
  4996  0110AE                     l7779:
  4997                           
  4998                           ;doprnt.c: 434: return _npowers_[scl];
  4999  0110AE  503A               	movf	scale@scl,w,c
  5000  0110B0  0D03               	mullw	3
  5001  0110B2  0E81               	movlw	low __npowers_
  5002  0110B4  24F3               	addwf	prodl,w,c
  5003  0110B6  6EF6               	movwf	tblptrl,c
  5004  0110B8  0EFE               	movlw	high __npowers_
  5005  0110BA  20F4               	addwfc	prodh,w,c
  5006  0110BC  6EF7               	movwf	tblptrh,c
  5007  0110BE  6AF8               	clrf	tblptru,c
  5008  0110C0  0E00               	movlw	low (__mediumconst shr (0+16))
  5009  0110C2  22F8               	addwfc	tblptru,f,c
  5010  0110C4  0009               	tblrd		*+
  5011  0110C6  CFF5 F034          	movff	tablat,?_scale
  5012  0110CA  0009               	tblrd		*+
  5013  0110CC  CFF5 F035          	movff	tablat,?_scale+1
  5014  0110D0  000A               	tblrd		*-
  5015  0110D2  CFF5 F036          	movff	tablat,?_scale+2
  5016  0110D6  0012               	return	
  5017  0110D8                     l7783:
  5018                           
  5019                           ;doprnt.c: 435: }
  5020                           ;doprnt.c: 436: if(scl>=110)
  5021  0110D8  503A               	movf	scale@scl,w,c
  5022  0110DA  0A80               	xorlw	128
  5023  0110DC  0F12               	addlw	-238
  5024  0110DE  A0D8               	btfss	status,0,c
  5025  0110E0  D09A               	goto	l7791
  5026                           
  5027                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5028  0110E2  0E00               	movlw	0
  5029  0110E4  6E22               	movwf	___wmul@multiplicand+1,c
  5030  0110E6  0E03               	movlw	3
  5031  0110E8  6E21               	movwf	___wmul@multiplicand,c
  5032  0110EA  0E00               	movlw	0
  5033  0110EC  6E19               	movwf	___awdiv@divisor+1,c
  5034  0110EE  0E0A               	movlw	10
  5035  0110F0  6E18               	movwf	___awdiv@divisor,c
  5036  0110F2  0E00               	movlw	0
  5037  0110F4  6E12               	movwf	___awmod@divisor+1,c
  5038  0110F6  0E64               	movlw	100
  5039  0110F8  6E11               	movwf	___awmod@divisor,c
  5040  0110FA  503A               	movf	scale@scl,w,c
  5041  0110FC  6E0F               	movwf	___awmod@dividend,c
  5042  0110FE  6A10               	clrf	___awmod@dividend+1,c
  5043  011100  BE0F               	btfsc	___awmod@dividend,7,c
  5044  011102  0610               	decf	___awmod@dividend+1,f,c
  5045  011104  ECDA  F093         	call	___awmod	;wreg free
  5046  011108  C00F  F016         	movff	?___awmod,___awdiv@dividend
  5047  01110C  C010  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5048  011110  EC2E  F093         	call	___awdiv	;wreg free
  5049  011114  0E09               	movlw	9
  5050  011116  2416               	addwf	?___awdiv,w,c
  5051  011118  6E1F               	movwf	___wmul@multiplier,c
  5052  01111A  0E00               	movlw	0
  5053  01111C  2017               	addwfc	?___awdiv+1,w,c
  5054  01111E  6E20               	movwf	___wmul@multiplier+1,c
  5055  011120  EC28  F097         	call	___wmul	;wreg free
  5056  011124  0EA8               	movlw	low __powers_
  5057  011126  241F               	addwf	?___wmul,w,c
  5058  011128  6EF6               	movwf	tblptrl,c
  5059  01112A  0EFE               	movlw	high __powers_
  5060  01112C  2020               	addwfc	?___wmul+1,w,c
  5061  01112E  6EF7               	movwf	tblptrh,c
  5062  011130  6AF8               	clrf	tblptru,c
  5063  011132  0E00               	movlw	low (__mediumconst shr (0+16))
  5064  011134  22F8               	addwfc	tblptru,f,c
  5065  011136  0009               	tblrd		*+
  5066  011138  CFF5 F028          	movff	tablat,___ftmul@f2
  5067  01113C  0009               	tblrd		*+
  5068  01113E  CFF5 F029          	movff	tablat,___ftmul@f2+1
  5069  011142  000A               	tblrd		*-
  5070  011144  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  5071  011148  0E00               	movlw	0
  5072  01114A  6E22               	movwf	___wmul@multiplicand+1,c
  5073  01114C  0E03               	movlw	3
  5074  01114E  6E21               	movwf	___wmul@multiplicand,c
  5075  011150  0E00               	movlw	0
  5076  011152  6E19               	movwf	___awdiv@divisor+1,c
  5077  011154  0E64               	movlw	100
  5078  011156  6E18               	movwf	___awdiv@divisor,c
  5079  011158  503A               	movf	scale@scl,w,c
  5080  01115A  6E16               	movwf	___awdiv@dividend,c
  5081  01115C  6A17               	clrf	___awdiv@dividend+1,c
  5082  01115E  BE16               	btfsc	___awdiv@dividend,7,c
  5083  011160  0617               	decf	___awdiv@dividend+1,f,c
  5084  011162  EC2E  F093         	call	___awdiv	;wreg free
  5085  011166  0E12               	movlw	18
  5086  011168  2416               	addwf	?___awdiv,w,c
  5087  01116A  6E1F               	movwf	___wmul@multiplier,c
  5088  01116C  0E00               	movlw	0
  5089  01116E  2017               	addwfc	?___awdiv+1,w,c
  5090  011170  6E20               	movwf	___wmul@multiplier+1,c
  5091  011172  EC28  F097         	call	___wmul	;wreg free
  5092  011176  0EA8               	movlw	low __powers_
  5093  011178  241F               	addwf	?___wmul,w,c
  5094  01117A  6EF6               	movwf	tblptrl,c
  5095  01117C  0EFE               	movlw	high __powers_
  5096  01117E  2020               	addwfc	?___wmul+1,w,c
  5097  011180  6EF7               	movwf	tblptrh,c
  5098  011182  6AF8               	clrf	tblptru,c
  5099  011184  0E00               	movlw	low (__mediumconst shr (0+16))
  5100  011186  22F8               	addwfc	tblptru,f,c
  5101  011188  0009               	tblrd		*+
  5102  01118A  CFF5 F025          	movff	tablat,___ftmul@f1
  5103  01118E  0009               	tblrd		*+
  5104  011190  CFF5 F026          	movff	tablat,___ftmul@f1+1
  5105  011194  000A               	tblrd		*-
  5106  011196  CFF5 F027          	movff	tablat,___ftmul@f1+2
  5107  01119A  EC11  F091         	call	___ftmul	;wreg free
  5108  01119E  C025  F037         	movff	?___ftmul,_scale$2561
  5109  0111A2  C026  F038         	movff	?___ftmul+1,_scale$2561+1
  5110  0111A6  C027  F039         	movff	?___ftmul+2,_scale$2561+2
  5111                           
  5112                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5113  0111AA  C037  F025         	movff	_scale$2561,___ftmul@f1
  5114  0111AE  C038  F026         	movff	_scale$2561+1,___ftmul@f1+1
  5115  0111B2  C039  F027         	movff	_scale$2561+2,___ftmul@f1+2
  5116  0111B6  0E00               	movlw	0
  5117  0111B8  6E22               	movwf	___wmul@multiplicand+1,c
  5118  0111BA  0E03               	movlw	3
  5119  0111BC  6E21               	movwf	___wmul@multiplicand,c
  5120  0111BE  0E00               	movlw	0
  5121  0111C0  6E12               	movwf	___awmod@divisor+1,c
  5122  0111C2  0E0A               	movlw	10
  5123  0111C4  6E11               	movwf	___awmod@divisor,c
  5124  0111C6  503A               	movf	scale@scl,w,c
  5125  0111C8  6E0F               	movwf	___awmod@dividend,c
  5126  0111CA  6A10               	clrf	___awmod@dividend+1,c
  5127  0111CC  BE0F               	btfsc	___awmod@dividend,7,c
  5128  0111CE  0610               	decf	___awmod@dividend+1,f,c
  5129  0111D0  ECDA  F093         	call	___awmod	;wreg free
  5130  0111D4  C00F  F01F         	movff	?___awmod,___wmul@multiplier
  5131  0111D8  C010  F020         	movff	?___awmod+1,___wmul@multiplier+1
  5132  0111DC  EC28  F097         	call	___wmul	;wreg free
  5133  0111E0  0EA8               	movlw	low __powers_
  5134  0111E2  241F               	addwf	?___wmul,w,c
  5135  0111E4  6EF6               	movwf	tblptrl,c
  5136  0111E6  0EFE               	movlw	high __powers_
  5137  0111E8  2020               	addwfc	?___wmul+1,w,c
  5138  0111EA  6EF7               	movwf	tblptrh,c
  5139  0111EC  6AF8               	clrf	tblptru,c
  5140  0111EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5141  0111F0  22F8               	addwfc	tblptru,f,c
  5142  0111F2  0009               	tblrd		*+
  5143  0111F4  CFF5 F028          	movff	tablat,___ftmul@f2
  5144  0111F8  0009               	tblrd		*+
  5145  0111FA  CFF5 F029          	movff	tablat,___ftmul@f2+1
  5146  0111FE  000A               	tblrd		*-
  5147  011200  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  5148  011204  EC11  F091         	call	___ftmul	;wreg free
  5149  011208  C025  F034         	movff	?___ftmul,?_scale
  5150  01120C  C026  F035         	movff	?___ftmul+1,?_scale+1
  5151  011210  C027  F036         	movff	?___ftmul+2,?_scale+2
  5152  011214  0012               	return	
  5153  011216                     l7791:
  5154                           
  5155                           ;doprnt.c: 438: else if(scl > 10)
  5156  011216  503A               	movf	scale@scl,w,c
  5157  011218  0A80               	xorlw	128
  5158  01121A  0F75               	addlw	-139
  5159  01121C  A0D8               	btfss	status,0,c
  5160  01121E  D059               	goto	l7797
  5161                           
  5162                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5163  011220  0E00               	movlw	0
  5164  011222  6E22               	movwf	___wmul@multiplicand+1,c
  5165  011224  0E03               	movlw	3
  5166  011226  6E21               	movwf	___wmul@multiplicand,c
  5167  011228  0E00               	movlw	0
  5168  01122A  6E19               	movwf	___awdiv@divisor+1,c
  5169  01122C  0E0A               	movlw	10
  5170  01122E  6E18               	movwf	___awdiv@divisor,c
  5171  011230  503A               	movf	scale@scl,w,c
  5172  011232  6E16               	movwf	___awdiv@dividend,c
  5173  011234  6A17               	clrf	___awdiv@dividend+1,c
  5174  011236  BE16               	btfsc	___awdiv@dividend,7,c
  5175  011238  0617               	decf	___awdiv@dividend+1,f,c
  5176  01123A  EC2E  F093         	call	___awdiv	;wreg free
  5177  01123E  0E09               	movlw	9
  5178  011240  2416               	addwf	?___awdiv,w,c
  5179  011242  6E1F               	movwf	___wmul@multiplier,c
  5180  011244  0E00               	movlw	0
  5181  011246  2017               	addwfc	?___awdiv+1,w,c
  5182  011248  6E20               	movwf	___wmul@multiplier+1,c
  5183  01124A  EC28  F097         	call	___wmul	;wreg free
  5184  01124E  0EA8               	movlw	low __powers_
  5185  011250  241F               	addwf	?___wmul,w,c
  5186  011252  6EF6               	movwf	tblptrl,c
  5187  011254  0EFE               	movlw	high __powers_
  5188  011256  2020               	addwfc	?___wmul+1,w,c
  5189  011258  6EF7               	movwf	tblptrh,c
  5190  01125A  6AF8               	clrf	tblptru,c
  5191  01125C  0E00               	movlw	low (__mediumconst shr (0+16))
  5192  01125E  22F8               	addwfc	tblptru,f,c
  5193  011260  0009               	tblrd		*+
  5194  011262  CFF5 F025          	movff	tablat,___ftmul@f1
  5195  011266  0009               	tblrd		*+
  5196  011268  CFF5 F026          	movff	tablat,___ftmul@f1+1
  5197  01126C  000A               	tblrd		*-
  5198  01126E  CFF5 F027          	movff	tablat,___ftmul@f1+2
  5199  011272  0E00               	movlw	0
  5200  011274  6E22               	movwf	___wmul@multiplicand+1,c
  5201  011276  0E03               	movlw	3
  5202  011278  6E21               	movwf	___wmul@multiplicand,c
  5203  01127A  0E00               	movlw	0
  5204  01127C  6E12               	movwf	___awmod@divisor+1,c
  5205  01127E  0E0A               	movlw	10
  5206  011280  6E11               	movwf	___awmod@divisor,c
  5207  011282  503A               	movf	scale@scl,w,c
  5208  011284  6E0F               	movwf	___awmod@dividend,c
  5209  011286  6A10               	clrf	___awmod@dividend+1,c
  5210  011288  BE0F               	btfsc	___awmod@dividend,7,c
  5211  01128A  0610               	decf	___awmod@dividend+1,f,c
  5212  01128C  ECDA  F093         	call	___awmod	;wreg free
  5213  011290  C00F  F01F         	movff	?___awmod,___wmul@multiplier
  5214  011294  C010  F020         	movff	?___awmod+1,___wmul@multiplier+1
  5215  011298  EC28  F097         	call	___wmul	;wreg free
  5216  01129C  0EA8               	movlw	low __powers_
  5217  01129E  241F               	addwf	?___wmul,w,c
  5218  0112A0  6EF6               	movwf	tblptrl,c
  5219  0112A2  0EFE               	movlw	high __powers_
  5220  0112A4  2020               	addwfc	?___wmul+1,w,c
  5221  0112A6  6EF7               	movwf	tblptrh,c
  5222  0112A8  6AF8               	clrf	tblptru,c
  5223  0112AA  0E00               	movlw	low (__mediumconst shr (0+16))
  5224  0112AC  22F8               	addwfc	tblptru,f,c
  5225  0112AE  0009               	tblrd		*+
  5226  0112B0  CFF5 F028          	movff	tablat,___ftmul@f2
  5227  0112B4  0009               	tblrd		*+
  5228  0112B6  CFF5 F029          	movff	tablat,___ftmul@f2+1
  5229  0112BA  000A               	tblrd		*-
  5230  0112BC  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  5231  0112C0  EC11  F091         	call	___ftmul	;wreg free
  5232  0112C4  C025  F034         	movff	?___ftmul,?_scale
  5233  0112C8  C026  F035         	movff	?___ftmul+1,?_scale+1
  5234  0112CC  C027  F036         	movff	?___ftmul+2,?_scale+2
  5235  0112D0  0012               	return	
  5236  0112D2                     l7797:
  5237                           
  5238                           ;doprnt.c: 440: return _powers_[scl];
  5239  0112D2  503A               	movf	scale@scl,w,c
  5240  0112D4  0D03               	mullw	3
  5241  0112D6  0EA8               	movlw	low __powers_
  5242  0112D8  24F3               	addwf	prodl,w,c
  5243  0112DA  6EF6               	movwf	tblptrl,c
  5244  0112DC  0EFE               	movlw	high __powers_
  5245  0112DE  20F4               	addwfc	prodh,w,c
  5246  0112E0  6EF7               	movwf	tblptrh,c
  5247  0112E2  6AF8               	clrf	tblptru,c
  5248  0112E4  0E00               	movlw	low (__mediumconst shr (0+16))
  5249  0112E6  22F8               	addwfc	tblptru,f,c
  5250  0112E8  0009               	tblrd		*+
  5251  0112EA  CFF5 F034          	movff	tablat,?_scale
  5252  0112EE  0009               	tblrd		*+
  5253  0112F0  CFF5 F035          	movff	tablat,?_scale+1
  5254  0112F4  000A               	tblrd		*-
  5255  0112F6  CFF5 F036          	movff	tablat,?_scale+2
  5256  0112FA  0012               	return	
  5257  0112FC                     __end_of_scale:
  5258                           	opt stack 0
  5259                           tblptru	equ	0xFF8
  5260                           tblptrh	equ	0xFF7
  5261                           tblptrl	equ	0xFF6
  5262                           tablat	equ	0xFF5
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           wreg	equ	0xFE8
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _isdigit *****************
  5274 ;; Defined at:
  5275 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\isdigit.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  c               1    wreg     unsigned char 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  c               1   16[COMRAM] unsigned char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;		None               void
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5291 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5293 ;;Total ram usage:        3 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    1
  5296 ;; This function calls:
  5297 ;;		Nothing
  5298 ;; This function is called by:
  5299 ;;		_sprintf
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text10
  5304  012F54                     __ptext10:
  5305                           	opt stack 0
  5306  012F54                     _isdigit:
  5307                           	opt stack 27
  5308                           
  5309                           ;incstack = 0
  5310                           ;isdigit@c stored from wreg
  5311  012F54  CFE8 F011          	movff	wreg,isdigit@c
  5312  012F58  6E0F               	movwf	??_isdigit& (0+255),c
  5313  012F5A  0E00               	movlw	0
  5314  012F5C  6E10               	movwf	_isdigit$2160,c
  5315  012F5E  500F               	movf	??_isdigit& (0+255),w,c
  5316  012F60  0E3A               	movlw	58
  5317  012F62  5C11               	subwf	isdigit@c,w,c
  5318  012F64  B0D8               	btfsc	status,0,c
  5319  012F66  D007               	goto	l5747
  5320  012F68  0E2F               	movlw	47
  5321  012F6A  6411               	cpfsgt	isdigit@c,c
  5322  012F6C  D004               	goto	l5747
  5323  012F6E  6E0F               	movwf	??_isdigit& (0+255),c
  5324  012F70  0E01               	movlw	1
  5325  012F72  6E10               	movwf	_isdigit$2160,c
  5326  012F74  500F               	movf	??_isdigit& (0+255),w,c
  5327  012F76                     l5747:
  5328  012F76  C010  F00F         	movff	_isdigit$2160,??_isdigit
  5329  012F7A  300F               	rrcf	??_isdigit,w,c
  5330  012F7C  0012               	return	
  5331  012F7E                     __end_of_isdigit:
  5332                           	opt stack 0
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           wreg	equ	0xFE8
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function _fround *****************
  5348 ;; Defined at:
  5349 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\doprnt.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  prec            1    wreg     unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  prec            1   60[COMRAM] unsigned char 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  3   51[COMRAM] unsigned char 
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5363 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5364 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5366 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5367 ;;Total ram usage:       10 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    3
  5370 ;; This function calls:
  5371 ;;		___awdiv
  5372 ;;		___awmod
  5373 ;;		___ftmul
  5374 ;;		___wmul
  5375 ;; This function is called by:
  5376 ;;		_sprintf
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text11
  5381  0112FC                     __ptext11:
  5382                           	opt stack 0
  5383  0112FC                     _fround:
  5384                           	opt stack 25
  5385                           
  5386                           ;incstack = 0
  5387                           ;fround@prec stored from wreg
  5388  0112FC  CFE8 F03D          	movff	wreg,fround@prec
  5389                           
  5390                           ;doprnt.c: 413: if(prec>=110)
  5391  011300  0E6D               	movlw	109
  5392  011302  643D               	cpfsgt	fround@prec,c
  5393  011304  D0A8               	goto	l7751
  5394                           
  5395                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5396  011306  0E00               	movlw	0
  5397  011308  6E22               	movwf	___wmul@multiplicand+1,c
  5398  01130A  0E03               	movlw	3
  5399  01130C  6E21               	movwf	___wmul@multiplicand,c
  5400  01130E  0E00               	movlw	0
  5401  011310  6E19               	movwf	___awdiv@divisor+1,c
  5402  011312  0E0A               	movlw	10
  5403  011314  6E18               	movwf	___awdiv@divisor,c
  5404  011316  0E00               	movlw	0
  5405  011318  6E12               	movwf	___awmod@divisor+1,c
  5406  01131A  0E64               	movlw	100
  5407  01131C  6E11               	movwf	___awmod@divisor,c
  5408  01131E  C03D  F00F         	movff	fround@prec,___awmod@dividend
  5409  011322  6A10               	clrf	___awmod@dividend+1,c
  5410  011324  ECDA  F093         	call	___awmod	;wreg free
  5411  011328  C00F  F016         	movff	?___awmod,___awdiv@dividend
  5412  01132C  C010  F017         	movff	?___awmod+1,___awdiv@dividend+1
  5413  011330  EC2E  F093         	call	___awdiv	;wreg free
  5414  011334  0E09               	movlw	9
  5415  011336  2416               	addwf	?___awdiv,w,c
  5416  011338  6E1F               	movwf	___wmul@multiplier,c
  5417  01133A  0E00               	movlw	0
  5418  01133C  2017               	addwfc	?___awdiv+1,w,c
  5419  01133E  6E20               	movwf	___wmul@multiplier+1,c
  5420  011340  EC28  F097         	call	___wmul	;wreg free
  5421  011344  0E81               	movlw	low __npowers_
  5422  011346  241F               	addwf	?___wmul,w,c
  5423  011348  6EF6               	movwf	tblptrl,c
  5424  01134A  0EFE               	movlw	high __npowers_
  5425  01134C  2020               	addwfc	?___wmul+1,w,c
  5426  01134E  6EF7               	movwf	tblptrh,c
  5427  011350  6AF8               	clrf	tblptru,c
  5428  011352  0E00               	movlw	low (__mediumconst shr (0+16))
  5429  011354  22F8               	addwfc	tblptru,f,c
  5430  011356  0009               	tblrd		*+
  5431  011358  CFF5 F028          	movff	tablat,___ftmul@f2
  5432  01135C  0009               	tblrd		*+
  5433  01135E  CFF5 F029          	movff	tablat,___ftmul@f2+1
  5434  011362  000A               	tblrd		*-
  5435  011364  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  5436  011368  0E00               	movlw	0
  5437  01136A  6E22               	movwf	___wmul@multiplicand+1,c
  5438  01136C  0E03               	movlw	3
  5439  01136E  6E21               	movwf	___wmul@multiplicand,c
  5440  011370  0E00               	movlw	0
  5441  011372  6E19               	movwf	___awdiv@divisor+1,c
  5442  011374  0E64               	movlw	100
  5443  011376  6E18               	movwf	___awdiv@divisor,c
  5444  011378  C03D  F016         	movff	fround@prec,___awdiv@dividend
  5445  01137C  6A17               	clrf	___awdiv@dividend+1,c
  5446  01137E  EC2E  F093         	call	___awdiv	;wreg free
  5447  011382  0E12               	movlw	18
  5448  011384  2416               	addwf	?___awdiv,w,c
  5449  011386  6E1F               	movwf	___wmul@multiplier,c
  5450  011388  0E00               	movlw	0
  5451  01138A  2017               	addwfc	?___awdiv+1,w,c
  5452  01138C  6E20               	movwf	___wmul@multiplier+1,c
  5453  01138E  EC28  F097         	call	___wmul	;wreg free
  5454  011392  0E81               	movlw	low __npowers_
  5455  011394  241F               	addwf	?___wmul,w,c
  5456  011396  6EF6               	movwf	tblptrl,c
  5457  011398  0EFE               	movlw	high __npowers_
  5458  01139A  2020               	addwfc	?___wmul+1,w,c
  5459  01139C  6EF7               	movwf	tblptrh,c
  5460  01139E  6AF8               	clrf	tblptru,c
  5461  0113A0  0E00               	movlw	low (__mediumconst shr (0+16))
  5462  0113A2  22F8               	addwfc	tblptru,f,c
  5463  0113A4  0009               	tblrd		*+
  5464  0113A6  CFF5 F025          	movff	tablat,___ftmul@f1
  5465  0113AA  0009               	tblrd		*+
  5466  0113AC  CFF5 F026          	movff	tablat,___ftmul@f1+1
  5467  0113B0  000A               	tblrd		*-
  5468  0113B2  CFF5 F027          	movff	tablat,___ftmul@f1+2
  5469  0113B6  EC11  F091         	call	___ftmul	;wreg free
  5470  0113BA  C025  F03A         	movff	?___ftmul,_fround$2559
  5471  0113BE  C026  F03B         	movff	?___ftmul+1,_fround$2559+1
  5472  0113C2  C027  F03C         	movff	?___ftmul+2,_fround$2559+2
  5473                           
  5474                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5475  0113C6  0E00               	movlw	0
  5476  0113C8  6E22               	movwf	___wmul@multiplicand+1,c
  5477  0113CA  0E03               	movlw	3
  5478  0113CC  6E21               	movwf	___wmul@multiplicand,c
  5479  0113CE  0E00               	movlw	0
  5480  0113D0  6E12               	movwf	___awmod@divisor+1,c
  5481  0113D2  0E0A               	movlw	10
  5482  0113D4  6E11               	movwf	___awmod@divisor,c
  5483  0113D6  C03D  F00F         	movff	fround@prec,___awmod@dividend
  5484  0113DA  6A10               	clrf	___awmod@dividend+1,c
  5485  0113DC  ECDA  F093         	call	___awmod	;wreg free
  5486  0113E0  C00F  F01F         	movff	?___awmod,___wmul@multiplier
  5487  0113E4  C010  F020         	movff	?___awmod+1,___wmul@multiplier+1
  5488  0113E8  EC28  F097         	call	___wmul	;wreg free
  5489  0113EC  0E81               	movlw	low __npowers_
  5490  0113EE  241F               	addwf	?___wmul,w,c
  5491  0113F0  6EF6               	movwf	tblptrl,c
  5492  0113F2  0EFE               	movlw	high __npowers_
  5493  0113F4  2020               	addwfc	?___wmul+1,w,c
  5494  0113F6  6EF7               	movwf	tblptrh,c
  5495  0113F8  6AF8               	clrf	tblptru,c
  5496  0113FA  0E00               	movlw	low (__mediumconst shr (0+16))
  5497  0113FC  22F8               	addwfc	tblptru,f,c
  5498  0113FE  0009               	tblrd		*+
  5499  011400  CFF5 F028          	movff	tablat,___ftmul@f2
  5500  011404  0009               	tblrd		*+
  5501  011406  CFF5 F029          	movff	tablat,___ftmul@f2+1
  5502  01140A  000A               	tblrd		*-
  5503  01140C  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  5504  011410  C03A  F025         	movff	_fround$2559,___ftmul@f1
  5505  011414  C03B  F026         	movff	_fround$2559+1,___ftmul@f1+1
  5506  011418  C03C  F027         	movff	_fround$2559+2,___ftmul@f1+2
  5507  01141C  EC11  F091         	call	___ftmul	;wreg free
  5508  011420  C025  F037         	movff	?___ftmul,_fround$2560
  5509  011424  C026  F038         	movff	?___ftmul+1,_fround$2560+1
  5510  011428  C027  F039         	movff	?___ftmul+2,_fround$2560+2
  5511                           
  5512                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5513  01142C  C037  F025         	movff	_fround$2560,___ftmul@f1
  5514  011430  C038  F026         	movff	_fround$2560+1,___ftmul@f1+1
  5515  011434  C039  F027         	movff	_fround$2560+2,___ftmul@f1+2
  5516  011438  0E00               	movlw	0
  5517  01143A  6E28               	movwf	___ftmul@f2,c
  5518  01143C  0E00               	movlw	0
  5519  01143E  6E29               	movwf	___ftmul@f2+1,c
  5520  011440  0E3F               	movlw	63
  5521  011442  6E2A               	movwf	___ftmul@f2+2,c
  5522  011444  EC11  F091         	call	___ftmul	;wreg free
  5523  011448  C025  F034         	movff	?___ftmul,?_fround
  5524  01144C  C026  F035         	movff	?___ftmul+1,?_fround+1
  5525  011450  C027  F036         	movff	?___ftmul+2,?_fround+2
  5526  011454  0012               	return	
  5527  011456                     l7751:
  5528                           
  5529                           ;doprnt.c: 415: else if(prec > 10)
  5530  011456  0E0A               	movlw	10
  5531  011458  643D               	cpfsgt	fround@prec,c
  5532  01145A  D069               	goto	l7759
  5533                           
  5534                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5535  01145C  0E00               	movlw	0
  5536  01145E  6E22               	movwf	___wmul@multiplicand+1,c
  5537  011460  0E03               	movlw	3
  5538  011462  6E21               	movwf	___wmul@multiplicand,c
  5539  011464  0E00               	movlw	0
  5540  011466  6E12               	movwf	___awmod@divisor+1,c
  5541  011468  0E0A               	movlw	10
  5542  01146A  6E11               	movwf	___awmod@divisor,c
  5543  01146C  C03D  F00F         	movff	fround@prec,___awmod@dividend
  5544  011470  6A10               	clrf	___awmod@dividend+1,c
  5545  011472  ECDA  F093         	call	___awmod	;wreg free
  5546  011476  C00F  F01F         	movff	?___awmod,___wmul@multiplier
  5547  01147A  C010  F020         	movff	?___awmod+1,___wmul@multiplier+1
  5548  01147E  EC28  F097         	call	___wmul	;wreg free
  5549  011482  0E81               	movlw	low __npowers_
  5550  011484  241F               	addwf	?___wmul,w,c
  5551  011486  6EF6               	movwf	tblptrl,c
  5552  011488  0EFE               	movlw	high __npowers_
  5553  01148A  2020               	addwfc	?___wmul+1,w,c
  5554  01148C  6EF7               	movwf	tblptrh,c
  5555  01148E  6AF8               	clrf	tblptru,c
  5556  011490  0E00               	movlw	low (__mediumconst shr (0+16))
  5557  011492  22F8               	addwfc	tblptru,f,c
  5558  011494  0009               	tblrd		*+
  5559  011496  CFF5 F028          	movff	tablat,___ftmul@f2
  5560  01149A  0009               	tblrd		*+
  5561  01149C  CFF5 F029          	movff	tablat,___ftmul@f2+1
  5562  0114A0  000A               	tblrd		*-
  5563  0114A2  CFF5 F02A          	movff	tablat,___ftmul@f2+2
  5564  0114A6  0E00               	movlw	0
  5565  0114A8  6E22               	movwf	___wmul@multiplicand+1,c
  5566  0114AA  0E03               	movlw	3
  5567  0114AC  6E21               	movwf	___wmul@multiplicand,c
  5568  0114AE  0E00               	movlw	0
  5569  0114B0  6E19               	movwf	___awdiv@divisor+1,c
  5570  0114B2  0E0A               	movlw	10
  5571  0114B4  6E18               	movwf	___awdiv@divisor,c
  5572  0114B6  C03D  F016         	movff	fround@prec,___awdiv@dividend
  5573  0114BA  6A17               	clrf	___awdiv@dividend+1,c
  5574  0114BC  EC2E  F093         	call	___awdiv	;wreg free
  5575  0114C0  0E09               	movlw	9
  5576  0114C2  2416               	addwf	?___awdiv,w,c
  5577  0114C4  6E1F               	movwf	___wmul@multiplier,c
  5578  0114C6  0E00               	movlw	0
  5579  0114C8  2017               	addwfc	?___awdiv+1,w,c
  5580  0114CA  6E20               	movwf	___wmul@multiplier+1,c
  5581  0114CC  EC28  F097         	call	___wmul	;wreg free
  5582  0114D0  0E81               	movlw	low __npowers_
  5583  0114D2  241F               	addwf	?___wmul,w,c
  5584  0114D4  6EF6               	movwf	tblptrl,c
  5585  0114D6  0EFE               	movlw	high __npowers_
  5586  0114D8  2020               	addwfc	?___wmul+1,w,c
  5587  0114DA  6EF7               	movwf	tblptrh,c
  5588  0114DC  6AF8               	clrf	tblptru,c
  5589  0114DE  0E00               	movlw	low (__mediumconst shr (0+16))
  5590  0114E0  22F8               	addwfc	tblptru,f,c
  5591  0114E2  0009               	tblrd		*+
  5592  0114E4  CFF5 F025          	movff	tablat,___ftmul@f1
  5593  0114E8  0009               	tblrd		*+
  5594  0114EA  CFF5 F026          	movff	tablat,___ftmul@f1+1
  5595  0114EE  000A               	tblrd		*-
  5596  0114F0  CFF5 F027          	movff	tablat,___ftmul@f1+2
  5597  0114F4  EC11  F091         	call	___ftmul	;wreg free
  5598  0114F8  C025  F03A         	movff	?___ftmul,_fround$2559
  5599  0114FC  C026  F03B         	movff	?___ftmul+1,_fround$2559+1
  5600  011500  C027  F03C         	movff	?___ftmul+2,_fround$2559+2
  5601                           
  5602                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5603  011504  C03A  F025         	movff	_fround$2559,___ftmul@f1
  5604  011508  C03B  F026         	movff	_fround$2559+1,___ftmul@f1+1
  5605  01150C  C03C  F027         	movff	_fround$2559+2,___ftmul@f1+2
  5606  011510  0E00               	movlw	0
  5607  011512  6E28               	movwf	___ftmul@f2,c
  5608  011514  0E00               	movlw	0
  5609  011516  6E29               	movwf	___ftmul@f2+1,c
  5610  011518  0E3F               	movlw	63
  5611  01151A  6E2A               	movwf	___ftmul@f2+2,c
  5612  01151C  EC11  F091         	call	___ftmul	;wreg free
  5613  011520  C025  F034         	movff	?___ftmul,?_fround
  5614  011524  C026  F035         	movff	?___ftmul+1,?_fround+1
  5615  011528  C027  F036         	movff	?___ftmul+2,?_fround+2
  5616  01152C  0012               	return	
  5617  01152E                     l7759:
  5618                           
  5619                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5620  01152E  503D               	movf	fround@prec,w,c
  5621  011530  0D03               	mullw	3
  5622  011532  0E81               	movlw	low __npowers_
  5623  011534  24F3               	addwf	prodl,w,c
  5624  011536  6EF6               	movwf	tblptrl,c
  5625  011538  0EFE               	movlw	high __npowers_
  5626  01153A  20F4               	addwfc	prodh,w,c
  5627  01153C  6EF7               	movwf	tblptrh,c
  5628  01153E  6AF8               	clrf	tblptru,c
  5629  011540  0E00               	movlw	low (__mediumconst shr (0+16))
  5630  011542  22F8               	addwfc	tblptru,f,c
  5631  011544  0009               	tblrd		*+
  5632  011546  CFF5 F025          	movff	tablat,___ftmul@f1
  5633  01154A  0009               	tblrd		*+
  5634  01154C  CFF5 F026          	movff	tablat,___ftmul@f1+1
  5635  011550  000A               	tblrd		*-
  5636  011552  CFF5 F027          	movff	tablat,___ftmul@f1+2
  5637  011556  0E00               	movlw	0
  5638  011558  6E28               	movwf	___ftmul@f2,c
  5639  01155A  0E00               	movlw	0
  5640  01155C  6E29               	movwf	___ftmul@f2+1,c
  5641  01155E  0E3F               	movlw	63
  5642  011560  6E2A               	movwf	___ftmul@f2+2,c
  5643  011562  EC11  F091         	call	___ftmul	;wreg free
  5644  011566  C025  F034         	movff	?___ftmul,?_fround
  5645  01156A  C026  F035         	movff	?___ftmul+1,?_fround+1
  5646  01156E  C027  F036         	movff	?___ftmul+2,?_fround+2
  5647  011572  0012               	return	
  5648  011574                     __end_of_fround:
  5649                           	opt stack 0
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           wreg	equ	0xFE8
  5657                           indf2	equ	0xFDF
  5658                           postinc2	equ	0xFDE
  5659                           postdec2	equ	0xFDD
  5660                           fsr2h	equ	0xFDA
  5661                           fsr2l	equ	0xFD9
  5662                           status	equ	0xFD8
  5663                           
  5664 ;; *************** function ___wmul *****************
  5665 ;; Defined at:
  5666 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\wmul.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  multiplier      2   30[COMRAM] unsigned int 
  5669 ;;  multiplicand    2   32[COMRAM] unsigned int 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  product         2   34[COMRAM] unsigned int 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  2   30[COMRAM] unsigned int 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, prodl, prodh
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5684 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5685 ;;Total ram usage:        6 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    1
  5688 ;; This function calls:
  5689 ;;		Nothing
  5690 ;; This function is called by:
  5691 ;;		_fround
  5692 ;;		_scale
  5693 ;;		_sprintf
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text12
  5698  012E50                     __ptext12:
  5699                           	opt stack 0
  5700  012E50                     ___wmul:
  5701                           	opt stack 26
  5702                           
  5703                           ;incstack = 0
  5704  012E50  501F               	movf	___wmul@multiplier,w,c
  5705  012E52  0221               	mulwf	___wmul@multiplicand,c
  5706  012E54  CFF3 F023          	movff	prodl,___wmul@product
  5707  012E58  CFF4 F024          	movff	prodh,___wmul@product+1
  5708  012E5C  501F               	movf	___wmul@multiplier,w,c
  5709  012E5E  0222               	mulwf	___wmul@multiplicand+1,c
  5710  012E60  CFF3 FFF4          	movff	prodl,prodh
  5711  012E64  6AF3               	clrf	prodl,c
  5712  012E66  50F3               	movf	prodl,w,c
  5713  012E68  2623               	addwf	___wmul@product,f,c
  5714  012E6A  50F4               	movf	prodh,w,c
  5715  012E6C  2224               	addwfc	___wmul@product+1,f,c
  5716  012E6E  5020               	movf	___wmul@multiplier+1,w,c
  5717  012E70  0221               	mulwf	___wmul@multiplicand,c
  5718  012E72  CFF3 FFF4          	movff	prodl,prodh
  5719  012E76  6AF3               	clrf	prodl,c
  5720  012E78  50F3               	movf	prodl,w,c
  5721  012E7A  2623               	addwf	___wmul@product,f,c
  5722  012E7C  50F4               	movf	prodh,w,c
  5723  012E7E  2224               	addwfc	___wmul@product+1,f,c
  5724  012E80  C023  F01F         	movff	___wmul@product,?___wmul
  5725  012E84  C024  F020         	movff	___wmul@product+1,?___wmul+1
  5726  012E88  0012               	return	
  5727  012E8A                     __end_of___wmul:
  5728                           	opt stack 0
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           wreg	equ	0xFE8
  5736                           indf2	equ	0xFDF
  5737                           postinc2	equ	0xFDE
  5738                           postdec2	equ	0xFDD
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function ___awmod *****************
  5744 ;; Defined at:
  5745 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awmod.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  dividend        2   14[COMRAM] int 
  5748 ;;  divisor         2   16[COMRAM] int 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  sign            1   20[COMRAM] unsigned char 
  5751 ;;  counter         1   19[COMRAM] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  2   14[COMRAM] int 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0, prodl
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5761 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5764 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5765 ;;Total ram usage:        7 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    1
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_fround
  5772 ;;		_scale
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text13
  5777  0127B4                     __ptext13:
  5778                           	opt stack 0
  5779  0127B4                     ___awmod:
  5780                           	opt stack 26
  5781                           
  5782                           ;incstack = 0
  5783  0127B4  6E13               	movwf	??___awmod& (0+255),c
  5784  0127B6  0E00               	movlw	0
  5785  0127B8  6E15               	movwf	___awmod@sign,c
  5786  0127BA  5013               	movf	??___awmod& (0+255),w,c
  5787  0127BC  5010               	movf	___awmod@dividend+1,w,c
  5788  0127BE  0A80               	xorlw	128
  5789  0127C0  6EF3               	movwf	prodl,c
  5790  0127C2  0E80               	movlw	128
  5791  0127C4  5CF3               	subwf	prodl,w,c
  5792  0127C6  0E00               	movlw	0
  5793  0127C8  B4D8               	btfsc	status,2,c
  5794  0127CA  5C0F               	subwf	___awmod@dividend,w,c
  5795  0127CC  B0D8               	btfsc	status,0,c
  5796  0127CE  D008               	goto	l5613
  5797  0127D0  6C0F               	negf	___awmod@dividend,c
  5798  0127D2  1E10               	comf	___awmod@dividend+1,f,c
  5799  0127D4  B0D8               	btfsc	status,0,c
  5800  0127D6  2A10               	incf	___awmod@dividend+1,f,c
  5801  0127D8  6E13               	movwf	??___awmod& (0+255),c
  5802  0127DA  0E01               	movlw	1
  5803  0127DC  6E15               	movwf	___awmod@sign,c
  5804  0127DE  5013               	movf	??___awmod& (0+255),w,c
  5805  0127E0                     l5613:
  5806  0127E0  5012               	movf	___awmod@divisor+1,w,c
  5807  0127E2  0A80               	xorlw	128
  5808  0127E4  6EF3               	movwf	prodl,c
  5809  0127E6  0E80               	movlw	128
  5810  0127E8  5CF3               	subwf	prodl,w,c
  5811  0127EA  0E00               	movlw	0
  5812  0127EC  B4D8               	btfsc	status,2,c
  5813  0127EE  5C11               	subwf	___awmod@divisor,w,c
  5814  0127F0  B0D8               	btfsc	status,0,c
  5815  0127F2  D004               	goto	l5617
  5816  0127F4  6C11               	negf	___awmod@divisor,c
  5817  0127F6  1E12               	comf	___awmod@divisor+1,f,c
  5818  0127F8  B0D8               	btfsc	status,0,c
  5819  0127FA  2A12               	incf	___awmod@divisor+1,f,c
  5820  0127FC                     l5617:
  5821  0127FC  5012               	movf	___awmod@divisor+1,w,c
  5822  0127FE  1011               	iorwf	___awmod@divisor,w,c
  5823  012800  B4D8               	btfsc	status,2,c
  5824  012802  D01A               	goto	l5633
  5825  012804  6E13               	movwf	??___awmod& (0+255),c
  5826  012806  0E01               	movlw	1
  5827  012808  6E14               	movwf	___awmod@counter,c
  5828  01280A  5013               	movf	??___awmod& (0+255),w,c
  5829  01280C  D004               	goto	l5623
  5830  01280E                     l5621:
  5831  01280E  90D8               	bcf	status,0,c
  5832  012810  3611               	rlcf	___awmod@divisor,f,c
  5833  012812  3612               	rlcf	___awmod@divisor+1,f,c
  5834  012814  2A14               	incf	___awmod@counter,f,c
  5835  012816                     l5623:
  5836  012816  AE12               	btfss	___awmod@divisor+1,7,c
  5837  012818  D7FA               	goto	l5621
  5838  01281A                     l5625:
  5839  01281A  5011               	movf	___awmod@divisor,w,c
  5840  01281C  5C0F               	subwf	___awmod@dividend,w,c
  5841  01281E  5012               	movf	___awmod@divisor+1,w,c
  5842  012820  5810               	subwfb	___awmod@dividend+1,w,c
  5843  012822  A0D8               	btfss	status,0,c
  5844  012824  D004               	goto	l5629
  5845  012826  5011               	movf	___awmod@divisor,w,c
  5846  012828  5E0F               	subwf	___awmod@dividend,f,c
  5847  01282A  5012               	movf	___awmod@divisor+1,w,c
  5848  01282C  5A10               	subwfb	___awmod@dividend+1,f,c
  5849  01282E                     l5629:
  5850  01282E  90D8               	bcf	status,0,c
  5851  012830  3212               	rrcf	___awmod@divisor+1,f,c
  5852  012832  3211               	rrcf	___awmod@divisor,f,c
  5853  012834  2E14               	decfsz	___awmod@counter,f,c
  5854  012836  D7F1               	goto	l5625
  5855  012838                     l5633:
  5856  012838  5015               	movf	___awmod@sign,w,c
  5857  01283A  B4D8               	btfsc	status,2,c
  5858  01283C  D004               	goto	l5637
  5859  01283E  6C0F               	negf	___awmod@dividend,c
  5860  012840  1E10               	comf	___awmod@dividend+1,f,c
  5861  012842  B0D8               	btfsc	status,0,c
  5862  012844  2A10               	incf	___awmod@dividend+1,f,c
  5863  012846                     l5637:
  5864  012846  C00F  F00F         	movff	___awmod@dividend,?___awmod
  5865  01284A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  5866  01284E  0012               	return	
  5867  012850                     __end_of___awmod:
  5868                           	opt stack 0
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           prodh	equ	0xFF4
  5874                           prodl	equ	0xFF3
  5875                           wreg	equ	0xFE8
  5876                           indf2	equ	0xFDF
  5877                           postinc2	equ	0xFDE
  5878                           postdec2	equ	0xFDD
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function ___awdiv *****************
  5884 ;; Defined at:
  5885 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awdiv.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  dividend        2   21[COMRAM] int 
  5888 ;;  divisor         2   23[COMRAM] int 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  quotient        2   28[COMRAM] int 
  5891 ;;  sign            1   27[COMRAM] unsigned char 
  5892 ;;  counter         1   26[COMRAM] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  2   21[COMRAM] int 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0, prodl
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5905 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5906 ;;Total ram usage:        9 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    1
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_fround
  5913 ;;		_scale
  5914 ;;		_sprintf
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text14
  5919  01265C                     __ptext14:
  5920                           	opt stack 0
  5921  01265C                     ___awdiv:
  5922                           	opt stack 26
  5923                           
  5924                           ;incstack = 0
  5925  01265C  6E1A               	movwf	??___awdiv& (0+255),c
  5926  01265E  0E00               	movlw	0
  5927  012660  6E1C               	movwf	___awdiv@sign,c
  5928  012662  501A               	movf	??___awdiv& (0+255),w,c
  5929  012664  5019               	movf	___awdiv@divisor+1,w,c
  5930  012666  0A80               	xorlw	128
  5931  012668  6EF3               	movwf	prodl,c
  5932  01266A  0E80               	movlw	128
  5933  01266C  5CF3               	subwf	prodl,w,c
  5934  01266E  0E00               	movlw	0
  5935  012670  B4D8               	btfsc	status,2,c
  5936  012672  5C18               	subwf	___awdiv@divisor,w,c
  5937  012674  B0D8               	btfsc	status,0,c
  5938  012676  D008               	goto	l5569
  5939  012678  6C18               	negf	___awdiv@divisor,c
  5940  01267A  1E19               	comf	___awdiv@divisor+1,f,c
  5941  01267C  B0D8               	btfsc	status,0,c
  5942  01267E  2A19               	incf	___awdiv@divisor+1,f,c
  5943  012680  6E1A               	movwf	??___awdiv& (0+255),c
  5944  012682  0E01               	movlw	1
  5945  012684  6E1C               	movwf	___awdiv@sign,c
  5946  012686  501A               	movf	??___awdiv& (0+255),w,c
  5947  012688                     l5569:
  5948  012688  5017               	movf	___awdiv@dividend+1,w,c
  5949  01268A  0A80               	xorlw	128
  5950  01268C  6EF3               	movwf	prodl,c
  5951  01268E  0E80               	movlw	128
  5952  012690  5CF3               	subwf	prodl,w,c
  5953  012692  0E00               	movlw	0
  5954  012694  B4D8               	btfsc	status,2,c
  5955  012696  5C16               	subwf	___awdiv@dividend,w,c
  5956  012698  B0D8               	btfsc	status,0,c
  5957  01269A  D006               	goto	l5575
  5958  01269C  6C16               	negf	___awdiv@dividend,c
  5959  01269E  1E17               	comf	___awdiv@dividend+1,f,c
  5960  0126A0  B0D8               	btfsc	status,0,c
  5961  0126A2  2A17               	incf	___awdiv@dividend+1,f,c
  5962  0126A4  0E01               	movlw	1
  5963  0126A6  1A1C               	xorwf	___awdiv@sign,f,c
  5964  0126A8                     l5575:
  5965  0126A8  0E00               	movlw	0
  5966  0126AA  6E1E               	movwf	___awdiv@quotient+1,c
  5967  0126AC  0E00               	movlw	0
  5968  0126AE  6E1D               	movwf	___awdiv@quotient,c
  5969  0126B0  5019               	movf	___awdiv@divisor+1,w,c
  5970  0126B2  1018               	iorwf	___awdiv@divisor,w,c
  5971  0126B4  B4D8               	btfsc	status,2,c
  5972  0126B6  D01E               	goto	l5597
  5973  0126B8  6E1A               	movwf	??___awdiv& (0+255),c
  5974  0126BA  0E01               	movlw	1
  5975  0126BC  6E1B               	movwf	___awdiv@counter,c
  5976  0126BE  501A               	movf	??___awdiv& (0+255),w,c
  5977  0126C0  D004               	goto	l5583
  5978  0126C2                     l5581:
  5979  0126C2  90D8               	bcf	status,0,c
  5980  0126C4  3618               	rlcf	___awdiv@divisor,f,c
  5981  0126C6  3619               	rlcf	___awdiv@divisor+1,f,c
  5982  0126C8  2A1B               	incf	___awdiv@counter,f,c
  5983  0126CA                     l5583:
  5984  0126CA  AE19               	btfss	___awdiv@divisor+1,7,c
  5985  0126CC  D7FA               	goto	l5581
  5986  0126CE                     l5585:
  5987  0126CE  90D8               	bcf	status,0,c
  5988  0126D0  361D               	rlcf	___awdiv@quotient,f,c
  5989  0126D2  361E               	rlcf	___awdiv@quotient+1,f,c
  5990  0126D4  5018               	movf	___awdiv@divisor,w,c
  5991  0126D6  5C16               	subwf	___awdiv@dividend,w,c
  5992  0126D8  5019               	movf	___awdiv@divisor+1,w,c
  5993  0126DA  5817               	subwfb	___awdiv@dividend+1,w,c
  5994  0126DC  A0D8               	btfss	status,0,c
  5995  0126DE  D005               	goto	l5593
  5996  0126E0  5018               	movf	___awdiv@divisor,w,c
  5997  0126E2  5E16               	subwf	___awdiv@dividend,f,c
  5998  0126E4  5019               	movf	___awdiv@divisor+1,w,c
  5999  0126E6  5A17               	subwfb	___awdiv@dividend+1,f,c
  6000  0126E8  801D               	bsf	___awdiv@quotient,0,c
  6001  0126EA                     l5593:
  6002  0126EA  90D8               	bcf	status,0,c
  6003  0126EC  3219               	rrcf	___awdiv@divisor+1,f,c
  6004  0126EE  3218               	rrcf	___awdiv@divisor,f,c
  6005  0126F0  2E1B               	decfsz	___awdiv@counter,f,c
  6006  0126F2  D7ED               	goto	l5585
  6007  0126F4                     l5597:
  6008  0126F4  501C               	movf	___awdiv@sign,w,c
  6009  0126F6  B4D8               	btfsc	status,2,c
  6010  0126F8  D004               	goto	l5601
  6011  0126FA  6C1D               	negf	___awdiv@quotient,c
  6012  0126FC  1E1E               	comf	___awdiv@quotient+1,f,c
  6013  0126FE  B0D8               	btfsc	status,0,c
  6014  012700  2A1E               	incf	___awdiv@quotient+1,f,c
  6015  012702                     l5601:
  6016  012702  C01D  F016         	movff	___awdiv@quotient,?___awdiv
  6017  012706  C01E  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6018  01270A  0012               	return	
  6019  01270C                     __end_of___awdiv:
  6020                           	opt stack 0
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           wreg	equ	0xFE8
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           fsr2h	equ	0xFDA
  6032                           fsr2l	equ	0xFD9
  6033                           status	equ	0xFD8
  6034                           
  6035 ;; *************** function __tdiv_to_l_ *****************
  6036 ;; Defined at:
  6037 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftdivl.c"
  6038 ;; Parameters:    Size  Location     Type
  6039 ;;  f1              3   14[COMRAM] float 
  6040 ;;  f2              3   17[COMRAM] float 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  quot            4   23[COMRAM] unsigned long 
  6043 ;;  exp1            1   28[COMRAM] unsigned char 
  6044 ;;  cntr            1   27[COMRAM] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  4   14[COMRAM] unsigned long 
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6054 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6055 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6056 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6058 ;;Total ram usage:       15 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:    1
  6061 ;; This function calls:
  6062 ;;		Nothing
  6063 ;; This function is called by:
  6064 ;;		_sprintf
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text15
  6069  011C8C                     __ptext15:
  6070                           	opt stack 0
  6071  011C8C                     __tdiv_to_l_:
  6072                           	opt stack 27
  6073                           
  6074                           ;incstack = 0
  6075  011C8C  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6076  011C90  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6077  011C92  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6078  011C94  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  6079  011C96  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6080  011C98  E301               	bnc	u3451
  6081  011C9A  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6082  011C9C                     u3451:
  6083  011C9C  5015               	movf	??__tdiv_to_l_,w,c
  6084  011C9E  6E1D               	movwf	__tdiv_to_l_@exp1,c
  6085  011CA0  661D               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  6086  011CA2  D009               	goto	l5757
  6087  011CA4  0E00               	movlw	0
  6088  011CA6  6E0F               	movwf	?__tdiv_to_l_,c
  6089  011CA8  0E00               	movlw	0
  6090  011CAA  6E10               	movwf	?__tdiv_to_l_+1,c
  6091  011CAC  0E00               	movlw	0
  6092  011CAE  6E11               	movwf	?__tdiv_to_l_+2,c
  6093  011CB0  0E00               	movlw	0
  6094  011CB2  6E12               	movwf	?__tdiv_to_l_+3,c
  6095  011CB4  0012               	return	
  6096  011CB6                     l5757:
  6097  011CB6  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6098  011CBA  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6099  011CBC  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6100  011CBE  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  6101  011CC0  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6102  011CC2  E301               	bnc	u3471
  6103  011CC4  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6104  011CC6                     u3471:
  6105  011CC6  5015               	movf	??__tdiv_to_l_,w,c
  6106  011CC8  6E1C               	movwf	__tdiv_to_l_@cntr,c
  6107  011CCA  661C               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  6108  011CCC  D009               	goto	l5763
  6109  011CCE  0E00               	movlw	0
  6110  011CD0  6E0F               	movwf	?__tdiv_to_l_,c
  6111  011CD2  0E00               	movlw	0
  6112  011CD4  6E10               	movwf	?__tdiv_to_l_+1,c
  6113  011CD6  0E00               	movlw	0
  6114  011CD8  6E11               	movwf	?__tdiv_to_l_+2,c
  6115  011CDA  0E00               	movlw	0
  6116  011CDC  6E12               	movwf	?__tdiv_to_l_+3,c
  6117  011CDE  0012               	return	
  6118  011CE0                     l5763:
  6119  011CE0  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  6120  011CE2  0EFF               	movlw	255
  6121  011CE4  160F               	andwf	__tdiv_to_l_@f1,f,c
  6122  011CE6  0EFF               	movlw	255
  6123  011CE8  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  6124  011CEA  0E00               	movlw	0
  6125  011CEC  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  6126  011CEE  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  6127  011CF0  0EFF               	movlw	255
  6128  011CF2  1612               	andwf	__tdiv_to_l_@f2,f,c
  6129  011CF4  0EFF               	movlw	255
  6130  011CF6  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  6131  011CF8  0E00               	movlw	0
  6132  011CFA  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  6133  011CFC  0E00               	movlw	0
  6134  011CFE  6E18               	movwf	__tdiv_to_l_@quot,c
  6135  011D00  0E00               	movlw	0
  6136  011D02  6E19               	movwf	__tdiv_to_l_@quot+1,c
  6137  011D04  0E00               	movlw	0
  6138  011D06  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  6139  011D08  0E00               	movlw	0
  6140  011D0A  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  6141  011D0C  0E7F               	movlw	127
  6142  011D0E  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  6143  011D10  501C               	movf	__tdiv_to_l_@cntr,w,c
  6144  011D12  0F98               	addlw	152
  6145  011D14  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  6146  011D16  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  6147  011D18  0E18               	movlw	24
  6148  011D1A  6E1C               	movwf	__tdiv_to_l_@cntr,c
  6149  011D1C  5015               	movf	??__tdiv_to_l_& (0+255),w,c
  6150  011D1E                     l5777:
  6151  011D1E  90D8               	bcf	status,0,c
  6152  011D20  3618               	rlcf	__tdiv_to_l_@quot,f,c
  6153  011D22  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  6154  011D24  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  6155  011D26  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  6156  011D28  5012               	movf	__tdiv_to_l_@f2,w,c
  6157  011D2A  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  6158  011D2C  5013               	movf	__tdiv_to_l_@f2+1,w,c
  6159  011D2E  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  6160  011D30  5014               	movf	__tdiv_to_l_@f2+2,w,c
  6161  011D32  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  6162  011D34  A0D8               	btfss	status,0,c
  6163  011D36  D007               	goto	l1019
  6164  011D38  5012               	movf	__tdiv_to_l_@f2,w,c
  6165  011D3A  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  6166  011D3C  5013               	movf	__tdiv_to_l_@f2+1,w,c
  6167  011D3E  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  6168  011D40  5014               	movf	__tdiv_to_l_@f2+2,w,c
  6169  011D42  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  6170  011D44  8018               	bsf	__tdiv_to_l_@quot,0,c
  6171  011D46                     l1019:
  6172  011D46  90D8               	bcf	status,0,c
  6173  011D48  360F               	rlcf	__tdiv_to_l_@f1,f,c
  6174  011D4A  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  6175  011D4C  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  6176  011D4E  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  6177  011D50  D7E6               	goto	l5777
  6178  011D52  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  6179  011D54  D019               	goto	l5797
  6180  011D56  501D               	movf	__tdiv_to_l_@exp1,w,c
  6181  011D58  0A80               	xorlw	128
  6182  011D5A  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  6183  011D5C  0EE9               	movlw	233
  6184  011D5E  0A80               	xorlw	128
  6185  011D60  5C15               	subwf	??__tdiv_to_l_,w,c
  6186  011D62  B0D8               	btfsc	status,0,c
  6187  011D64  D009               	goto	l5793
  6188  011D66  0E00               	movlw	0
  6189  011D68  6E0F               	movwf	?__tdiv_to_l_,c
  6190  011D6A  0E00               	movlw	0
  6191  011D6C  6E10               	movwf	?__tdiv_to_l_+1,c
  6192  011D6E  0E00               	movlw	0
  6193  011D70  6E11               	movwf	?__tdiv_to_l_+2,c
  6194  011D72  0E00               	movlw	0
  6195  011D74  6E12               	movwf	?__tdiv_to_l_+3,c
  6196  011D76  0012               	return	
  6197  011D78                     l5793:
  6198  011D78  90D8               	bcf	status,0,c
  6199  011D7A  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  6200  011D7C  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  6201  011D7E  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  6202  011D80  3218               	rrcf	__tdiv_to_l_@quot,f,c
  6203  011D82  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  6204  011D84  D7F9               	goto	l5793
  6205  011D86  D014               	goto	l1025
  6206  011D88                     l5797:
  6207  011D88  0E17               	movlw	23
  6208  011D8A  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  6209  011D8C  D00F               	goto	l5805
  6210  011D8E  0E00               	movlw	0
  6211  011D90  6E0F               	movwf	?__tdiv_to_l_,c
  6212  011D92  0E00               	movlw	0
  6213  011D94  6E10               	movwf	?__tdiv_to_l_+1,c
  6214  011D96  0E00               	movlw	0
  6215  011D98  6E11               	movwf	?__tdiv_to_l_+2,c
  6216  011D9A  0E00               	movlw	0
  6217  011D9C  6E12               	movwf	?__tdiv_to_l_+3,c
  6218  011D9E  0012               	return	
  6219  011DA0                     l5803:
  6220  011DA0  90D8               	bcf	status,0,c
  6221  011DA2  3618               	rlcf	__tdiv_to_l_@quot,f,c
  6222  011DA4  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  6223  011DA6  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  6224  011DA8  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  6225  011DAA  061D               	decf	__tdiv_to_l_@exp1,f,c
  6226  011DAC                     l5805:
  6227  011DAC  661D               	tstfsz	__tdiv_to_l_@exp1,c
  6228  011DAE  D7F8               	goto	l5803
  6229  011DB0                     l1025:
  6230  011DB0  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6231  011DB4  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6232  011DB8  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6233  011DBC  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6234  011DC0  0012               	return	
  6235  011DC2                     __end_of__tdiv_to_l_:
  6236                           	opt stack 0
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           wreg	equ	0xFE8
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function __div_to_l_ *****************
  6252 ;; Defined at:
  6253 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\fldivl.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  f1              3   14[COMRAM] unsigned long 
  6256 ;;  f2              3   17[COMRAM] unsigned long 
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;  quot            4   24[COMRAM] unsigned long 
  6259 ;;  exp1            1   29[COMRAM] unsigned char 
  6260 ;;  cntr            1   28[COMRAM] unsigned char 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  4   14[COMRAM] unsigned long 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6270 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6271 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6272 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6273 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6274 ;;Total ram usage:       16 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    1
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_sprintf
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text16
  6285  0118A6                     __ptext16:
  6286                           	opt stack 0
  6287  0118A6                     __div_to_l_:
  6288                           	opt stack 27
  6289                           
  6290                           ;incstack = 0
  6291  0118A6  C00F  F015         	movff	__div_to_l_@f1,??__div_to_l_
  6292  0118AA  C010  F016         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  6293  0118AE  C011  F017         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  6294  0118B2  C012  F018         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  6295  0118B6  0E18               	movlw	24
  6296  0118B8  D005               	goto	u3540
  6297  0118BA                     u3545:
  6298  0118BA  90D8               	bcf	status,0,c
  6299  0118BC  3218               	rrcf	??__div_to_l_+3,f,c
  6300  0118BE  3217               	rrcf	??__div_to_l_+2,f,c
  6301  0118C0  3216               	rrcf	??__div_to_l_+1,f,c
  6302  0118C2  3215               	rrcf	??__div_to_l_,f,c
  6303  0118C4                     u3540:
  6304  0118C4  2EE8               	decfsz	wreg,f,c
  6305  0118C6  D7F9               	goto	u3545
  6306  0118C8  5015               	movf	??__div_to_l_,w,c
  6307  0118CA  6E1E               	movwf	__div_to_l_@exp1,c
  6308  0118CC  661E               	tstfsz	__div_to_l_@exp1& (0+255),c
  6309  0118CE  D009               	goto	l5813
  6310  0118D0  0E00               	movlw	0
  6311  0118D2  6E0F               	movwf	?__div_to_l_,c
  6312  0118D4  0E00               	movlw	0
  6313  0118D6  6E10               	movwf	?__div_to_l_+1,c
  6314  0118D8  0E00               	movlw	0
  6315  0118DA  6E11               	movwf	?__div_to_l_+2,c
  6316  0118DC  0E00               	movlw	0
  6317  0118DE  6E12               	movwf	?__div_to_l_+3,c
  6318  0118E0  0012               	return	
  6319  0118E2                     l5813:
  6320  0118E2  C012  F015         	movff	__div_to_l_@f2,??__div_to_l_
  6321  0118E6  C013  F016         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  6322  0118EA  C014  F017         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  6323  0118EE  C015  F018         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  6324  0118F2  0E18               	movlw	24
  6325  0118F4  D005               	goto	u3560
  6326  0118F6                     u3565:
  6327  0118F6  90D8               	bcf	status,0,c
  6328  0118F8  3218               	rrcf	??__div_to_l_+3,f,c
  6329  0118FA  3217               	rrcf	??__div_to_l_+2,f,c
  6330  0118FC  3216               	rrcf	??__div_to_l_+1,f,c
  6331  0118FE  3215               	rrcf	??__div_to_l_,f,c
  6332  011900                     u3560:
  6333  011900  2EE8               	decfsz	wreg,f,c
  6334  011902  D7F9               	goto	u3565
  6335  011904  5015               	movf	??__div_to_l_,w,c
  6336  011906  6E1D               	movwf	__div_to_l_@cntr,c
  6337  011908  661D               	tstfsz	__div_to_l_@cntr& (0+255),c
  6338  01190A  D009               	goto	l5819
  6339  01190C  0E00               	movlw	0
  6340  01190E  6E0F               	movwf	?__div_to_l_,c
  6341  011910  0E00               	movlw	0
  6342  011912  6E10               	movwf	?__div_to_l_+1,c
  6343  011914  0E00               	movlw	0
  6344  011916  6E11               	movwf	?__div_to_l_+2,c
  6345  011918  0E00               	movlw	0
  6346  01191A  6E12               	movwf	?__div_to_l_+3,c
  6347  01191C  0012               	return	
  6348  01191E                     l5819:
  6349  01191E  8E11               	bsf	__div_to_l_@f1+2,7,c
  6350  011920  0EFF               	movlw	255
  6351  011922  160F               	andwf	__div_to_l_@f1,f,c
  6352  011924  0EFF               	movlw	255
  6353  011926  1610               	andwf	__div_to_l_@f1+1,f,c
  6354  011928  0EFF               	movlw	255
  6355  01192A  1611               	andwf	__div_to_l_@f1+2,f,c
  6356  01192C  0E00               	movlw	0
  6357  01192E  1612               	andwf	__div_to_l_@f1+3,f,c
  6358  011930  8E14               	bsf	__div_to_l_@f2+2,7,c
  6359  011932  0EFF               	movlw	255
  6360  011934  1612               	andwf	__div_to_l_@f2,f,c
  6361  011936  0EFF               	movlw	255
  6362  011938  1613               	andwf	__div_to_l_@f2+1,f,c
  6363  01193A  0EFF               	movlw	255
  6364  01193C  1614               	andwf	__div_to_l_@f2+2,f,c
  6365  01193E  0E00               	movlw	0
  6366  011940  1615               	andwf	__div_to_l_@f2+3,f,c
  6367  011942  0E00               	movlw	0
  6368  011944  6E19               	movwf	__div_to_l_@quot,c
  6369  011946  0E00               	movlw	0
  6370  011948  6E1A               	movwf	__div_to_l_@quot+1,c
  6371  01194A  0E00               	movlw	0
  6372  01194C  6E1B               	movwf	__div_to_l_@quot+2,c
  6373  01194E  0E00               	movlw	0
  6374  011950  6E1C               	movwf	__div_to_l_@quot+3,c
  6375  011952  0E7F               	movlw	127
  6376  011954  5E1E               	subwf	__div_to_l_@exp1,f,c
  6377  011956  501D               	movf	__div_to_l_@cntr,w,c
  6378  011958  0FA0               	addlw	160
  6379  01195A  5E1E               	subwf	__div_to_l_@exp1,f,c
  6380  01195C  6E15               	movwf	??__div_to_l_& (0+255),c
  6381  01195E  0E20               	movlw	32
  6382  011960  6E1D               	movwf	__div_to_l_@cntr,c
  6383  011962  5015               	movf	??__div_to_l_& (0+255),w,c
  6384  011964                     l900:
  6385  011964  90D8               	bcf	status,0,c
  6386  011966  3619               	rlcf	__div_to_l_@quot,f,c
  6387  011968  361A               	rlcf	__div_to_l_@quot+1,f,c
  6388  01196A  361B               	rlcf	__div_to_l_@quot+2,f,c
  6389  01196C  361C               	rlcf	__div_to_l_@quot+3,f,c
  6390  01196E  5012               	movf	__div_to_l_@f2,w,c
  6391  011970  5C0F               	subwf	__div_to_l_@f1,w,c
  6392  011972  5013               	movf	__div_to_l_@f2+1,w,c
  6393  011974  5810               	subwfb	__div_to_l_@f1+1,w,c
  6394  011976  5014               	movf	__div_to_l_@f2+2,w,c
  6395  011978  5811               	subwfb	__div_to_l_@f1+2,w,c
  6396  01197A  5015               	movf	__div_to_l_@f2+3,w,c
  6397  01197C  5812               	subwfb	__div_to_l_@f1+3,w,c
  6398  01197E  A0D8               	btfss	status,0,c
  6399  011980  D009               	goto	l5839
  6400  011982  5012               	movf	__div_to_l_@f2,w,c
  6401  011984  5E0F               	subwf	__div_to_l_@f1,f,c
  6402  011986  5013               	movf	__div_to_l_@f2+1,w,c
  6403  011988  5A10               	subwfb	__div_to_l_@f1+1,f,c
  6404  01198A  5014               	movf	__div_to_l_@f2+2,w,c
  6405  01198C  5A11               	subwfb	__div_to_l_@f1+2,f,c
  6406  01198E  5015               	movf	__div_to_l_@f2+3,w,c
  6407  011990  5A12               	subwfb	__div_to_l_@f1+3,f,c
  6408  011992  8019               	bsf	__div_to_l_@quot,0,c
  6409  011994                     l5839:
  6410  011994  90D8               	bcf	status,0,c
  6411  011996  360F               	rlcf	__div_to_l_@f1,f,c
  6412  011998  3610               	rlcf	__div_to_l_@f1+1,f,c
  6413  01199A  3611               	rlcf	__div_to_l_@f1+2,f,c
  6414  01199C  3612               	rlcf	__div_to_l_@f1+3,f,c
  6415  01199E  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6416  0119A0  D7E1               	goto	l900
  6417  0119A2  AE1E               	btfss	__div_to_l_@exp1,7,c
  6418  0119A4  D019               	goto	l5853
  6419  0119A6  501E               	movf	__div_to_l_@exp1,w,c
  6420  0119A8  0A80               	xorlw	128
  6421  0119AA  6E15               	movwf	??__div_to_l_& (0+255),c
  6422  0119AC  0EE1               	movlw	225
  6423  0119AE  0A80               	xorlw	128
  6424  0119B0  5C15               	subwf	??__div_to_l_,w,c
  6425  0119B2  B0D8               	btfsc	status,0,c
  6426  0119B4  D009               	goto	l5849
  6427  0119B6  0E00               	movlw	0
  6428  0119B8  6E0F               	movwf	?__div_to_l_,c
  6429  0119BA  0E00               	movlw	0
  6430  0119BC  6E10               	movwf	?__div_to_l_+1,c
  6431  0119BE  0E00               	movlw	0
  6432  0119C0  6E11               	movwf	?__div_to_l_+2,c
  6433  0119C2  0E00               	movlw	0
  6434  0119C4  6E12               	movwf	?__div_to_l_+3,c
  6435  0119C6  0012               	return	
  6436  0119C8                     l5849:
  6437  0119C8  90D8               	bcf	status,0,c
  6438  0119CA  321C               	rrcf	__div_to_l_@quot+3,f,c
  6439  0119CC  321B               	rrcf	__div_to_l_@quot+2,f,c
  6440  0119CE  321A               	rrcf	__div_to_l_@quot+1,f,c
  6441  0119D0  3219               	rrcf	__div_to_l_@quot,f,c
  6442  0119D2  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6443  0119D4  D7F9               	goto	l5849
  6444  0119D6  D014               	goto	l907
  6445  0119D8                     l5853:
  6446  0119D8  0E1F               	movlw	31
  6447  0119DA  641E               	cpfsgt	__div_to_l_@exp1,c
  6448  0119DC  D00F               	goto	l5861
  6449  0119DE  0E00               	movlw	0
  6450  0119E0  6E0F               	movwf	?__div_to_l_,c
  6451  0119E2  0E00               	movlw	0
  6452  0119E4  6E10               	movwf	?__div_to_l_+1,c
  6453  0119E6  0E00               	movlw	0
  6454  0119E8  6E11               	movwf	?__div_to_l_+2,c
  6455  0119EA  0E00               	movlw	0
  6456  0119EC  6E12               	movwf	?__div_to_l_+3,c
  6457  0119EE  0012               	return	
  6458  0119F0                     l5859:
  6459  0119F0  90D8               	bcf	status,0,c
  6460  0119F2  3619               	rlcf	__div_to_l_@quot,f,c
  6461  0119F4  361A               	rlcf	__div_to_l_@quot+1,f,c
  6462  0119F6  361B               	rlcf	__div_to_l_@quot+2,f,c
  6463  0119F8  361C               	rlcf	__div_to_l_@quot+3,f,c
  6464  0119FA  061E               	decf	__div_to_l_@exp1,f,c
  6465  0119FC                     l5861:
  6466  0119FC  661E               	tstfsz	__div_to_l_@exp1,c
  6467  0119FE  D7F8               	goto	l5859
  6468  011A00                     l907:
  6469  011A00  C019  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  6470  011A04  C01A  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6471  011A08  C01B  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6472  011A0C  C01C  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6473  011A10  0012               	return	
  6474  011A12                     __end_of__div_to_l_:
  6475                           	opt stack 0
  6476                           tblptru	equ	0xFF8
  6477                           tblptrh	equ	0xFF7
  6478                           tblptrl	equ	0xFF6
  6479                           tablat	equ	0xFF5
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           wreg	equ	0xFE8
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function ___lltoft *****************
  6491 ;; Defined at:
  6492 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lltoft.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  c               4   22[COMRAM] unsigned long 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  exp             1   30[COMRAM] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;                  3   22[COMRAM] float 
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6506 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6508 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6509 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6510 ;;Total ram usage:        9 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    2
  6513 ;; This function calls:
  6514 ;;		___ftpack
  6515 ;; This function is called by:
  6516 ;;		_sprintf
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text17
  6521  012AD0                     __ptext17:
  6522                           	opt stack 0
  6523  012AD0                     ___lltoft:
  6524                           	opt stack 26
  6525                           
  6526                           ;incstack = 0
  6527  012AD0  6E1B               	movwf	??___lltoft& (0+255),c
  6528  012AD2  0E8E               	movlw	142
  6529  012AD4  6E1F               	movwf	___lltoft@exp,c
  6530  012AD6  501B               	movf	??___lltoft& (0+255),w,c
  6531  012AD8  D006               	goto	l7829
  6532  012ADA                     l7827:
  6533  012ADA  90D8               	bcf	status,0,c
  6534  012ADC  321A               	rrcf	___lltoft@c+3,f,c
  6535  012ADE  3219               	rrcf	___lltoft@c+2,f,c
  6536  012AE0  3218               	rrcf	___lltoft@c+1,f,c
  6537  012AE2  3217               	rrcf	___lltoft@c,f,c
  6538  012AE4  2A1F               	incf	___lltoft@exp,f,c
  6539  012AE6                     l7829:
  6540  012AE6  0E00               	movlw	0
  6541  012AE8  1417               	andwf	___lltoft@c,w,c
  6542  012AEA  6E1B               	movwf	??___lltoft& (0+255),c
  6543  012AEC  0E00               	movlw	0
  6544  012AEE  1418               	andwf	___lltoft@c+1,w,c
  6545  012AF0  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  6546  012AF2  0E00               	movlw	0
  6547  012AF4  1419               	andwf	___lltoft@c+2,w,c
  6548  012AF6  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  6549  012AF8  0EFF               	movlw	255
  6550  012AFA  141A               	andwf	___lltoft@c+3,w,c
  6551  012AFC  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  6552  012AFE  501E               	movf	??___lltoft+3,w,c
  6553  012B00  101B               	iorwf	??___lltoft,w,c
  6554  012B02  101C               	iorwf	??___lltoft+1,w,c
  6555  012B04  101D               	iorwf	??___lltoft+2,w,c
  6556  012B06  A4D8               	btfss	status,2,c
  6557  012B08  D7E8               	goto	l7827
  6558  012B0A  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  6559  012B0E  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  6560  012B12  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  6561  012B16  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  6562  012B1A  6E1B               	movwf	??___lltoft& (0+255),c
  6563  012B1C  0E00               	movlw	0
  6564  012B1E  6E13               	movwf	___ftpack@sign,c
  6565  012B20  501B               	movf	??___lltoft& (0+255),w,c
  6566  012B22  EC86  F093         	call	___ftpack	;wreg free
  6567  012B26  C00F  F017         	movff	?___ftpack,?___lltoft
  6568  012B2A  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  6569  012B2E  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  6570  012B32  0012               	return	
  6571  012B34                     __end_of___lltoft:
  6572                           	opt stack 0
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           wreg	equ	0xFE8
  6580                           indf2	equ	0xFDF
  6581                           postinc2	equ	0xFDE
  6582                           postdec2	equ	0xFDD
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8
  6586                           
  6587 ;; *************** function ___llmod *****************
  6588 ;; Defined at:
  6589 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\llmod.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  dividend        4   28[COMRAM] unsigned long 
  6592 ;;  divisor         4   32[COMRAM] unsigned long 
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  counter         1   37[COMRAM] unsigned char 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;                  4   28[COMRAM] unsigned long 
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6604 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6606 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6607 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6608 ;;Total ram usage:       10 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    1
  6611 ;; This function calls:
  6612 ;;		Nothing
  6613 ;; This function is called by:
  6614 ;;		_sprintf
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text18
  6619  012A66                     __ptext18:
  6620                           	opt stack 0
  6621  012A66                     ___llmod:
  6622                           	opt stack 27
  6623                           
  6624                           ;incstack = 0
  6625  012A66  5024               	movf	___llmod@divisor+3,w,c
  6626  012A68  1021               	iorwf	___llmod@divisor,w,c
  6627  012A6A  1022               	iorwf	___llmod@divisor+1,w,c
  6628  012A6C  1023               	iorwf	___llmod@divisor+2,w,c
  6629  012A6E  B4D8               	btfsc	status,2,c
  6630  012A70  D026               	goto	l1114
  6631  012A72  6E25               	movwf	??___llmod& (0+255),c
  6632  012A74  0E01               	movlw	1
  6633  012A76  6E26               	movwf	___llmod@counter,c
  6634  012A78  5025               	movf	??___llmod& (0+255),w,c
  6635  012A7A  D006               	goto	l6037
  6636  012A7C                     l6035:
  6637  012A7C  90D8               	bcf	status,0,c
  6638  012A7E  3621               	rlcf	___llmod@divisor,f,c
  6639  012A80  3622               	rlcf	___llmod@divisor+1,f,c
  6640  012A82  3623               	rlcf	___llmod@divisor+2,f,c
  6641  012A84  3624               	rlcf	___llmod@divisor+3,f,c
  6642  012A86  2A26               	incf	___llmod@counter,f,c
  6643  012A88                     l6037:
  6644  012A88  AE24               	btfss	___llmod@divisor+3,7,c
  6645  012A8A  D7F8               	goto	l6035
  6646  012A8C                     l6039:
  6647  012A8C  5021               	movf	___llmod@divisor,w,c
  6648  012A8E  5C1D               	subwf	___llmod@dividend,w,c
  6649  012A90  5022               	movf	___llmod@divisor+1,w,c
  6650  012A92  581E               	subwfb	___llmod@dividend+1,w,c
  6651  012A94  5023               	movf	___llmod@divisor+2,w,c
  6652  012A96  581F               	subwfb	___llmod@dividend+2,w,c
  6653  012A98  5024               	movf	___llmod@divisor+3,w,c
  6654  012A9A  5820               	subwfb	___llmod@dividend+3,w,c
  6655  012A9C  A0D8               	btfss	status,0,c
  6656  012A9E  D008               	goto	l6043
  6657  012AA0  5021               	movf	___llmod@divisor,w,c
  6658  012AA2  5E1D               	subwf	___llmod@dividend,f,c
  6659  012AA4  5022               	movf	___llmod@divisor+1,w,c
  6660  012AA6  5A1E               	subwfb	___llmod@dividend+1,f,c
  6661  012AA8  5023               	movf	___llmod@divisor+2,w,c
  6662  012AAA  5A1F               	subwfb	___llmod@dividend+2,f,c
  6663  012AAC  5024               	movf	___llmod@divisor+3,w,c
  6664  012AAE  5A20               	subwfb	___llmod@dividend+3,f,c
  6665  012AB0                     l6043:
  6666  012AB0  90D8               	bcf	status,0,c
  6667  012AB2  3224               	rrcf	___llmod@divisor+3,f,c
  6668  012AB4  3223               	rrcf	___llmod@divisor+2,f,c
  6669  012AB6  3222               	rrcf	___llmod@divisor+1,f,c
  6670  012AB8  3221               	rrcf	___llmod@divisor,f,c
  6671  012ABA  2E26               	decfsz	___llmod@counter,f,c
  6672  012ABC  D7E7               	goto	l6039
  6673  012ABE                     l1114:
  6674  012ABE  C01D  F01D         	movff	___llmod@dividend,?___llmod
  6675  012AC2  C01E  F01E         	movff	___llmod@dividend+1,?___llmod+1
  6676  012AC6  C01F  F01F         	movff	___llmod@dividend+2,?___llmod+2
  6677  012ACA  C020  F020         	movff	___llmod@dividend+3,?___llmod+3
  6678  012ACE  0012               	return	
  6679  012AD0                     __end_of___llmod:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           wreg	equ	0xFE8
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function ___lldiv *****************
  6696 ;; Defined at:
  6697 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lldiv.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  dividend        4   14[COMRAM] unsigned long 
  6700 ;;  divisor         4   18[COMRAM] unsigned long 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  quotient        4   23[COMRAM] unsigned long 
  6703 ;;  counter         1   27[COMRAM] unsigned char 
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  4   14[COMRAM] unsigned long 
  6706 ;; Registers used:
  6707 ;;		wreg, status,2, status,0
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6713 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6714 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6716 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6717 ;;Total ram usage:       14 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    1
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_sprintf
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text19
  6728  0128E0                     __ptext19:
  6729                           	opt stack 0
  6730  0128E0                     ___lldiv:
  6731                           	opt stack 27
  6732                           
  6733                           ;incstack = 0
  6734  0128E0  0E00               	movlw	0
  6735  0128E2  6E18               	movwf	___lldiv@quotient,c
  6736  0128E4  0E00               	movlw	0
  6737  0128E6  6E19               	movwf	___lldiv@quotient+1,c
  6738  0128E8  0E00               	movlw	0
  6739  0128EA  6E1A               	movwf	___lldiv@quotient+2,c
  6740  0128EC  0E00               	movlw	0
  6741  0128EE  6E1B               	movwf	___lldiv@quotient+3,c
  6742  0128F0  5016               	movf	___lldiv@divisor+3,w,c
  6743  0128F2  1013               	iorwf	___lldiv@divisor,w,c
  6744  0128F4  1014               	iorwf	___lldiv@divisor+1,w,c
  6745  0128F6  1015               	iorwf	___lldiv@divisor+2,w,c
  6746  0128F8  B4D8               	btfsc	status,2,c
  6747  0128FA  D02C               	goto	l1104
  6748  0128FC  6E17               	movwf	??___lldiv& (0+255),c
  6749  0128FE  0E01               	movlw	1
  6750  012900  6E1C               	movwf	___lldiv@counter,c
  6751  012902  5017               	movf	??___lldiv& (0+255),w,c
  6752  012904  D006               	goto	l6017
  6753  012906                     l6015:
  6754  012906  90D8               	bcf	status,0,c
  6755  012908  3613               	rlcf	___lldiv@divisor,f,c
  6756  01290A  3614               	rlcf	___lldiv@divisor+1,f,c
  6757  01290C  3615               	rlcf	___lldiv@divisor+2,f,c
  6758  01290E  3616               	rlcf	___lldiv@divisor+3,f,c
  6759  012910  2A1C               	incf	___lldiv@counter,f,c
  6760  012912                     l6017:
  6761  012912  AE16               	btfss	___lldiv@divisor+3,7,c
  6762  012914  D7F8               	goto	l6015
  6763  012916                     l6019:
  6764  012916  90D8               	bcf	status,0,c
  6765  012918  3618               	rlcf	___lldiv@quotient,f,c
  6766  01291A  3619               	rlcf	___lldiv@quotient+1,f,c
  6767  01291C  361A               	rlcf	___lldiv@quotient+2,f,c
  6768  01291E  361B               	rlcf	___lldiv@quotient+3,f,c
  6769  012920  5013               	movf	___lldiv@divisor,w,c
  6770  012922  5C0F               	subwf	___lldiv@dividend,w,c
  6771  012924  5014               	movf	___lldiv@divisor+1,w,c
  6772  012926  5810               	subwfb	___lldiv@dividend+1,w,c
  6773  012928  5015               	movf	___lldiv@divisor+2,w,c
  6774  01292A  5811               	subwfb	___lldiv@dividend+2,w,c
  6775  01292C  5016               	movf	___lldiv@divisor+3,w,c
  6776  01292E  5812               	subwfb	___lldiv@dividend+3,w,c
  6777  012930  A0D8               	btfss	status,0,c
  6778  012932  D009               	goto	l6027
  6779  012934  5013               	movf	___lldiv@divisor,w,c
  6780  012936  5E0F               	subwf	___lldiv@dividend,f,c
  6781  012938  5014               	movf	___lldiv@divisor+1,w,c
  6782  01293A  5A10               	subwfb	___lldiv@dividend+1,f,c
  6783  01293C  5015               	movf	___lldiv@divisor+2,w,c
  6784  01293E  5A11               	subwfb	___lldiv@dividend+2,f,c
  6785  012940  5016               	movf	___lldiv@divisor+3,w,c
  6786  012942  5A12               	subwfb	___lldiv@dividend+3,f,c
  6787  012944  8018               	bsf	___lldiv@quotient,0,c
  6788  012946                     l6027:
  6789  012946  90D8               	bcf	status,0,c
  6790  012948  3216               	rrcf	___lldiv@divisor+3,f,c
  6791  01294A  3215               	rrcf	___lldiv@divisor+2,f,c
  6792  01294C  3214               	rrcf	___lldiv@divisor+1,f,c
  6793  01294E  3213               	rrcf	___lldiv@divisor,f,c
  6794  012950  2E1C               	decfsz	___lldiv@counter,f,c
  6795  012952  D7E1               	goto	l6019
  6796  012954                     l1104:
  6797  012954  C018  F00F         	movff	___lldiv@quotient,?___lldiv
  6798  012958  C019  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  6799  01295C  C01A  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  6800  012960  C01B  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  6801  012964  0012               	return	
  6802  012966                     __end_of___lldiv:
  6803                           	opt stack 0
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           wreg	equ	0xFE8
  6811                           indf2	equ	0xFDF
  6812                           postinc2	equ	0xFDE
  6813                           postdec2	equ	0xFDD
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function ___fttol *****************
  6819 ;; Defined at:
  6820 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\fttol.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  f1              3   58[COMRAM] float 
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;  lval            4   68[COMRAM] unsigned long 
  6825 ;;  exp1            1   72[COMRAM] unsigned char 
  6826 ;;  sign1           1   67[COMRAM] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  4   58[COMRAM] long 
  6829 ;; Registers used:
  6830 ;;		wreg, status,2, status,0
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6837 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6838 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6839 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6840 ;;Total ram usage:       15 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    1
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		_sprintf
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text20
  6851  01231A                     __ptext20:
  6852                           	opt stack 0
  6853  01231A                     ___fttol:
  6854                           	opt stack 27
  6855                           
  6856                           ;incstack = 0
  6857  01231A  C03D  F03F         	movff	___fttol@f1+2,??___fttol
  6858  01231E  6A40               	clrf	(??___fttol+1)& (0+255),c
  6859  012320  6A41               	clrf	(??___fttol+2)& (0+255),c
  6860  012322  343C               	rlcf	___fttol@f1+1,w,c
  6861  012324  363F               	rlcf	??___fttol& (0+255),f,c
  6862  012326  E301               	bnc	u3761
  6863  012328  8040               	bsf	(??___fttol+1)& (0+255),0,c
  6864  01232A                     u3761:
  6865  01232A  503F               	movf	??___fttol,w,c
  6866  01232C  6E49               	movwf	___fttol@exp1,c
  6867  01232E  6649               	tstfsz	___fttol@exp1& (0+255),c
  6868  012330  D009               	goto	l5969
  6869  012332  0E00               	movlw	0
  6870  012334  6E3B               	movwf	?___fttol,c
  6871  012336  0E00               	movlw	0
  6872  012338  6E3C               	movwf	?___fttol+1,c
  6873  01233A  0E00               	movlw	0
  6874  01233C  6E3D               	movwf	?___fttol+2,c
  6875  01233E  0E00               	movlw	0
  6876  012340  6E3E               	movwf	?___fttol+3,c
  6877  012342  0012               	return	
  6878  012344                     l5969:
  6879  012344  0E17               	movlw	23
  6880  012346  6E3F               	movwf	??___fttol& (0+255),c
  6881  012348  C03B  F040         	movff	___fttol@f1,??___fttol+1
  6882  01234C  C03C  F041         	movff	___fttol@f1+1,??___fttol+2
  6883  012350  C03D  F042         	movff	___fttol@f1+2,??___fttol+3
  6884  012354  283F               	incf	??___fttol,w,c
  6885  012356  6E43               	movwf	(??___fttol+4)& (0+255),c
  6886  012358  D004               	goto	u3780
  6887  01235A                     u3785:
  6888  01235A  90D8               	bcf	status,0,c
  6889  01235C  3242               	rrcf	??___fttol+3,f,c
  6890  01235E  3241               	rrcf	??___fttol+2,f,c
  6891  012360  3240               	rrcf	??___fttol+1,f,c
  6892  012362                     u3780:
  6893  012362  2E43               	decfsz	(??___fttol+4)& (0+255),f,c
  6894  012364  D7FA               	goto	u3785
  6895  012366  5040               	movf	??___fttol+1,w,c
  6896  012368  6E44               	movwf	___fttol@sign1,c
  6897  01236A  8E3C               	bsf	___fttol@f1+1,7,c
  6898  01236C  0EFF               	movlw	255
  6899  01236E  163B               	andwf	___fttol@f1,f,c
  6900  012370  0EFF               	movlw	255
  6901  012372  163C               	andwf	___fttol@f1+1,f,c
  6902  012374  0E00               	movlw	0
  6903  012376  163D               	andwf	___fttol@f1+2,f,c
  6904  012378  503B               	movf	___fttol@f1,w,c
  6905  01237A  6E45               	movwf	___fttol@lval,c
  6906  01237C  503C               	movf	___fttol@f1+1,w,c
  6907  01237E  6E46               	movwf	___fttol@lval+1,c
  6908  012380  503D               	movf	___fttol@f1+2,w,c
  6909  012382  6E47               	movwf	___fttol@lval+2,c
  6910  012384  6A48               	clrf	___fttol@lval+3,c
  6911  012386  0E8E               	movlw	142
  6912  012388  5E49               	subwf	___fttol@exp1,f,c
  6913  01238A  AE49               	btfss	___fttol@exp1,7,c
  6914  01238C  D019               	goto	l5991
  6915  01238E  5049               	movf	___fttol@exp1,w,c
  6916  012390  0A80               	xorlw	128
  6917  012392  6E3F               	movwf	??___fttol& (0+255),c
  6918  012394  0EF1               	movlw	241
  6919  012396  0A80               	xorlw	128
  6920  012398  5C3F               	subwf	??___fttol,w,c
  6921  01239A  B0D8               	btfsc	status,0,c
  6922  01239C  D009               	goto	l5987
  6923  01239E  0E00               	movlw	0
  6924  0123A0  6E3B               	movwf	?___fttol,c
  6925  0123A2  0E00               	movlw	0
  6926  0123A4  6E3C               	movwf	?___fttol+1,c
  6927  0123A6  0E00               	movlw	0
  6928  0123A8  6E3D               	movwf	?___fttol+2,c
  6929  0123AA  0E00               	movlw	0
  6930  0123AC  6E3E               	movwf	?___fttol+3,c
  6931  0123AE  0012               	return	
  6932  0123B0                     l5987:
  6933  0123B0  90D8               	bcf	status,0,c
  6934  0123B2  3248               	rrcf	___fttol@lval+3,f,c
  6935  0123B4  3247               	rrcf	___fttol@lval+2,f,c
  6936  0123B6  3246               	rrcf	___fttol@lval+1,f,c
  6937  0123B8  3245               	rrcf	___fttol@lval,f,c
  6938  0123BA  3E49               	incfsz	___fttol@exp1,f,c
  6939  0123BC  D7F9               	goto	l5987
  6940  0123BE  D014               	goto	l6001
  6941  0123C0                     l5991:
  6942  0123C0  0E17               	movlw	23
  6943  0123C2  6449               	cpfsgt	___fttol@exp1,c
  6944  0123C4  D00F               	goto	l5999
  6945  0123C6  0E00               	movlw	0
  6946  0123C8  6E3B               	movwf	?___fttol,c
  6947  0123CA  0E00               	movlw	0
  6948  0123CC  6E3C               	movwf	?___fttol+1,c
  6949  0123CE  0E00               	movlw	0
  6950  0123D0  6E3D               	movwf	?___fttol+2,c
  6951  0123D2  0E00               	movlw	0
  6952  0123D4  6E3E               	movwf	?___fttol+3,c
  6953  0123D6  0012               	return	
  6954  0123D8                     l5997:
  6955  0123D8  90D8               	bcf	status,0,c
  6956  0123DA  3645               	rlcf	___fttol@lval,f,c
  6957  0123DC  3646               	rlcf	___fttol@lval+1,f,c
  6958  0123DE  3647               	rlcf	___fttol@lval+2,f,c
  6959  0123E0  3648               	rlcf	___fttol@lval+3,f,c
  6960  0123E2  0649               	decf	___fttol@exp1,f,c
  6961  0123E4                     l5999:
  6962  0123E4  6649               	tstfsz	___fttol@exp1,c
  6963  0123E6  D7F8               	goto	l5997
  6964  0123E8                     l6001:
  6965  0123E8  5044               	movf	___fttol@sign1,w,c
  6966  0123EA  B4D8               	btfsc	status,2,c
  6967  0123EC  D008               	goto	l6005
  6968  0123EE  1E48               	comf	___fttol@lval+3,f,c
  6969  0123F0  1E47               	comf	___fttol@lval+2,f,c
  6970  0123F2  1E46               	comf	___fttol@lval+1,f,c
  6971  0123F4  6C45               	negf	___fttol@lval,c
  6972  0123F6  0E00               	movlw	0
  6973  0123F8  2246               	addwfc	___fttol@lval+1,f,c
  6974  0123FA  2247               	addwfc	___fttol@lval+2,f,c
  6975  0123FC  2248               	addwfc	___fttol@lval+3,f,c
  6976  0123FE                     l6005:
  6977  0123FE  C045  F03B         	movff	___fttol@lval,?___fttol
  6978  012402  C046  F03C         	movff	___fttol@lval+1,?___fttol+1
  6979  012406  C047  F03D         	movff	___fttol@lval+2,?___fttol+2
  6980  01240A  C048  F03E         	movff	___fttol@lval+3,?___fttol+3
  6981  01240E  0012               	return	
  6982  012410                     __end_of___fttol:
  6983                           	opt stack 0
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           wreg	equ	0xFE8
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function ___ftneg *****************
  6999 ;; Defined at:
  7000 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftneg.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  f1              3   14[COMRAM] float 
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  3   14[COMRAM] float 
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7014 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7017 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7018 ;;Total ram usage:        3 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    1
  7021 ;; This function calls:
  7022 ;;		Nothing
  7023 ;; This function is called by:
  7024 ;;		_sprintf
  7025 ;;		_encoder_move_degree
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           	psect	text21
  7030  012F7E                     __ptext21:
  7031                           	opt stack 0
  7032  012F7E                     ___ftneg:
  7033                           	opt stack 27
  7034                           
  7035                           ;incstack = 0
  7036  012F7E  0E7F               	movlw	127
  7037  012F80  1411               	andwf	___ftneg@f1+2,w,c
  7038  012F82  1010               	iorwf	___ftneg@f1+1,w,c
  7039  012F84  100F               	iorwf	___ftneg@f1,w,c
  7040  012F86  B4D8               	btfsc	status,2,c
  7041  012F88  D006               	goto	l1050
  7042  012F8A  0E00               	movlw	0
  7043  012F8C  1A0F               	xorwf	___ftneg@f1,f,c
  7044  012F8E  0E00               	movlw	0
  7045  012F90  1A10               	xorwf	___ftneg@f1+1,f,c
  7046  012F92  0E80               	movlw	128
  7047  012F94  1A11               	xorwf	___ftneg@f1+2,f,c
  7048  012F96                     l1050:
  7049  012F96  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  7050  012F9A  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  7051  012F9E  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  7052  012FA2  0012               	return	
  7053  012FA4                     __end_of___ftneg:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodh	equ	0xFF4
  7060                           prodl	equ	0xFF3
  7061                           wreg	equ	0xFE8
  7062                           indf2	equ	0xFDF
  7063                           postinc2	equ	0xFDE
  7064                           postdec2	equ	0xFDD
  7065                           fsr2h	equ	0xFDA
  7066                           fsr2l	equ	0xFD9
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function ___asftsub *****************
  7070 ;; Defined at:
  7071 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic18\asftsub.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  f1p             2   69[COMRAM] PTR float 
  7074 ;;		 -> sprintf@fval(3), 
  7075 ;;  f2              3   71[COMRAM] float 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  3   69[COMRAM] float 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7087 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7090 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7091 ;;Total ram usage:        5 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    4
  7094 ;; This function calls:
  7095 ;;		___ftsub
  7096 ;; This function is called by:
  7097 ;;		_sprintf
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           	psect	text22
  7102  012D60                     __ptext22:
  7103                           	opt stack 0
  7104  012D60                     ___asftsub:
  7105                           	opt stack 24
  7106                           
  7107                           ;	Return value of ___asftsub is never used
  7108                           
  7109                           ;incstack = 0
  7110  012D60  C046  FFD9         	movff	___asftsub@f1p,fsr2l
  7111  012D64  C047  FFDA         	movff	___asftsub@f1p+1,fsr2h
  7112  012D68  CFDE F040          	movff	postinc2,___ftsub@f1
  7113  012D6C  CFDE F041          	movff	postinc2,___ftsub@f1+1
  7114  012D70  CFDD F042          	movff	postdec2,___ftsub@f1+2
  7115  012D74  C048  F043         	movff	___asftsub@f2,___ftsub@f2
  7116  012D78  C049  F044         	movff	___asftsub@f2+1,___ftsub@f2+1
  7117  012D7C  C04A  F045         	movff	___asftsub@f2+2,___ftsub@f2+2
  7118  012D80  EC62  F097         	call	___ftsub	;wreg free
  7119  012D84  C046  FFD9         	movff	___asftsub@f1p,fsr2l
  7120  012D88  C047  FFDA         	movff	___asftsub@f1p+1,fsr2h
  7121  012D8C  C040  FFDE         	movff	?___ftsub,postinc2
  7122  012D90  C041  FFDE         	movff	?___ftsub+1,postinc2
  7123  012D94  C042  FFDD         	movff	?___ftsub+2,postdec2
  7124  012D98  52DD               	movf	postdec2,f,c
  7125  012D9A  0012               	return	
  7126  012D9C                     __end_of___asftsub:
  7127                           	opt stack 0
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           wreg	equ	0xFE8
  7135                           indf2	equ	0xFDF
  7136                           postinc2	equ	0xFDE
  7137                           postdec2	equ	0xFDD
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142 ;; *************** function ___ftsub *****************
  7143 ;; Defined at:
  7144 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftsub.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  f1              3   63[COMRAM] float 
  7147 ;;  f2              3   66[COMRAM] float 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  3   63[COMRAM] float 
  7152 ;; Registers used:
  7153 ;;		wreg, status,2, status,0, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7159 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7163 ;;Total ram usage:        6 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    3
  7166 ;; This function calls:
  7167 ;;		___ftadd
  7168 ;; This function is called by:
  7169 ;;		___asftsub
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text23
  7174  012EC4                     __ptext23:
  7175                           	opt stack 0
  7176  012EC4                     ___ftsub:
  7177                           	opt stack 24
  7178                           
  7179                           ;incstack = 0
  7180  012EC4  0E00               	movlw	0
  7181  012EC6  1A43               	xorwf	___ftsub@f2,f,c
  7182  012EC8  0E00               	movlw	0
  7183  012ECA  1A44               	xorwf	___ftsub@f2+1,f,c
  7184  012ECC  0E80               	movlw	128
  7185  012ECE  1A45               	xorwf	___ftsub@f2+2,f,c
  7186  012ED0  C040  F034         	movff	___ftsub@f1,___ftadd@f1
  7187  012ED4  C041  F035         	movff	___ftsub@f1+1,___ftadd@f1+1
  7188  012ED8  C042  F036         	movff	___ftsub@f1+2,___ftadd@f1+2
  7189  012EDC  C043  F037         	movff	___ftsub@f2,___ftadd@f2
  7190  012EE0  C044  F038         	movff	___ftsub@f2+1,___ftadd@f2+1
  7191  012EE4  C045  F039         	movff	___ftsub@f2+2,___ftadd@f2+2
  7192  012EE8  ECBA  F08A         	call	___ftadd	;wreg free
  7193  012EEC  C034  F040         	movff	?___ftadd,?___ftsub
  7194  012EF0  C035  F041         	movff	?___ftadd+1,?___ftsub+1
  7195  012EF4  C036  F042         	movff	?___ftadd+2,?___ftsub+2
  7196  012EF8  0012               	return	
  7197  012EFA                     __end_of___ftsub:
  7198                           	opt stack 0
  7199                           tblptru	equ	0xFF8
  7200                           tblptrh	equ	0xFF7
  7201                           tblptrl	equ	0xFF6
  7202                           tablat	equ	0xFF5
  7203                           prodh	equ	0xFF4
  7204                           prodl	equ	0xFF3
  7205                           wreg	equ	0xFE8
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213 ;; *************** function ___asftmul *****************
  7214 ;; Defined at:
  7215 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic18\asftmul.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;  f1p             2   51[COMRAM] PTR float 
  7218 ;;		 -> sprintf@integ(3), 
  7219 ;;  f2              3   53[COMRAM] float 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;		None
  7222 ;; Return value:  Size  Location     Type
  7223 ;;                  3   51[COMRAM] float 
  7224 ;; Registers used:
  7225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7231 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7234 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7235 ;;Total ram usage:        5 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    3
  7238 ;; This function calls:
  7239 ;;		___ftmul
  7240 ;; This function is called by:
  7241 ;;		_sprintf
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text24
  7246  012D9C                     __ptext24:
  7247                           	opt stack 0
  7248  012D9C                     ___asftmul:
  7249                           	opt stack 25
  7250                           
  7251                           ;	Return value of ___asftmul is never used
  7252                           
  7253                           ;incstack = 0
  7254  012D9C  C034  FFD9         	movff	___asftmul@f1p,fsr2l
  7255  012DA0  C035  FFDA         	movff	___asftmul@f1p+1,fsr2h
  7256  012DA4  CFDE F025          	movff	postinc2,___ftmul@f1
  7257  012DA8  CFDE F026          	movff	postinc2,___ftmul@f1+1
  7258  012DAC  CFDD F027          	movff	postdec2,___ftmul@f1+2
  7259  012DB0  C036  F028         	movff	___asftmul@f2,___ftmul@f2
  7260  012DB4  C037  F029         	movff	___asftmul@f2+1,___ftmul@f2+1
  7261  012DB8  C038  F02A         	movff	___asftmul@f2+2,___ftmul@f2+2
  7262  012DBC  EC11  F091         	call	___ftmul	;wreg free
  7263  012DC0  C034  FFD9         	movff	___asftmul@f1p,fsr2l
  7264  012DC4  C035  FFDA         	movff	___asftmul@f1p+1,fsr2h
  7265  012DC8  C025  FFDE         	movff	?___ftmul,postinc2
  7266  012DCC  C026  FFDE         	movff	?___ftmul+1,postinc2
  7267  012DD0  C027  FFDD         	movff	?___ftmul+2,postdec2
  7268  012DD4  52DD               	movf	postdec2,f,c
  7269  012DD6  0012               	return	
  7270  012DD8                     __end_of___asftmul:
  7271                           	opt stack 0
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           wreg	equ	0xFE8
  7279                           indf2	equ	0xFDF
  7280                           postinc2	equ	0xFDE
  7281                           postdec2	equ	0xFDD
  7282                           fsr2h	equ	0xFDA
  7283                           fsr2l	equ	0xFD9
  7284                           status	equ	0xFD8
  7285                           
  7286 ;; *************** function ___asftadd *****************
  7287 ;; Defined at:
  7288 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic18\asftadd.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  f1p             2   63[COMRAM] PTR float 
  7291 ;;		 -> sprintf@fval(3), encoder_move_degree@degree_done(3), readDistance@a(3), 
  7292 ;;  f2              3   65[COMRAM] float 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  3   63[COMRAM] float 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7304 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7307 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7308 ;;Total ram usage:        5 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    3
  7311 ;; This function calls:
  7312 ;;		___ftadd
  7313 ;; This function is called by:
  7314 ;;		_sprintf
  7315 ;;		_readDistance
  7316 ;;		_encoder_move_degree
  7317 ;; This function uses a non-reentrant model
  7318 ;;
  7319                           
  7320                           	psect	text25
  7321  012DD8                     __ptext25:
  7322                           	opt stack 0
  7323  012DD8                     ___asftadd:
  7324                           	opt stack 25
  7325                           
  7326                           ;	Return value of ___asftadd is never used
  7327                           
  7328                           ;incstack = 0
  7329  012DD8  C040  FFD9         	movff	___asftadd@f1p,fsr2l
  7330  012DDC  C041  FFDA         	movff	___asftadd@f1p+1,fsr2h
  7331  012DE0  CFDE F034          	movff	postinc2,___ftadd@f1
  7332  012DE4  CFDE F035          	movff	postinc2,___ftadd@f1+1
  7333  012DE8  CFDD F036          	movff	postdec2,___ftadd@f1+2
  7334  012DEC  C042  F037         	movff	___asftadd@f2,___ftadd@f2
  7335  012DF0  C043  F038         	movff	___asftadd@f2+1,___ftadd@f2+1
  7336  012DF4  C044  F039         	movff	___asftadd@f2+2,___ftadd@f2+2
  7337  012DF8  ECBA  F08A         	call	___ftadd	;wreg free
  7338  012DFC  C040  FFD9         	movff	___asftadd@f1p,fsr2l
  7339  012E00  C041  FFDA         	movff	___asftadd@f1p+1,fsr2h
  7340  012E04  C034  FFDE         	movff	?___ftadd,postinc2
  7341  012E08  C035  FFDE         	movff	?___ftadd+1,postinc2
  7342  012E0C  C036  FFDD         	movff	?___ftadd+2,postdec2
  7343  012E10  52DD               	movf	postdec2,f,c
  7344  012E12  0012               	return	
  7345  012E14                     __end_of___asftadd:
  7346                           	opt stack 0
  7347                           tblptru	equ	0xFF8
  7348                           tblptrh	equ	0xFF7
  7349                           tblptrl	equ	0xFF6
  7350                           tablat	equ	0xFF5
  7351                           prodh	equ	0xFF4
  7352                           prodl	equ	0xFF3
  7353                           wreg	equ	0xFE8
  7354                           indf2	equ	0xFDF
  7355                           postinc2	equ	0xFDE
  7356                           postdec2	equ	0xFDD
  7357                           fsr2h	equ	0xFDA
  7358                           fsr2l	equ	0xFD9
  7359                           status	equ	0xFD8
  7360                           
  7361 ;; *************** function _single_axis_measure *****************
  7362 ;; Defined at:
  7363 ;;		line 237 in file "functions.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  axis            2   14[BANK0 ] unsigned int 
  7366 ;;  iteration       3   16[BANK0 ] const float 
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;  axis_read       3   19[BANK0 ] const float 
  7369 ;;  i               2   25[BANK0 ] unsigned int 
  7370 ;;  axis_sum        3   27[BANK0 ] float 
  7371 ;;  medium_value    3   22[BANK0 ] const float 
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  3   14[BANK0 ] float 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2, status,0, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7381 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7382 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7384 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7385 ;;Total ram usage:       16 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    5
  7388 ;; This function calls:
  7389 ;;		___ftadd
  7390 ;;		___ftdiv
  7391 ;;		___ftge
  7392 ;;		___lwtoft
  7393 ;;		_read_accelerometer
  7394 ;;		_voltageToG
  7395 ;; This function is called by:
  7396 ;;		_showAccelerometerVal
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text26
  7401  011DC2                     __ptext26:
  7402                           	opt stack 0
  7403  011DC2                     _single_axis_measure:
  7404                           	opt stack 24
  7405                           
  7406                           ;functions.c: 238: float axis_sum = 0.0;
  7407                           
  7408                           ;incstack = 0
  7409  011DC2  0E00               	movlw	0
  7410  011DC4  0100               	movlb	0	; () banked
  7411  011DC6  0100               	movlb	0	; () banked
  7412  011DC8  6F7B               	movwf	single_axis_measure@axis_sum& (0+255),b
  7413  011DCA  0E00               	movlw	0
  7414  011DCC  0100               	movlb	0	; () banked
  7415  011DCE  0100               	movlb	0	; () banked
  7416  011DD0  6F7C               	movwf	(single_axis_measure@axis_sum+1)& (0+255),b
  7417  011DD2  0E00               	movlw	0
  7418  011DD4  0100               	movlb	0	; () banked
  7419  011DD6  0100               	movlb	0	; () banked
  7420  011DD8  6F7D               	movwf	(single_axis_measure@axis_sum+2)& (0+255),b
  7421                           
  7422                           ;functions.c: 239: for (unsigned int i = 0; i < iteration; i++) {
  7423  011DDA  0E00               	movlw	0
  7424  011DDC  0100               	movlb	0	; () banked
  7425  011DDE  0100               	movlb	0	; () banked
  7426  011DE0  6F7A               	movwf	(single_axis_measure@i+1)& (0+255),b
  7427  011DE2  0E00               	movlw	0
  7428  011DE4  0100               	movlb	0	; () banked
  7429  011DE6  6F79               	movwf	single_axis_measure@i& (0+255),b
  7430                           
  7431                           ; BSR set to: 0
  7432  011DE8  C079  F017         	movff	single_axis_measure@i,___lwtoft@c
  7433  011DEC  C07A  F018         	movff	single_axis_measure@i+1,___lwtoft@c+1
  7434  011DF0  EC94  F097         	call	___lwtoft	;wreg free
  7435  011DF4  C017  F01C         	movff	?___lwtoft,___ftge@ff1
  7436  011DF8  C018  F01D         	movff	?___lwtoft+1,___ftge@ff1+1
  7437  011DFC  C019  F01E         	movff	?___lwtoft+2,___ftge@ff1+2
  7438  011E00  C070  F01F         	movff	single_axis_measure@iteration,___ftge@ff2
  7439  011E04  C071  F020         	movff	single_axis_measure@iteration+1,___ftge@ff2+1
  7440  011E08  C072  F021         	movff	single_axis_measure@iteration+2,___ftge@ff2+2
  7441  011E0C  EC28  F094         	call	___ftge	;wreg free
  7442  011E10  B0D8               	btfsc	status,0,c
  7443  011E12  D039               	goto	l7865
  7444                           
  7445                           ;functions.c: 240: const float axis_read = read_accelerometer(axis);
  7446  011E14  C06E  F069         	movff	single_axis_measure@axis,read_accelerometer@axis
  7447  011E18  C06F  F06A         	movff	single_axis_measure@axis+1,read_accelerometer@axis+1
  7448  011E1C  EC7D  F097         	call	_read_accelerometer	;wreg free
  7449  011E20  C069  F073         	movff	?_read_accelerometer,single_axis_measure@axis_read
  7450  011E24  C06A  F074         	movff	?_read_accelerometer+1,single_axis_measure@axis_read+1
  7451  011E28  C06B  F075         	movff	?_read_accelerometer+2,single_axis_measure@axis_read+2
  7452                           
  7453                           ;functions.c: 241: axis_sum = axis_sum + axis_read;
  7454  011E2C  C07B  F034         	movff	single_axis_measure@axis_sum,___ftadd@f1
  7455  011E30  C07C  F035         	movff	single_axis_measure@axis_sum+1,___ftadd@f1+1
  7456  011E34  C07D  F036         	movff	single_axis_measure@axis_sum+2,___ftadd@f1+2
  7457  011E38  C073  F037         	movff	single_axis_measure@axis_read,___ftadd@f2
  7458  011E3C  C074  F038         	movff	single_axis_measure@axis_read+1,___ftadd@f2+1
  7459  011E40  C075  F039         	movff	single_axis_measure@axis_read+2,___ftadd@f2+2
  7460  011E44  ECBA  F08A         	call	___ftadd	;wreg free
  7461  011E48  C034  F07B         	movff	?___ftadd,single_axis_measure@axis_sum
  7462  011E4C  C035  F07C         	movff	?___ftadd+1,single_axis_measure@axis_sum+1
  7463  011E50  C036  F07D         	movff	?___ftadd+2,single_axis_measure@axis_sum+2
  7464  011E54  0100               	movlb	0	; () banked
  7465  011E56  0100               	movlb	0	; () banked
  7466  011E58  4B79               	infsnz	single_axis_measure@i& (0+255),f,b
  7467  011E5A  2B7A               	incf	(single_axis_measure@i+1)& (0+255),f,b
  7468                           
  7469                           ; BSR set to: 0
  7470  011E5C  C079  F017         	movff	single_axis_measure@i,___lwtoft@c
  7471  011E60  C07A  F018         	movff	single_axis_measure@i+1,___lwtoft@c+1
  7472  011E64  EC94  F097         	call	___lwtoft	;wreg free
  7473  011E68  C017  F01C         	movff	?___lwtoft,___ftge@ff1
  7474  011E6C  C018  F01D         	movff	?___lwtoft+1,___ftge@ff1+1
  7475  011E70  C019  F01E         	movff	?___lwtoft+2,___ftge@ff1+2
  7476  011E74  C070  F01F         	movff	single_axis_measure@iteration,___ftge@ff2
  7477  011E78  C071  F020         	movff	single_axis_measure@iteration+1,___ftge@ff2+1
  7478  011E7C  C072  F021         	movff	single_axis_measure@iteration+2,___ftge@ff2+2
  7479  011E80  EC28  F094         	call	___ftge	;wreg free
  7480  011E84  D7C5               	goto	L12
  7481  011E86                     l7865:
  7482                           
  7483                           ;functions.c: 242: }
  7484                           ;functions.c: 243: const float medium_value = axis_sum / iteration;
  7485  011E86  C07B  F040         	movff	single_axis_measure@axis_sum,___ftdiv@f1
  7486  011E8A  C07C  F041         	movff	single_axis_measure@axis_sum+1,___ftdiv@f1+1
  7487  011E8E  C07D  F042         	movff	single_axis_measure@axis_sum+2,___ftdiv@f1+2
  7488  011E92  C070  F043         	movff	single_axis_measure@iteration,___ftdiv@f2
  7489  011E96  C071  F044         	movff	single_axis_measure@iteration+1,___ftdiv@f2+1
  7490  011E9A  C072  F045         	movff	single_axis_measure@iteration+2,___ftdiv@f2+2
  7491  011E9E  EC72  F08F         	call	___ftdiv	;wreg free
  7492  011EA2  C040  F076         	movff	?___ftdiv,single_axis_measure@medium_value
  7493  011EA6  C041  F077         	movff	?___ftdiv+1,single_axis_measure@medium_value+1
  7494  011EAA  C042  F078         	movff	?___ftdiv+2,single_axis_measure@medium_value+2
  7495                           
  7496                           ;functions.c: 244: axis_sum = 0;
  7497  011EAE  0E00               	movlw	0
  7498  011EB0  0100               	movlb	0	; () banked
  7499  011EB2  0100               	movlb	0	; () banked
  7500  011EB4  6F7B               	movwf	single_axis_measure@axis_sum& (0+255),b
  7501  011EB6  0E00               	movlw	0
  7502  011EB8  0100               	movlb	0	; () banked
  7503  011EBA  0100               	movlb	0	; () banked
  7504  011EBC  6F7C               	movwf	(single_axis_measure@axis_sum+1)& (0+255),b
  7505  011EBE  0E00               	movlw	0
  7506  011EC0  0100               	movlb	0	; () banked
  7507  011EC2  0100               	movlb	0	; () banked
  7508  011EC4  6F7D               	movwf	(single_axis_measure@axis_sum+2)& (0+255),b
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;functions.c: 245: return voltageToG(medium_value);
  7512  011EC6  C076  F049         	movff	single_axis_measure@medium_value,voltageToG@voltage
  7513  011ECA  C077  F04A         	movff	single_axis_measure@medium_value+1,voltageToG@voltage+1
  7514  011ECE  C078  F04B         	movff	single_axis_measure@medium_value+2,voltageToG@voltage+2
  7515  011ED2  EC49  F096         	call	_voltageToG	;wreg free
  7516  011ED6  C049  F06E         	movff	?_voltageToG,?_single_axis_measure
  7517  011EDA  C04A  F06F         	movff	?_voltageToG+1,?_single_axis_measure+1
  7518  011EDE  C04B  F070         	movff	?_voltageToG+2,?_single_axis_measure+2
  7519  011EE2  0012               	return	
  7520  011EE4                     __end_of_single_axis_measure:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           wreg	equ	0xFE8
  7529                           indf2	equ	0xFDF
  7530                           postinc2	equ	0xFDE
  7531                           postdec2	equ	0xFDD
  7532                           fsr2h	equ	0xFDA
  7533                           fsr2l	equ	0xFD9
  7534                           status	equ	0xFD8
  7535                           
  7536 ;; *************** function _voltageToG *****************
  7537 ;; Defined at:
  7538 ;;		line 260 in file "functions.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;  voltage         3   72[COMRAM] const float 
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  3   72[COMRAM] float 
  7545 ;; Registers used:
  7546 ;;		wreg, status,2, status,0, cstack
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7552 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7555 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7556 ;;Total ram usage:        3 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    3
  7559 ;; This function calls:
  7560 ;;		___ftadd
  7561 ;;		___ftdiv
  7562 ;; This function is called by:
  7563 ;;		_single_axis_measure
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           	psect	text27
  7568  012C92                     __ptext27:
  7569                           	opt stack 0
  7570  012C92                     _voltageToG:
  7571                           	opt stack 25
  7572                           
  7573                           ;functions.c: 261: return (voltage - 1.65) / 0.300;
  7574                           
  7575                           ;incstack = 0
  7576  012C92  0E33               	movlw	51
  7577  012C94  6E37               	movwf	___ftadd@f2,c
  7578  012C96  0ED3               	movlw	211
  7579  012C98  6E38               	movwf	___ftadd@f2+1,c
  7580  012C9A  0EBF               	movlw	191
  7581  012C9C  6E39               	movwf	___ftadd@f2+2,c
  7582  012C9E  C049  F034         	movff	voltageToG@voltage,___ftadd@f1
  7583  012CA2  C04A  F035         	movff	voltageToG@voltage+1,___ftadd@f1+1
  7584  012CA6  C04B  F036         	movff	voltageToG@voltage+2,___ftadd@f1+2
  7585  012CAA  ECBA  F08A         	call	___ftadd	;wreg free
  7586  012CAE  C034  F040         	movff	?___ftadd,___ftdiv@f1
  7587  012CB2  C035  F041         	movff	?___ftadd+1,___ftdiv@f1+1
  7588  012CB6  C036  F042         	movff	?___ftadd+2,___ftdiv@f1+2
  7589  012CBA  0E9A               	movlw	154
  7590  012CBC  6E43               	movwf	___ftdiv@f2,c
  7591  012CBE  0E99               	movlw	153
  7592  012CC0  6E44               	movwf	___ftdiv@f2+1,c
  7593  012CC2  0E3E               	movlw	62
  7594  012CC4  6E45               	movwf	___ftdiv@f2+2,c
  7595  012CC6  EC72  F08F         	call	___ftdiv	;wreg free
  7596  012CCA  C040  F049         	movff	?___ftdiv,?_voltageToG
  7597  012CCE  C041  F04A         	movff	?___ftdiv+1,?_voltageToG+1
  7598  012CD2  C042  F04B         	movff	?___ftdiv+2,?_voltageToG+2
  7599  012CD6  0012               	return	
  7600  012CD8                     __end_of_voltageToG:
  7601                           	opt stack 0
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           wreg	equ	0xFE8
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           fsr2h	equ	0xFDA
  7613                           fsr2l	equ	0xFD9
  7614                           status	equ	0xFD8
  7615                           
  7616 ;; *************** function ___ftadd *****************
  7617 ;; Defined at:
  7618 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftadd.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  f1              3   51[COMRAM] float 
  7621 ;;  f2              3   54[COMRAM] float 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  exp1            1   62[COMRAM] unsigned char 
  7624 ;;  exp2            1   61[COMRAM] unsigned char 
  7625 ;;  sign            1   60[COMRAM] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  3   51[COMRAM] float 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7635 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7636 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7637 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7638 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7639 ;;Total ram usage:       12 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    2
  7642 ;; This function calls:
  7643 ;;		___ftpack
  7644 ;; This function is called by:
  7645 ;;		_readTempF
  7646 ;;		_single_axis_measure
  7647 ;;		_voltageToG
  7648 ;;		___asftadd
  7649 ;;		___ftsub
  7650 ;;		_readDistance
  7651 ;;		_encoder_move_degree
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text28
  7656  011574                     __ptext28:
  7657                           	opt stack 0
  7658  011574                     ___ftadd:
  7659                           	opt stack 24
  7660                           
  7661                           ;incstack = 0
  7662  011574  C036  F03A         	movff	___ftadd@f1+2,??___ftadd
  7663  011578  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  7664  01157A  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  7665  01157C  3435               	rlcf	___ftadd@f1+1,w,c
  7666  01157E  363A               	rlcf	??___ftadd& (0+255),f,c
  7667  011580  E301               	bnc	u5591
  7668  011582  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  7669  011584                     u5591:
  7670  011584  503A               	movf	??___ftadd,w,c
  7671  011586  6E3F               	movwf	___ftadd@exp1,c
  7672  011588  C039  F03A         	movff	___ftadd@f2+2,??___ftadd
  7673  01158C  6A3B               	clrf	(??___ftadd+1)& (0+255),c
  7674  01158E  6A3C               	clrf	(??___ftadd+2)& (0+255),c
  7675  011590  3438               	rlcf	___ftadd@f2+1,w,c
  7676  011592  363A               	rlcf	??___ftadd& (0+255),f,c
  7677  011594  E301               	bnc	u5601
  7678  011596  803B               	bsf	(??___ftadd+1)& (0+255),0,c
  7679  011598                     u5601:
  7680  011598  503A               	movf	??___ftadd,w,c
  7681  01159A  6E3E               	movwf	___ftadd@exp2,c
  7682  01159C  503F               	movf	___ftadd@exp1,w,c
  7683  01159E  B4D8               	btfsc	status,2,c
  7684  0115A0  D00C               	goto	l976
  7685  0115A2  503E               	movf	___ftadd@exp2,w,c
  7686  0115A4  5C3F               	subwf	___ftadd@exp1,w,c
  7687  0115A6  B0D8               	btfsc	status,0,c
  7688  0115A8  D00F               	goto	l7565
  7689  0115AA  503F               	movf	___ftadd@exp1,w,c
  7690  0115AC  0800               	sublw	0
  7691  0115AE  243E               	addwf	___ftadd@exp2,w,c
  7692  0115B0  6E3A               	movwf	??___ftadd& (0+255),c
  7693  0115B2  0E19               	movlw	25
  7694  0115B4  5C3A               	subwf	??___ftadd,w,c
  7695  0115B6  A0D8               	btfss	status,0,c
  7696  0115B8  D007               	goto	l7565
  7697  0115BA                     l976:
  7698  0115BA  C037  F034         	movff	___ftadd@f2,?___ftadd
  7699  0115BE  C038  F035         	movff	___ftadd@f2+1,?___ftadd+1
  7700  0115C2  C039  F036         	movff	___ftadd@f2+2,?___ftadd+2
  7701  0115C6  0012               	return	
  7702  0115C8                     l7565:
  7703  0115C8  503E               	movf	___ftadd@exp2,w,c
  7704  0115CA  B4D8               	btfsc	status,2,c
  7705  0115CC  D00C               	goto	l980
  7706  0115CE  503F               	movf	___ftadd@exp1,w,c
  7707  0115D0  5C3E               	subwf	___ftadd@exp2,w,c
  7708  0115D2  B0D8               	btfsc	status,0,c
  7709  0115D4  D00F               	goto	l7571
  7710  0115D6  503E               	movf	___ftadd@exp2,w,c
  7711  0115D8  0800               	sublw	0
  7712  0115DA  243F               	addwf	___ftadd@exp1,w,c
  7713  0115DC  6E3A               	movwf	??___ftadd& (0+255),c
  7714  0115DE  0E19               	movlw	25
  7715  0115E0  5C3A               	subwf	??___ftadd,w,c
  7716  0115E2  A0D8               	btfss	status,0,c
  7717  0115E4  D007               	goto	l7571
  7718  0115E6                     l980:
  7719  0115E6  C034  F034         	movff	___ftadd@f1,?___ftadd
  7720  0115EA  C035  F035         	movff	___ftadd@f1+1,?___ftadd+1
  7721  0115EE  C036  F036         	movff	___ftadd@f1+2,?___ftadd+2
  7722  0115F2  0012               	return	
  7723  0115F4                     l7571:
  7724  0115F4  6E3A               	movwf	??___ftadd& (0+255),c
  7725  0115F6  0E06               	movlw	6
  7726  0115F8  6E3D               	movwf	___ftadd@sign,c
  7727  0115FA  503A               	movf	??___ftadd& (0+255),w,c
  7728  0115FC  BE36               	btfsc	___ftadd@f1+2,7,c
  7729  0115FE  8E3D               	bsf	___ftadd@sign,7,c
  7730  011600  BE39               	btfsc	___ftadd@f2+2,7,c
  7731  011602  8C3D               	bsf	___ftadd@sign,6,c
  7732  011604  8E35               	bsf	___ftadd@f1+1,7,c
  7733  011606  0EFF               	movlw	255
  7734  011608  1634               	andwf	___ftadd@f1,f,c
  7735  01160A  0EFF               	movlw	255
  7736  01160C  1635               	andwf	___ftadd@f1+1,f,c
  7737  01160E  0E00               	movlw	0
  7738  011610  1636               	andwf	___ftadd@f1+2,f,c
  7739  011612  8E38               	bsf	___ftadd@f2+1,7,c
  7740  011614  0EFF               	movlw	255
  7741  011616  1637               	andwf	___ftadd@f2,f,c
  7742  011618  0EFF               	movlw	255
  7743  01161A  1638               	andwf	___ftadd@f2+1,f,c
  7744  01161C  0E00               	movlw	0
  7745  01161E  1639               	andwf	___ftadd@f2+2,f,c
  7746  011620  503E               	movf	___ftadd@exp2,w,c
  7747  011622  5C3F               	subwf	___ftadd@exp1,w,c
  7748  011624  B0D8               	btfsc	status,0,c
  7749  011626  D01A               	goto	l7597
  7750  011628                     l7587:
  7751  011628  90D8               	bcf	status,0,c
  7752  01162A  3637               	rlcf	___ftadd@f2,f,c
  7753  01162C  3638               	rlcf	___ftadd@f2+1,f,c
  7754  01162E  3639               	rlcf	___ftadd@f2+2,f,c
  7755  011630  063E               	decf	___ftadd@exp2,f,c
  7756  011632  503E               	movf	___ftadd@exp2,w,c
  7757  011634  183F               	xorwf	___ftadd@exp1,w,c
  7758  011636  B4D8               	btfsc	status,2,c
  7759  011638  D00D               	goto	l7595
  7760  01163A  063D               	decf	___ftadd@sign,f,c
  7761  01163C  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  7762  011640  0E07               	movlw	7
  7763  011642  163A               	andwf	??___ftadd,f,c
  7764  011644  B4D8               	btfsc	status,2,c
  7765  011646  D006               	goto	l7595
  7766  011648  D7EF               	goto	l7587
  7767  01164A                     l7593:
  7768  01164A  90D8               	bcf	status,0,c
  7769  01164C  3236               	rrcf	___ftadd@f1+2,f,c
  7770  01164E  3235               	rrcf	___ftadd@f1+1,f,c
  7771  011650  3234               	rrcf	___ftadd@f1,f,c
  7772  011652  2A3F               	incf	___ftadd@exp1,f,c
  7773  011654                     l7595:
  7774  011654  503E               	movf	___ftadd@exp2,w,c
  7775  011656  623F               	cpfseq	___ftadd@exp1,c
  7776  011658  D7F8               	goto	l7593
  7777  01165A  D01D               	goto	l991
  7778  01165C                     l7597:
  7779  01165C  503F               	movf	___ftadd@exp1,w,c
  7780  01165E  5C3E               	subwf	___ftadd@exp2,w,c
  7781  011660  B0D8               	btfsc	status,0,c
  7782  011662  D019               	goto	l991
  7783  011664                     l7599:
  7784  011664  90D8               	bcf	status,0,c
  7785  011666  3634               	rlcf	___ftadd@f1,f,c
  7786  011668  3635               	rlcf	___ftadd@f1+1,f,c
  7787  01166A  3636               	rlcf	___ftadd@f1+2,f,c
  7788  01166C  063F               	decf	___ftadd@exp1,f,c
  7789  01166E  503E               	movf	___ftadd@exp2,w,c
  7790  011670  183F               	xorwf	___ftadd@exp1,w,c
  7791  011672  B4D8               	btfsc	status,2,c
  7792  011674  D00D               	goto	l7607
  7793  011676  063D               	decf	___ftadd@sign,f,c
  7794  011678  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  7795  01167C  0E07               	movlw	7
  7796  01167E  163A               	andwf	??___ftadd,f,c
  7797  011680  B4D8               	btfsc	status,2,c
  7798  011682  D006               	goto	l7607
  7799  011684  D7EF               	goto	l7599
  7800  011686                     l7605:
  7801  011686  90D8               	bcf	status,0,c
  7802  011688  3239               	rrcf	___ftadd@f2+2,f,c
  7803  01168A  3238               	rrcf	___ftadd@f2+1,f,c
  7804  01168C  3237               	rrcf	___ftadd@f2,f,c
  7805  01168E  2A3E               	incf	___ftadd@exp2,f,c
  7806  011690                     l7607:
  7807  011690  503E               	movf	___ftadd@exp2,w,c
  7808  011692  623F               	cpfseq	___ftadd@exp1,c
  7809  011694  D7F8               	goto	l7605
  7810  011696                     l991:
  7811  011696  AE3D               	btfss	___ftadd@sign,7,c
  7812  011698  D00C               	goto	l1000
  7813  01169A  0EFF               	movlw	255
  7814  01169C  1A34               	xorwf	___ftadd@f1,f,c
  7815  01169E  0EFF               	movlw	255
  7816  0116A0  1A35               	xorwf	___ftadd@f1+1,f,c
  7817  0116A2  0EFF               	movlw	255
  7818  0116A4  1A36               	xorwf	___ftadd@f1+2,f,c
  7819  0116A6  0E01               	movlw	1
  7820  0116A8  2634               	addwf	___ftadd@f1,f,c
  7821  0116AA  0E00               	movlw	0
  7822  0116AC  2235               	addwfc	___ftadd@f1+1,f,c
  7823  0116AE  0E00               	movlw	0
  7824  0116B0  2236               	addwfc	___ftadd@f1+2,f,c
  7825  0116B2                     l1000:
  7826  0116B2  AC3D               	btfss	___ftadd@sign,6,c
  7827  0116B4  D00C               	goto	l7613
  7828  0116B6  0EFF               	movlw	255
  7829  0116B8  1A37               	xorwf	___ftadd@f2,f,c
  7830  0116BA  0EFF               	movlw	255
  7831  0116BC  1A38               	xorwf	___ftadd@f2+1,f,c
  7832  0116BE  0EFF               	movlw	255
  7833  0116C0  1A39               	xorwf	___ftadd@f2+2,f,c
  7834  0116C2  0E01               	movlw	1
  7835  0116C4  2637               	addwf	___ftadd@f2,f,c
  7836  0116C6  0E00               	movlw	0
  7837  0116C8  2238               	addwfc	___ftadd@f2+1,f,c
  7838  0116CA  0E00               	movlw	0
  7839  0116CC  2239               	addwfc	___ftadd@f2+2,f,c
  7840  0116CE                     l7613:
  7841  0116CE  6E3A               	movwf	??___ftadd& (0+255),c
  7842  0116D0  0E00               	movlw	0
  7843  0116D2  6E3D               	movwf	___ftadd@sign,c
  7844  0116D4  503A               	movf	??___ftadd& (0+255),w,c
  7845  0116D6  5034               	movf	___ftadd@f1,w,c
  7846  0116D8  2637               	addwf	___ftadd@f2,f,c
  7847  0116DA  5035               	movf	___ftadd@f1+1,w,c
  7848  0116DC  2238               	addwfc	___ftadd@f2+1,f,c
  7849  0116DE  5036               	movf	___ftadd@f1+2,w,c
  7850  0116E0  2239               	addwfc	___ftadd@f2+2,f,c
  7851  0116E2  AE39               	btfss	___ftadd@f2+2,7,c
  7852  0116E4  D010               	goto	l7623
  7853  0116E6  0EFF               	movlw	255
  7854  0116E8  1A37               	xorwf	___ftadd@f2,f,c
  7855  0116EA  0EFF               	movlw	255
  7856  0116EC  1A38               	xorwf	___ftadd@f2+1,f,c
  7857  0116EE  0EFF               	movlw	255
  7858  0116F0  1A39               	xorwf	___ftadd@f2+2,f,c
  7859  0116F2  0E01               	movlw	1
  7860  0116F4  2637               	addwf	___ftadd@f2,f,c
  7861  0116F6  0E00               	movlw	0
  7862  0116F8  2238               	addwfc	___ftadd@f2+1,f,c
  7863  0116FA  0E00               	movlw	0
  7864  0116FC  2239               	addwfc	___ftadd@f2+2,f,c
  7865  0116FE  6E3A               	movwf	??___ftadd& (0+255),c
  7866  011700  0E01               	movlw	1
  7867  011702  6E3D               	movwf	___ftadd@sign,c
  7868  011704  503A               	movf	??___ftadd& (0+255),w,c
  7869  011706                     l7623:
  7870  011706  C037  F00F         	movff	___ftadd@f2,___ftpack@arg
  7871  01170A  C038  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  7872  01170E  C039  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  7873  011712  C03F  F012         	movff	___ftadd@exp1,___ftpack@exp
  7874  011716  C03D  F013         	movff	___ftadd@sign,___ftpack@sign
  7875  01171A  EC86  F093         	call	___ftpack	;wreg free
  7876  01171E  C00F  F034         	movff	?___ftpack,?___ftadd
  7877  011722  C010  F035         	movff	?___ftpack+1,?___ftadd+1
  7878  011726  C011  F036         	movff	?___ftpack+2,?___ftadd+2
  7879  01172A  0012               	return	
  7880  01172C                     __end_of___ftadd:
  7881                           	opt stack 0
  7882                           tblptru	equ	0xFF8
  7883                           tblptrh	equ	0xFF7
  7884                           tblptrl	equ	0xFF6
  7885                           tablat	equ	0xFF5
  7886                           prodh	equ	0xFF4
  7887                           prodl	equ	0xFF3
  7888                           wreg	equ	0xFE8
  7889                           indf2	equ	0xFDF
  7890                           postinc2	equ	0xFDE
  7891                           postdec2	equ	0xFDD
  7892                           fsr2h	equ	0xFDA
  7893                           fsr2l	equ	0xFD9
  7894                           status	equ	0xFD8
  7895                           
  7896 ;; *************** function _read_accelerometer *****************
  7897 ;; Defined at:
  7898 ;;		line 249 in file "functions.c"
  7899 ;; Parameters:    Size  Location     Type
  7900 ;;  axis            2    9[BANK0 ] const unsigned int 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  axis_point      2   12[BANK0 ] const unsigned int 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  3    9[BANK0 ] float 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0, cstack
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7912 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7915 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7916 ;;Total ram usage:        5 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    4
  7919 ;; This function calls:
  7920 ;;		_pointToVoltage
  7921 ;;		_read
  7922 ;; This function is called by:
  7923 ;;		_single_axis_measure
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           	psect	text29
  7928  012EFA                     __ptext29:
  7929                           	opt stack 0
  7930  012EFA                     _read_accelerometer:
  7931                           	opt stack 24
  7932                           
  7933                           ;functions.c: 250: const unsigned int axis_point = read(axis);
  7934                           
  7935                           ;incstack = 0
  7936  012EFA  C069  F00F         	movff	read_accelerometer@axis,read@channel
  7937  012EFE  C06A  F010         	movff	read_accelerometer@axis+1,read@channel+1
  7938  012F02  ECAA  F08D         	call	_read	;wreg free
  7939  012F06  C00F  F06C         	movff	?_read,read_accelerometer@axis_point
  7940  012F0A  C010  F06D         	movff	?_read+1,read_accelerometer@axis_point+1
  7941                           
  7942                           ;functions.c: 251: return pointToVoltage(axis_point);
  7943  012F0E  C06C  F049         	movff	read_accelerometer@axis_point,pointToVoltage@point
  7944  012F12  C06D  F04A         	movff	read_accelerometer@axis_point+1,pointToVoltage@point+1
  7945  012F16  EC9A  F095         	call	_pointToVoltage	;wreg free
  7946  012F1A  C049  F069         	movff	?_pointToVoltage,?_read_accelerometer
  7947  012F1E  C04A  F06A         	movff	?_pointToVoltage+1,?_read_accelerometer+1
  7948  012F22  C04B  F06B         	movff	?_pointToVoltage+2,?_read_accelerometer+2
  7949  012F26  0012               	return	
  7950  012F28                     __end_of_read_accelerometer:
  7951                           	opt stack 0
  7952                           tblptru	equ	0xFF8
  7953                           tblptrh	equ	0xFF7
  7954                           tblptrl	equ	0xFF6
  7955                           tablat	equ	0xFF5
  7956                           prodh	equ	0xFF4
  7957                           prodl	equ	0xFF3
  7958                           wreg	equ	0xFE8
  7959                           indf2	equ	0xFDF
  7960                           postinc2	equ	0xFDE
  7961                           postdec2	equ	0xFDD
  7962                           fsr2h	equ	0xFDA
  7963                           fsr2l	equ	0xFD9
  7964                           status	equ	0xFD8
  7965                           
  7966 ;; *************** function _read *****************
  7967 ;; Defined at:
  7968 ;;		line 22 in file "functions.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  channel         2   14[COMRAM] int 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  value           2   18[COMRAM] int 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  2   14[COMRAM] int 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7985 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7986 ;;Total ram usage:        6 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    1
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_readTempF
  7993 ;;		_readLight
  7994 ;;		_read_accelerometer
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           	psect	text30
  7999  011B54                     __ptext30:
  8000                           	opt stack 0
  8001  011B54                     _read:
  8002                           	opt stack 27
  8003                           
  8004                           ;functions.c: 23: int value = 0;
  8005                           
  8006                           ;incstack = 0
  8007  011B54  0E00               	movlw	0
  8008  011B56  6E14               	movwf	read@value+1,c
  8009  011B58  0E00               	movlw	0
  8010  011B5A  6E13               	movwf	read@value,c
  8011                           
  8012                           ;functions.c: 25: (TRISEbits.TRISE0) = 0;
  8013  011B5C  9096               	bcf	3990,0,c	;volatile
  8014                           
  8015                           ;functions.c: 26: (TRISCbits.TRISC2) = 0;
  8016  011B5E  9494               	bcf	3988,2,c	;volatile
  8017                           
  8018                           ;functions.c: 27: (TRISDbits.TRISD4) = 0;
  8019  011B60  9895               	bcf	3989,4,c	;volatile
  8020                           
  8021                           ;functions.c: 28: (TRISDbits.TRISD6) = 0;
  8022  011B62  9C95               	bcf	3989,6,c	;volatile
  8023                           
  8024                           ;functions.c: 29: switch (channel) {
  8025  011B64  D032               	goto	l5511
  8026  011B66                     l192:
  8027                           
  8028                           ;functions.c: 31: (LATEbits.LATE0) = 0;
  8029  011B66  908D               	bcf	3981,0,c	;volatile
  8030  011B68  D001               	goto	L14
  8031  011B6A                     l194:
  8032                           
  8033                           ;functions.c: 37: (LATEbits.LATE0) = 1;
  8034  011B6A  808D               	bsf	3981,0,c	;volatile
  8035  011B6C                     L14:
  8036                           
  8037                           ;functions.c: 38: (LATCbits.LATC2) = 0;
  8038  011B6C  948B               	bcf	3979,2,c	;volatile
  8039  011B6E  D002               	goto	L15
  8040  011B70                     l195:
  8041                           
  8042                           ;functions.c: 43: (LATEbits.LATE0) = 0;
  8043  011B70  908D               	bcf	3981,0,c	;volatile
  8044  011B72  D004               	goto	L16
  8045  011B74                     L15:
  8046                           
  8047                           ;functions.c: 45: (LATDbits.LATD4) = 0;
  8048  011B74  988C               	bcf	3980,4,c	;volatile
  8049  011B76                     L17:
  8050                           
  8051                           ;functions.c: 46: (LATDbits.LATD6) = 0;
  8052  011B76  9C8C               	bcf	3980,6,c	;volatile
  8053                           
  8054                           ;functions.c: 47: break;
  8055  011B78  D061               	goto	l193
  8056  011B7A                     l196:
  8057                           
  8058                           ;functions.c: 49: (LATEbits.LATE0) = 1;
  8059  011B7A  808D               	bsf	3981,0,c	;volatile
  8060  011B7C                     L16:
  8061                           
  8062                           ;functions.c: 50: (LATCbits.LATC2) = 1;
  8063  011B7C  848B               	bsf	3979,2,c	;volatile
  8064  011B7E  D7FA               	goto	L15
  8065  011B80                     l197:
  8066                           
  8067                           ;functions.c: 55: (LATEbits.LATE0) = 0;
  8068  011B80  908D               	bcf	3981,0,c	;volatile
  8069  011B82  D001               	goto	L22
  8070  011B84                     l198:
  8071                           
  8072                           ;functions.c: 61: (LATEbits.LATE0) = 1;
  8073  011B84  808D               	bsf	3981,0,c	;volatile
  8074  011B86                     L22:
  8075                           
  8076                           ;functions.c: 62: (LATCbits.LATC2) = 0;
  8077  011B86  948B               	bcf	3979,2,c	;volatile
  8078  011B88  D002               	goto	L23
  8079  011B8A                     l199:
  8080                           
  8081                           ;functions.c: 67: (LATEbits.LATE0) = 0;
  8082  011B8A  908D               	bcf	3981,0,c	;volatile
  8083  011B8C  D003               	goto	L24
  8084  011B8E                     L23:
  8085                           
  8086                           ;functions.c: 69: (LATDbits.LATD4) = 1;
  8087  011B8E  888C               	bsf	3980,4,c	;volatile
  8088  011B90  D7F2               	goto	L17
  8089  011B92                     l200:
  8090                           
  8091                           ;functions.c: 73: (LATEbits.LATE0) = 1;
  8092  011B92  808D               	bsf	3981,0,c	;volatile
  8093  011B94                     L24:
  8094                           
  8095                           ;functions.c: 74: (LATCbits.LATC2) = 1;
  8096  011B94  848B               	bsf	3979,2,c	;volatile
  8097  011B96  D7FB               	goto	L23
  8098  011B98                     l201:
  8099                           
  8100                           ;functions.c: 79: (LATEbits.LATE0) = 0;
  8101  011B98  908D               	bcf	3981,0,c	;volatile
  8102  011B9A  D001               	goto	L18
  8103  011B9C                     l202:
  8104                           
  8105                           ;functions.c: 85: (LATEbits.LATE0) = 1;
  8106  011B9C  808D               	bsf	3981,0,c	;volatile
  8107  011B9E                     L18:
  8108                           
  8109                           ;functions.c: 86: (LATCbits.LATC2) = 0;
  8110  011B9E  948B               	bcf	3979,2,c	;volatile
  8111  011BA0  D002               	goto	L19
  8112  011BA2                     l203:
  8113                           
  8114                           ;functions.c: 91: (LATEbits.LATE0) = 0;
  8115  011BA2  908D               	bcf	3981,0,c	;volatile
  8116  011BA4  D004               	goto	L20
  8117  011BA6                     L19:
  8118                           
  8119                           ;functions.c: 93: (LATDbits.LATD4) = 0;
  8120  011BA6  988C               	bcf	3980,4,c	;volatile
  8121  011BA8                     L21:
  8122                           
  8123                           ;functions.c: 94: (LATDbits.LATD6) = 1;
  8124  011BA8  8C8C               	bsf	3980,6,c	;volatile
  8125                           
  8126                           ;functions.c: 95: break;
  8127  011BAA  D048               	goto	l193
  8128  011BAC                     l204:
  8129                           
  8130                           ;functions.c: 97: (LATEbits.LATE0) = 1;
  8131  011BAC  808D               	bsf	3981,0,c	;volatile
  8132  011BAE                     L20:
  8133                           
  8134                           ;functions.c: 98: (LATCbits.LATC2) = 1;
  8135  011BAE  848B               	bsf	3979,2,c	;volatile
  8136  011BB0  D7FA               	goto	L19
  8137  011BB2                     l205:
  8138                           
  8139                           ;functions.c: 103: (LATEbits.LATE0) = 0;
  8140  011BB2  908D               	bcf	3981,0,c	;volatile
  8141  011BB4  D001               	goto	L25
  8142  011BB6                     l206:
  8143                           
  8144                           ;functions.c: 109: (LATEbits.LATE0) = 1;
  8145  011BB6  808D               	bsf	3981,0,c	;volatile
  8146  011BB8                     L25:
  8147                           
  8148                           ;functions.c: 110: (LATCbits.LATC2) = 0;
  8149  011BB8  948B               	bcf	3979,2,c	;volatile
  8150  011BBA  D002               	goto	L26
  8151  011BBC                     l207:
  8152                           
  8153                           ;functions.c: 115: (LATEbits.LATE0) = 0;
  8154  011BBC  908D               	bcf	3981,0,c	;volatile
  8155  011BBE  D003               	goto	L27
  8156  011BC0                     L26:
  8157                           
  8158                           ;functions.c: 117: (LATDbits.LATD4) = 1;
  8159  011BC0  888C               	bsf	3980,4,c	;volatile
  8160  011BC2  D7F2               	goto	L21
  8161  011BC4                     l208:
  8162                           
  8163                           ;functions.c: 121: (LATEbits.LATE0) = 1;
  8164  011BC4  808D               	bsf	3981,0,c	;volatile
  8165  011BC6                     L27:
  8166                           
  8167                           ;functions.c: 122: (LATCbits.LATC2) = 1;
  8168  011BC6  848B               	bsf	3979,2,c	;volatile
  8169  011BC8  D7FB               	goto	L26
  8170  011BCA                     l5511:
  8171  011BCA  C00F  F011         	movff	read@channel,??_read
  8172  011BCE  C010  F012         	movff	read@channel+1,??_read+1
  8173                           
  8174                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8175                           ; Switch size 1, requested type "space"
  8176                           ; Number of cases is 1, Range of values is 0 to 0
  8177                           ; switch strategies available:
  8178                           ; Name         Instructions Cycles
  8179                           ; simple_byte            4     3 (average)
  8180                           ;	Chosen strategy is simple_byte
  8181  011BD2  5012               	movf	??_read+1,w,c
  8182  011BD4  0A00               	xorlw	0	; case 0
  8183  011BD6  A4D8               	btfss	status,2,c
  8184  011BD8  D031               	goto	l193
  8185                           
  8186                           ; Switch size 1, requested type "space"
  8187                           ; Number of cases is 16, Range of values is 0 to 15
  8188                           ; switch strategies available:
  8189                           ; Name         Instructions Cycles
  8190                           ; simple_byte           49    25 (average)
  8191                           ;	Chosen strategy is simple_byte
  8192  011BDA  5011               	movf	??_read,w,c
  8193  011BDC  0A00               	xorlw	0	; case 0
  8194  011BDE  B4D8               	btfsc	status,2,c
  8195  011BE0  D7C2               	goto	l192
  8196  011BE2  0A01               	xorlw	1	; case 1
  8197  011BE4  B4D8               	btfsc	status,2,c
  8198  011BE6  D7C1               	goto	l194
  8199  011BE8  0A03               	xorlw	3	; case 2
  8200  011BEA  B4D8               	btfsc	status,2,c
  8201  011BEC  D7C1               	goto	l195
  8202  011BEE  0A01               	xorlw	1	; case 3
  8203  011BF0  B4D8               	btfsc	status,2,c
  8204  011BF2  D7C3               	goto	l196
  8205  011BF4  0A07               	xorlw	7	; case 4
  8206  011BF6  B4D8               	btfsc	status,2,c
  8207  011BF8  D7C3               	goto	l197
  8208  011BFA  0A01               	xorlw	1	; case 5
  8209  011BFC  B4D8               	btfsc	status,2,c
  8210  011BFE  D7C2               	goto	l198
  8211  011C00  0A03               	xorlw	3	; case 6
  8212  011C02  B4D8               	btfsc	status,2,c
  8213  011C04  D7C2               	goto	l199
  8214  011C06  0A01               	xorlw	1	; case 7
  8215  011C08  B4D8               	btfsc	status,2,c
  8216  011C0A  D7C3               	goto	l200
  8217  011C0C  0A0F               	xorlw	15	; case 8
  8218  011C0E  B4D8               	btfsc	status,2,c
  8219  011C10  D7C3               	goto	l201
  8220  011C12  0A01               	xorlw	1	; case 9
  8221  011C14  B4D8               	btfsc	status,2,c
  8222  011C16  D7C2               	goto	l202
  8223  011C18  0A03               	xorlw	3	; case 10
  8224  011C1A  B4D8               	btfsc	status,2,c
  8225  011C1C  D7C2               	goto	l203
  8226  011C1E  0A01               	xorlw	1	; case 11
  8227  011C20  B4D8               	btfsc	status,2,c
  8228  011C22  D7C4               	goto	l204
  8229  011C24  0A07               	xorlw	7	; case 12
  8230  011C26  B4D8               	btfsc	status,2,c
  8231  011C28  D7C4               	goto	l205
  8232  011C2A  0A01               	xorlw	1	; case 13
  8233  011C2C  B4D8               	btfsc	status,2,c
  8234  011C2E  D7C3               	goto	l206
  8235  011C30  0A03               	xorlw	3	; case 14
  8236  011C32  B4D8               	btfsc	status,2,c
  8237  011C34  D7C3               	goto	l207
  8238  011C36  0A01               	xorlw	1	; case 15
  8239  011C38  B4D8               	btfsc	status,2,c
  8240  011C3A  D7C4               	goto	l208
  8241  011C3C                     l193:
  8242                           
  8243                           ;functions.c: 127: ADCON0bits.CHS0 = 0;
  8244  011C3C  94C2               	bcf	4034,2,c	;volatile
  8245                           
  8246                           ;functions.c: 128: ADCON0bits.CHS1 = 0;
  8247  011C3E  96C2               	bcf	4034,3,c	;volatile
  8248                           
  8249                           ;functions.c: 129: ADCON0bits.CHS2 = 1;
  8250  011C40  88C2               	bsf	4034,4,c	;volatile
  8251                           
  8252                           ;functions.c: 130: ADCON0bits.CHS3 = 0;
  8253  011C42  9AC2               	bcf	4034,5,c	;volatile
  8254                           
  8255                           ;functions.c: 131: TRISAbits.TRISA5 = 1;
  8256  011C44  8A92               	bsf	3986,5,c	;volatile
  8257                           
  8258                           ;functions.c: 132: ANCON0 &= 0b11101111;
  8259  011C46  010F               	movlb	15	; () banked
  8260  011C48  010F               	movlb	15	; () banked
  8261  011C4A  9948               	bcf	72,4,b	;volatile
  8262                           
  8263                           ; BSR set to: 15
  8264                           ;functions.c: 133: ANCON1 |= 0b00001111;
  8265  011C4C  0E0F               	movlw	15
  8266  011C4E  010F               	movlb	15	; () banked
  8267  011C50  010F               	movlb	15	; () banked
  8268  011C52  1349               	iorwf	73,f,b	;volatile
  8269                           
  8270                           ; BSR set to: 15
  8271                           ;functions.c: 138: ADCON0bits.VCFG0 = 0;
  8272  011C54  9CC2               	bcf	4034,6,c	;volatile
  8273                           
  8274                           ; BSR set to: 15
  8275                           ;functions.c: 139: ADCON0bits.VCFG1 = 0;
  8276  011C56  9EC2               	bcf	4034,7,c	;volatile
  8277                           
  8278                           ; BSR set to: 15
  8279                           ;functions.c: 141: ADCON1bits.ADFM = 1;
  8280  011C58  8EC1               	bsf	4033,7,c	;volatile
  8281                           
  8282                           ; BSR set to: 15
  8283                           ;functions.c: 143: ADCON1bits.ACQT0 = 0;
  8284  011C5A  96C1               	bcf	4033,3,c	;volatile
  8285                           
  8286                           ; BSR set to: 15
  8287                           ;functions.c: 144: ADCON1bits.ACQT1 = 1;
  8288  011C5C  88C1               	bsf	4033,4,c	;volatile
  8289                           
  8290                           ; BSR set to: 15
  8291                           ;functions.c: 145: ADCON1bits.ACQT2 = 1;
  8292  011C5E  8AC1               	bsf	4033,5,c	;volatile
  8293                           
  8294                           ; BSR set to: 15
  8295                           ;functions.c: 147: ADCON1bits.ADCS0 = 0;
  8296  011C60  90C1               	bcf	4033,0,c	;volatile
  8297                           
  8298                           ; BSR set to: 15
  8299                           ;functions.c: 148: ADCON1bits.ADCS1 = 0;
  8300  011C62  92C1               	bcf	4033,1,c	;volatile
  8301                           
  8302                           ; BSR set to: 15
  8303                           ;functions.c: 149: ADCON1bits.ADCS2 = 0;
  8304  011C64  94C1               	bcf	4033,2,c	;volatile
  8305                           
  8306                           ; BSR set to: 15
  8307                           ;functions.c: 151: ADCON0bits.ADON = 1;
  8308  011C66  80C2               	bsf	4034,0,c	;volatile
  8309                           
  8310                           ; BSR set to: 15
  8311                           ;functions.c: 156: GO_DONE = 1;
  8312  011C68  82C2               	bsf	4034,1,c	;volatile
  8313  011C6A                     l209:
  8314  011C6A  B2C2               	btfsc	4034,1,c	;volatile
  8315  011C6C  D7FE               	goto	l209
  8316                           
  8317                           ;functions.c: 158: value = ((ADRESH << 8) + ADRESL);
  8318  011C6E  50C4               	movf	4036,w,c	;volatile
  8319  011C70  6E12               	movwf	(??_read+1)& (0+255),c
  8320  011C72  6A11               	clrf	??_read& (0+255),c
  8321  011C74  50C3               	movf	4035,w,c	;volatile
  8322  011C76  2411               	addwf	??_read,w,c
  8323  011C78  6E13               	movwf	read@value,c
  8324  011C7A  0E00               	movlw	0
  8325  011C7C  2012               	addwfc	??_read+1,w,c
  8326  011C7E  6E14               	movwf	read@value+1,c
  8327                           
  8328                           ;functions.c: 159: ADCON0bits.ADON = 0;
  8329  011C80  90C2               	bcf	4034,0,c	;volatile
  8330                           
  8331                           ;functions.c: 162: return value;
  8332  011C82  C013  F00F         	movff	read@value,?_read
  8333  011C86  C014  F010         	movff	read@value+1,?_read+1
  8334  011C8A  0012               	return	
  8335  011C8C                     __end_of_read:
  8336                           	opt stack 0
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           prodh	equ	0xFF4
  8342                           prodl	equ	0xFF3
  8343                           wreg	equ	0xFE8
  8344                           indf2	equ	0xFDF
  8345                           postinc2	equ	0xFDE
  8346                           postdec2	equ	0xFDD
  8347                           fsr2h	equ	0xFDA
  8348                           fsr2l	equ	0xFD9
  8349                           status	equ	0xFD8
  8350                           
  8351 ;; *************** function _pointToVoltage *****************
  8352 ;; Defined at:
  8353 ;;		line 255 in file "functions.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  point           2   72[COMRAM] const unsigned int 
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;  fPoint          3    6[BANK0 ] const float 
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  3   72[COMRAM] float 
  8360 ;; Registers used:
  8361 ;;		wreg, status,2, status,0, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8367 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8368 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8370 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8371 ;;Total ram usage:        6 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    3
  8374 ;; This function calls:
  8375 ;;		___ftdiv
  8376 ;;		___ftmul
  8377 ;;		___lwtoft
  8378 ;; This function is called by:
  8379 ;;		_read_accelerometer
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text31
  8384  012B34                     __ptext31:
  8385                           	opt stack 0
  8386  012B34                     _pointToVoltage:
  8387                           	opt stack 24
  8388                           
  8389                           ;functions.c: 256: const float fPoint = (float) point;
  8390                           
  8391                           ;incstack = 0
  8392  012B34  C049  F017         	movff	pointToVoltage@point,___lwtoft@c
  8393  012B38  C04A  F018         	movff	pointToVoltage@point+1,___lwtoft@c+1
  8394  012B3C  EC94  F097         	call	___lwtoft	;wreg free
  8395  012B40  C017  F066         	movff	?___lwtoft,pointToVoltage@fPoint
  8396  012B44  C018  F067         	movff	?___lwtoft+1,pointToVoltage@fPoint+1
  8397  012B48  C019  F068         	movff	?___lwtoft+2,pointToVoltage@fPoint+2
  8398                           
  8399                           ;functions.c: 257: return (3.3 * fPoint) / 4096;
  8400  012B4C  0E33               	movlw	51
  8401  012B4E  6E28               	movwf	___ftmul@f2,c
  8402  012B50  0E53               	movlw	83
  8403  012B52  6E29               	movwf	___ftmul@f2+1,c
  8404  012B54  0E40               	movlw	64
  8405  012B56  6E2A               	movwf	___ftmul@f2+2,c
  8406  012B58  C066  F025         	movff	pointToVoltage@fPoint,___ftmul@f1
  8407  012B5C  C067  F026         	movff	pointToVoltage@fPoint+1,___ftmul@f1+1
  8408  012B60  C068  F027         	movff	pointToVoltage@fPoint+2,___ftmul@f1+2
  8409  012B64  EC11  F091         	call	___ftmul	;wreg free
  8410  012B68  C025  F040         	movff	?___ftmul,___ftdiv@f1
  8411  012B6C  C026  F041         	movff	?___ftmul+1,___ftdiv@f1+1
  8412  012B70  C027  F042         	movff	?___ftmul+2,___ftdiv@f1+2
  8413  012B74  0E00               	movlw	0
  8414  012B76  6E43               	movwf	___ftdiv@f2,c
  8415  012B78  0E80               	movlw	128
  8416  012B7A  6E44               	movwf	___ftdiv@f2+1,c
  8417  012B7C  0E45               	movlw	69
  8418  012B7E  6E45               	movwf	___ftdiv@f2+2,c
  8419  012B80  EC72  F08F         	call	___ftdiv	;wreg free
  8420  012B84  C040  F049         	movff	?___ftdiv,?_pointToVoltage
  8421  012B88  C041  F04A         	movff	?___ftdiv+1,?_pointToVoltage+1
  8422  012B8C  C042  F04B         	movff	?___ftdiv+2,?_pointToVoltage+2
  8423  012B90  0012               	return	
  8424  012B92                     __end_of_pointToVoltage:
  8425                           	opt stack 0
  8426                           tblptru	equ	0xFF8
  8427                           tblptrh	equ	0xFF7
  8428                           tblptrl	equ	0xFF6
  8429                           tablat	equ	0xFF5
  8430                           prodh	equ	0xFF4
  8431                           prodl	equ	0xFF3
  8432                           wreg	equ	0xFE8
  8433                           indf2	equ	0xFDF
  8434                           postinc2	equ	0xFDE
  8435                           postdec2	equ	0xFDD
  8436                           fsr2h	equ	0xFDA
  8437                           fsr2l	equ	0xFD9
  8438                           status	equ	0xFD8
  8439                           
  8440 ;; *************** function ___lwtoft *****************
  8441 ;; Defined at:
  8442 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lwtoft.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;  c               2   22[COMRAM] unsigned int 
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;		None
  8447 ;; Return value:  Size  Location     Type
  8448 ;;                  3   22[COMRAM] float 
  8449 ;; Registers used:
  8450 ;;		wreg, status,2, status,0, cstack
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8456 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8459 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8460 ;;Total ram usage:        5 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    2
  8463 ;; This function calls:
  8464 ;;		___ftpack
  8465 ;; This function is called by:
  8466 ;;		_single_axis_measure
  8467 ;;		_pointToVoltage
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text32
  8472  012F28                     __ptext32:
  8473                           	opt stack 0
  8474  012F28                     ___lwtoft:
  8475                           	opt stack 24
  8476                           
  8477                           ;incstack = 0
  8478  012F28  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
  8479  012F2C  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
  8480  012F30  6A11               	clrf	___ftpack@arg+2,c
  8481  012F32  6E1A               	movwf	??___lwtoft& (0+255),c
  8482  012F34  0E8E               	movlw	142
  8483  012F36  6E12               	movwf	___ftpack@exp,c
  8484  012F38  501A               	movf	??___lwtoft& (0+255),w,c
  8485  012F3A  6E1B               	movwf	(??___lwtoft+1)& (0+255),c
  8486  012F3C  0E00               	movlw	0
  8487  012F3E  6E13               	movwf	___ftpack@sign,c
  8488  012F40  501B               	movf	(??___lwtoft+1)& (0+255),w,c
  8489  012F42  EC86  F093         	call	___ftpack	;wreg free
  8490  012F46  C00F  F017         	movff	?___ftpack,?___lwtoft
  8491  012F4A  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  8492  012F4E  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  8493  012F52  0012               	return	
  8494  012F54                     __end_of___lwtoft:
  8495                           	opt stack 0
  8496                           tblptru	equ	0xFF8
  8497                           tblptrh	equ	0xFF7
  8498                           tblptrl	equ	0xFF6
  8499                           tablat	equ	0xFF5
  8500                           prodh	equ	0xFF4
  8501                           prodl	equ	0xFF3
  8502                           wreg	equ	0xFE8
  8503                           indf2	equ	0xFDF
  8504                           postinc2	equ	0xFDE
  8505                           postdec2	equ	0xFDD
  8506                           fsr2h	equ	0xFDA
  8507                           fsr2l	equ	0xFD9
  8508                           status	equ	0xFD8
  8509                           
  8510 ;; *************** function ___ftmul *****************
  8511 ;; Defined at:
  8512 ;;		line 51 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftmul.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;  f1              3   36[COMRAM] float 
  8515 ;;  f2              3   39[COMRAM] float 
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  8518 ;;  sign            1   50[COMRAM] unsigned char 
  8519 ;;  cntr            1   49[COMRAM] unsigned char 
  8520 ;;  exp             1   45[COMRAM] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  3   36[COMRAM] float 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8530 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8531 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8532 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8533 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8534 ;;Total ram usage:       15 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    2
  8537 ;; This function calls:
  8538 ;;		___ftpack
  8539 ;; This function is called by:
  8540 ;;		_readTempF
  8541 ;;		_pointToVoltage
  8542 ;;		_fround
  8543 ;;		_scale
  8544 ;;		_sprintf
  8545 ;;		___asftmul
  8546 ;;		_readDistance
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text33
  8551  012222                     __ptext33:
  8552                           	opt stack 0
  8553  012222                     ___ftmul:
  8554                           	opt stack 25
  8555                           
  8556                           ;incstack = 0
  8557  012222  C027  F02B         	movff	___ftmul@f1+2,??___ftmul
  8558  012226  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  8559  012228  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  8560  01222A  3426               	rlcf	___ftmul@f1+1,w,c
  8561  01222C  362B               	rlcf	??___ftmul& (0+255),f,c
  8562  01222E  E301               	bnc	u5851
  8563  012230  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  8564  012232                     u5851:
  8565  012232  502B               	movf	??___ftmul,w,c
  8566  012234  6E2E               	movwf	___ftmul@exp,c
  8567  012236  662E               	tstfsz	___ftmul@exp& (0+255),c
  8568  012238  D007               	goto	l7677
  8569  01223A  0E00               	movlw	0
  8570  01223C  6E25               	movwf	?___ftmul,c
  8571  01223E  0E00               	movlw	0
  8572  012240  6E26               	movwf	?___ftmul+1,c
  8573  012242  0E00               	movlw	0
  8574  012244  6E27               	movwf	?___ftmul+2,c
  8575  012246  0012               	return	
  8576  012248                     l7677:
  8577  012248  C02A  F02B         	movff	___ftmul@f2+2,??___ftmul
  8578  01224C  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  8579  01224E  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  8580  012250  3429               	rlcf	___ftmul@f2+1,w,c
  8581  012252  362B               	rlcf	??___ftmul& (0+255),f,c
  8582  012254  E301               	bnc	u5871
  8583  012256  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  8584  012258                     u5871:
  8585  012258  502B               	movf	??___ftmul,w,c
  8586  01225A  6E33               	movwf	___ftmul@sign,c
  8587  01225C  6633               	tstfsz	___ftmul@sign& (0+255),c
  8588  01225E  D007               	goto	l7683
  8589  012260  0E00               	movlw	0
  8590  012262  6E25               	movwf	?___ftmul,c
  8591  012264  0E00               	movlw	0
  8592  012266  6E26               	movwf	?___ftmul+1,c
  8593  012268  0E00               	movlw	0
  8594  01226A  6E27               	movwf	?___ftmul+2,c
  8595  01226C  0012               	return	
  8596  01226E                     l7683:
  8597  01226E  5033               	movf	___ftmul@sign,w,c
  8598  012270  0F7B               	addlw	123
  8599  012272  262E               	addwf	___ftmul@exp,f,c
  8600  012274  C027  F033         	movff	___ftmul@f1+2,___ftmul@sign
  8601  012278  502A               	movf	___ftmul@f2+2,w,c
  8602  01227A  1A33               	xorwf	___ftmul@sign,f,c
  8603  01227C  0E80               	movlw	128
  8604  01227E  1633               	andwf	___ftmul@sign,f,c
  8605  012280  8E26               	bsf	___ftmul@f1+1,7,c
  8606  012282  8E29               	bsf	___ftmul@f2+1,7,c
  8607  012284  0EFF               	movlw	255
  8608  012286  1628               	andwf	___ftmul@f2,f,c
  8609  012288  0EFF               	movlw	255
  8610  01228A  1629               	andwf	___ftmul@f2+1,f,c
  8611  01228C  0E00               	movlw	0
  8612  01228E  162A               	andwf	___ftmul@f2+2,f,c
  8613  012290  0E00               	movlw	0
  8614  012292  6E2F               	movwf	___ftmul@f3_as_product,c
  8615  012294  0E00               	movlw	0
  8616  012296  6E30               	movwf	___ftmul@f3_as_product+1,c
  8617  012298  0E00               	movlw	0
  8618  01229A  6E31               	movwf	___ftmul@f3_as_product+2,c
  8619  01229C  6E2B               	movwf	??___ftmul& (0+255),c
  8620  01229E  0E07               	movlw	7
  8621  0122A0  6E32               	movwf	___ftmul@cntr,c
  8622  0122A2  502B               	movf	??___ftmul& (0+255),w,c
  8623  0122A4                     l7697:
  8624  0122A4  A025               	btfss	___ftmul@f1,0,c
  8625  0122A6  D006               	goto	l7701
  8626  0122A8  5028               	movf	___ftmul@f2,w,c
  8627  0122AA  262F               	addwf	___ftmul@f3_as_product,f,c
  8628  0122AC  5029               	movf	___ftmul@f2+1,w,c
  8629  0122AE  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  8630  0122B0  502A               	movf	___ftmul@f2+2,w,c
  8631  0122B2  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  8632  0122B4                     l7701:
  8633  0122B4  90D8               	bcf	status,0,c
  8634  0122B6  3227               	rrcf	___ftmul@f1+2,f,c
  8635  0122B8  3226               	rrcf	___ftmul@f1+1,f,c
  8636  0122BA  3225               	rrcf	___ftmul@f1,f,c
  8637  0122BC  90D8               	bcf	status,0,c
  8638  0122BE  3628               	rlcf	___ftmul@f2,f,c
  8639  0122C0  3629               	rlcf	___ftmul@f2+1,f,c
  8640  0122C2  362A               	rlcf	___ftmul@f2+2,f,c
  8641  0122C4  2E32               	decfsz	___ftmul@cntr,f,c
  8642  0122C6  D7EE               	goto	l7697
  8643  0122C8  6E2B               	movwf	??___ftmul& (0+255),c
  8644  0122CA  0E09               	movlw	9
  8645  0122CC  6E32               	movwf	___ftmul@cntr,c
  8646  0122CE  502B               	movf	??___ftmul& (0+255),w,c
  8647  0122D0                     l7707:
  8648  0122D0  A025               	btfss	___ftmul@f1,0,c
  8649  0122D2  D006               	goto	l7711
  8650  0122D4  5028               	movf	___ftmul@f2,w,c
  8651  0122D6  262F               	addwf	___ftmul@f3_as_product,f,c
  8652  0122D8  5029               	movf	___ftmul@f2+1,w,c
  8653  0122DA  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  8654  0122DC  502A               	movf	___ftmul@f2+2,w,c
  8655  0122DE  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  8656  0122E0                     l7711:
  8657  0122E0  90D8               	bcf	status,0,c
  8658  0122E2  3227               	rrcf	___ftmul@f1+2,f,c
  8659  0122E4  3226               	rrcf	___ftmul@f1+1,f,c
  8660  0122E6  3225               	rrcf	___ftmul@f1,f,c
  8661  0122E8  90D8               	bcf	status,0,c
  8662  0122EA  3231               	rrcf	___ftmul@f3_as_product+2,f,c
  8663  0122EC  3230               	rrcf	___ftmul@f3_as_product+1,f,c
  8664  0122EE  322F               	rrcf	___ftmul@f3_as_product,f,c
  8665  0122F0  2E32               	decfsz	___ftmul@cntr,f,c
  8666  0122F2  D7EE               	goto	l7707
  8667  0122F4  C02F  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  8668  0122F8  C030  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8669  0122FC  C031  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8670  012300  C02E  F012         	movff	___ftmul@exp,___ftpack@exp
  8671  012304  C033  F013         	movff	___ftmul@sign,___ftpack@sign
  8672  012308  EC86  F093         	call	___ftpack	;wreg free
  8673  01230C  C00F  F025         	movff	?___ftpack,?___ftmul
  8674  012310  C010  F026         	movff	?___ftpack+1,?___ftmul+1
  8675  012314  C011  F027         	movff	?___ftpack+2,?___ftmul+2
  8676  012318  0012               	return	
  8677  01231A                     __end_of___ftmul:
  8678                           	opt stack 0
  8679                           tblptru	equ	0xFF8
  8680                           tblptrh	equ	0xFF7
  8681                           tblptrl	equ	0xFF6
  8682                           tablat	equ	0xFF5
  8683                           prodh	equ	0xFF4
  8684                           prodl	equ	0xFF3
  8685                           wreg	equ	0xFE8
  8686                           indf2	equ	0xFDF
  8687                           postinc2	equ	0xFDE
  8688                           postdec2	equ	0xFDD
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function ___ftge *****************
  8694 ;; Defined at:
  8695 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftge.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;  ff1             3   27[COMRAM] float 
  8698 ;;  ff2             3   30[COMRAM] float 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;		None
  8701 ;; Return value:  Size  Location     Type
  8702 ;;		None               void
  8703 ;; Registers used:
  8704 ;;		wreg, status,2, status,0
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8710 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8712 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8713 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8714 ;;Total ram usage:        9 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; Hardware stack levels required when called:    1
  8717 ;; This function calls:
  8718 ;;		Nothing
  8719 ;; This function is called by:
  8720 ;;		_single_axis_measure
  8721 ;;		_sprintf
  8722 ;;		_encoder_move_degree
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           	psect	text34
  8727  012850                     __ptext34:
  8728                           	opt stack 0
  8729  012850                     ___ftge:
  8730                           	opt stack 27
  8731                           
  8732                           ;incstack = 0
  8733  012850  AE1E               	btfss	___ftge@ff1+2,7,c
  8734  012852  D016               	goto	l5945
  8735  012854  C01C  F022         	movff	___ftge@ff1,??___ftge
  8736  012858  C01D  F023         	movff	___ftge@ff1+1,??___ftge+1
  8737  01285C  C01E  F024         	movff	___ftge@ff1+2,??___ftge+2
  8738  012860  1E22               	comf	??___ftge,f,c
  8739  012862  1E23               	comf	??___ftge+1,f,c
  8740  012864  1E24               	comf	??___ftge+2,f,c
  8741  012866  2A22               	incf	??___ftge,f,c
  8742  012868  0E00               	movlw	0
  8743  01286A  2223               	addwfc	??___ftge+1,f,c
  8744  01286C  2224               	addwfc	??___ftge+2,f,c
  8745  01286E  0E00               	movlw	0
  8746  012870  2422               	addwf	??___ftge,w,c
  8747  012872  6E1C               	movwf	___ftge@ff1,c
  8748  012874  0E00               	movlw	0
  8749  012876  2023               	addwfc	??___ftge+1,w,c
  8750  012878  6E1D               	movwf	___ftge@ff1+1,c
  8751  01287A  0E80               	movlw	128
  8752  01287C  2024               	addwfc	??___ftge+2,w,c
  8753  01287E  6E1E               	movwf	___ftge@ff1+2,c
  8754  012880                     l5945:
  8755  012880  AE21               	btfss	___ftge@ff2+2,7,c
  8756  012882  D016               	goto	l5949
  8757  012884  C01F  F022         	movff	___ftge@ff2,??___ftge
  8758  012888  C020  F023         	movff	___ftge@ff2+1,??___ftge+1
  8759  01288C  C021  F024         	movff	___ftge@ff2+2,??___ftge+2
  8760  012890  1E22               	comf	??___ftge,f,c
  8761  012892  1E23               	comf	??___ftge+1,f,c
  8762  012894  1E24               	comf	??___ftge+2,f,c
  8763  012896  2A22               	incf	??___ftge,f,c
  8764  012898  0E00               	movlw	0
  8765  01289A  2223               	addwfc	??___ftge+1,f,c
  8766  01289C  2224               	addwfc	??___ftge+2,f,c
  8767  01289E  0E00               	movlw	0
  8768  0128A0  2422               	addwf	??___ftge,w,c
  8769  0128A2  6E1F               	movwf	___ftge@ff2,c
  8770  0128A4  0E00               	movlw	0
  8771  0128A6  2023               	addwfc	??___ftge+1,w,c
  8772  0128A8  6E20               	movwf	___ftge@ff2+1,c
  8773  0128AA  0E80               	movlw	128
  8774  0128AC  2024               	addwfc	??___ftge+2,w,c
  8775  0128AE  6E21               	movwf	___ftge@ff2+2,c
  8776  0128B0                     l5949:
  8777  0128B0  0E00               	movlw	0
  8778  0128B2  1A1C               	xorwf	___ftge@ff1,f,c
  8779  0128B4  0E00               	movlw	0
  8780  0128B6  1A1D               	xorwf	___ftge@ff1+1,f,c
  8781  0128B8  0E80               	movlw	128
  8782  0128BA  1A1E               	xorwf	___ftge@ff1+2,f,c
  8783  0128BC  0E00               	movlw	0
  8784  0128BE  1A1F               	xorwf	___ftge@ff2,f,c
  8785  0128C0  0E00               	movlw	0
  8786  0128C2  1A20               	xorwf	___ftge@ff2+1,f,c
  8787  0128C4  0E80               	movlw	128
  8788  0128C6  1A21               	xorwf	___ftge@ff2+2,f,c
  8789  0128C8  501F               	movf	___ftge@ff2,w,c
  8790  0128CA  5C1C               	subwf	___ftge@ff1,w,c
  8791  0128CC  5020               	movf	___ftge@ff2+1,w,c
  8792  0128CE  581D               	subwfb	___ftge@ff1+1,w,c
  8793  0128D0  5021               	movf	___ftge@ff2+2,w,c
  8794  0128D2  581E               	subwfb	___ftge@ff1+2,w,c
  8795  0128D4  B0D8               	btfsc	status,0,c
  8796  0128D6  D002               	goto	l5955
  8797  0128D8  90D8               	bcf	status,0,c
  8798  0128DA  0012               	return	
  8799  0128DC                     l5955:
  8800  0128DC  80D8               	bsf	status,0,c
  8801  0128DE  0012               	return	
  8802  0128E0                     __end_of___ftge:
  8803                           	opt stack 0
  8804                           tblptru	equ	0xFF8
  8805                           tblptrh	equ	0xFF7
  8806                           tblptrl	equ	0xFF6
  8807                           tablat	equ	0xFF5
  8808                           prodh	equ	0xFF4
  8809                           prodl	equ	0xFF3
  8810                           wreg	equ	0xFE8
  8811                           indf2	equ	0xFDF
  8812                           postinc2	equ	0xFDE
  8813                           postdec2	equ	0xFDD
  8814                           fsr2h	equ	0xFDA
  8815                           fsr2l	equ	0xFD9
  8816                           status	equ	0xFD8
  8817                           
  8818 ;; *************** function _lcdWriteStrC *****************
  8819 ;; Defined at:
  8820 ;;		line 136 in file "lcd.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;  s               2   17[COMRAM] PTR const unsigned char 
  8823 ;;		 -> showAccelerometerVal@buffer(10), STR_31(15), showTempLight@buffer(10), showDistance@buffer(10), 
  8824 ;;		 -> STR_27(18), MOTOR_turnLeft@buffer(10), STR_25(6), STR_24(16), 
  8825 ;;		 -> MOTOR_turnRight@buffer(10), STR_22(6), STR_21(17), MOTOR_backward@buffer(10), 
  8826 ;;		 -> STR_19(6), STR_18(17), MOTOR_forward@buffer(10), STR_16(6), 
  8827 ;;		 -> STR_15(17), STR_14(17), STR_13(17), STR_12(17), 
  8828 ;;		 -> STR_11(17), STR_10(17), STR_9(17), STR_8(17), 
  8829 ;;		 -> STR_7(20), STR_6(17), STR_5(17), STR_4(17), 
  8830 ;;		 -> STR_3(16), STR_2(9), STR_1(17), 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;		None
  8833 ;; Return value:  Size  Location     Type
  8834 ;;		None               void
  8835 ;; Registers used:
  8836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8842 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8845 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8846 ;;Total ram usage:        2 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    4
  8849 ;; This function calls:
  8850 ;;		_lcdWriteChar
  8851 ;; This function is called by:
  8852 ;;		_showTempLight
  8853 ;;		_showAccelerometerVal
  8854 ;;		_intro
  8855 ;;		_MOTOR_testMotors
  8856 ;;		_MOTOR_moveTest
  8857 ;;		_MOTOR_forward
  8858 ;;		_MOTOR_backward
  8859 ;;		_MOTOR_turnRight
  8860 ;;		_MOTOR_turnLeft
  8861 ;;		_showDistance
  8862 ;; This function uses a non-reentrant model
  8863 ;;
  8864                           
  8865                           	psect	text35
  8866  012BE8                     __ptext35:
  8867                           	opt stack 0
  8868  012BE8                     _lcdWriteStrC:
  8869                           	opt stack 25
  8870                           
  8871                           ;lcd.c: 138: while(*s) lcdWriteChar(*s++);
  8872                           
  8873                           ;incstack = 0
  8874  012BE8  D015               	goto	l6083
  8875  012BEA                     l6079:
  8876  012BEA  C012  FFF6         	movff	lcdWriteStrC@s,tblptrl
  8877  012BEE  C013  FFF7         	movff	lcdWriteStrC@s+1,tblptrh
  8878  012BF2  0E00               	movlw	low (__mediumconst shr (0+16))
  8879  012BF4  6EF8               	movwf	tblptru,c
  8880  012BF6  0E0E               	movlw	(high __ramtop+-1)
  8881  012BF8  64F7               	cpfsgt	tblptrh,c
  8882  012BFA  D003               	bra	u3917
  8883  012BFC  0008               	tblrd		*
  8884  012BFE  50F5               	movf	tablat,w,c
  8885  012C00  D005               	bra	u3910
  8886  012C02                     u3917:
  8887  012C02  CFF6 FFE9          	movff	tblptrl,fsr0l
  8888  012C06  CFF7 FFEA          	movff	tblptrh,fsr0h
  8889  012C0A  50EF               	movf	indf0,w,c
  8890  012C0C                     u3910:
  8891  012C0C  ECDD  F097         	call	_lcdWriteChar
  8892  012C10  4A12               	infsnz	lcdWriteStrC@s,f,c
  8893  012C12  2A13               	incf	lcdWriteStrC@s+1,f,c
  8894  012C14                     l6083:
  8895  012C14  C012  FFF6         	movff	lcdWriteStrC@s,tblptrl
  8896  012C18  C013  FFF7         	movff	lcdWriteStrC@s+1,tblptrh
  8897  012C1C  0E00               	movlw	low (__mediumconst shr (0+16))
  8898  012C1E  6EF8               	movwf	tblptru,c
  8899  012C20  0E0E               	movlw	(high __ramtop+-1)
  8900  012C22  64F7               	cpfsgt	tblptrh,c
  8901  012C24  D003               	bra	u3927
  8902  012C26  0008               	tblrd		*
  8903  012C28  50F5               	movf	tablat,w,c
  8904  012C2A  D005               	bra	u3920
  8905  012C2C                     u3927:
  8906  012C2C  CFF6 FFE9          	movff	tblptrl,fsr0l
  8907  012C30  CFF7 FFEA          	movff	tblptrh,fsr0h
  8908  012C34  50EF               	movf	indf0,w,c
  8909  012C36                     u3920:
  8910  012C36  0900               	iorlw	0
  8911  012C38  B4D8               	btfsc	status,2,c
  8912  012C3A  0012               	return	
  8913  012C3C  D7D6               	goto	l6079
  8914  012C3E                     __end_of_lcdWriteStrC:
  8915                           	opt stack 0
  8916                           tblptru	equ	0xFF8
  8917                           tblptrh	equ	0xFF7
  8918                           tblptrl	equ	0xFF6
  8919                           tablat	equ	0xFF5
  8920                           prodh	equ	0xFF4
  8921                           prodl	equ	0xFF3
  8922                           indf0	equ	0xFEF
  8923                           fsr0h	equ	0xFEA
  8924                           fsr0l	equ	0xFE9
  8925                           wreg	equ	0xFE8
  8926                           indf2	equ	0xFDF
  8927                           postinc2	equ	0xFDE
  8928                           postdec2	equ	0xFDD
  8929                           fsr2h	equ	0xFDA
  8930                           fsr2l	equ	0xFD9
  8931                           status	equ	0xFD8
  8932                           
  8933 ;; *************** function _lcdWriteChar *****************
  8934 ;; Defined at:
  8935 ;;		line 102 in file "lcd.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  n               1    wreg     unsigned char 
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  n               1   16[COMRAM] unsigned char 
  8940 ;; Return value:  Size  Location     Type
  8941 ;;		None               void
  8942 ;; Registers used:
  8943 ;;		wreg, status,2, status,0, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8952 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8953 ;;Total ram usage:        1 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:    3
  8956 ;; This function calls:
  8957 ;;		_writeByte
  8958 ;; This function is called by:
  8959 ;;		_lcdWriteStrC
  8960 ;;		_showAccelerometerVal
  8961 ;;		_lcdClean
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           	psect	text36
  8966  012FBA                     __ptext36:
  8967                           	opt stack 0
  8968  012FBA                     _lcdWriteChar:
  8969                           	opt stack 25
  8970                           
  8971                           ;incstack = 0
  8972                           ;lcdWriteChar@n stored from wreg
  8973  012FBA  CFE8 F011          	movff	wreg,lcdWriteChar@n
  8974                           
  8975                           ;lcd.c: 105: (LATCbits.LATC0) = 1;
  8976  012FBE  808B               	bsf	3979,0,c	;volatile
  8977                           
  8978                           ;lcd.c: 107: writeByte(n);
  8979  012FC0  5011               	movf	lcdWriteChar@n,w,c
  8980  012FC2  ECD2  F097         	call	_writeByte
  8981                           
  8982                           ;lcd.c: 110: _delay((unsigned long)((43)*(12000000/4000000.0)));
  8983  012FC6  0E2B               	movlw	43
  8984  012FC8                     u7257:
  8985  012FC8  2EE8               	decfsz	wreg,f,c
  8986  012FCA  D7FE               	goto	u7257
  8987  012FCC  0012               	return	
  8988  012FCE                     __end_of_lcdWriteChar:
  8989                           	opt stack 0
  8990                           tblptru	equ	0xFF8
  8991                           tblptrh	equ	0xFF7
  8992                           tblptrl	equ	0xFF6
  8993                           tablat	equ	0xFF5
  8994                           prodh	equ	0xFF4
  8995                           prodl	equ	0xFF3
  8996                           indf0	equ	0xFEF
  8997                           fsr0h	equ	0xFEA
  8998                           fsr0l	equ	0xFE9
  8999                           wreg	equ	0xFE8
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           fsr2h	equ	0xFDA
  9004                           fsr2l	equ	0xFD9
  9005                           status	equ	0xFD8
  9006                           
  9007 ;; *************** function _lcdSetPos *****************
  9008 ;; Defined at:
  9009 ;;		line 120 in file "lcd.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;  x               1    wreg     unsigned char 
  9012 ;;  y               1   20[COMRAM] unsigned char 
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  x               1   22[COMRAM] unsigned char 
  9015 ;;  p               1   21[COMRAM] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;		None               void
  9018 ;; Registers used:
  9019 ;;		wreg, status,2, status,0, cstack
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9025 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9026 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9028 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9029 ;;Total ram usage:        3 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    4
  9032 ;; This function calls:
  9033 ;;		_lcdWriteCmd
  9034 ;; This function is called by:
  9035 ;;		_showTempLight
  9036 ;;		_showAccelerometerVal
  9037 ;;		_lcdClean
  9038 ;;		_intro
  9039 ;;		_MOTOR_testMotors
  9040 ;;		_MOTOR_moveTest
  9041 ;;		_MOTOR_forward
  9042 ;;		_MOTOR_backward
  9043 ;;		_MOTOR_turnRight
  9044 ;;		_MOTOR_turnLeft
  9045 ;;		_showDistance
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           	psect	text37
  9050  012CD8                     __ptext37:
  9051                           	opt stack 0
  9052  012CD8                     _lcdSetPos:
  9053                           	opt stack 25
  9054                           
  9055                           ;incstack = 0
  9056                           ;lcdSetPos@x stored from wreg
  9057  012CD8  CFE8 F017          	movff	wreg,lcdSetPos@x
  9058                           
  9059                           ;lcd.c: 122: unsigned char p;
  9060                           ;lcd.c: 124: switch(y)
  9061  012CDC  D00D               	goto	l6071
  9062  012CDE                     l6061:
  9063  012CDE  C017  F016         	movff	lcdSetPos@x,lcdSetPos@p
  9064  012CE2  D017               	goto	l6073
  9065  012CE4                     l6063:
  9066  012CE4  5017               	movf	lcdSetPos@x,w,c
  9067  012CE6  0F40               	addlw	64
  9068  012CE8  D005               	goto	L29
  9069  012CEA                     l6065:
  9070  012CEA  5017               	movf	lcdSetPos@x,w,c
  9071  012CEC  0F14               	addlw	20
  9072  012CEE  D002               	goto	L29
  9073  012CF0                     l6067:
  9074  012CF0  5017               	movf	lcdSetPos@x,w,c
  9075  012CF2  0F54               	addlw	84
  9076  012CF4                     L29:
  9077  012CF4  6E16               	movwf	lcdSetPos@p,c
  9078  012CF6  D00D               	goto	l6073
  9079  012CF8                     l6071:
  9080  012CF8  5015               	movf	lcdSetPos@y,w,c
  9081                           
  9082                           ; Switch size 1, requested type "space"
  9083                           ; Number of cases is 4, Range of values is 0 to 3
  9084                           ; switch strategies available:
  9085                           ; Name         Instructions Cycles
  9086                           ; simple_byte           13     7 (average)
  9087                           ;	Chosen strategy is simple_byte
  9088  012CFA  0A00               	xorlw	0	; case 0
  9089  012CFC  B4D8               	btfsc	status,2,c
  9090  012CFE  D7EF               	goto	l6061
  9091  012D00  0A01               	xorlw	1	; case 1
  9092  012D02  B4D8               	btfsc	status,2,c
  9093  012D04  D7EF               	goto	l6063
  9094  012D06  0A03               	xorlw	3	; case 2
  9095  012D08  B4D8               	btfsc	status,2,c
  9096  012D0A  D7EF               	goto	l6065
  9097  012D0C  0A01               	xorlw	1	; case 3
  9098  012D0E  B4D8               	btfsc	status,2,c
  9099  012D10  D7EF               	goto	l6067
  9100  012D12                     l6073:
  9101                           
  9102                           ;lcd.c: 132: p |= 0x80;
  9103  012D12  8E16               	bsf	lcdSetPos@p,7,c
  9104                           
  9105                           ;lcd.c: 133: lcdWriteCmd(p);
  9106  012D14  5016               	movf	lcdSetPos@p,w,c
  9107  012D16  EC8E  F096         	call	_lcdWriteCmd
  9108  012D1A  0012               	return	
  9109  012D1C                     __end_of_lcdSetPos:
  9110                           	opt stack 0
  9111                           tblptru	equ	0xFF8
  9112                           tblptrh	equ	0xFF7
  9113                           tblptrl	equ	0xFF6
  9114                           tablat	equ	0xFF5
  9115                           prodh	equ	0xFF4
  9116                           prodl	equ	0xFF3
  9117                           indf0	equ	0xFEF
  9118                           fsr0h	equ	0xFEA
  9119                           fsr0l	equ	0xFE9
  9120                           wreg	equ	0xFE8
  9121                           indf2	equ	0xFDF
  9122                           postinc2	equ	0xFDE
  9123                           postdec2	equ	0xFDD
  9124                           fsr2h	equ	0xFDA
  9125                           fsr2l	equ	0xFD9
  9126                           status	equ	0xFD8
  9127                           
  9128 ;; *************** function _lcdClear *****************
  9129 ;; Defined at:
  9130 ;;		line 115 in file "lcd.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;		None
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;		None               void
  9137 ;; Registers used:
  9138 ;;		wreg, status,2, status,0, cstack
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9148 ;;Total ram usage:        0 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    4
  9151 ;; This function calls:
  9152 ;;		_lcdWriteCmd
  9153 ;; This function is called by:
  9154 ;;		_showTempLight
  9155 ;;		_showAccelerometerVal
  9156 ;;		_lcdClean
  9157 ;;		_MOTOR_testMotors
  9158 ;;		_MOTOR_moveTest
  9159 ;;		_MOTOR_backward
  9160 ;;		_MOTOR_turnRight
  9161 ;;		_MOTOR_turnLeft
  9162 ;;		_showDistance
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           	psect	text38
  9167  012FCE                     __ptext38:
  9168                           	opt stack 0
  9169  012FCE                     _lcdClear:
  9170                           	opt stack 25
  9171                           
  9172                           ;lcd.c: 117: lcdWriteCmd(0x01);
  9173                           
  9174                           ;incstack = 0
  9175  012FCE  0E01               	movlw	1
  9176  012FD0  EC8E  F096         	call	_lcdWriteCmd
  9177  012FD4  0012               	return	
  9178  012FD6                     __end_of_lcdClear:
  9179                           	opt stack 0
  9180                           tblptru	equ	0xFF8
  9181                           tblptrh	equ	0xFF7
  9182                           tblptrl	equ	0xFF6
  9183                           tablat	equ	0xFF5
  9184                           prodh	equ	0xFF4
  9185                           prodl	equ	0xFF3
  9186                           indf0	equ	0xFEF
  9187                           fsr0h	equ	0xFEA
  9188                           fsr0l	equ	0xFE9
  9189                           wreg	equ	0xFE8
  9190                           indf2	equ	0xFDF
  9191                           postinc2	equ	0xFDE
  9192                           postdec2	equ	0xFDD
  9193                           fsr2h	equ	0xFDA
  9194                           fsr2l	equ	0xFD9
  9195                           status	equ	0xFD8
  9196                           
  9197 ;; *************** function _setServo *****************
  9198 ;; Defined at:
  9199 ;;		line 167 in file "functions.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  degree          2   14[COMRAM] int 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  i               2   17[COMRAM] int 
  9204 ;;  i               2   21[COMRAM] int 
  9205 ;;  j               2   19[COMRAM] int 
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9216 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9218 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9219 ;;Total ram usage:        9 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    1
  9222 ;; This function calls:
  9223 ;;		Nothing
  9224 ;; This function is called by:
  9225 ;;		_main
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           	psect	text39
  9230  0129E6                     __ptext39:
  9231                           	opt stack 0
  9232  0129E6                     _setServo:
  9233                           	opt stack 29
  9234                           
  9235                           ;functions.c: 168: (TRISDbits.TRISD5) = 0;
  9236                           
  9237                           ;incstack = 0
  9238  0129E6  9A95               	bcf	3989,5,c	;volatile
  9239                           
  9240                           ;functions.c: 170: for (int j = 0; j < 50; j++) {
  9241  0129E8  0E00               	movlw	0
  9242  0129EA  6E15               	movwf	setServo@j+1,c
  9243  0129EC  0E00               	movlw	0
  9244  0129EE  6E14               	movwf	setServo@j,c
  9245  0129F0  5015               	movf	setServo@j+1,w,c
  9246  0129F2  0A80               	xorlw	128
  9247  0129F4  0F80               	addlw	-128
  9248  0129F6  0E32               	movlw	50
  9249  0129F8  B4D8               	btfsc	status,2,c
  9250  0129FA  5C14               	subwf	setServo@j,w,c
  9251  0129FC  B0D8               	btfsc	status,0,c
  9252  0129FE  0012               	return	
  9253                           
  9254                           ;functions.c: 171: (LATDbits.LATD5) = 1;
  9255  012A00  8A8C               	bsf	3980,5,c	;volatile
  9256                           
  9257                           ;functions.c: 172: for (int i = 0; i < 100; i++)_delay((unsigned long)((2)*(12000000/400
      +                          0000.0)));
  9258  012A02  0E00               	movlw	0
  9259  012A04  6E17               	movwf	setServo@i+1,c
  9260  012A06  0E00               	movlw	0
  9261  012A08  6E16               	movwf	setServo@i,c
  9262  012A0A  5017               	movf	setServo@i+1,w,c
  9263  012A0C  0A80               	xorlw	128
  9264  012A0E  0F80               	addlw	-128
  9265  012A10  0E64               	movlw	100
  9266  012A12  B4D8               	btfsc	status,2,c
  9267  012A14  5C16               	subwf	setServo@i,w,c
  9268  012A16  B0D8               	btfsc	status,0,c
  9269  012A18  D006               	goto	l6643
  9270  012A1A  D000               	nop2		;2 cycle nop
  9271  012A1C  D000               	nop2		;2 cycle nop
  9272  012A1E  D000               	nop2		;2 cycle nop
  9273  012A20  4A16               	infsnz	setServo@i,f,c
  9274  012A22  2A17               	incf	setServo@i+1,f,c
  9275  012A24  D7F2               	goto	L30
  9276  012A26                     l6643:
  9277                           
  9278                           ;functions.c: 174: for (int i = 0; i < degree; i++)_delay((unsigned long)((5)*(12000000/
      +                          4000000.0)));
  9279  012A26  0E00               	movlw	0
  9280  012A28  6E13               	movwf	setServo@i_1178+1,c
  9281  012A2A  0E00               	movlw	0
  9282  012A2C  6E12               	movwf	setServo@i_1178,c
  9283  012A2E  D005               	goto	l219
  9284  012A30                     l6645:
  9285  012A30  0E05               	movlw	5
  9286  012A32                     u7267:
  9287  012A32  2EE8               	decfsz	wreg,f,c
  9288  012A34  D7FE               	goto	u7267
  9289  012A36  4A12               	infsnz	setServo@i_1178,f,c
  9290  012A38  2A13               	incf	setServo@i_1178+1,f,c
  9291  012A3A                     l219:
  9292  012A3A  5013               	movf	setServo@i_1178+1,w,c
  9293  012A3C  0A80               	xorlw	128
  9294  012A3E  6E11               	movwf	??_setServo& (0+255),c
  9295  012A40  500F               	movf	setServo@degree,w,c
  9296  012A42  5C12               	subwf	setServo@i_1178,w,c
  9297  012A44  5010               	movf	setServo@degree+1,w,c
  9298  012A46  0A80               	xorlw	128
  9299  012A48  5811               	subwfb	??_setServo& (0+255),w,c
  9300  012A4A  A0D8               	btfss	status,0,c
  9301  012A4C  D7F1               	goto	l6645
  9302                           
  9303                           ;functions.c: 176: (LATDbits.LATD5) = 0;
  9304  012A4E  9A8C               	bcf	3980,5,c	;volatile
  9305                           
  9306                           ;functions.c: 177: _delay((unsigned long)((20)*(12000000/4000.0)));
  9307  012A50  0E4E               	movlw	78
  9308  012A52  6E11               	movwf	??_setServo& (0+255),c
  9309  012A54  0EEB               	movlw	235
  9310  012A56                     u7277:
  9311  012A56  2EE8               	decfsz	wreg,f,c
  9312  012A58  D7FE               	goto	u7277
  9313  012A5A  2E11               	decfsz	??_setServo& (0+255),f,c
  9314  012A5C  D7FC               	goto	u7277
  9315  012A5E  F000               	nop	
  9316  012A60  4A14               	infsnz	setServo@j,f,c
  9317  012A62  2A15               	incf	setServo@j+1,f,c
  9318  012A64  D7C5               	goto	L31
  9319  012A66                     __end_of_setServo:
  9320                           	opt stack 0
  9321                           tblptru	equ	0xFF8
  9322                           tblptrh	equ	0xFF7
  9323                           tblptrl	equ	0xFF6
  9324                           tablat	equ	0xFF5
  9325                           prodh	equ	0xFF4
  9326                           prodl	equ	0xFF3
  9327                           indf0	equ	0xFEF
  9328                           fsr0h	equ	0xFEA
  9329                           fsr0l	equ	0xFE9
  9330                           wreg	equ	0xFE8
  9331                           indf2	equ	0xFDF
  9332                           postinc2	equ	0xFDE
  9333                           postdec2	equ	0xFDD
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function _lcdInit *****************
  9339 ;; Defined at:
  9340 ;;		line 10 in file "lcd.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;		None
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  i               2   27[COMRAM] int 
  9345 ;;  i               2   25[COMRAM] int 
  9346 ;;  i               2   23[COMRAM] int 
  9347 ;;  i               2   21[COMRAM] int 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;		None               void
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0, cstack
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9358 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9360 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9361 ;;Total ram usage:        9 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    4
  9364 ;; This function calls:
  9365 ;;		_lcdWriteCmd
  9366 ;;		_writeDigit
  9367 ;; This function is called by:
  9368 ;;		_main
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text40
  9373  012410                     __ptext40:
  9374                           	opt stack 0
  9375  012410                     _lcdInit:
  9376                           	opt stack 26
  9377                           
  9378                           ;lcd.c: 13: (TRISDbits.TRISD0) = 0;
  9379                           
  9380                           ;incstack = 0
  9381  012410  9095               	bcf	3989,0,c	;volatile
  9382                           
  9383                           ;lcd.c: 14: (TRISDbits.TRISD1) = 0;
  9384  012412  9295               	bcf	3989,1,c	;volatile
  9385                           
  9386                           ;lcd.c: 15: TRISDbits.TRISD2 = 0;
  9387  012414  9495               	bcf	3989,2,c	;volatile
  9388                           
  9389                           ;lcd.c: 16: (TRISDbits.TRISD3) = 0;
  9390  012416  9695               	bcf	3989,3,c	;volatile
  9391                           
  9392                           ;lcd.c: 18: (TRISCbits.TRISC0) = 0;
  9393  012418  9094               	bcf	3988,0,c	;volatile
  9394                           
  9395                           ;lcd.c: 19: (LATCbits.LATC0) = 0;
  9396  01241A  908B               	bcf	3979,0,c	;volatile
  9397                           
  9398                           ;lcd.c: 21: (TRISCbits.TRISC1) = 0;
  9399  01241C  9294               	bcf	3988,1,c	;volatile
  9400                           
  9401                           ;lcd.c: 22: (LATCbits.LATC1) = 0;
  9402  01241E  928B               	bcf	3979,1,c	;volatile
  9403                           
  9404                           ;lcd.c: 25: _delay((unsigned long)((15)*(12000000/4000.0)));
  9405  012420  0E3B               	movlw	59
  9406  012422  6E15               	movwf	??_lcdInit& (0+255),c
  9407  012424  0E70               	movlw	112
  9408  012426                     u7287:
  9409  012426  2EE8               	decfsz	wreg,f,c
  9410  012428  D7FE               	goto	u7287
  9411  01242A  2E15               	decfsz	??_lcdInit& (0+255),f,c
  9412  01242C  D7FC               	goto	u7287
  9413                           
  9414                           ;lcd.c: 29: (LATCbits.LATC0) = 0;
  9415  01242E  908B               	bcf	3979,0,c	;volatile
  9416                           
  9417                           ;lcd.c: 30: writeDigit(0x03);
  9418  012430  0E03               	movlw	3
  9419  012432  EC0A  F097         	call	_writeDigit
  9420                           
  9421                           ;lcd.c: 31: for(int i = 0; i < 100; i++) _delay((unsigned long)((41)*(12000000/4000000.0
      +                          )));
  9422  012436  0E00               	movlw	0
  9423  012438  6E17               	movwf	lcdInit@i+1,c
  9424  01243A  0E00               	movlw	0
  9425  01243C  6E16               	movwf	lcdInit@i,c
  9426  01243E  5017               	movf	lcdInit@i+1,w,c
  9427  012440  0A80               	xorlw	128
  9428  012442  0F80               	addlw	-128
  9429  012444  0E64               	movlw	100
  9430  012446  B4D8               	btfsc	status,2,c
  9431  012448  5C16               	subwf	lcdInit@i,w,c
  9432  01244A  B0D8               	btfsc	status,0,c
  9433  01244C  D006               	goto	l6585
  9434  01244E  0E29               	movlw	41
  9435  012450                     u7297:
  9436  012450  2EE8               	decfsz	wreg,f,c
  9437  012452  D7FE               	goto	u7297
  9438  012454  4A16               	infsnz	lcdInit@i,f,c
  9439  012456  2A17               	incf	lcdInit@i+1,f,c
  9440  012458  D7F2               	goto	L32
  9441  01245A                     l6585:
  9442                           
  9443                           ;lcd.c: 33: writeDigit(0x03);
  9444  01245A  0E03               	movlw	3
  9445  01245C  EC0A  F097         	call	_writeDigit
  9446                           
  9447                           ;lcd.c: 34: for(int i = 0; i < 10; i++) _delay((unsigned long)((12)*(12000000/4000000.0)
      +                          ));
  9448  012460  0E00               	movlw	0
  9449  012462  6E19               	movwf	lcdInit@i_487+1,c
  9450  012464  0E00               	movlw	0
  9451  012466  6E18               	movwf	lcdInit@i_487,c
  9452  012468  5019               	movf	lcdInit@i_487+1,w,c
  9453  01246A  0A80               	xorlw	128
  9454  01246C  0F80               	addlw	-128
  9455  01246E  0E0A               	movlw	10
  9456  012470  B4D8               	btfsc	status,2,c
  9457  012472  5C18               	subwf	lcdInit@i_487,w,c
  9458  012474  B0D8               	btfsc	status,0,c
  9459  012476  D006               	goto	l6597
  9460  012478  0E0C               	movlw	12
  9461  01247A                     u7307:
  9462  01247A  2EE8               	decfsz	wreg,f,c
  9463  01247C  D7FE               	goto	u7307
  9464  01247E  4A18               	infsnz	lcdInit@i_487,f,c
  9465  012480  2A19               	incf	lcdInit@i_487+1,f,c
  9466  012482  D7F2               	goto	L33
  9467  012484                     l6597:
  9468                           
  9469                           ;lcd.c: 36: writeDigit(0x03);
  9470  012484  0E03               	movlw	3
  9471  012486  EC0A  F097         	call	_writeDigit
  9472                           
  9473                           ;lcd.c: 37: for(int i = 0; i < 10; i++) _delay((unsigned long)((12)*(12000000/4000000.0)
      +                          ));
  9474  01248A  0E00               	movlw	0
  9475  01248C  6E1B               	movwf	lcdInit@i_488+1,c
  9476  01248E  0E00               	movlw	0
  9477  012490  6E1A               	movwf	lcdInit@i_488,c
  9478  012492  501B               	movf	lcdInit@i_488+1,w,c
  9479  012494  0A80               	xorlw	128
  9480  012496  0F80               	addlw	-128
  9481  012498  0E0A               	movlw	10
  9482  01249A  B4D8               	btfsc	status,2,c
  9483  01249C  5C1A               	subwf	lcdInit@i_488,w,c
  9484  01249E  B0D8               	btfsc	status,0,c
  9485  0124A0  D006               	goto	l6609
  9486  0124A2  0E0C               	movlw	12
  9487  0124A4                     u7317:
  9488  0124A4  2EE8               	decfsz	wreg,f,c
  9489  0124A6  D7FE               	goto	u7317
  9490  0124A8  4A1A               	infsnz	lcdInit@i_488,f,c
  9491  0124AA  2A1B               	incf	lcdInit@i_488+1,f,c
  9492  0124AC  D7F2               	goto	L34
  9493  0124AE                     l6609:
  9494                           
  9495                           ;lcd.c: 39: writeDigit(0x02);
  9496  0124AE  0E02               	movlw	2
  9497  0124B0  EC0A  F097         	call	_writeDigit
  9498                           
  9499                           ;lcd.c: 40: for(int i = 0; i < 10; i++) _delay((unsigned long)((12)*(12000000/4000000.0)
      +                          ));
  9500  0124B4  0E00               	movlw	0
  9501  0124B6  6E1D               	movwf	lcdInit@i_489+1,c
  9502  0124B8  0E00               	movlw	0
  9503  0124BA  6E1C               	movwf	lcdInit@i_489,c
  9504  0124BC  501D               	movf	lcdInit@i_489+1,w,c
  9505  0124BE  0A80               	xorlw	128
  9506  0124C0  0F80               	addlw	-128
  9507  0124C2  0E0A               	movlw	10
  9508  0124C4  B4D8               	btfsc	status,2,c
  9509  0124C6  5C1C               	subwf	lcdInit@i_489,w,c
  9510  0124C8  B0D8               	btfsc	status,0,c
  9511  0124CA  D006               	goto	l6621
  9512  0124CC  0E0C               	movlw	12
  9513  0124CE                     u7327:
  9514  0124CE  2EE8               	decfsz	wreg,f,c
  9515  0124D0  D7FE               	goto	u7327
  9516  0124D2  4A1C               	infsnz	lcdInit@i_489,f,c
  9517  0124D4  2A1D               	incf	lcdInit@i_489+1,f,c
  9518  0124D6  D7F2               	goto	L35
  9519  0124D8                     l6621:
  9520                           
  9521                           ;lcd.c: 48: lcdWriteCmd(0x28);
  9522  0124D8  0E28               	movlw	40
  9523  0124DA  EC8E  F096         	call	_lcdWriteCmd
  9524                           
  9525                           ;lcd.c: 54: lcdWriteCmd(0x01);
  9526  0124DE  0E01               	movlw	1
  9527  0124E0  EC8E  F096         	call	_lcdWriteCmd
  9528                           
  9529                           ;lcd.c: 58: lcdWriteCmd(0x06);
  9530  0124E4  0E06               	movlw	6
  9531  0124E6  EC8E  F096         	call	_lcdWriteCmd
  9532                           
  9533                           ;lcd.c: 61: lcdWriteCmd(0x0C);
  9534  0124EA  0E0C               	movlw	12
  9535  0124EC  EC8E  F096         	call	_lcdWriteCmd
  9536  0124F0  0012               	return	
  9537  0124F2                     __end_of_lcdInit:
  9538                           	opt stack 0
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodh	equ	0xFF4
  9544                           prodl	equ	0xFF3
  9545                           indf0	equ	0xFEF
  9546                           fsr0h	equ	0xFEA
  9547                           fsr0l	equ	0xFE9
  9548                           wreg	equ	0xFE8
  9549                           indf2	equ	0xFDF
  9550                           postinc2	equ	0xFDE
  9551                           postdec2	equ	0xFDD
  9552                           fsr2h	equ	0xFDA
  9553                           fsr2l	equ	0xFD9
  9554                           status	equ	0xFD8
  9555                           
  9556 ;; *************** function _lcdWriteCmd *****************
  9557 ;; Defined at:
  9558 ;;		line 89 in file "lcd.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;  n               1    wreg     unsigned char 
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;  n               1   17[COMRAM] unsigned char 
  9563 ;;  i               2   18[COMRAM] int 
  9564 ;; Return value:  Size  Location     Type
  9565 ;;		None               void
  9566 ;; Registers used:
  9567 ;;		wreg, status,2, status,0, cstack
  9568 ;; Tracked objects:
  9569 ;;		On entry : 0/0
  9570 ;;		On exit  : 0/0
  9571 ;;		Unchanged: 0/0
  9572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9574 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9577 ;;Total ram usage:        4 bytes
  9578 ;; Hardware stack levels used:    1
  9579 ;; Hardware stack levels required when called:    3
  9580 ;; This function calls:
  9581 ;;		_writeByte
  9582 ;; This function is called by:
  9583 ;;		_lcdInit
  9584 ;;		_lcdClear
  9585 ;;		_lcdSetPos
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text41
  9590  012D1C                     __ptext41:
  9591                           	opt stack 0
  9592  012D1C                     _lcdWriteCmd:
  9593                           	opt stack 25
  9594                           
  9595                           ;incstack = 0
  9596                           ;lcdWriteCmd@n stored from wreg
  9597  012D1C  CFE8 F012          	movff	wreg,lcdWriteCmd@n
  9598                           
  9599                           ;lcd.c: 92: (LATCbits.LATC0) = 0;
  9600  012D20  908B               	bcf	3979,0,c	;volatile
  9601                           
  9602                           ;lcd.c: 94: writeByte(n);
  9603  012D22  5012               	movf	lcdWriteCmd@n,w,c
  9604  012D24  ECD2  F097         	call	_writeByte
  9605                           
  9606                           ;lcd.c: 98: if (!(n & 0xFC)) for(int i = 0; i < 100; i++) _delay((unsigned long)((16)*(1
      +                          2000000/4000000.0)));
  9607  012D28  C012  F011         	movff	lcdWriteCmd@n,??_lcdWriteCmd
  9608  012D2C  0EFC               	movlw	252
  9609  012D2E  1611               	andwf	??_lcdWriteCmd,f,c
  9610  012D30  A4D8               	btfss	status,2,c
  9611  012D32  D012               	goto	l5663
  9612  012D34  0E00               	movlw	0
  9613  012D36  6E14               	movwf	lcdWriteCmd@i+1,c
  9614  012D38  0E00               	movlw	0
  9615  012D3A  6E13               	movwf	lcdWriteCmd@i,c
  9616  012D3C  5014               	movf	lcdWriteCmd@i+1,w,c
  9617  012D3E  0A80               	xorlw	128
  9618  012D40  0F80               	addlw	-128
  9619  012D42  0E64               	movlw	100
  9620  012D44  B4D8               	btfsc	status,2,c
  9621  012D46  5C13               	subwf	lcdWriteCmd@i,w,c
  9622  012D48  B0D8               	btfsc	status,0,c
  9623  012D4A  0012               	return	
  9624  012D4C  0E10               	movlw	16
  9625  012D4E                     u7337:
  9626  012D4E  2EE8               	decfsz	wreg,f,c
  9627  012D50  D7FE               	goto	u7337
  9628  012D52  4A13               	infsnz	lcdWriteCmd@i,f,c
  9629  012D54  2A14               	incf	lcdWriteCmd@i+1,f,c
  9630  012D56  D7F2               	goto	L36
  9631  012D58                     l5663:
  9632                           
  9633                           ;lcd.c: 99: else _delay((unsigned long)((43)*(12000000/4000000.0)));
  9634  012D58  0E2B               	movlw	43
  9635  012D5A                     u7347:
  9636  012D5A  2EE8               	decfsz	wreg,f,c
  9637  012D5C  D7FE               	goto	u7347
  9638  012D5E  0012               	return	
  9639  012D60                     __end_of_lcdWriteCmd:
  9640                           	opt stack 0
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           prodh	equ	0xFF4
  9646                           prodl	equ	0xFF3
  9647                           indf0	equ	0xFEF
  9648                           fsr0h	equ	0xFEA
  9649                           fsr0l	equ	0xFE9
  9650                           wreg	equ	0xFE8
  9651                           indf2	equ	0xFDF
  9652                           postinc2	equ	0xFDE
  9653                           postdec2	equ	0xFDD
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _writeByte *****************
  9659 ;; Defined at:
  9660 ;;		line 81 in file "lcd.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;  n               1    wreg     unsigned char 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  n               1   15[COMRAM] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;		None               void
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9678 ;;Total ram usage:        1 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    2
  9681 ;; This function calls:
  9682 ;;		_writeDigit
  9683 ;; This function is called by:
  9684 ;;		_lcdWriteCmd
  9685 ;;		_lcdWriteChar
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text42
  9690  012FA4                     __ptext42:
  9691                           	opt stack 0
  9692  012FA4                     _writeByte:
  9693                           	opt stack 25
  9694                           
  9695                           ;incstack = 0
  9696                           ;writeByte@n stored from wreg
  9697  012FA4  CFE8 F010          	movff	wreg,writeByte@n
  9698                           
  9699                           ;lcd.c: 84: writeDigit(n >> 4);
  9700  012FA8  3810               	swapf	writeByte@n,w,c
  9701  012FAA  0B0F               	andlw	15
  9702  012FAC  EC0A  F097         	call	_writeDigit
  9703                           
  9704                           ;lcd.c: 86: writeDigit(n & 0x0F);
  9705  012FB0  5010               	movf	writeByte@n,w,c
  9706  012FB2  0B0F               	andlw	15
  9707  012FB4  EC0A  F097         	call	_writeDigit
  9708  012FB8  0012               	return	
  9709  012FBA                     __end_of_writeByte:
  9710                           	opt stack 0
  9711                           tblptru	equ	0xFF8
  9712                           tblptrh	equ	0xFF7
  9713                           tblptrl	equ	0xFF6
  9714                           tablat	equ	0xFF5
  9715                           prodh	equ	0xFF4
  9716                           prodl	equ	0xFF3
  9717                           indf0	equ	0xFEF
  9718                           fsr0h	equ	0xFEA
  9719                           fsr0l	equ	0xFE9
  9720                           wreg	equ	0xFE8
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           postdec2	equ	0xFDD
  9724                           fsr2h	equ	0xFDA
  9725                           fsr2l	equ	0xFD9
  9726                           status	equ	0xFD8
  9727                           
  9728 ;; *************** function _writeDigit *****************
  9729 ;; Defined at:
  9730 ;;		line 66 in file "lcd.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  n               1    wreg     unsigned char 
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  n               1   14[COMRAM] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;		None               void
  9737 ;; Registers used:
  9738 ;;		wreg
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9748 ;;Total ram usage:        1 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    1
  9751 ;; This function calls:
  9752 ;;		Nothing
  9753 ;; This function is called by:
  9754 ;;		_lcdInit
  9755 ;;		_writeByte
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           	psect	text43
  9760  012E14                     __ptext43:
  9761                           	opt stack 0
  9762  012E14                     _writeDigit:
  9763                           	opt stack 25
  9764                           
  9765                           ;incstack = 0
  9766                           ;writeDigit@n stored from wreg
  9767  012E14  CFE8 F00F          	movff	wreg,writeDigit@n
  9768                           
  9769                           ;lcd.c: 69: (LATCbits.LATC1) = 1;
  9770  012E18  828B               	bsf	3979,1,c	;volatile
  9771                           
  9772                           ;lcd.c: 70: _delay((unsigned long)((1)*(12000000/4000000.0)));
  9773  012E1A  F000               	nop	
  9774  012E1C  D000               	nop2		;2 cycle nop
  9775                           
  9776                           ;lcd.c: 72: if (n & 0x01) (LATDbits.LATD0) = 1; else (LATDbits.LATD0) = 0;
  9777  012E1E  A00F               	btfss	writeDigit@n,0,c
  9778  012E20  D002               	goto	l85
  9779  012E22  808C               	bsf	3980,0,c	;volatile
  9780  012E24  D001               	goto	l5319
  9781  012E26                     l85:
  9782  012E26  908C               	bcf	3980,0,c	;volatile
  9783  012E28                     l5319:
  9784                           
  9785                           ;lcd.c: 73: if (n & 0x02) (LATDbits.LATD1) = 1; else (LATDbits.LATD1) = 0;
  9786  012E28  A20F               	btfss	writeDigit@n,1,c
  9787  012E2A  D002               	goto	l87
  9788  012E2C  828C               	bsf	3980,1,c	;volatile
  9789  012E2E  D001               	goto	l5323
  9790  012E30                     l87:
  9791  012E30  928C               	bcf	3980,1,c	;volatile
  9792  012E32                     l5323:
  9793                           
  9794                           ;lcd.c: 74: if (n & 0x04) (LATDbits.LATD2) = 1; else (LATDbits.LATD2) = 0;
  9795  012E32  A40F               	btfss	writeDigit@n,2,c
  9796  012E34  D002               	goto	l89
  9797  012E36  848C               	bsf	3980,2,c	;volatile
  9798  012E38  D001               	goto	l5327
  9799  012E3A                     l89:
  9800  012E3A  948C               	bcf	3980,2,c	;volatile
  9801  012E3C                     l5327:
  9802                           
  9803                           ;lcd.c: 75: if (n & 0x08) (LATDbits.LATD3) = 1; else (LATDbits.LATD3) = 0;
  9804  012E3C  A60F               	btfss	writeDigit@n,3,c
  9805  012E3E  D002               	goto	l91
  9806  012E40  868C               	bsf	3980,3,c	;volatile
  9807  012E42  D001               	goto	l92
  9808  012E44                     l91:
  9809  012E44  968C               	bcf	3980,3,c	;volatile
  9810  012E46                     l92:
  9811                           
  9812                           ;lcd.c: 76: _delay((unsigned long)((2)*(12000000/4000000.0)));
  9813  012E46  D000               	nop2		;2 cycle nop
  9814  012E48  D000               	nop2		;2 cycle nop
  9815  012E4A  D000               	nop2		;2 cycle nop
  9816                           
  9817                           ;lcd.c: 78: (LATCbits.LATC1) = 0;
  9818  012E4C  928B               	bcf	3979,1,c	;volatile
  9819  012E4E  0012               	return	
  9820  012E50                     __end_of_writeDigit:
  9821                           	opt stack 0
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           indf0	equ	0xFEF
  9829                           fsr0h	equ	0xFEA
  9830                           fsr0l	equ	0xFE9
  9831                           wreg	equ	0xFE8
  9832                           indf2	equ	0xFDF
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           fsr2h	equ	0xFDA
  9836                           fsr2l	equ	0xFD9
  9837                           status	equ	0xFD8
  9838                           
  9839 ;; *************** function _config_init *****************
  9840 ;; Defined at:
  9841 ;;		line 57 in file "main.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;		None
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;		None               void
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, status,0
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9859 ;;Total ram usage:        0 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    1
  9862 ;; This function calls:
  9863 ;;		Nothing
  9864 ;; This function is called by:
  9865 ;;		_main
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           	psect	text44
  9870  012E8A                     __ptext44:
  9871                           	opt stack 0
  9872  012E8A                     _config_init:
  9873                           	opt stack 29
  9874                           
  9875                           ;main.c: 63: EECON2 = 0x55;
  9876                           
  9877                           ;incstack = 0
  9878  012E8A  0E55               	movlw	85
  9879  012E8C  6EA7               	movwf	4007,c	;volatile
  9880                           
  9881                           ;main.c: 64: EECON2 = 0xAA;
  9882  012E8E  0EAA               	movlw	170
  9883  012E90  6EA7               	movwf	4007,c	;volatile
  9884                           
  9885                           ;main.c: 65: PPSCONbits.IOLOCK = 0;
  9886  012E92  010E               	movlb	14	; () banked
  9887  012E94  010E               	movlb	14	; () banked
  9888  012E96  91BF               	bcf	191,0,b	;volatile
  9889                           
  9890                           ;main.c: 66: RPINR1 = 24;
  9891  012E98  0E18               	movlw	24
  9892  012E9A  010E               	movlb	14	; () banked
  9893  012E9C  010E               	movlb	14	; () banked
  9894  012E9E  6FE1               	movwf	225,b	;volatile
  9895                           
  9896                           ;main.c: 67: EECON2 = 0x55;
  9897  012EA0  0E55               	movlw	85
  9898  012EA2  6EA7               	movwf	4007,c	;volatile
  9899                           
  9900                           ;main.c: 68: EECON2 = 0xAA;
  9901  012EA4  0EAA               	movlw	170
  9902  012EA6  6EA7               	movwf	4007,c	;volatile
  9903                           
  9904                           ; BSR set to: 14
  9905                           ;main.c: 69: PPSCONbits.IOLOCK = 1;
  9906  012EA8  010E               	movlb	14	; () banked
  9907  012EAA  010E               	movlb	14	; () banked
  9908  012EAC  81BF               	bsf	191,0,b	;volatile
  9909                           
  9910                           ; BSR set to: 14
  9911                           ;main.c: 71: INTCON2bits.INTEDG1 = 1;
  9912  012EAE  8AF1               	bsf	intcon2,5,c	;volatile
  9913                           
  9914                           ; BSR set to: 14
  9915                           ;main.c: 72: INTCON3bits.INT1IE = 1;
  9916  012EB0  86F0               	bsf	intcon3,3,c	;volatile
  9917                           
  9918                           ; BSR set to: 14
  9919                           ;main.c: 73: INTCONbits.GIE = 1;
  9920  012EB2  8EF2               	bsf	intcon,7,c	;volatile
  9921                           
  9922                           ; BSR set to: 14
  9923                           ;main.c: 75: ANCON0 = 0b11111111;
  9924  012EB4  010F               	movlb	15	; () banked
  9925  012EB6  010F               	movlb	15	; () banked
  9926  012EB8  6948               	setf	72,b	;volatile
  9927                           
  9928                           ; BSR set to: 15
  9929                           ;main.c: 76: ANCON1 |= 0b00001111;
  9930  012EBA  0E0F               	movlw	15
  9931  012EBC  010F               	movlb	15	; () banked
  9932  012EBE  010F               	movlb	15	; () banked
  9933  012EC0  1349               	iorwf	73,f,b	;volatile
  9934                           
  9935                           ; BSR set to: 15
  9936  012EC2  0012               	return	
  9937  012EC4                     __end_of_config_init:
  9938                           	opt stack 0
  9939                           tblptru	equ	0xFF8
  9940                           tblptrh	equ	0xFF7
  9941                           tblptrl	equ	0xFF6
  9942                           tablat	equ	0xFF5
  9943                           prodh	equ	0xFF4
  9944                           prodl	equ	0xFF3
  9945                           intcon	equ	0xFF2
  9946                           intcon2	equ	0xFF1
  9947                           intcon3	equ	0xFF0
  9948                           indf0	equ	0xFEF
  9949                           fsr0h	equ	0xFEA
  9950                           fsr0l	equ	0xFE9
  9951                           wreg	equ	0xFE8
  9952                           indf2	equ	0xFDF
  9953                           postinc2	equ	0xFDE
  9954                           postdec2	equ	0xFDD
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _configSense *****************
  9960 ;; Defined at:
  9961 ;;		line 334 in file "functions.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;		None               void
  9968 ;; Registers used:
  9969 ;;		None
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9979 ;;Total ram usage:        0 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    1
  9982 ;; This function calls:
  9983 ;;		Nothing
  9984 ;; This function is called by:
  9985 ;;		_main
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           	psect	text45
  9990  012FDC                     __ptext45:
  9991                           	opt stack 0
  9992  012FDC                     _configSense:
  9993                           	opt stack 29
  9994                           
  9995                           ;functions.c: 336: (TRISEbits.TRISE1) = 0;
  9996                           
  9997                           ; BSR set to: 15
  9998                           ;incstack = 0
  9999  012FDC  9296               	bcf	3990,1,c	;volatile
 10000                           
 10001                           ;functions.c: 337: (TRISEbits.TRISE2) = 1;
 10002  012FDE  8496               	bsf	3990,2,c	;volatile
 10003  012FE0  0012               	return	
 10004  012FE2                     __end_of_configSense:
 10005                           	opt stack 0
 10006                           tblptru	equ	0xFF8
 10007                           tblptrh	equ	0xFF7
 10008                           tblptrl	equ	0xFF6
 10009                           tablat	equ	0xFF5
 10010                           prodh	equ	0xFF4
 10011                           prodl	equ	0xFF3
 10012                           intcon	equ	0xFF2
 10013                           intcon2	equ	0xFF1
 10014                           intcon3	equ	0xFF0
 10015                           indf0	equ	0xFEF
 10016                           fsr0h	equ	0xFEA
 10017                           fsr0l	equ	0xFE9
 10018                           wreg	equ	0xFE8
 10019                           indf2	equ	0xFDF
 10020                           postinc2	equ	0xFDE
 10021                           postdec2	equ	0xFDD
 10022                           fsr2h	equ	0xFDA
 10023                           fsr2l	equ	0xFD9
 10024                           status	equ	0xFD8
 10025                           
 10026 ;; *************** function _MOTOR_init *****************
 10027 ;; Defined at:
 10028 ;;		line 12 in file "motorEncoder.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, status,2, status,0, cstack
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    3
 10049 ;; This function calls:
 10050 ;;		___ftdiv
 10051 ;; This function is called by:
 10052 ;;		_main
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text46
 10057  0125A8                     __ptext46:
 10058                           	opt stack 0
 10059  0125A8                     _MOTOR_init:
 10060                           	opt stack 27
 10061                           
 10062                           ;motorEncoder.c: 14: (TRISBbits.TRISB6) = 1;
 10063                           
 10064                           ;incstack = 0
 10065  0125A8  8C93               	bsf	3987,6,c	;volatile
 10066                           
 10067                           ;motorEncoder.c: 15: (TRISBbits.TRISB7) = 1;
 10068  0125AA  8E93               	bsf	3987,7,c	;volatile
 10069                           
 10070                           ;motorEncoder.c: 16: TRISBbits.TRISB0 = 0;
 10071  0125AC  9093               	bcf	3987,0,c	;volatile
 10072                           
 10073                           ;motorEncoder.c: 17: TRISBbits.TRISB1 = 0;
 10074  0125AE  9293               	bcf	3987,1,c	;volatile
 10075                           
 10076                           ;motorEncoder.c: 18: TRISBbits.TRISB2 = 0;
 10077  0125B0  9493               	bcf	3987,2,c	;volatile
 10078                           
 10079                           ;motorEncoder.c: 19: TRISBbits.TRISB3 = 0;
 10080  0125B2  9693               	bcf	3987,3,c	;volatile
 10081                           
 10082                           ;motorEncoder.c: 21: LATBbits.LATB0 = 0;
 10083  0125B4  908A               	bcf	3978,0,c	;volatile
 10084                           
 10085                           ;motorEncoder.c: 22: LATBbits.LATB1 = 0;
 10086  0125B6  928A               	bcf	3978,1,c	;volatile
 10087                           
 10088                           ;motorEncoder.c: 23: LATBbits.LATB2 = 0;
 10089  0125B8  948A               	bcf	3978,2,c	;volatile
 10090                           
 10091                           ;motorEncoder.c: 24: LATBbits.LATB3 = 0;
 10092  0125BA  968A               	bcf	3978,3,c	;volatile
 10093                           
 10094                           ;motorEncoder.c: 28: PR2 = 0xff;
 10095  0125BC  68CB               	setf	4043,c	;volatile
 10096                           
 10097                           ;motorEncoder.c: 29: CCPR4L = 0x0f;
 10098  0125BE  0E0F               	movlw	15
 10099  0125C0  010F               	movlb	15	; () banked
 10100  0125C2  010F               	movlb	15	; () banked
 10101  0125C4  6F13               	movwf	19,b	;volatile
 10102                           
 10103                           ; BSR set to: 15
 10104                           ;motorEncoder.c: 31: CCP4CONbits.DC4B0 = 1;
 10105  0125C6  010F               	movlb	15	; () banked
 10106  0125C8  010F               	movlb	15	; () banked
 10107  0125CA  8912               	bsf	18,4,b	;volatile
 10108                           
 10109                           ; BSR set to: 15
 10110                           ;motorEncoder.c: 32: CCP4CONbits.DC4B1 = 1;
 10111  0125CC  010F               	movlb	15	; () banked
 10112  0125CE  010F               	movlb	15	; () banked
 10113  0125D0  8B12               	bsf	18,5,b	;volatile
 10114                           
 10115                           ; BSR set to: 15
 10116                           ;motorEncoder.c: 33: TRISBbits.TRISB4 = 0;
 10117  0125D2  9893               	bcf	3987,4,c	;volatile
 10118                           
 10119                           ; BSR set to: 15
 10120                           ;motorEncoder.c: 34: T2CONbits.T2CKPS0 = 0;
 10121  0125D4  90CA               	bcf	4042,0,c	;volatile
 10122                           
 10123                           ; BSR set to: 15
 10124                           ;motorEncoder.c: 35: T2CONbits.T2CKPS1 = 0;
 10125  0125D6  92CA               	bcf	4042,1,c	;volatile
 10126                           
 10127                           ; BSR set to: 15
 10128                           ;motorEncoder.c: 36: T2CONbits.TMR2ON = 1;
 10129  0125D8  84CA               	bsf	4042,2,c	;volatile
 10130                           
 10131                           ; BSR set to: 15
 10132                           ;motorEncoder.c: 37: CCP4CONbits.CCP4M2 = 1;
 10133  0125DA  010F               	movlb	15	; () banked
 10134  0125DC  010F               	movlb	15	; () banked
 10135  0125DE  8512               	bsf	18,2,b	;volatile
 10136                           
 10137                           ; BSR set to: 15
 10138                           ;motorEncoder.c: 38: CCP4CONbits.CCP4M3 = 1;
 10139  0125E0  010F               	movlb	15	; () banked
 10140  0125E2  010F               	movlb	15	; () banked
 10141  0125E4  8712               	bsf	18,3,b	;volatile
 10142                           
 10143                           ; BSR set to: 15
 10144                           ;motorEncoder.c: 41: CCPTMRS1bits.C5TSEL0 = 1;
 10145  0125E6  010F               	movlb	15	; () banked
 10146  0125E8  010F               	movlb	15	; () banked
 10147  0125EA  8551               	bsf	81,2,b	;volatile
 10148                           
 10149                           ; BSR set to: 15
 10150                           ;motorEncoder.c: 42: PR4 = 0xff;
 10151  0125EC  6877               	setf	3959,c	;volatile
 10152                           
 10153                           ;motorEncoder.c: 43: CCPR5L = 0x0f;
 10154  0125EE  0E0F               	movlw	15
 10155  0125F0  010F               	movlb	15	; () banked
 10156  0125F2  010F               	movlb	15	; () banked
 10157  0125F4  6F10               	movwf	16,b	;volatile
 10158                           
 10159                           ; BSR set to: 15
 10160                           ;motorEncoder.c: 45: CCP5CONbits.DC5B0 = 1;
 10161  0125F6  010F               	movlb	15	; () banked
 10162  0125F8  010F               	movlb	15	; () banked
 10163  0125FA  890F               	bsf	15,4,b	;volatile
 10164                           
 10165                           ; BSR set to: 15
 10166                           ;motorEncoder.c: 46: CCP5CONbits.DC5B1 = 1;
 10167  0125FC  010F               	movlb	15	; () banked
 10168  0125FE  010F               	movlb	15	; () banked
 10169  012600  8B0F               	bsf	15,5,b	;volatile
 10170                           
 10171                           ; BSR set to: 15
 10172                           ;motorEncoder.c: 47: TRISBbits.TRISB5 = 0;
 10173  012602  9A93               	bcf	3987,5,c	;volatile
 10174                           
 10175                           ; BSR set to: 15
 10176                           ;motorEncoder.c: 48: T4CONbits.T4CKPS0 = 0;
 10177  012604  9076               	bcf	3958,0,c	;volatile
 10178                           
 10179                           ; BSR set to: 15
 10180                           ;motorEncoder.c: 49: T4CONbits.T4CKPS1 = 0;
 10181  012606  9276               	bcf	3958,1,c	;volatile
 10182                           
 10183                           ; BSR set to: 15
 10184                           ;motorEncoder.c: 50: T4CONbits.TMR4ON = 1;
 10185  012608  8476               	bsf	3958,2,c	;volatile
 10186                           
 10187                           ; BSR set to: 15
 10188                           ;motorEncoder.c: 51: CCP5CONbits.CCP5M2 = 1;
 10189  01260A  010F               	movlb	15	; () banked
 10190  01260C  010F               	movlb	15	; () banked
 10191  01260E  850F               	bsf	15,2,b	;volatile
 10192                           
 10193                           ; BSR set to: 15
 10194                           ;motorEncoder.c: 52: CCP5CONbits.CCP5M3 = 1;
 10195  012610  010F               	movlb	15	; () banked
 10196  012612  010F               	movlb	15	; () banked
 10197  012614  870F               	bsf	15,3,b	;volatile
 10198                           
 10199                           ;motorEncoder.c: 54: CCPR4L = 0;
 10200  012616  0E00               	movlw	0
 10201  012618  010F               	movlb	15	; () banked
 10202  01261A  010F               	movlb	15	; () banked
 10203  01261C  6F13               	movwf	19,b	;volatile
 10204                           
 10205                           ;motorEncoder.c: 55: CCPR5L = 0;
 10206  01261E  0E00               	movlw	0
 10207  012620  010F               	movlb	15	; () banked
 10208  012622  010F               	movlb	15	; () banked
 10209  012624  6F10               	movwf	16,b	;volatile
 10210                           
 10211                           ;motorEncoder.c: 58: encoder_signal_to_turn_reduction = 43.3 * 3;
 10212  012626  0EE6               	movlw	230
 10213  012628  6E4F               	movwf	_encoder_signal_to_turn_reduction,c
 10214  01262A  0E01               	movlw	1
 10215  01262C  6E50               	movwf	_encoder_signal_to_turn_reduction+1,c
 10216  01262E  0E43               	movlw	67
 10217  012630  6E51               	movwf	_encoder_signal_to_turn_reduction+2,c
 10218                           
 10219                           ; BSR set to: 15
 10220                           ;motorEncoder.c: 59: degree_per_signal = 360 / encoder_signal_to_turn_reduction;
 10221  012632  0E00               	movlw	0
 10222  012634  6E40               	movwf	___ftdiv@f1,c
 10223  012636  0EB4               	movlw	180
 10224  012638  6E41               	movwf	___ftdiv@f1+1,c
 10225  01263A  0E43               	movlw	67
 10226  01263C  6E42               	movwf	___ftdiv@f1+2,c
 10227  01263E  C04F  F043         	movff	_encoder_signal_to_turn_reduction,___ftdiv@f2
 10228  012642  C050  F044         	movff	_encoder_signal_to_turn_reduction+1,___ftdiv@f2+1
 10229  012646  C051  F045         	movff	_encoder_signal_to_turn_reduction+2,___ftdiv@f2+2
 10230  01264A  EC72  F08F         	call	___ftdiv	;wreg free
 10231  01264E  C040  F04C         	movff	?___ftdiv,_degree_per_signal
 10232  012652  C041  F04D         	movff	?___ftdiv+1,_degree_per_signal+1
 10233  012656  C042  F04E         	movff	?___ftdiv+2,_degree_per_signal+2
 10234  01265A  0012               	return	
 10235  01265C                     __end_of_MOTOR_init:
 10236                           	opt stack 0
 10237                           tblptru	equ	0xFF8
 10238                           tblptrh	equ	0xFF7
 10239                           tblptrl	equ	0xFF6
 10240                           tablat	equ	0xFF5
 10241                           prodh	equ	0xFF4
 10242                           prodl	equ	0xFF3
 10243                           intcon	equ	0xFF2
 10244                           intcon2	equ	0xFF1
 10245                           intcon3	equ	0xFF0
 10246                           indf0	equ	0xFEF
 10247                           fsr0h	equ	0xFEA
 10248                           fsr0l	equ	0xFE9
 10249                           wreg	equ	0xFE8
 10250                           indf2	equ	0xFDF
 10251                           postinc2	equ	0xFDE
 10252                           postdec2	equ	0xFDD
 10253                           fsr2h	equ	0xFDA
 10254                           fsr2l	equ	0xFD9
 10255                           status	equ	0xFD8
 10256                           
 10257 ;; *************** function ___ftdiv *****************
 10258 ;; Defined at:
 10259 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftdiv.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;  f1              3   63[COMRAM] float 
 10262 ;;  f2              3   66[COMRAM] float 
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;  f3              3    1[BANK0 ] float 
 10265 ;;  sign            1    5[BANK0 ] unsigned char 
 10266 ;;  exp             1    4[BANK0 ] unsigned char 
 10267 ;;  cntr            1    0[BANK0 ] unsigned char 
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  3   63[COMRAM] float 
 10270 ;; Registers used:
 10271 ;;		wreg, status,2, status,0, cstack
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10277 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10278 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10279 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10280 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10281 ;;Total ram usage:       15 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    2
 10284 ;; This function calls:
 10285 ;;		___ftpack
 10286 ;; This function is called by:
 10287 ;;		_readTempF
 10288 ;;		_single_axis_measure
 10289 ;;		_pointToVoltage
 10290 ;;		_voltageToG
 10291 ;;		_MOTOR_init
 10292 ;;		_readDistance
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text47
 10297  011EE4                     __ptext47:
 10298                           	opt stack 0
 10299  011EE4                     ___ftdiv:
 10300                           	opt stack 26
 10301                           
 10302                           ;incstack = 0
 10303  011EE4  C042  F046         	movff	___ftdiv@f1+2,??___ftdiv
 10304  011EE8  6A47               	clrf	(??___ftdiv+1)& (0+255),c
 10305  011EEA  6A48               	clrf	(??___ftdiv+2)& (0+255),c
 10306  011EEC  3441               	rlcf	___ftdiv@f1+1,w,c
 10307  011EEE  3646               	rlcf	??___ftdiv& (0+255),f,c
 10308  011EF0  E301               	bnc	u5801
 10309  011EF2  8047               	bsf	(??___ftdiv+1)& (0+255),0,c
 10310  011EF4                     u5801:
 10311  011EF4  5046               	movf	??___ftdiv,w,c
 10312  011EF6  0100               	movlb	0	; () banked
 10313  011EF8  0100               	movlb	0	; () banked
 10314  011EFA  6F64               	movwf	___ftdiv@exp& (0+255),b
 10315  011EFC  0100               	movlb	0	; () banked
 10316  011EFE  6764               	tstfsz	___ftdiv@exp& (0+255),b
 10317  011F00  D007               	goto	l7633
 10318                           
 10319                           ; BSR set to: 0
 10320  011F02  0E00               	movlw	0
 10321  011F04  6E40               	movwf	?___ftdiv,c
 10322  011F06  0E00               	movlw	0
 10323  011F08  6E41               	movwf	?___ftdiv+1,c
 10324  011F0A  0E00               	movlw	0
 10325  011F0C  6E42               	movwf	?___ftdiv+2,c
 10326  011F0E  0012               	return	
 10327  011F10                     l7633:
 10328                           
 10329                           ; BSR set to: 0
 10330  011F10  C045  F046         	movff	___ftdiv@f2+2,??___ftdiv
 10331  011F14  6A47               	clrf	(??___ftdiv+1)& (0+255),c
 10332  011F16  6A48               	clrf	(??___ftdiv+2)& (0+255),c
 10333  011F18  3444               	rlcf	___ftdiv@f2+1,w,c
 10334  011F1A  3646               	rlcf	??___ftdiv& (0+255),f,c
 10335  011F1C  E301               	bnc	u5821
 10336  011F1E  8047               	bsf	(??___ftdiv+1)& (0+255),0,c
 10337  011F20                     u5821:
 10338  011F20  5046               	movf	??___ftdiv,w,c
 10339  011F22  0100               	movlb	0	; () banked
 10340  011F24  0100               	movlb	0	; () banked
 10341  011F26  6F65               	movwf	___ftdiv@sign& (0+255),b
 10342  011F28  0100               	movlb	0	; () banked
 10343  011F2A  6765               	tstfsz	___ftdiv@sign& (0+255),b
 10344  011F2C  D007               	goto	l7639
 10345                           
 10346                           ; BSR set to: 0
 10347  011F2E  0E00               	movlw	0
 10348  011F30  6E40               	movwf	?___ftdiv,c
 10349  011F32  0E00               	movlw	0
 10350  011F34  6E41               	movwf	?___ftdiv+1,c
 10351  011F36  0E00               	movlw	0
 10352  011F38  6E42               	movwf	?___ftdiv+2,c
 10353  011F3A  0012               	return	
 10354  011F3C                     l7639:
 10355                           
 10356                           ; BSR set to: 0
 10357  011F3C  0E00               	movlw	0
 10358  011F3E  0100               	movlb	0	; () banked
 10359  011F40  0100               	movlb	0	; () banked
 10360  011F42  6F61               	movwf	___ftdiv@f3& (0+255),b
 10361  011F44  0E00               	movlw	0
 10362  011F46  0100               	movlb	0	; () banked
 10363  011F48  0100               	movlb	0	; () banked
 10364  011F4A  6F62               	movwf	(___ftdiv@f3+1)& (0+255),b
 10365  011F4C  0E00               	movlw	0
 10366  011F4E  0100               	movlb	0	; () banked
 10367  011F50  0100               	movlb	0	; () banked
 10368  011F52  6F63               	movwf	(___ftdiv@f3+2)& (0+255),b
 10369                           
 10370                           ; BSR set to: 0
 10371  011F54  0100               	movlb	0	; () banked
 10372  011F56  0100               	movlb	0	; () banked
 10373  011F58  5165               	movf	___ftdiv@sign& (0+255),w,b
 10374  011F5A  0F89               	addlw	137
 10375  011F5C  0100               	movlb	0	; () banked
 10376  011F5E  0100               	movlb	0	; () banked
 10377  011F60  5F64               	subwf	___ftdiv@exp& (0+255),f,b
 10378                           
 10379                           ; BSR set to: 0
 10380  011F62  C042  F065         	movff	___ftdiv@f1+2,___ftdiv@sign
 10381                           
 10382                           ; BSR set to: 0
 10383  011F66  5045               	movf	___ftdiv@f2+2,w,c
 10384  011F68  0100               	movlb	0	; () banked
 10385  011F6A  0100               	movlb	0	; () banked
 10386  011F6C  1B65               	xorwf	___ftdiv@sign& (0+255),f,b
 10387                           
 10388                           ; BSR set to: 0
 10389  011F6E  0E80               	movlw	128
 10390  011F70  0100               	movlb	0	; () banked
 10391  011F72  0100               	movlb	0	; () banked
 10392  011F74  1765               	andwf	___ftdiv@sign& (0+255),f,b
 10393                           
 10394                           ; BSR set to: 0
 10395  011F76  8E41               	bsf	___ftdiv@f1+1,7,c
 10396                           
 10397                           ; BSR set to: 0
 10398  011F78  0EFF               	movlw	255
 10399  011F7A  1640               	andwf	___ftdiv@f1,f,c
 10400  011F7C  0EFF               	movlw	255
 10401  011F7E  1641               	andwf	___ftdiv@f1+1,f,c
 10402  011F80  0E00               	movlw	0
 10403  011F82  1642               	andwf	___ftdiv@f1+2,f,c
 10404                           
 10405                           ; BSR set to: 0
 10406  011F84  8E44               	bsf	___ftdiv@f2+1,7,c
 10407                           
 10408                           ; BSR set to: 0
 10409  011F86  0EFF               	movlw	255
 10410  011F88  1643               	andwf	___ftdiv@f2,f,c
 10411  011F8A  0EFF               	movlw	255
 10412  011F8C  1644               	andwf	___ftdiv@f2+1,f,c
 10413  011F8E  0E00               	movlw	0
 10414  011F90  1645               	andwf	___ftdiv@f2+2,f,c
 10415                           
 10416                           ; BSR set to: 0
 10417  011F92  6E46               	movwf	??___ftdiv& (0+255),c
 10418  011F94  0E18               	movlw	24
 10419  011F96  0100               	movlb	0	; () banked
 10420  011F98  0100               	movlb	0	; () banked
 10421  011F9A  6F60               	movwf	___ftdiv@cntr& (0+255),b
 10422  011F9C  5046               	movf	??___ftdiv& (0+255),w,c
 10423  011F9E                     l1010:
 10424                           
 10425                           ; BSR set to: 0
 10426  011F9E  0100               	movlb	0	; () banked
 10427  011FA0  90D8               	bcf	status,0,c
 10428  011FA2  0100               	movlb	0	; () banked
 10429  011FA4  3761               	rlcf	___ftdiv@f3& (0+255),f,b
 10430  011FA6  0100               	movlb	0	; () banked
 10431  011FA8  3762               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 10432  011FAA  0100               	movlb	0	; () banked
 10433  011FAC  3763               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 10434                           
 10435                           ; BSR set to: 0
 10436  011FAE  5043               	movf	___ftdiv@f2,w,c
 10437  011FB0  5C40               	subwf	___ftdiv@f1,w,c
 10438  011FB2  5044               	movf	___ftdiv@f2+1,w,c
 10439  011FB4  5841               	subwfb	___ftdiv@f1+1,w,c
 10440  011FB6  5045               	movf	___ftdiv@f2+2,w,c
 10441  011FB8  5842               	subwfb	___ftdiv@f1+2,w,c
 10442  011FBA  A0D8               	btfss	status,0,c
 10443  011FBC  D009               	goto	l1011
 10444                           
 10445                           ; BSR set to: 0
 10446  011FBE  5043               	movf	___ftdiv@f2,w,c
 10447  011FC0  5E40               	subwf	___ftdiv@f1,f,c
 10448  011FC2  5044               	movf	___ftdiv@f2+1,w,c
 10449  011FC4  5A41               	subwfb	___ftdiv@f1+1,f,c
 10450  011FC6  5045               	movf	___ftdiv@f2+2,w,c
 10451  011FC8  5A42               	subwfb	___ftdiv@f1+2,f,c
 10452                           
 10453                           ; BSR set to: 0
 10454  011FCA  0100               	movlb	0	; () banked
 10455  011FCC  0100               	movlb	0	; () banked
 10456  011FCE  8161               	bsf	___ftdiv@f3& (0+255),0,b
 10457  011FD0                     l1011:
 10458                           
 10459                           ; BSR set to: 0
 10460  011FD0  90D8               	bcf	status,0,c
 10461  011FD2  3640               	rlcf	___ftdiv@f1,f,c
 10462  011FD4  3641               	rlcf	___ftdiv@f1+1,f,c
 10463  011FD6  3642               	rlcf	___ftdiv@f1+2,f,c
 10464                           
 10465                           ; BSR set to: 0
 10466  011FD8  0100               	movlb	0	; () banked
 10467  011FDA  0100               	movlb	0	; () banked
 10468  011FDC  2F60               	decfsz	___ftdiv@cntr& (0+255),f,b
 10469  011FDE  D7DF               	goto	l1010
 10470                           
 10471                           ; BSR set to: 0
 10472                           
 10473                           ; BSR set to: 0
 10474  011FE0  C061  F00F         	movff	___ftdiv@f3,___ftpack@arg
 10475  011FE4  C062  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10476  011FE8  C063  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10477  011FEC  C064  F012         	movff	___ftdiv@exp,___ftpack@exp
 10478  011FF0  C065  F013         	movff	___ftdiv@sign,___ftpack@sign
 10479  011FF4  EC86  F093         	call	___ftpack	;wreg free
 10480  011FF8  C00F  F040         	movff	?___ftpack,?___ftdiv
 10481  011FFC  C010  F041         	movff	?___ftpack+1,?___ftdiv+1
 10482  012000  C011  F042         	movff	?___ftpack+2,?___ftdiv+2
 10483  012004  0012               	return	
 10484  012006                     __end_of___ftdiv:
 10485                           	opt stack 0
 10486                           tblptru	equ	0xFF8
 10487                           tblptrh	equ	0xFF7
 10488                           tblptrl	equ	0xFF6
 10489                           tablat	equ	0xFF5
 10490                           prodh	equ	0xFF4
 10491                           prodl	equ	0xFF3
 10492                           intcon	equ	0xFF2
 10493                           intcon2	equ	0xFF1
 10494                           intcon3	equ	0xFF0
 10495                           indf0	equ	0xFEF
 10496                           fsr0h	equ	0xFEA
 10497                           fsr0l	equ	0xFE9
 10498                           wreg	equ	0xFE8
 10499                           indf2	equ	0xFDF
 10500                           postinc2	equ	0xFDE
 10501                           postdec2	equ	0xFDD
 10502                           fsr2h	equ	0xFDA
 10503                           fsr2l	equ	0xFD9
 10504                           status	equ	0xFD8
 10505                           
 10506 ;; *************** function ___ftpack *****************
 10507 ;; Defined at:
 10508 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\float.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;  arg             3   14[COMRAM] unsigned um
 10511 ;;  exp             1   17[COMRAM] unsigned char 
 10512 ;;  sign            1   18[COMRAM] unsigned char 
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;		None
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  3   14[COMRAM] float 
 10517 ;; Registers used:
 10518 ;;		wreg, status,2, status,0
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10524 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10526 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10527 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10528 ;;Total ram usage:        8 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    1
 10531 ;; This function calls:
 10532 ;;		Nothing
 10533 ;; This function is called by:
 10534 ;;		___awtoft
 10535 ;;		___ftadd
 10536 ;;		___ftdiv
 10537 ;;		___ftmul
 10538 ;;		___lltoft
 10539 ;;		___lwtoft
 10540 ;; This function uses a non-reentrant model
 10541 ;;
 10542                           
 10543                           	psect	text48
 10544  01270C                     __ptext48:
 10545                           	opt stack 0
 10546  01270C                     ___ftpack:
 10547                           	opt stack 25
 10548                           
 10549                           ;incstack = 0
 10550  01270C  5012               	movf	___ftpack@exp,w,c
 10551  01270E  B4D8               	btfsc	status,2,c
 10552  012710  D005               	goto	l7527
 10553  012712  500F               	movf	___ftpack@arg,w,c
 10554  012714  1010               	iorwf	___ftpack@arg+1,w,c
 10555  012716  1011               	iorwf	___ftpack@arg+2,w,c
 10556  012718  A4D8               	btfss	status,2,c
 10557  01271A  D00C               	goto	l7533
 10558  01271C                     l7527:
 10559  01271C  0E00               	movlw	0
 10560  01271E  6E0F               	movwf	?___ftpack,c
 10561  012720  0E00               	movlw	0
 10562  012722  6E10               	movwf	?___ftpack+1,c
 10563  012724  0E00               	movlw	0
 10564  012726  6E11               	movwf	?___ftpack+2,c
 10565  012728  0012               	return	
 10566  01272A                     l7531:
 10567  01272A  2A12               	incf	___ftpack@exp,f,c
 10568  01272C  90D8               	bcf	status,0,c
 10569  01272E  3211               	rrcf	___ftpack@arg+2,f,c
 10570  012730  3210               	rrcf	___ftpack@arg+1,f,c
 10571  012732  320F               	rrcf	___ftpack@arg,f,c
 10572  012734                     l7533:
 10573  012734  0E00               	movlw	0
 10574  012736  140F               	andwf	___ftpack@arg,w,c
 10575  012738  6E14               	movwf	??___ftpack& (0+255),c
 10576  01273A  0E00               	movlw	0
 10577  01273C  1410               	andwf	___ftpack@arg+1,w,c
 10578  01273E  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10579  012740  0EFE               	movlw	254
 10580  012742  1411               	andwf	___ftpack@arg+2,w,c
 10581  012744  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10582  012746  5014               	movf	??___ftpack,w,c
 10583  012748  1015               	iorwf	??___ftpack+1,w,c
 10584  01274A  1016               	iorwf	??___ftpack+2,w,c
 10585  01274C  B4D8               	btfsc	status,2,c
 10586  01274E  D00C               	goto	l7539
 10587  012750  D7EC               	goto	l7531
 10588  012752                     l7535:
 10589  012752  2A12               	incf	___ftpack@exp,f,c
 10590  012754  0E01               	movlw	1
 10591  012756  260F               	addwf	___ftpack@arg,f,c
 10592  012758  0E00               	movlw	0
 10593  01275A  2210               	addwfc	___ftpack@arg+1,f,c
 10594  01275C  0E00               	movlw	0
 10595  01275E  2211               	addwfc	___ftpack@arg+2,f,c
 10596  012760  90D8               	bcf	status,0,c
 10597  012762  3211               	rrcf	___ftpack@arg+2,f,c
 10598  012764  3210               	rrcf	___ftpack@arg+1,f,c
 10599  012766  320F               	rrcf	___ftpack@arg,f,c
 10600  012768                     l7539:
 10601  012768  0E00               	movlw	0
 10602  01276A  140F               	andwf	___ftpack@arg,w,c
 10603  01276C  6E14               	movwf	??___ftpack& (0+255),c
 10604  01276E  0E00               	movlw	0
 10605  012770  1410               	andwf	___ftpack@arg+1,w,c
 10606  012772  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10607  012774  0EFF               	movlw	255
 10608  012776  1411               	andwf	___ftpack@arg+2,w,c
 10609  012778  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10610  01277A  5014               	movf	??___ftpack,w,c
 10611  01277C  1015               	iorwf	??___ftpack+1,w,c
 10612  01277E  1016               	iorwf	??___ftpack+2,w,c
 10613  012780  B4D8               	btfsc	status,2,c
 10614  012782  D006               	goto	l7543
 10615  012784  D7E6               	goto	l7535
 10616  012786                     l7541:
 10617  012786  0612               	decf	___ftpack@exp,f,c
 10618  012788  90D8               	bcf	status,0,c
 10619  01278A  360F               	rlcf	___ftpack@arg,f,c
 10620  01278C  3610               	rlcf	___ftpack@arg+1,f,c
 10621  01278E  3611               	rlcf	___ftpack@arg+2,f,c
 10622  012790                     l7543:
 10623  012790  AE10               	btfss	___ftpack@arg+1,7,c
 10624  012792  D7F9               	goto	l7541
 10625  012794  A012               	btfss	___ftpack@exp,0,c
 10626  012796  9E10               	bcf	___ftpack@arg+1,7,c
 10627  012798  90D8               	bcf	status,0,c
 10628  01279A  3212               	rrcf	___ftpack@exp,f,c
 10629  01279C  5012               	movf	___ftpack@exp,w,c
 10630  01279E  1211               	iorwf	___ftpack@arg+2,f,c
 10631  0127A0  5013               	movf	___ftpack@sign,w,c
 10632  0127A2  A4D8               	btfss	status,2,c
 10633  0127A4  8E11               	bsf	___ftpack@arg+2,7,c
 10634  0127A6  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10635  0127AA  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10636  0127AE  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10637  0127B2  0012               	return	
 10638  0127B4                     __end_of___ftpack:
 10639                           	opt stack 0
 10640                           tblptru	equ	0xFF8
 10641                           tblptrh	equ	0xFF7
 10642                           tblptrl	equ	0xFF6
 10643                           tablat	equ	0xFF5
 10644                           prodh	equ	0xFF4
 10645                           prodl	equ	0xFF3
 10646                           intcon	equ	0xFF2
 10647                           intcon2	equ	0xFF1
 10648                           intcon3	equ	0xFF0
 10649                           indf0	equ	0xFEF
 10650                           fsr0h	equ	0xFEA
 10651                           fsr0l	equ	0xFE9
 10652                           wreg	equ	0xFE8
 10653                           indf2	equ	0xFDF
 10654                           postinc2	equ	0xFDE
 10655                           postdec2	equ	0xFDD
 10656                           fsr2h	equ	0xFDA
 10657                           fsr2l	equ	0xFD9
 10658                           status	equ	0xFD8
 10659                           
 10660 ;; *************** function _ISR *****************
 10661 ;; Defined at:
 10662 ;;		line 79 in file "main.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;		None
 10665 ;; Auto vars:     Size  Location     Type
 10666 ;;		None
 10667 ;; Return value:  Size  Location     Type
 10668 ;;		None               void
 10669 ;; Registers used:
 10670 ;;		None
 10671 ;; Tracked objects:
 10672 ;;		On entry : 0/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10678 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10679 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10680 ;;Total ram usage:       14 bytes
 10681 ;; Hardware stack levels used:    1
 10682 ;; This function calls:
 10683 ;;		Nothing
 10684 ;; This function is called by:
 10685 ;;		Interrupt level 2
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	intcode
 10690  000008                     __pintcode:
 10691                           	opt stack 0
 10692  000008                     _ISR:
 10693                           	opt stack 24
 10694                           
 10695                           ;incstack = 0
 10696  000008  CFFA F001          	movff	pclath,??_ISR
 10697  00000C  CFFB F002          	movff	pclatu,??_ISR+1
 10698  000010  CFE9 F003          	movff	fsr0l,??_ISR+2
 10699  000014  CFEA F004          	movff	fsr0h,??_ISR+3
 10700  000018  CFE1 F005          	movff	fsr1l,??_ISR+4
 10701  00001C  CFE2 F006          	movff	fsr1h,??_ISR+5
 10702  000020  CFD9 F007          	movff	fsr2l,??_ISR+6
 10703  000024  CFDA F008          	movff	fsr2h,??_ISR+7
 10704  000028  CFF3 F009          	movff	prodl,??_ISR+8
 10705  00002C  CFF4 F00A          	movff	prodh,??_ISR+9
 10706  000030  CFF6 F00B          	movff	tblptrl,??_ISR+10
 10707  000034  CFF7 F00C          	movff	tblptrh,??_ISR+11
 10708  000038  CFF8 F00D          	movff	tblptru,??_ISR+12
 10709  00003C  CFF5 F00E          	movff	tablat,??_ISR+13
 10710                           
 10711                           ;main.c: 80: if (INTCON3bits.INT1IF == 1)
 10712  000040  B0F0               	btfsc	intcon3,0,c	;volatile
 10713                           
 10714                           ;main.c: 81: {
 10715                           ;main.c: 90: INTCON3bits.INT1IF = 0;
 10716  000042  90F0               	bcf	intcon3,0,c	;volatile
 10717  000044  C00E  FFF5         	movff	??_ISR+13,tablat
 10718  000048  C00D  FFF8         	movff	??_ISR+12,tblptru
 10719  00004C  C00C  FFF7         	movff	??_ISR+11,tblptrh
 10720  000050  C00B  FFF6         	movff	??_ISR+10,tblptrl
 10721  000054  C00A  FFF4         	movff	??_ISR+9,prodh
 10722  000058  C009  FFF3         	movff	??_ISR+8,prodl
 10723  00005C  C008  FFDA         	movff	??_ISR+7,fsr2h
 10724  000060  C007  FFD9         	movff	??_ISR+6,fsr2l
 10725  000064  C006  FFE2         	movff	??_ISR+5,fsr1h
 10726  000068  C005  FFE1         	movff	??_ISR+4,fsr1l
 10727  00006C  C004  FFEA         	movff	??_ISR+3,fsr0h
 10728  000070  C003  FFE9         	movff	??_ISR+2,fsr0l
 10729  000074  C002  FFFB         	movff	??_ISR+1,pclatu
 10730  000078  C001  FFFA         	movff	??_ISR,pclath
 10731  00007C  0011               	retfie		f
 10732  00007E                     __end_of_ISR:
 10733                           	opt stack 0
 10734                           pclatu	equ	0xFFB
 10735                           pclath	equ	0xFFA
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           intcon2	equ	0xFF1
 10744                           intcon3	equ	0xFF0
 10745                           indf0	equ	0xFEF
 10746                           fsr0h	equ	0xFEA
 10747                           fsr0l	equ	0xFE9
 10748                           wreg	equ	0xFE8
 10749                           fsr1h	equ	0xFE2
 10750                           fsr1l	equ	0xFE1
 10751                           indf2	equ	0xFDF
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           pclatu	equ	0xFFB
 10758                           pclath	equ	0xFFA
 10759                           tblptru	equ	0xFF8
 10760                           tblptrh	equ	0xFF7
 10761                           tblptrl	equ	0xFF6
 10762                           tablat	equ	0xFF5
 10763                           prodh	equ	0xFF4
 10764                           prodl	equ	0xFF3
 10765                           intcon	equ	0xFF2
 10766                           intcon2	equ	0xFF1
 10767                           intcon3	equ	0xFF0
 10768                           indf0	equ	0xFEF
 10769                           fsr0h	equ	0xFEA
 10770                           fsr0l	equ	0xFE9
 10771                           wreg	equ	0xFE8
 10772                           fsr1h	equ	0xFE2
 10773                           fsr1l	equ	0xFE1
 10774                           indf2	equ	0xFDF
 10775                           postinc2	equ	0xFDE
 10776                           postdec2	equ	0xFDD
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781                           	psect	rparam
 10782  0000                     pclatu	equ	0xFFB
 10783                           pclath	equ	0xFFA
 10784                           tblptru	equ	0xFF8
 10785                           tblptrh	equ	0xFF7
 10786                           tblptrl	equ	0xFF6
 10787                           tablat	equ	0xFF5
 10788                           prodh	equ	0xFF4
 10789                           prodl	equ	0xFF3
 10790                           intcon	equ	0xFF2
 10791                           intcon2	equ	0xFF1
 10792                           intcon3	equ	0xFF0
 10793                           indf0	equ	0xFEF
 10794                           fsr0h	equ	0xFEA
 10795                           fsr0l	equ	0xFE9
 10796                           wreg	equ	0xFE8
 10797                           fsr1h	equ	0xFE2
 10798                           fsr1l	equ	0xFE1
 10799                           indf2	equ	0xFDF
 10800                           postinc2	equ	0xFDE
 10801                           postdec2	equ	0xFDD
 10802                           fsr2h	equ	0xFDA
 10803                           fsr2l	equ	0xFD9
 10804                           status	equ	0xFD8


Data Sizes:
    Strings     303
    Constant    118
    Data        0
    BSS         0
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      81
    BANK0           160    105     105
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), encoder_move_degree@degree_done(COMRAM[3]), readDistance@a(COMRAM[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_30(CODE[10]), 
		 -> STR_29(CODE[12]), STR_28(CODE[6]), STR_26(CODE[5]), STR_23(CODE[5]), 
		 -> STR_20(CODE[5]), STR_17(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> showAccelerometerVal@buffer(BANK0[10]), showTempLight@buffer(BANK0[10]), showDistance@buffer(COMRAM[10]), MOTOR_turnLeft@buffer(COMRAM[10]), 
		 -> MOTOR_turnRight@buffer(COMRAM[10]), MOTOR_backward@buffer(COMRAM[10]), MOTOR_forward@buffer(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1874$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    lcdWriteStrC@s	PTR const unsigned char  size(2) Largest target is 20
		 -> showAccelerometerVal@buffer(BANK0[10]), STR_31(CODE[15]), showTempLight@buffer(BANK0[10]), showDistance@buffer(COMRAM[10]), 
		 -> STR_27(CODE[18]), MOTOR_turnLeft@buffer(COMRAM[10]), STR_25(CODE[6]), STR_24(CODE[16]), 
		 -> MOTOR_turnRight@buffer(COMRAM[10]), STR_22(CODE[6]), STR_21(CODE[17]), MOTOR_backward@buffer(COMRAM[10]), 
		 -> STR_19(CODE[6]), STR_18(CODE[17]), MOTOR_forward@buffer(COMRAM[10]), STR_16(CODE[6]), 
		 -> STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[17]), 
		 -> STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[20]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[16]), STR_2(CODE[9]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _showTempLight->_readTempF
    _readTempF->___ftdiv
    ___awtoft->___ftpack
    _readLight->___aldiv
    ___aldiv->___lmul
    _sprintf->_readTempF
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->___ftadd
    _single_axis_measure->_voltageToG
    _voltageToG->___ftdiv
    ___ftadd->___ftmul
    _read_accelerometer->_pointToVoltage
    _pointToVoltage->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftge->___lwtoft
    _lcdWriteStrC->_lcdWriteChar
    _lcdWriteChar->_writeByte
    _lcdSetPos->_lcdWriteCmd
    _lcdClear->_lcdWriteCmd
    _lcdInit->_lcdWriteCmd
    _lcdWriteCmd->_writeByte
    _writeByte->_writeDigit
    _MOTOR_init->___ftdiv
    ___ftdiv->___ftadd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_showAccelerometerVal
    _main->_showTempLight
    _showTempLight->_sprintf
    _readTempF->___ftdiv
    _showAccelerometerVal->_sprintf
    _sprintf->_single_axis_measure
    _single_axis_measure->_read_accelerometer
    _voltageToG->___ftdiv
    _read_accelerometer->_pointToVoltage
    _pointToVoltage->___ftdiv
    _MOTOR_init->___ftdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14     9      5  178451
                                             91 BANK0     14     9      5
                         _MOTOR_init
                        _configSense
                        _config_init
                            _lcdInit
                           _setServo
               _showAccelerometerVal
                      _showTempLight
 ---------------------------------------------------------------------------------
 (1) _showTempLight                                       11    11      0   78945
                                             80 BANK0     11    11      0
                           _lcdClear
                          _lcdSetPos
                       _lcdWriteStrC
                          _readLight
                          _readTempF
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _readTempF                                            8     5      3   16497
                                             72 COMRAM     3     0      3
                                              6 BANK0      5     5      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                               _read
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             5     2      3    2420
                                             22 COMRAM     5     2      3
                           ___ftpack
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (2) _readLight                                            6     4      2     935
                                             41 COMRAM     6     4      2
                            ___aldiv
                             ___lmul
                               _read
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     278
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     406
                                             26 COMRAM    15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _showAccelerometerVal                                11    11      0   94597
                                             80 BANK0     11    11      0
                           _lcdClear
                          _lcdSetPos
                       _lcdWriteChar
                       _lcdWriteStrC
                _single_axis_measure
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             54    47      7   57486
                                             30 BANK0     50    43      7
                          ___asftadd
                          ___asftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                          _readLight (ARG)
                          _readTempF (ARG)
                              _scale
                _single_axis_measure (ARG)
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   10749
                                             51 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   10470
                                             51 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2067
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1250
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1360
                                             21 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     409
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          16    10      6     552
                                             14 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2324
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     583
                                             28 COMRAM    10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     480
                                             14 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     411
                                             58 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     151
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___asftsub                                            5     0      5    4840
                                             69 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4617
                                             63 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___asftmul                                            5     0      5    5598
                                             51 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___asftadd                                            5     0      5    5295
                                             63 COMRAM     5     0      5
                            ___ftadd
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) _single_axis_measure                                 16    11      5   32868
                                             14 BANK0     16    11      5
                            ___ftadd
                            ___ftdiv
                             ___ftge
                           ___lwtoft
                 _read_accelerometer
                         _voltageToG
 ---------------------------------------------------------------------------------
 (3) _voltageToG                                           3     0      3    8355
                                             72 COMRAM     3     0      3
                            ___ftadd
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4422
                                             51 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (3) _read_accelerometer                                   5     2      3   12060
                                              9 BANK0      5     2      3
                     _pointToVoltage
                               _read
 ---------------------------------------------------------------------------------
 (3) _read                                                 6     4      2     205
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _pointToVoltage                                       6     3      3   11725
                                             72 COMRAM     3     0      3
                                              6 BANK0      3     3      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             5     2      3    2383
                                             22 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5375
                                             36 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    1090
                                             27 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcdWriteStrC                                         2     0      2    2001
                                             17 COMRAM     2     0      2
                       _lcdWriteChar
 ---------------------------------------------------------------------------------
 (3) _lcdWriteChar                                         1     1      0     154
                                             16 COMRAM     1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (2) _lcdSetPos                                            3     2      1    1578
                                             20 COMRAM     3     2      1
                        _lcdWriteCmd
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0     222
                        _lcdWriteCmd
 ---------------------------------------------------------------------------------
 (1) _setServo                                             9     7      2     244
                                             14 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              9     9      0     494
                                             20 COMRAM     9     9      0
                        _lcdWriteCmd
                         _writeDigit
 ---------------------------------------------------------------------------------
 (3) _lcdWriteCmd                                          4     4      0     222
                                             16 COMRAM     4     4      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0     132
                                             15 COMRAM     1     1      0
                         _writeDigit
 ---------------------------------------------------------------------------------
 (5) _writeDigit                                           1     1      0      88
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configSense                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MOTOR_init                                           0     0      0    3837
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3837
                                             63 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2157
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MOTOR_init
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _read (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
   _configSense
   _config_init
   _lcdInit
     _lcdWriteCmd
       _writeByte
         _writeDigit
     _writeDigit
   _setServo
   _showAccelerometerVal
     _lcdClear
       _lcdWriteCmd
         _writeByte
           _writeDigit
     _lcdSetPos
       _lcdWriteCmd
         _writeByte
           _writeDigit
     _lcdWriteChar
       _writeByte
         _writeDigit
     _lcdWriteStrC
       _lcdWriteChar
         _writeByte
           _writeDigit
     _single_axis_measure
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _read (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _read_accelerometer
         _pointToVoltage
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft
             ___ftpack
         _read
       _voltageToG
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
     _sprintf
       ___asftadd
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftmul
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _readLight (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         _read
       _readTempF (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _read
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _single_axis_measure (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
         _read_accelerometer
           _pointToVoltage
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft
               ___ftpack
           _read
         _voltageToG
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
   _showTempLight
     _lcdClear
       _lcdWriteCmd
         _writeByte
           _writeDigit
     _lcdSetPos
       _lcdWriteCmd
         _writeByte
           _writeDigit
     _lcdWriteStrC
       _lcdWriteChar
         _writeByte
           _writeDigit
     _readLight
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _read
     _readTempF
       ___awtoft
         ___ftpack
         _read (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _read (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _read
     _sprintf
       ___asftadd
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftmul
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _readLight (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         _read
       _readTempF (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _read
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _single_axis_measure (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _read (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
         _read_accelerometer
           _pointToVoltage
             ___ftdiv
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft
               ___ftpack
           _read
         _voltageToG
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _read (ARG)
           ___ftdiv
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               _read (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4B      51       1       85.3%
STACK                0      0       0       2        0.0%
DATA                 0      0      BA       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     69      69       5       65.6%
ABS                  0      0      BA       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BIGRAM             EAF      0       0      35        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Mon Jan 05 00:55:42 2015

            ??_read_accelerometer 004C                      ___asftadd@f2 0042  
                   ___asftadd@f1p 0040                                l91 2E44  
                              l92 2E46                                l85 2E26  
                              l87 2E30                                l89 2E3A  
                    ___awdiv@sign 001C               ___wmul@multiplicand 0021  
                    ___asftmul@f2 0036                      __CFG_CP0$OFF 000000  
                    ___asftsub@f2 0048                      lcdWriteCmd@i 0013  
                    lcdWriteCmd@n 0012                       __CFG_OSC$HS 000000  
                    ___ftadd@exp1 003F                      ___ftadd@exp2 003E  
                    ___ftadd@sign 003D                               l200 1B92  
                             l201 1B98                               l202 1B9C  
                             l203 1BA2                               l204 1BAC  
                             l205 1BB2                               l206 1BB6  
                             l207 1BBC                               l208 1BC4  
                             l209 1C6A                               l219 2A3A  
                             l192 1B66                               l193 1C3C  
                             l194 1B6A                               l195 1B70  
                             l196 1B7A                               l197 1B80  
                             l198 1B84                               l199 1B8A  
                             l900 1964                               l591 08B0  
                             l907 1A00                               l980 15E6  
                             l991 1696                               l976 15BA  
                             _PR2 000FCB                               _PR4 000F77  
                             _ISR 0008                      ___awmod@sign 0015  
                             wreg 000FE8                      __CFG_IESO$ON 000000  
                   ___asftmul@f1p 0034                     ___asftsub@f1p 0046  
                  ??_lcdWriteChar 0011                     lcdWriteChar@n 0011  
                  ??_lcdWriteStrC 0014                   ??_showTempLight 00B0  
            _showAccelerometerVal 172C                              ?_ISR 0001  
                    ___ftdiv@cntr 0060                      ___ftdiv@sign 0065  
                            l1000 16B2                              l1010 1F9E  
                            l1011 1FD0                              l1104 2954  
                            l1025 1DB0                              l1050 2F96  
                            l1114 2ABE                              l1019 1D46  
                            l6001 23E8                              l6005 23FE  
                            l6015 2906                              l6017 2912  
                            l5323 2E32                              l6027 2946  
                            l6019 2916                              l6043 2AB0  
                            l6035 2A7C                              l6061 2CDE  
                            l6037 2A88                              l5327 2E3C  
                            l5319 2E28                              l6063 2CE4  
                            l6071 2CF8                              l5511 1BCA  
                            l6039 2A8C                              l6065 2CEA  
                            l6073 2D12                              l5601 2702  
                            l8001 05D4                              l6067 2CF0  
                            l6083 2C14                              l5621 280E  
                            l5613 27E0                              l6079 2BEA  
                            l5623 2816                              l8031 0704  
                            l8023 06C4                              l8015 0638  
                            l5625 281A                              l5633 2838  
                            l5617 27FC                              l8201 0E50  
                            l8105 0A68                              l5803 1DA0  
                            l8123 0B1C                              l8019 0698  
                            l8107 0A76                              l8203 0E66  
                            l6621 24D8                              l5813 18E2  
                            l5805 1DAC                              l5581 26C2  
                            l5637 2846                              l5629 282E  
                            l8141 0BAE                              l8117 0AF8  
                            l8053 07A0                              l8061 0844  
                            l8037 0722                              l8045 075A  
                            l8205 0E9C                              l5663 2D58  
                            l5583 26CA                              l5575 26A8  
                            l8151 0C26                              l8063 0854  
                            l8039 073C                              l5903 2210  
              __CFG_WPFP$PAGE_127 000000                              l6609 24AE  
                            l5593 26EA                              l5585 26CE  
                            l5569 2688                              l8145 0BEE  
                            l8137 0B80                              l5921 2BA2  
                            l8401 2016                              l7531 272A  
                            l6643 2A26                              l5819 191E  
                            l5763 1CE0                              l5747 2F76  
                            l8163 0CC2                              l8083 08EC  
                            l8075 08B4                              l7541 2786  
                            l7533 2734                              l6645 2A30  
                            l7701 22B4                              l7613 16CE  
                            l7605 1686                              l5861 19FC  
                            l5853 19D8                              l5757 1CB6  
                            l5597 26F4                              l8173 0D0E  
                            l8181 0D3A                              l8165 0CD0  
                            l8157 0C70                              l8069 0872  
                            l5925 2BB6                              l8421 2086  
                            l7543 2790                              l7535 2752  
                            l7527 271C                              l7711 22E0  
                            l7623 1706                              l7607 1690  
                            l5839 1994                              l8183 0D46  
                            l8159 0C7E                              l8087 0940  
                            l5871 2156                              l8423 2096  
                            l7633 1F10                              l6585 245A  
                            l5945 2880                              l5849 19C8  
                            l5793 1D78                              l5777 1D1E  
                            l8097 0A3A                              l7539 2768  
                            l5955 28DC                              l7707 22D0  
                            l7571 15F4                              l5859 19F0  
                            l8195 0D9E                              l8099 0A4A  
                            l5883 21AC                              l8443 210A  
                            l6597 2484                              l5949 28B0  
                            l7565 15C8                              l5797 1D88  
                            l8189 0D6E                              l7901 0136  
                            l5885 21B8                              l5877 2186  
                            l7821 2C6A                              l7639 1F3C  
                            l5991 23C0                              l7751 1456  
                            l7911 01B6                              l5895 21EC  
                            l5887 21BC                              l7593 164A  
                            l5969 2344                              l7921 01F2  
                            l7913 01D4                              l7683 226E  
                            l7595 1654                              l7587 1628  
                            l5987 23B0                              l7827 2ADA  
                            l7923 0240                              l7907 016E  
                            l5899 21FA                              l7677 2248  
                            l7597 165C                              l5997 23D8  
                            l7829 2AE6                              l7773 0FF2  
                            l7917 01EA                              l7599 1664  
                            l5999 23E4                              l7759 152E  
                            l7791 1216                              l7783 10D8  
                            l7847 1A96                              l7697 22A4  
                            l7865 1E86                              l7929 0264  
                            l7881 003E                              l7779 10AE  
                            l7971 0468                              l7963 0402  
                            l7955 03A2                              l7939 02CE  
                            l7883 005C                              l7875 0018  
                            l7797 12D2                              l7893 00AE  
                            l7983 04FC                              l7967 042A  
                            l7887 006A                              l7995 0576  
                            l7979 04D6                              STR_1 FF8E  
                            STR_2 FFE4                              STR_3 FF9F  
                            STR_4 FF4A                              STR_5 FF17  
                            STR_6 FF5B                              STR_7 FECF  
                            u3451 1C9C                              u3540 18C4  
                            u3471 1CC6                              u3560 1900  
                            u3545 18BA                              u6130 0322  
                            u6115 02A6                              u3635 213A  
                            u3565 18F6                              u3645 216E  
                            u3910 2C0C                              u6135 0316  
                            u3920 2C36                              u5601 1598  
                            u3761 232A                              u3780 2362  
                            u3917 2C02                              u3927 2C2C  
                            u5801 1EF4                              u3785 235A  
                            u7307 247A                              u5821 1F20  
                            u7317 24A4                              u7237 2072  
                            u7327 24CE                              u5591 1584  
                            u7247 20F6                              u7337 2D4E  
                            u7257 2FC8                              u7347 2D5A  
                            u7267 2A32                              u5851 2232  
                            u6395 0ACC                              u7277 2A56  
                            u7287 2426                              u5871 2258  
                            u7297 2450                     lcdWriteStrC@s 0012  
                   __CFG_FCMEN$ON 000000                              _main 2006  
                    ___ftpack@arg 000F                              _read 1B54  
                    ___ftpack@exp 0012                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
                            prodh 000FF4                              prodl 000FF3  
                            start 007E                    setServo@i_1178 0012  
                    _sprintf$2562 008B                      _sprintf$1885 008E  
     __end_of_single_axis_measure 1EE4                      ___ftmul@cntr 0032  
                    ___ftmul@sign 0033                    setServo@degree 000F  
                           ??_ISR 0001                      ___fttol@exp1 0049  
                    ___fttol@lval 0045                     __CFG_PLLDIV$1 000000  
                     ?_MOTOR_init 0001                   __end_of___aldiv 2222  
                           ?_main 00BB                             ?_read 000F  
                 __end_of___awdiv 270C                   __end_of___ftadd 172C  
                           STR_11 FF28                             STR_12 FEF5  
                           STR_21 FF7D                             STR_13 FF39  
                           STR_30 FFDA                             STR_14 FF06  
                           STR_31 FFBF                             STR_15 FF6C  
                           STR_32 FFED                             STR_24 FFAF  
                           STR_33 FFED                             STR_17 FFF9  
                           STR_34 FFED                             STR_27 FEE3  
                           STR_28 FFF3                   __end_of___awmod 2850  
                           STR_29 FFCE                   __end_of___ftdiv 2006  
                 __end_of___ftneg 2FA4                   __end_of___lldiv 2966  
                 __end_of___ftmul 231A                   ___awdiv@divisor 0018  
                 __end_of___llmod 2AD0                   __end_of___ftsub 2EFA  
                 __end_of___fttol 2410               showTempLight@buffer 00B1  
                 ___awdiv@counter 001B                             _TMR1H 000FCF  
                           _TMR1L 000FCE               ___lmul@multiplicand 0013  
                    ___lltoft@exp 001F                   __end_of_lcdInit 24F2  
           ?_showAccelerometerVal 0001                     ___awtoft@sign 001B  
                 __end_of_dpowers FE81                             _scale 0EAA  
                 __end_of_isdigit 2F7E                     ___ftpack@sign 0013  
                           main@i 00C1                             main@j 00C5  
                           tablat 000FF5                             status 000FD8  
                 __end_of_sprintf 0EAA           __CFG_DSWDTOSC$INTOSCREF 000000  
                 __initialization 2FD6                      __end_of_main 211A  
                    __end_of_read 1C8C                            ??_main 00C0  
                   ___fttol@sign1 0044                            ??_read 0011  
                   __activetblptr 000003              __size_of__tdiv_to_l_ 0136  
                     read@channel 000F                  ___llmod@dividend 001D  
                          ?_scale 0034                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _CCPR4L 000F13  
                          _CCPR5L 000F10                            _EECON2 000FA7  
                          _ANCON0 000F48                            _ANCON1 000F49  
                ___awdiv@dividend 0016                  __end_of___awtoft 2C92  
                __end_of___ftpack 27B4              single_axis_measure@i 0079  
                __end_of___lltoft 2B34                    __CFG_WDTEN$OFF 000000  
                __end_of___lwtoft 2F54                            _RPINR1 000EE1  
                  __CFG_WPCFG$OFF 000000               __size_of_MOTOR_init 00B4  
                  __CFG_WPDIS$OFF 000000                  __end_of_lcdClear 2FD6  
            __size_of_lcdWriteCmd 0044                    __CFG_XINST$OFF 000000  
                __end_of__powers_ FECF                      _CCPTMRS1bits 000F51  
            __size_of_configSense 0006                            ___ftge 2850  
                          ___lmul 2B92                         ??___aldiv 0023  
                          ___wmul 2E50                         ??___awdiv 001A  
            __end_of_lcdWriteChar 2FCE                         ??___ftadd 003A  
            __size_of_config_init 003A                         ??___awmod 0013  
                       ??___ftdiv 0046                         ??___ftneg 0012  
                       ??___lldiv 0017                         ??___ftmul 002B  
                       ??___llmod 0025                         ??___ftsub 0046  
                       ??___fttol 003F              __end_of_lcdWriteStrC 2C3E  
                          _fround 12FC                   __CFG_CLKOEC$OFF 000000  
                ___awdiv@quotient 001D                   ___awmod@divisor 0011  
                  sprintf@vd_1887 0096                         ??_lcdInit 0015  
                 ___awmod@counter 0014               pointToVoltage@point 0049  
           ___ftmul@f3_as_product 002F                  __end_of_setServo 2A66  
                       ??_isdigit 000F  _encoder_signal_to_turn_reduction 004F  
                    __mediumconst FE58            ??_showAccelerometerVal 00B0  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 0085  
                 __CFG_DSBOREN$ON 000000                __size_of___asftadd 003C  
              __size_of___asftmul 003C                __size_of___asftsub 003C  
            __CFG_LS48MHZ$SYS48X8 000000                        __accesstop 0060  
         __end_of__initialization 2FD6                        ___ftadd@f1 0034  
                      ___ftadd@f2 0037                        ___ftge@ff1 001C  
                      ___ftge@ff2 001F                        ___ftdiv@f1 0040  
                      ___ftdiv@f2 0043                        ___ftdiv@f3 0061  
                      ___ftneg@f1 000F                        ___awtoft@c 0017  
            __CFG_WPEND$PAGE_WPFP 000000                        ___ftmul@f1 0025  
                      ___ftmul@f2 0028                        ___ftsub@f1 0040  
                      ___ftsub@f2 0043                        ___fttol@f1 003B  
                  __pcstackCOMRAM 0001                        ___lltoft@c 0017  
                   __end_of_scale 12FC      read_accelerometer@axis_point 006C  
                 __CFG_DSWDTPS$G2 000000                        ___lwtoft@c 0017  
                      __div_to_l_ 18A6                __size_of_lcdSetPos 0044  
                 __div_to_l_@exp1 001E                   __div_to_l_@cntr 001D  
                    sprintf@integ 009C                           ??_scale 0037  
                 __div_to_l_@quot 0019                      sprintf@width 00A8  
      showAccelerometerVal@buffer 00B1                        __pnvCOMRAM 004C  
              __size_of_readLight 0080                __size_of_readTempF 0142  
                   __div_to_l_@f1 000F                     __div_to_l_@f2 0012  
                         ?___ftge 001C                           ?___lmul 000F  
     __size_of_read_accelerometer 002E                           ?___wmul 001F  
               __end_of___asftadd 2E14                           ?_fround 0034  
                  ___lmul@product 0017                 __end_of___asftmul 2DD8  
               __end_of___asftsub 2D9C                         ?___awtoft 0017  
                       ?___ftpack 000F                      ??_MOTOR_init 0049  
                       ?___lltoft 0017                         ?___lwtoft 0017  
                         _GO_DONE 007E11                         ?_lcdClear 0001  
           __end_of_showTempLight 25A8                __size_of_writeByte 0016  
           __size_of_lcdWriteChar 0014                __end_of_MOTOR_init 265C  
               __end_of_lcdSetPos 2D1C             __size_of_lcdWriteStrC 0056  
               __end_of__npowers_ FEA8                           __Hparam 0000  
                       ?_setServo 000F                        _scale$2561 0037  
                         __Lparam 0000      single_axis_measure@axis_read 0073  
                         ___aldiv 211A       single_axis_measure@axis_sum 007B  
                 __size_of___ftge 0090                           ___awdiv 265C  
                 __size_of___lmul 0056                           ___ftadd 1574  
                         ___awmod 27B4                           ___ftdiv 1EE4  
                         ___ftneg 2F7E                           ___lldiv 28E0  
                 __size_of___wmul 003A                           ___ftmul 2222  
                         ___llmod 2A66                           ___ftsub 2EC4  
                         ___fttol 231A           __size_of_pointToVoltage 005E  
                 __CFG_STVREN$OFF 000000                 voltageToG@voltage 0049  
                         __pcinit 2FD6                        ??___awtoft 001A  
                      ??___ftpack 0014                   __size_of_fround 0278  
                         __ramtop 0F00                           _lcdInit 2410  
                      ??___lltoft 001B      __size_of_single_axis_measure 0122  
                         __ptext0 2006                           __ptext1 24F2  
                         __ptext2 1A12                           __ptext3 2C3E  
                         __ptext4 2966                           __ptext5 2B92  
                         __ptext6 211A                           __ptext7 172C  
                         __ptext8 0000                           __ptext9 0EAA  
                      ??___lwtoft 001A      single_axis_measure@iteration 0070  
                    __size_of_ISR 0076                         _T1CONbits 000FCD  
                     ?__div_to_l_ 000F                 __end_of_readLight 29E6  
                         _dpowers FE59                 __end_of_readTempF 1B54  
                       _T2CONbits 000FCA                           _isdigit 2F54  
                ___awmod@dividend 000F           single_axis_measure@axis 006E  
                ___aldiv@dividend 001B                         _T4CONbits 000F76  
            pointToVoltage@fPoint 0066                        ??_lcdClear 0015  
                         _sprintf 0000                      _lcdWriteChar 2FBA  
            end_of_initialization 2FD6                      _lcdWriteStrC 2BE8  
                 ___lldiv@divisor 0013                        ??_setServo 0011  
                 ___lldiv@counter 001C                  ___aldiv@quotient 0026  
                         postdec2 000FDD                           postinc2 000FDE  
                  __tdiv_to_l_@f1 000F                    __tdiv_to_l_@f2 0012  
                      lcdSetPos@p 0016                     ??__tdiv_to_l_ 0015  
                      lcdSetPos@x 0017                        lcdSetPos@y 0015  
                       _PORTBbits 000F81                         _PORTEbits 000F84  
               __end_of_writeByte 2FBA                  __CFG_CPUDIV$OSC1 000000  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                       _TRISEbits 000F96                 __CFG_SOSCSEL$HIGH 000000  
                   ??_lcdWriteCmd 0011                       ___ftdiv@exp 0064  
                __CFG_IOL1WAY$OFF 000000                     ??_configSense 000F  
                     _CCP4CONbits 000F12               __size_of__div_to_l_ 016C  
                     _CCP5CONbits 000F0F                     ??_config_init 000F  
                      _voltageToG 2C92               __CFG_MSSP7B_EN$MSK7 000000  
                     ___ftmul@exp 002E                        _writeDigit 2E14  
                  __end_of___ftge 28E0                    __end_of___lmul 2BE8  
                  __end_of___wmul 2E8A                    __end_of_fround 1574  
                __CFG_DSWDTEN$OFF 000000               start_initialization 2FD6  
                     __end_of_ISR 007E               __end_of__tdiv_to_l_ 1DC2  
   __size_of_showAccelerometerVal 017A                   ___llmod@divisor 0021  
                 ___llmod@counter 0026                        readLight@j 002C  
                      readTempF@i 0066               __end_of_lcdWriteCmd 2D60  
                        ??___ftge 0022                          ??___lmul 0017  
                        ??___wmul 0023                    _pointToVoltage 2B34  
               __CFG_ADCSEL$BIT12 000000               __end_of_configSense 2FE2  
                        ??_fround 0037               __end_of_config_init 2EC4  
                      fround@prec 003D                 __size_of___awtoft 0054  
               __size_of___ftpack 00A8                         ___asftadd 2DD8  
                       ___asftmul 2D9C                         ___asftsub 2D60  
               __size_of___lltoft 0064                 __size_of___lwtoft 002C  
                   __pcstackBANK0 0060               __end_of__stringdata FFFE  
                    _isdigit$2160 0010                 __size_of_lcdClear 0008  
                     sprintf@_val 009F                       sprintf@flag 00A6  
             _single_axis_measure 1DC2                       sprintf@fval 00AA  
                     sprintf@prec 00AD        __end_of_read_accelerometer 2F28  
                     ?_voltageToG 0049            __end_of_pointToVoltage 2B92  
                       __pintcode 0008                     __pmediumconst FE58  
                        ?___aldiv 001B                 __size_of_setServo 0080  
                        ?___awdiv 0016                          ?___ftadd 0034  
                        ?___awmod 000F                          ?___ftdiv 0040  
                        ?___ftneg 000F                       ?_writeDigit 0001  
                       _lcdSetPos 2CD8                          ?___lldiv 000F  
                        ?___ftmul 0025                          ?___llmod 001D  
                        ?___ftsub 0040                         __npowers_ FE81  
                        ?___fttol 003B              ?_single_axis_measure 006E  
                        ?_lcdInit 0001                       __tdiv_to_l_ 1C8C  
                    ??__div_to_l_ 0015                        ?___asftadd 0040  
                        ?_isdigit 0001                        ?___asftmul 0034  
                      ?___asftsub 0046              __CFG_RTCOSC$T1OSCREF 000000  
                       _readLight 2966                         _readTempF 1A12  
                        ?_sprintf 007E                    __size_of_scale 0452  
                 ___aldiv@divisor 001F                   ___aldiv@counter 0024  
                  ___wmul@product 0023                          _LATBbits 000F8A  
                        _LATCbits 000F8B                       _lcdWriteCmd 2D1C  
                        _LATDbits 000F8C                          _LATEbits 000F8D  
                     _configSense 2FDC                       _config_init 2E8A  
              __end_of__div_to_l_ 1A12                       writeDigit@n 000F  
                 ?_pointToVoltage 0049                  __CFG_WDTPS$32768 000000  
                      ?_lcdSetPos 0015             ??_single_axis_measure 004C  
          __size_of_showTempLight 00B6                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                       __stringdata FECF  
                       main@i_233 00C3                         main@j_232 00C7  
               ___wmul@multiplier 001F                 __CFG_CFGPLLEN$OFF 000000  
             __size_of_voltageToG 0046                        ?_readLight 002A  
                      ?_readTempF 0049                         _writeByte 2FA4  
               ___lmul@multiplier 000F                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0               __size_of_writeDigit 003C  
 single_axis_measure@medium_value 0076                         read@value 0013  
                        __Hrparam 0000                          __Lrparam 0000  
                __size_of___aldiv 0108                  __size_of___awdiv 00B0  
                __size_of___ftadd 01B8                  __size_of___awmod 009C  
                __size_of___ftdiv 0122                  __size_of___ftneg 0026  
                __size_of___lldiv 0086                  __size_of___ftmul 00F8  
                __size_of___llmod 006A                  __size_of___ftsub 0036  
                __size_of___fttol 00F6                          ___awtoft 2C3E  
                        ___ftpack 270C                       _fround$2560 0037  
                     _fround$2559 003A                          ___lltoft 2AD0  
                        ___lwtoft 2F28                  __size_of_lcdInit 00E2  
                   readTempF@temp 0068                       ??___asftadd 0045  
                      sprintf@exp 00A4                       ??___asftmul 0039  
                     ??___asftsub 004B                  __size_of_isdigit 002A  
                        _lcdClear 2FCE                          __ptext10 2F54  
                        __ptext11 12FC                          __ptext20 231A  
                        __ptext12 2E50                          __ptext21 2F7E  
                        __ptext13 27B4                          __ptext30 1B54  
                        __ptext22 2D60                          __ptext14 265C  
                        __ptext31 2B34                          __ptext23 2EC4  
                        __ptext15 1C8C                          __ptext40 2410  
                        __ptext32 2F28                          __ptext24 2D9C  
                        __ptext16 18A6                          __ptext41 2D1C  
                        __ptext33 2222                          __ptext25 2DD8  
                        __ptext17 2AD0                          __ptext42 2FA4  
                        __ptext34 2850                          __ptext26 1DC2  
                        __ptext18 2A66                          __ptext43 2E14  
                        __ptext35 2BE8                          __ptext27 2C92  
                        __ptext19 28E0                          __ptext44 2E8A  
                        __ptext36 2FBA                          __ptext28 1574  
                        __ptext45 2FDC                          __ptext37 2CD8  
                        __ptext29 2EFA                          __ptext46 25A8  
                        __ptext38 2FCE                          __ptext47 1EE4  
                        __ptext39 29E6                          __ptext48 270C  
          read_accelerometer@axis 0069                        ?_writeByte 0001  
                        __powers_ FEA8                  __size_of_sprintf 0EAA  
                       setServo@i 0016                         setServo@j 0014  
                   _showTempLight 24F2                     __size_of_main 0114  
                   __size_of_read 0138                          _setServo 29E6  
                        lcdInit@i 0016                      lcdInit@i_487 0018  
                    lcdInit@i_488 001A                      lcdInit@i_489 001C  
    __end_of_showAccelerometerVal 18A6                        writeByte@n 0010  
                     ??_lcdSetPos 0016                          main@argc 00BB  
                        main@argv 00BD                        _INTCONbits 000FF2  
                     ??_readLight 002C                          isdigit@c 0011  
                     ??_readTempF 004C                          scale@scl 003A  
                        intlevel2 0000                         sprintf@ap 009A  
                __tdiv_to_l_@exp1 001D                    ?_showTempLight 0001  
                       sprintf@vd 0092                  __tdiv_to_l_@cntr 001C  
                       sprintf@sp 007E                  __tdiv_to_l_@quot 0018  
                ___lldiv@dividend 000F                 _degree_per_signal 004C  
                    ??_voltageToG 004C                      ??_writeDigit 000F  
                    ?__tdiv_to_l_ 000F                        _MOTOR_init 25A8  
              _read_accelerometer 2EFA                          sprintf@c 00AF  
                        sprintf@f 0080                        _PPSCONbits 000EBF  
                ___lldiv@quotient 0018                      ___aldiv@sign 0025  
             ?_read_accelerometer 0069                       ??_writeByte 0010  
              __end_of_voltageToG 2CD8                     ?_lcdWriteChar 0001  
                   ?_lcdWriteStrC 0012                __end_of_writeDigit 2E50  
                ??_pointToVoltage 004C                      ?_lcdWriteCmd 0001  
                    ?_configSense 0001                      ?_config_init 0001  
