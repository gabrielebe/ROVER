

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Fri Nov 28 13:10:42 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000E                     	;# 
    31  000E                     	;# 
    32  000F                     	;# 
    33  0010                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0015                     	;# 
    37  0015                     	;# 
    38  0016                     	;# 
    39  0017                     	;# 
    40  0018                     	;# 
    41  0019                     	;# 
    42  001A                     	;# 
    43  001F                     	;# 
    44  0081                     	;# 
    45  0085                     	;# 
    46  0086                     	;# 
    47  008C                     	;# 
    48  008E                     	;# 
    49  0092                     	;# 
    50  0098                     	;# 
    51  0099                     	;# 
    52  009A                     	;# 
    53  009B                     	;# 
    54  009C                     	;# 
    55  009D                     	;# 
    56  009F                     	;# 
    57  000B                     _INTCONbits	set	11
    58  000C                     _PIR1bits	set	12
    59  001A                     _RCREG	set	26
    60  0018                     _RCSTAbits	set	24
    61  0019                     _TXREG	set	25
    62  008C                     _PIE1bits	set	140
    63  0099                     _SPBRG	set	153
    64  0086                     _TRISBbits	set	134
    65  0098                     _TXSTAbits	set	152
    66                           
    67                           	psect	strings
    68  006E                     __pstrings:	
    69  006E                     stringtab:	
    70  006E                     __stringtab:	
    71                           
    72                           ;	String table - string pointers are 1 byte each
    73  006E  1BFF               	btfsc	btemp+1,7
    74  006F  2878               	ljmp	stringcode
    75  0070  1383               	bcf	3,7
    76  0071  187F               	btfsc	btemp+1,0
    77  0072  1783               	bsf	3,7
    78  0073  0800               	movf	0,w
    79  0074  0A84               	incf	4,f
    80  0075  1903               	skipnz
    81  0076  0AFF               	incf	btemp+1,f
    82  0077  0008               	return
    83  0078                     stringcode:	
    84  0078                     stringdir:	
    85  0078  3000               	movlw	high stringdir
    86  0079  008A               	movwf	10
    87  007A  0804               	movf	4,w
    88  007B  0A84               	incf	4,f
    89  007C  0782               	addwf	2,f
    90  007D                     __stringbase:	
    91  007D  3400               	retlw	0
    92  007E                     __end_of__stringtab:	
    93  007E                     __stringdata:	
    94  007E                     STR_1:	
    95  007E  3443               	retlw	67	;'C'
    96  007F  346F               	retlw	111	;'o'
    97  0080  346D               	retlw	109	;'m'
    98  0081  3475               	retlw	117	;'u'
    99  0082  346E               	retlw	110	;'n'
   100  0083  3469               	retlw	105	;'i'
   101  0084  3463               	retlw	99	;'c'
   102  0085  3461               	retlw	97	;'a'
   103  0086  3474               	retlw	116	;'t'
   104  0087  3469               	retlw	105	;'i'
   105  0088  346F               	retlw	111	;'o'
   106  0089  346E               	retlw	110	;'n'
   107  008A  3420               	retlw	32	;' '
   108  008B  3469               	retlw	105	;'i'
   109  008C  3473               	retlw	115	;'s'
   110  008D  3420               	retlw	32	;' '
   111  008E  346F               	retlw	111	;'o'
   112  008F  346B               	retlw	107	;'k'
   113  0090  340A               	retlw	10
   114  0091  3400               	retlw	0
   115  0092                     __end_of__stringdata:	
   116                           
   117                           ; #config settings
   118  0000                     
   119                           	psect	cinit
   120  0011                     start_initialization:	
   121  0011                     __initialization:	
   122                           
   123                           ; Clear objects allocated to COMMON
   124  0011  01FB               	clrf	__pbssCOMMON& (0+127)
   125  0012  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   126                           
   127                           ; Clear objects allocated to BANK0
   128  0013  1383               	bcf	3,7	;select IRP bank0
   129  0014  3020               	movlw	low __pbssBANK0
   130  0015  0084               	movwf	4
   131  0016  3034               	movlw	low (__pbssBANK0+20)
   132  0017  210D               	fcall	clear_ram0
   133  0018                     end_of_initialization:	
   134                           ;End of C runtime variable initialization code
   135                           
   136  0018                     __end_of__initialization:	
   137  0018  0183               	clrf	3
   138  0019  28CC               	ljmp	_main	;jump to C main() function
   139                           
   140                           	psect	bssCOMMON
   141  007B                     __pbssCOMMON:	
   142  007B                     _rcindex:	
   143  007B                     	ds	1
   144  007C                     _t:	
   145  007C                     	ds	1
   146                           
   147                           	psect	bssBANK0
   148  0020                     __pbssBANK0:	
   149  0020                     _rcbuf:	
   150  0020                     	ds	20
   151                           
   152                           	psect	clrtext
   153  010D                     clear_ram0:	
   154                           ;	Called with FSR containing the base address, and
   155                           ;	W with the last address+1
   156                           
   157  010D  0064               	clrwdt	;clear the watchdog before getting into this loop
   158  010E                     clrloop0:	
   159  010E  0180               	clrf	0	;clear RAM location pointed to by FSR
   160  010F  0A84               	incf	4,f	;increment pointer
   161  0110  0604               	xorwf	4,w	;XOR with final address
   162  0111  1903               	btfsc	3,2	;have we reached the end yet?
   163  0112  3400               	retlw	0	;all done for this memory range, return
   164  0113  0604               	xorwf	4,w	;XOR again to restore value
   165  0114  290E               	goto	clrloop0	;do the next byte
   166                           
   167                           	psect	cstackCOMMON
   168  0070                     __pcstackCOMMON:	
   169  0070                     ?_USART_init:	
   170  0070                     ?_sendByte:	
   171                           ; 0 bytes @ 0x0
   172                           
   173  0070                     ?_ISR:	
   174                           ; 0 bytes @ 0x0
   175                           
   176  0070                     ?i1_sendByte:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     ??i1_sendByte:	
   180                           ; 0 bytes @ 0x0
   181                           
   182  0070                     i1sendByte@Byte:	
   183                           ; 0 bytes @ 0x0
   184                           
   185                           
   186                           ; 1 bytes @ 0x0
   187  0070                     	ds	1
   188  0071                     ?i1_sendString:	
   189  0071                     i1sendString@s:	
   190                           ; 0 bytes @ 0x1
   191                           
   192                           
   193                           ; 2 bytes @ 0x1
   194  0071                     	ds	2
   195  0073                     ??i1_sendString:	
   196                           
   197                           ; 0 bytes @ 0x3
   198  0073                     	ds	1
   199  0074                     ??_ISR:	
   200                           
   201                           ; 0 bytes @ 0x4
   202  0074                     	ds	5
   203  0079                     ISR@i:	
   204                           
   205                           ; 2 bytes @ 0x9
   206  0079                     	ds	2
   207                           
   208                           	psect	cstackBANK0
   209  0034                     __pcstackBANK0:	
   210  0034                     ??_USART_init:	
   211  0034                     ??_sendByte:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0034                     sendByte@Byte:	
   215                           ; 0 bytes @ 0x0
   216                           
   217                           
   218                           ; 1 bytes @ 0x0
   219  0034                     	ds	1
   220  0035                     ?_sendString:	
   221  0035                     sendString@s:	
   222                           ; 0 bytes @ 0x1
   223                           
   224                           
   225                           ; 2 bytes @ 0x1
   226  0035                     	ds	2
   227  0037                     ??_sendString:	
   228                           
   229                           ; 0 bytes @ 0x3
   230  0037                     	ds	1
   231  0038                     ?_main:	
   232  0038                     main@argc:	
   233                           ; 2 bytes @ 0x4
   234                           
   235                           
   236                           ; 2 bytes @ 0x4
   237  0038                     	ds	2
   238  003A                     main@argv:	
   239                           
   240                           ; 2 bytes @ 0x6
   241  003A                     	ds	2
   242  003C                     ??_main:	
   243                           
   244                           ; 0 bytes @ 0x8
   245  003C                     	ds	3
   246                           
   247                           	psect	maintext
   248  00CC                     __pmaintext:	
   249 ;;
   250 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   251 ;;
   252 ;; *************** function _main *****************
   253 ;; Defined at:
   254 ;;		line 44 in file "joystickMain.c"
   255 ;; Parameters:    Size  Location     Type
   256 ;;  argc            2    4[BANK0 ] int 
   257 ;;  argv            2    6[BANK0 ] PTR PTR unsigned char 
   258 ;; Auto vars:     Size  Location     Type
   259 ;;		None
   260 ;; Return value:  Size  Location     Type
   261 ;;                  2    4[BANK0 ] int 
   262 ;; Registers used:
   263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   264 ;; Tracked objects:
   265 ;;		On entry : 17F/0
   266 ;;		On exit  : 0/0
   267 ;;		Unchanged: 0/0
   268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   269 ;;      Params:         0       4       0       0
   270 ;;      Locals:         0       0       0       0
   271 ;;      Temps:          0       3       0       0
   272 ;;      Totals:         0       7       0       0
   273 ;;Total ram usage:        7 bytes
   274 ;; Hardware stack levels required when called:    5
   275 ;; This function calls:
   276 ;;		_USART_init
   277 ;;		_sendString
   278 ;; This function is called by:
   279 ;;		Startup code after reset
   280 ;; This function uses a non-reentrant model
   281 ;;
   282                           
   283                           
   284                           ;psect for function _main
   285  00CC                     _main:	
   286                           
   287                           ;joystickMain.c: 45: USART_init();
   288                           
   289                           ;incstack = 0
   290                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   291  00CC  20E6               	fcall	_USART_init
   292                           
   293                           ;joystickMain.c: 46: _delay((unsigned long)((50)*(16000000/4000.0)));
   294  00CD  3002               	movlw	2
   295  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   296  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   297  00D0  00BE               	movwf	??_main+2
   298  00D1  3004               	movlw	4
   299  00D2  00BD               	movwf	??_main+1
   300  00D3  30BA               	movlw	186
   301  00D4  00BC               	movwf	??_main
   302  00D5                     u197:	
   303  00D5  0BBC               	decfsz	??_main,f
   304  00D6  28D5               	goto	u197
   305  00D7  0BBD               	decfsz	??_main+1,f
   306  00D8  28D5               	goto	u197
   307  00D9  0BBE               	decfsz	??_main+2,f
   308  00DA  28D5               	goto	u197
   309  00DB  0000               	nop
   310                           
   311                           ;joystickMain.c: 47: sendString("Comunication is ok\n");
   312  00DC  3001               	movlw	low (STR_1-__stringbase)
   313  00DD  1283               	bcf	3,5	;RP0=0, select bank0
   314  00DE  1303               	bcf	3,6	;RP1=0, select bank0
   315  00DF  00B5               	movwf	sendString@s
   316  00E0  3080               	movlw	128
   317  00E1  00B6               	movwf	sendString@s+1
   318  00E2  2092               	fcall	_sendString
   319                           
   320                           ;joystickMain.c: 48: INTCONbits.PEIE = 1;
   321  00E3  170B               	bsf	11,6	;volatile
   322                           
   323                           ;joystickMain.c: 49: INTCONbits.GIE = 1;
   324  00E4  178B               	bsf	11,7	;volatile
   325  00E5                     l33:	
   326                           ;joystickMain.c: 51: while(1)
   327                           
   328                           
   329                           ;joystickMain.c: 52: {
   330  00E5  28E5               	goto	l33
   331  00E6                     __end_of_main:	
   332                           ;joystickMain.c: 54: }
   333                           ;joystickMain.c: 55: return (0);
   334                           ;	Return value of _main is never used
   335                           
   336                           
   337                           	psect	text1
   338  0092                     __ptext1:	
   339 ;; *************** function _sendString *****************
   340 ;; Defined at:
   341 ;;		line 76 in file "joystickMain.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;  s               2    1[BANK0 ] PTR unsigned char 
   344 ;;		 -> rcbuf(20), STR_1(20), 
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;		None               void
   349 ;; Registers used:
   350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   356 ;;      Params:         0       2       0       0
   357 ;;      Locals:         0       0       0       0
   358 ;;      Temps:          0       1       0       0
   359 ;;      Totals:         0       3       0       0
   360 ;;Total ram usage:        3 bytes
   361 ;; Hardware stack levels used:    1
   362 ;; Hardware stack levels required when called:    4
   363 ;; This function calls:
   364 ;;		_sendByte
   365 ;; This function is called by:
   366 ;;		_main
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370                           
   371                           ;psect for function _sendString
   372  0092                     _sendString:	
   373  0092                     l622:	
   374                           ;joystickMain.c: 77: while (*s) {
   375                           
   376                           ;incstack = 0
   377                           ; Regs used in _sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   378                           
   379  0092  1283               	bcf	3,5	;RP0=0, select bank0
   380  0093  1303               	bcf	3,6	;RP1=0, select bank0
   381  0094  0836               	movf	sendString@s+1,w
   382  0095  00FF               	movwf	127
   383  0096  0835               	movf	sendString@s,w
   384  0097  0084               	movwf	4
   385  0098  206E               	fcall	stringtab
   386  0099  3800               	iorlw	0
   387  009A  1903               	btfsc	3,2
   388  009B  0008               	return
   389                           
   390                           ;joystickMain.c: 78: sendByte(*s);
   391  009C  1283               	bcf	3,5	;RP0=0, select bank0
   392  009D  1303               	bcf	3,6	;RP1=0, select bank0
   393  009E  0836               	movf	sendString@s+1,w
   394  009F  00FF               	movwf	127
   395  00A0  0835               	movf	sendString@s,w
   396  00A1  0084               	movwf	4
   397  00A2  206E               	fcall	stringtab
   398  00A3  20F7               	fcall	_sendByte
   399                           
   400                           ;joystickMain.c: 79: _delay((unsigned long)((10)*(16000000/4000000.0)));
   401  00A4  300D               	movlw	13
   402  00A5  1283               	bcf	3,5	;RP0=0, select bank0
   403  00A6  1303               	bcf	3,6	;RP1=0, select bank0
   404  00A7  00B7               	movwf	??_sendString
   405  00A8                     u207:	
   406  00A8  0BB7               	decfsz	??_sendString,f
   407  00A9  28A8               	goto	u207
   408                           
   409                           ;joystickMain.c: 80: s++;
   410  00AA  3001               	movlw	1
   411  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   412  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   413  00AD  07B5               	addwf	sendString@s,f
   414  00AE  1803               	skipnc
   415  00AF  0AB6               	incf	sendString@s+1,f
   416  00B0  2892               	goto	l622
   417  00B1                     __end_of_sendString:	
   418                           
   419                           	psect	text2
   420  00F7                     __ptext2:	
   421 ;; *************** function _sendByte *****************
   422 ;; Defined at:
   423 ;;		line 71 in file "joystickMain.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  Byte            1    wreg     unsigned char 
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  Byte            1    0[BANK0 ] unsigned char 
   428 ;; Return value:  Size  Location     Type
   429 ;;		None               void
   430 ;; Registers used:
   431 ;;		wreg
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   437 ;;      Params:         0       0       0       0
   438 ;;      Locals:         0       1       0       0
   439 ;;      Temps:          0       0       0       0
   440 ;;      Totals:         0       1       0       0
   441 ;;Total ram usage:        1 bytes
   442 ;; Hardware stack levels used:    1
   443 ;; Hardware stack levels required when called:    3
   444 ;; This function calls:
   445 ;;		Nothing
   446 ;; This function is called by:
   447 ;;		_sendString
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           
   452                           ;psect for function _sendByte
   453  00F7                     _sendByte:	
   454                           
   455                           ;incstack = 0
   456                           ; Regs used in _sendByte: [wreg]
   457                           ;sendByte@Byte stored from wreg
   458  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   459  00F8  1303               	bcf	3,6	;RP1=0, select bank0
   460  00F9  00B4               	movwf	sendByte@Byte
   461  00FA                     l42:	
   462                           ;joystickMain.c: 72: while (TXSTAbits.TRMT == 0);
   463                           
   464  00FA  1683               	bsf	3,5	;RP0=1, select bank1
   465  00FB  1303               	bcf	3,6	;RP1=0, select bank1
   466  00FC  1C98               	btfss	24,1	;volatile
   467  00FD  28FA               	goto	l42
   468                           
   469                           ;joystickMain.c: 73: TXREG = Byte;
   470  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   471  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   472  0100  0834               	movf	sendByte@Byte,w
   473  0101  0099               	movwf	25	;volatile
   474  0102  0008               	return
   475  0103                     __end_of_sendByte:	
   476                           
   477                           	psect	text3
   478  00E6                     __ptext3:	
   479 ;; *************** function _USART_init *****************
   480 ;; Defined at:
   481 ;;		line 58 in file "joystickMain.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;		None               void
   488 ;; Registers used:
   489 ;;		wreg
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   495 ;;      Params:         0       0       0       0
   496 ;;      Locals:         0       0       0       0
   497 ;;      Temps:          0       0       0       0
   498 ;;      Totals:         0       0       0       0
   499 ;;Total ram usage:        0 bytes
   500 ;; Hardware stack levels used:    1
   501 ;; Hardware stack levels required when called:    3
   502 ;; This function calls:
   503 ;;		Nothing
   504 ;; This function is called by:
   505 ;;		_main
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509                           
   510                           ;psect for function _USART_init
   511  00E6                     _USART_init:	
   512                           
   513                           ;joystickMain.c: 59: TRISBbits.TRISB1 = 1;
   514                           
   515                           ;incstack = 0
   516                           ; Regs used in _USART_init: [wreg]
   517  00E6  1683               	bsf	3,5	;RP0=1, select bank1
   518  00E7  1303               	bcf	3,6	;RP1=0, select bank1
   519  00E8  1486               	bsf	6,1	;volatile
   520                           
   521                           ;joystickMain.c: 60: TRISBbits.TRISB2 = 1;
   522  00E9  1506               	bsf	6,2	;volatile
   523                           
   524                           ;joystickMain.c: 61: TXSTAbits.TXEN = 1;
   525  00EA  1698               	bsf	24,5	;volatile
   526                           
   527                           ;joystickMain.c: 62: TXSTAbits.BRGH = 1;
   528  00EB  1518               	bsf	24,2	;volatile
   529                           
   530                           ;joystickMain.c: 63: SPBRG = 104;
   531  00EC  3068               	movlw	104
   532  00ED  0099               	movwf	25	;volatile
   533                           
   534                           ;joystickMain.c: 64: TXSTAbits.SYNC = 0;
   535  00EE  1218               	bcf	24,4	;volatile
   536                           
   537                           ;joystickMain.c: 65: RCSTAbits.SPEN = 1;
   538  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   539  00F0  1303               	bcf	3,6	;RP1=0, select bank0
   540  00F1  1798               	bsf	24,7	;volatile
   541                           
   542                           ;joystickMain.c: 66: RCSTAbits.CREN = 1;
   543  00F2  1618               	bsf	24,4	;volatile
   544                           
   545                           ;joystickMain.c: 68: PIE1bits.RCIE = 1;
   546  00F3  1683               	bsf	3,5	;RP0=1, select bank1
   547  00F4  1303               	bcf	3,6	;RP1=0, select bank1
   548  00F5  168C               	bsf	12,5	;volatile
   549  00F6  0008               	return
   550  00F7                     __end_of_USART_init:	
   551                           
   552                           	psect	text4
   553  001A                     __ptext4:	
   554 ;; *************** function _ISR *****************
   555 ;; Defined at:
   556 ;;		line 84 in file "joystickMain.c"
   557 ;; Parameters:    Size  Location     Type
   558 ;;		None
   559 ;; Auto vars:     Size  Location     Type
   560 ;;  i               2    9[COMMON] int 
   561 ;; Return value:  Size  Location     Type
   562 ;;		None               void
   563 ;; Registers used:
   564 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   570 ;;      Params:         0       0       0       0
   571 ;;      Locals:         2       0       0       0
   572 ;;      Temps:          5       0       0       0
   573 ;;      Totals:         7       0       0       0
   574 ;;Total ram usage:        7 bytes
   575 ;; Hardware stack levels used:    1
   576 ;; Hardware stack levels required when called:    2
   577 ;; This function calls:
   578 ;;		i1_sendByte
   579 ;;		i1_sendString
   580 ;; This function is called by:
   581 ;;		Interrupt level 1
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           
   586                           ;psect for function _ISR
   587  001A                     _ISR:	
   588                           
   589                           ;joystickMain.c: 85: if (PIR1bits.RCIF)
   590  001A  1E8C               	btfss	12,5	;volatile
   591  001B  2863               	goto	i1l59
   592                           
   593                           ;joystickMain.c: 86: {
   594                           ;joystickMain.c: 87: t = RCREG;
   595  001C  081A               	movf	26,w	;volatile
   596  001D  00F4               	movwf	??_ISR
   597  001E  0874               	movf	??_ISR,w
   598  001F  00FC               	movwf	_t	;volatile
   599                           
   600                           ;joystickMain.c: 91: if ((t != '\n') && (rcindex < 20)) {
   601  0020  087C               	movf	_t,w	;volatile
   602  0021  3A0A               	xorlw	10
   603  0022  1903               	skipnz
   604  0023  2835               	goto	i1l654
   605  0024  3014               	movlw	20
   606  0025  027B               	subwf	_rcindex,w	;volatile
   607  0026  1803               	skipnc
   608  0027  2835               	goto	i1l654
   609                           
   610                           ;joystickMain.c: 92: rcbuf[rcindex] = t;
   611  0028  087C               	movf	_t,w	;volatile
   612  0029  00F4               	movwf	??_ISR
   613  002A  087B               	movf	_rcindex,w
   614  002B  3E20               	addlw	_rcbuf& (0+255)
   615  002C  0084               	movwf	4
   616  002D  0874               	movf	??_ISR,w
   617  002E  1383               	bcf	3,7	;select IRP bank0
   618  002F  0080               	movwf	0
   619                           
   620                           ;joystickMain.c: 93: rcindex++;
   621  0030  3001               	movlw	1
   622  0031  00F4               	movwf	??_ISR
   623  0032  0874               	movf	??_ISR,w
   624  0033  07FB               	addwf	_rcindex,f	;volatile
   625                           
   626                           ;joystickMain.c: 94: }
   627  0034  2860               	goto	i1l56
   628  0035                     i1l654:	
   629                           
   630                           ;joystickMain.c: 95: else {
   631                           ;joystickMain.c: 96: rcindex = 0;
   632  0035  01FB               	clrf	_rcindex	;volatile
   633                           
   634                           ;joystickMain.c: 97: sendString(rcbuf);
   635  0036  3020               	movlw	_rcbuf& (0+255)
   636  0037  00F1               	movwf	i1sendString@s
   637  0038  3000               	movlw	0
   638  0039  00F2               	movwf	i1sendString@s+1
   639  003A  20B1               	fcall	i1_sendString
   640                           
   641                           ;joystickMain.c: 98: sendByte('\n');
   642  003B  300A               	movlw	10
   643  003C  2103               	fcall	i1_sendByte
   644                           
   645                           ;joystickMain.c: 99: for(int i = 0; i < 20; i++)
   646  003D  01F9               	clrf	ISR@i
   647  003E  01FA               	clrf	ISR@i+1
   648  003F  087A               	movf	ISR@i+1,w
   649  0040  3A80               	xorlw	128
   650  0041  00FF               	movwf	127
   651  0042  3080               	movlw	128
   652  0043  027F               	subwf	127,w
   653  0044  1D03               	skipz
   654  0045  2848               	goto	u17_25
   655  0046  3014               	movlw	20
   656  0047  0279               	subwf	ISR@i,w
   657  0048                     u17_25:	
   658  0048  1803               	btfsc	3,0
   659  0049  2860               	goto	i1l56
   660  004A                     i1l666:	
   661                           
   662                           ;joystickMain.c: 100: rcbuf[i] = 0;
   663  004A  0879               	movf	ISR@i,w
   664  004B  3E20               	addlw	_rcbuf& (0+255)
   665  004C  0084               	movwf	4
   666  004D  1383               	bcf	3,7	;select IRP bank0
   667  004E  0180               	clrf	0
   668  004F  3001               	movlw	1
   669  0050  07F9               	addwf	ISR@i,f
   670  0051  1803               	skipnc
   671  0052  0AFA               	incf	ISR@i+1,f
   672  0053  3000               	movlw	0
   673  0054  07FA               	addwf	ISR@i+1,f
   674  0055  087A               	movf	ISR@i+1,w
   675  0056  3A80               	xorlw	128
   676  0057  00FF               	movwf	127
   677  0058  3080               	movlw	128
   678  0059  027F               	subwf	127,w
   679  005A  1D03               	skipz
   680  005B  285E               	goto	u18_25
   681  005C  3014               	movlw	20
   682  005D  0279               	subwf	ISR@i,w
   683  005E                     u18_25:	
   684  005E  1C03               	skipc
   685  005F  284A               	goto	i1l666
   686  0060                     i1l56:	
   687                           
   688                           ;joystickMain.c: 101: }
   689                           ;joystickMain.c: 104: PIR1bits.RCIF = 0;
   690  0060  1283               	bcf	3,5	;RP0=0, select bank0
   691  0061  1303               	bcf	3,6	;RP1=0, select bank0
   692  0062  128C               	bcf	12,5	;volatile
   693  0063                     i1l59:	
   694  0063  0878               	movf	??_ISR+4,w
   695  0064  00FF               	movwf	127
   696  0065  0877               	movf	??_ISR+3,w
   697  0066  008A               	movwf	10
   698  0067  0876               	movf	??_ISR+2,w
   699  0068  0084               	movwf	4
   700  0069  0E75               	swapf	(??_ISR+1)^(0+-128),w
   701  006A  0083               	movwf	3
   702  006B  0EFE               	swapf	126,f
   703  006C  0E7E               	swapf	126,w
   704  006D  0009               	retfie
   705  006E                     __end_of_ISR:	
   706                           
   707                           	psect	intentry
   708  0004                     __pintentry:	
   709                           ;incstack = 0
   710                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   711                           
   712  0004                     interrupt_function:	
   713  007E                     saved_w	set	btemp
   714  0004  00FE               	movwf	btemp
   715  0005  0E03               	swapf	3,w
   716  0006  00F5               	movwf	??_ISR+1
   717  0007  0804               	movf	4,w
   718  0008  00F6               	movwf	??_ISR+2
   719  0009  080A               	movf	10,w
   720  000A  00F7               	movwf	??_ISR+3
   721  000B  1283               	bcf	3,5	;RP0=0, select bank0
   722  000C  1303               	bcf	3,6	;RP1=0, select bank0
   723  000D  087F               	movf	btemp+1,w
   724  000E  00F8               	movwf	??_ISR+4
   725  000F  281A               	ljmp	_ISR
   726                           
   727                           	psect	text5
   728  00B1                     __ptext5:	
   729 ;; *************** function i1_sendString *****************
   730 ;; Defined at:
   731 ;;		line 76 in file "joystickMain.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  s               2    1[COMMON] PTR unsigned char 
   734 ;;		 -> rcbuf(20), STR_1(20), 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;		None               void
   739 ;; Registers used:
   740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   746 ;;      Params:         2       0       0       0
   747 ;;      Locals:         0       0       0       0
   748 ;;      Temps:          1       0       0       0
   749 ;;      Totals:         3       0       0       0
   750 ;;Total ram usage:        3 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    1
   753 ;; This function calls:
   754 ;;		i1_sendByte
   755 ;; This function is called by:
   756 ;;		_ISR
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function i1_sendString
   762  00B1                     i1_sendString:	
   763  00B1                     i1l632:	
   764                           ;joystickMain.c: 77: while (*s) {
   765                           
   766                           ;incstack = 0
   767                           ; Regs used in i1_sendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   768                           
   769  00B1  0872               	movf	i1sendString@s+1,w
   770  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   771  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   772  00B4  00FF               	movwf	127
   773  00B5  0871               	movf	i1sendString@s,w
   774  00B6  0084               	movwf	4
   775  00B7  206E               	fcall	stringtab
   776  00B8  3800               	iorlw	0
   777  00B9  1903               	btfsc	3,2
   778  00BA  0008               	return
   779                           
   780                           ;joystickMain.c: 78: sendByte(*s);
   781  00BB  0872               	movf	i1sendString@s+1,w
   782  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   783  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   784  00BE  00FF               	movwf	127
   785  00BF  0871               	movf	i1sendString@s,w
   786  00C0  0084               	movwf	4
   787  00C1  206E               	fcall	stringtab
   788  00C2  2103               	fcall	i1_sendByte
   789                           
   790                           ;joystickMain.c: 79: _delay((unsigned long)((10)*(16000000/4000000.0)));
   791  00C3  300D               	movlw	13
   792  00C4  00F3               	movwf	??i1_sendString
   793  00C5                     u21_27:	
   794  00C5  0BF3               	decfsz	??i1_sendString,f
   795  00C6  28C5               	goto	u21_27
   796                           
   797                           ;joystickMain.c: 80: s++;
   798  00C7  3001               	movlw	1
   799  00C8  07F1               	addwf	i1sendString@s,f
   800  00C9  1803               	skipnc
   801  00CA  0AF2               	incf	i1sendString@s+1,f
   802  00CB  28B1               	goto	i1l632
   803  00CC                     __end_ofi1_sendString:	
   804                           
   805                           	psect	text6
   806  0103                     __ptext6:	
   807 ;; *************** function i1_sendByte *****************
   808 ;; Defined at:
   809 ;;		line 71 in file "joystickMain.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  Byte            1    wreg     unsigned char 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  Byte            1    0[COMMON] unsigned char 
   814 ;; Return value:  Size  Location     Type
   815 ;;		None               void
   816 ;; Registers used:
   817 ;;		wreg
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   823 ;;      Params:         0       0       0       0
   824 ;;      Locals:         1       0       0       0
   825 ;;      Temps:          0       0       0       0
   826 ;;      Totals:         1       0       0       0
   827 ;;Total ram usage:        1 bytes
   828 ;; Hardware stack levels used:    1
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_ISR
   833 ;;		i1_sendString
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           
   838                           ;psect for function i1_sendByte
   839  0103                     i1_sendByte:	
   840                           
   841                           ;incstack = 0
   842                           ; Regs used in i1_sendByte: [wreg]
   843                           ;i1sendByte@Byte stored from wreg
   844  0103  00F0               	movwf	i1sendByte@Byte
   845  0104                     i1l42:	
   846                           ;joystickMain.c: 72: while (TXSTAbits.TRMT == 0);
   847                           
   848  0104  1683               	bsf	3,5	;RP0=1, select bank1
   849  0105  1303               	bcf	3,6	;RP1=0, select bank1
   850  0106  1C98               	btfss	24,1	;volatile
   851  0107  2904               	goto	i1l42
   852                           
   853                           ;joystickMain.c: 73: TXREG = Byte;
   854  0108  0870               	movf	i1sendByte@Byte,w
   855  0109  1283               	bcf	3,5	;RP0=0, select bank0
   856  010A  1303               	bcf	3,6	;RP1=0, select bank0
   857  010B  0099               	movwf	25	;volatile
   858  010C  0008               	return
   859  010D                     __end_ofi1_sendByte:	
   860  007E                     btemp	set	126	;btemp
   861  007E                     wtemp	set	126
   862  007E                     wtemp0	set	126
   863  0080                     wtemp1	set	128
   864  0082                     wtemp2	set	130
   865  0084                     wtemp3	set	132
   866  0086                     wtemp4	set	134
   867  0088                     wtemp5	set	136
   868  007F                     wtemp6	set	127
   869  007E                     ttemp	set	126
   870  007E                     ttemp0	set	126
   871  0081                     ttemp1	set	129
   872  0084                     ttemp2	set	132
   873  0087                     ttemp3	set	135
   874  007F                     ttemp4	set	127
   875  007E                     ltemp	set	126
   876  007E                     ltemp0	set	126
   877  0082                     ltemp1	set	130
   878  0086                     ltemp2	set	134
   879  0080                     ltemp3	set	128


Data Sizes:
    Strings     20
    Constant    0
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80     11      31
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    sendString@s	PTR unsigned char  size(2) Largest target is 20
		 -> rcbuf(BANK0[20]), STR_1(CODE[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1_sendString
    i1_sendString->i1_sendByte

Critical Paths under _main in BANK0

    _main->_sendString
    _sendString->_sendByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     3      4     147
                                              4 BANK0      7     3      4
                         _USART_init
                         _sendString
 ---------------------------------------------------------------------------------
 (1) _sendString                                           3     1      2     147
                                              1 BANK0      3     1      2
                           _sendByte
 ---------------------------------------------------------------------------------
 (2) _sendByte                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  7     7      0     183
                                              4 COMMON     7     7      0
                         i1_sendByte
                       i1_sendString
 ---------------------------------------------------------------------------------
 (4) i1_sendString                                         3     1      2      93
                                              1 COMMON     3     1      2
                         i1_sendByte
 ---------------------------------------------------------------------------------
 (5) i1_sendByte                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_init
   _sendString
     _sendByte

 _ISR (ROOT)
   i1_sendByte
   i1_sendString
     i1_sendByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      B      1F       3       38.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      2C      10        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Fri Nov 28 13:10:42 2014

                      _t 007C                        pc 0002              __CFG_CP$OFF 0000  
                     l33 00E5                       l42 00FA                       fsr 0004  
                    l622 0092                      u207 00A8             __CFG_CPD$OFF 0000  
                    _ISR 001A                      u197 00D5                      fsr0 0004  
                    indf 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   ISR@i 0079                     STR_1 007E                     i1l42 0104  
                   i1l56 0060                     i1l59 0063               i1_sendByte 0103  
                   _main 00CC                     btemp 007E            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0010                     ttemp 007E  
                   wtemp 007E                    ??_ISR 0074                    ?_main 0038  
          __CFG_WDTE$OFF 0000                    i1l632 00B1                    i1l654 0035  
                  i1l666 004A                    _RCREG 001A                    u21_27 00C5  
                  u17_25 0048                    _SPBRG 0099                    u18_25 005E  
                  _TXREG 0019            __CFG_PWRTE$ON 0000                    _rcbuf 0020  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
         __CFG_MCLRE$OFF 0000              ?_USART_init 0070          __initialization 0011  
           __end_of_main 00E6                   ??_main 003C    __size_ofi1_sendString 001B  
            ?i1_sendByte 0070             i1_sendString 00B1         __end_of_sendByte 0103  
                 saved_w 007E      __size_of_USART_init 0011  __end_of__initialization 0018  
         __pcstackCOMMON 0070      __size_ofi1_sendByte 000A               __pbssBANK0 0020  
             __pmaintext 00CC               __pintentry 0004              sendString@s 0035  
             __stringtab 006E                ?_sendByte 0070             ??_USART_init 0034  
                __ptext1 0092                  __ptext2 00F7                  __ptext3 00E6  
                __ptext4 001A                  __ptext5 00B1                  __ptext6 0103  
           __size_of_ISR 0054                  _rcindex 007B                  clrloop0 010E  
     __end_of_USART_init 00F7     end_of_initialization 0018               _sendString 0092  
           ??i1_sendByte 0070               ??_sendByte 0034                _RCSTAbits 0018  
     __end_ofi1_sendByte 010D                _TRISBbits 0086                _TXSTAbits 0098  
    start_initialization 0011              __end_of_ISR 006E              ?_sendString 0035  
            __pbssCOMMON 007B                ___latbits 0000            __pcstackBANK0 0034  
    __end_of__stringdata 0092             sendByte@Byte 0034        __size_of_sendByte 000C  
              __pstrings 006E      __size_of_sendString 001F        interrupt_function 0004  
              clear_ram0 010D                 _PIE1bits 008C                 _PIR1bits 000C  
         i1sendByte@Byte 0070            ?i1_sendString 0071              __stringbase 007D  
            __stringdata 007E           ??i1_sendString 0073       __end_of__stringtab 007E  
           ??_sendString 0037            __size_of_main 001A                 _sendByte 00F7  
               main@argc 0038                 main@argv 003A       __end_of_sendString 00B1  
             _INTCONbits 000B            i1sendString@s 0071                 intlevel1 0000  
              stringcode 0078                 stringdir 0078                 stringtab 006E  
     __CFG_FOSC$EXTRCCLK 0000     __end_ofi1_sendString 00CC               _USART_init 00E6  
