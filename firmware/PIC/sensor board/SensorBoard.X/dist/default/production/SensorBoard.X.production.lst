

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Fri Feb 20 12:40:30 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	functab,global,reloc=256,class=CODE,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  008F                     	;# 
   169  0090                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0093                     	;# 
   174  0093                     	;# 
   175  0094                     	;# 
   176  0095                     	;# 
   177  0096                     	;# 
   178  0097                     	;# 
   179  0098                     	;# 
   180  0099                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187  0105                     	;# 
   188  0107                     	;# 
   189  0108                     	;# 
   190  0109                     	;# 
   191  010C                     	;# 
   192  010C                     	;# 
   193  010D                     	;# 
   194  010E                     	;# 
   195  010F                     	;# 
   196  0185                     	;# 
   197  0187                     	;# 
   198  0188                     	;# 
   199  0189                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202                           
   203                           	psect	idataCOMMON
   204  07FE                     __pidataCOMMON:	
   205                           
   206                           ;initializer for _counter
   207  07FE  3401               	retlw	1
   208  07FF  3400               	retlw	0
   209                           
   210                           	psect	idataBANK1
   211  1645                     __pidataBANK1:	
   212                           
   213                           ;initializer for _gainTemp
   214  1645  3474               	retlw	116
   215  1646  3491               	retlw	145
   216  1647  3441               	retlw	65
   217                           
   218                           	psect	strings
   219  1000                     __pstrings:	
   220  1000                     stringtab:	
   221  1000                     __stringtab:	
   222  1000                     stringcode:	
   223                           ;	String table - string pointers are 1 byte each
   224                           
   225  1000                     stringdir:	
   226  1000  3010               	movlw	high stringdir
   227  1001  008A               	movwf	10
   228  1002  0804               	movf	4,w
   229  1003  0A84               	incf	4,f
   230  1004  0782               	addwf	2,f
   231  1005                     __stringbase:	
   232  1005  3400               	retlw	0
   233  1006                     __end_of__stringtab:	
   234  1006                     exp@coeff:	
   235  1006  3400               	retlw	0
   236  1007  3480               	retlw	128
   237  1008  343F               	retlw	63
   238  1009  3472               	retlw	114
   239  100A  3431               	retlw	49
   240  100B  343F               	retlw	63
   241  100C  34FE               	retlw	254
   242  100D  3475               	retlw	117
   243  100E  343E               	retlw	62
   244  100F  3458               	retlw	88
   245  1010  3463               	retlw	99
   246  1011  343D               	retlw	61
   247  1012  3495               	retlw	149
   248  1013  341D               	retlw	29
   249  1014  343C               	retlw	60
   250  1015  34C5               	retlw	197
   251  1016  34AE               	retlw	174
   252  1017  343A               	retlw	58
   253  1018  3479               	retlw	121
   254  1019  3421               	retlw	33
   255  101A  3439               	retlw	57
   256  101B  3494               	retlw	148
   257  101C  3480               	retlw	128
   258  101D  3437               	retlw	55
   259  101E  3493               	retlw	147
   260  101F  34A7               	retlw	167
   261  1020  3435               	retlw	53
   262  1021  3456               	retlw	86
   263  1022  3415               	retlw	21
   264  1023  3434               	retlw	52
   265  1024                     __end_ofexp@coeff:	
   266  1024                     log@coeff:	
   267  1024  3400               	retlw	0
   268  1025  3400               	retlw	0
   269  1026  3400               	retlw	0
   270  1027  3400               	retlw	0
   271  1028  3480               	retlw	128
   272  1029  343F               	retlw	63
   273  102A  34F0               	retlw	240
   274  102B  34FF               	retlw	255
   275  102C  34BE               	retlw	190
   276  102D  34E2               	retlw	226
   277  102E  34A9               	retlw	169
   278  102F  343E               	retlw	62
   279  1030  3483               	retlw	131
   280  1031  3476               	retlw	118
   281  1032  34BE               	retlw	190
   282  1033  34AE               	retlw	174
   283  1034  342B               	retlw	43
   284  1035  343E               	retlw	62
   285  1036  343C               	retlw	60
   286  1037  34C3               	retlw	195
   287  1038  34BD               	retlw	189
   288  1039  34D2               	retlw	210
   289  103A  3413               	retlw	19
   290  103B  343D               	retlw	61
   291  103C  3478               	retlw	120
   292  103D  34D3               	retlw	211
   293  103E  34BB               	retlw	187
   294  103F                     __end_oflog@coeff:	
   295  001F                     _ADCON0bits	set	31
   296  001E                     _ADRESH	set	30
   297  000C                     _PIR1bits	set	12
   298  0007                     _PORTCbits	set	7
   299  0013                     _SSPBUF	set	19
   300  0014                     _SSPCONbits	set	20
   301  00A4                     _CKP	set	164
   302  00F9                     _GO_DONE	set	249
   303  0063                     _SSPIF	set	99
   304  009F                     _ADCON1bits	set	159
   305  009E                     _ADRESL	set	158
   306  008F                     _OSCCONbits	set	143
   307  008C                     _PIE1bits	set	140
   308  0093                     _SSPADD	set	147
   309  0091                     _SSPCON2bits	set	145
   310  0094                     _SSPSTATbits	set	148
   311  0087                     _TRISCbits	set	135
   312  04A0                     _BF	set	1184
   313  04A5                     _D_A	set	1189
   314  04A2                     _R_W	set	1186
   315  0188                     _ANSEL	set	392
   316  0189                     _ANSELH	set	393
   317  0188                     _ANSELbits	set	392
   318                           
   319                           ; #config settings
   320  0000                     
   321                           	psect	cinit
   322  0015                     start_initialization:	
   323  0015                     __initialization:	
   324                           
   325                           ; Clear objects allocated to COMMON
   326  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   327  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   328  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   329  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   330                           
   331                           ; Clear objects allocated to BANK1
   332  0019  1683               	bsf	3,5	;RP0=1, select bank1
   333  001A  1303               	bcf	3,6	;RP1=0, select bank1
   334  001B  01E9               	clrf	__pbssBANK1& (0+127)
   335  001C  01EA               	clrf	(__pbssBANK1+1)& (0+127)
   336                           
   337                           ; Clear objects allocated to BANK3
   338  001D  1683               	bsf	3,5	;RP0=1, select bank3
   339  001E  1703               	bsf	3,6	;RP1=1, select bank3
   340  001F  0190               	clrf	__pbssBANK3& (0+127)
   341  0020  0191               	clrf	(__pbssBANK3+1)& (0+127)
   342  0021  0192               	clrf	(__pbssBANK3+2)& (0+127)
   343  0022  0193               	clrf	(__pbssBANK3+3)& (0+127)
   344  0023  0194               	clrf	(__pbssBANK3+4)& (0+127)
   345  0024  0195               	clrf	(__pbssBANK3+5)& (0+127)
   346  0025  0196               	clrf	(__pbssBANK3+6)& (0+127)
   347  0026  0197               	clrf	(__pbssBANK3+7)& (0+127)
   348  0027  0198               	clrf	(__pbssBANK3+8)& (0+127)
   349  0028  0199               	clrf	(__pbssBANK3+9)& (0+127)
   350  0029  019A               	clrf	(__pbssBANK3+10)& (0+127)
   351  002A  019B               	clrf	(__pbssBANK3+11)& (0+127)
   352  002B  019C               	clrf	(__pbssBANK3+12)& (0+127)
   353                           
   354                           ; Initialize objects allocated to BANK1
   355  002C  1683               	bsf	3,5	;RP0=1, select bank1
   356  002D  1303               	bcf	3,6	;RP1=0, select bank1
   357  002E  160A  118A  2645   	fcall	__pidataBANK1	;fetch initializer
      +       120A  118A         
   358  0033  00E6               	movwf	__pdataBANK1& (0+127)
   359  0034  160A  118A  2646   	fcall	__pidataBANK1+1	;fetch initializer
      +       120A  118A         
   360  0039  00E7               	movwf	(__pdataBANK1+1)& (0+127)
   361  003A  160A  118A  2647   	fcall	__pidataBANK1+2	;fetch initializer
      +       120A  118A         
   362  003F  00E8               	movwf	(__pdataBANK1+2)& (0+127)
   363                           
   364                           ; Initialize objects allocated to COMMON
   365  0040  120A  118A  27FE   	fcall	__pidataCOMMON	;fetch initializer
      +       120A  118A         
   366  0045  00FA               	movwf	__pdataCOMMON& (0+127)
   367  0046  120A  118A  27FF   	fcall	__pidataCOMMON+1	;fetch initializer
   368  0049  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   369  004A                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  004A                     __end_of__initialization:	
   373  004A  0183               	clrf	3
   374  004B  160A  118A  2EB0   	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	bssCOMMON
   377  0076                     __pbssCOMMON:	
   378  0076                     _I2C_receivedByte:	
   379  0076                     	ds	1
   380  0077                     _I2C_sendByte:	
   381  0077                     	ds	1
   382  0078                     _junk:	
   383  0078                     	ds	1
   384  0079                     sendMaster@indexCounter:	
   385  0079                     	ds	1
   386                           
   387                           	psect	dataCOMMON
   388  007A                     __pdataCOMMON:	
   389  007A                     _counter:	
   390  007A                     	ds	2
   391                           
   392                           	psect	bssBANK1
   393  00E9                     __pbssBANK1:	
   394  00E9                     _errno:	
   395  00E9                     	ds	2
   396                           
   397                           	psect	dataBANK1
   398  00E6                     __pdataBANK1:	
   399  00E6                     _gainTemp:	
   400  00E6                     	ds	3
   401                           
   402                           	psect	bssBANK3
   403  0190                     __pbssBANK3:	
   404  0190                     _Register:	
   405  0190                     	ds	13
   406                           
   407                           	psect	cstackBANK1
   408  00A0                     __pcstackBANK1:	
   409  00A0                     ___fttol@sign1:	
   410                           
   411                           ; 1 bytes @ 0x0
   412  00A0                     	ds	1
   413  00A1                     ___fttol@lval:	
   414                           
   415                           ; 4 bytes @ 0x1
   416  00A1                     	ds	4
   417  00A5                     ___fttol@exp1:	
   418                           
   419                           ; 1 bytes @ 0x5
   420  00A5                     	ds	1
   421  00A6                     ??___altoft:	
   422                           
   423                           ; 0 bytes @ 0x6
   424  00A6                     	ds	2
   425  00A8                     ___altoft@exp:	
   426                           
   427                           ; 1 bytes @ 0x8
   428  00A8                     	ds	1
   429  00A9                     ___altoft@sign:	
   430                           
   431                           ; 1 bytes @ 0x9
   432  00A9                     	ds	1
   433  00AA                     ?_floor:	
   434  00AA                     floor@x:	
   435                           ; 3 bytes @ 0xA
   436                           
   437                           
   438                           ; 3 bytes @ 0xA
   439  00AA                     	ds	3
   440  00AD                     floor@i:	
   441                           
   442                           ; 3 bytes @ 0xD
   443  00AD                     	ds	3
   444  00B0                     floor@expon:	
   445                           
   446                           ; 2 bytes @ 0x10
   447  00B0                     	ds	2
   448  00B2                     ?_exp:	
   449  00B2                     exp@x:	
   450                           ; 3 bytes @ 0x12
   451                           
   452                           
   453                           ; 3 bytes @ 0x12
   454  00B2                     	ds	3
   455  00B5                     ??_exp:	
   456                           
   457                           ; 0 bytes @ 0x15
   458  00B5                     	ds	1
   459  00B6                     _exp$1124:	
   460                           
   461                           ; 3 bytes @ 0x16
   462  00B6                     	ds	3
   463  00B9                     _exp$836:	
   464                           
   465                           ; 3 bytes @ 0x19
   466  00B9                     	ds	3
   467  00BC                     exp@exponent:	
   468                           
   469                           ; 2 bytes @ 0x1C
   470  00BC                     	ds	2
   471  00BE                     exp@sign:	
   472                           
   473                           ; 1 bytes @ 0x1E
   474  00BE                     	ds	1
   475  00BF                     ?_pow:	
   476  00BF                     pow@x:	
   477                           ; 3 bytes @ 0x1F
   478                           
   479                           
   480                           ; 3 bytes @ 0x1F
   481  00BF                     	ds	3
   482  00C2                     pow@y:	
   483                           
   484                           ; 3 bytes @ 0x22
   485  00C2                     	ds	3
   486  00C5                     ??_pow:	
   487                           
   488                           ; 0 bytes @ 0x25
   489  00C5                     	ds	1
   490  00C6                     _pow$1122:	
   491                           
   492                           ; 3 bytes @ 0x26
   493  00C6                     	ds	3
   494  00C9                     _pow$1123:	
   495                           
   496                           ; 3 bytes @ 0x29
   497  00C9                     	ds	3
   498  00CC                     pow@sign:	
   499                           
   500                           ; 1 bytes @ 0x2C
   501  00CC                     	ds	1
   502  00CD                     pow@yi:	
   503                           
   504                           ; 4 bytes @ 0x2D
   505  00CD                     	ds	4
   506  00D1                     ?_readLight:	
   507                           
   508                           ; 3 bytes @ 0x31
   509  00D1                     	ds	3
   510  00D4                     _readLight$1120:	
   511                           
   512                           ; 3 bytes @ 0x34
   513  00D4                     	ds	3
   514  00D7                     _readLight$1121:	
   515                           
   516                           ; 3 bytes @ 0x37
   517  00D7                     	ds	3
   518  00DA                     readLight@lightVal:	
   519                           
   520                           ; 3 bytes @ 0x3A
   521  00DA                     	ds	3
   522  00DD                     ??_fillRegister:	
   523                           
   524                           ; 0 bytes @ 0x3D
   525  00DD                     	ds	1
   526  00DE                     fillRegister@array:	
   527                           
   528                           ; 1 bytes @ 0x3E
   529  00DE                     	ds	1
   530  00DF                     _fillRegister$1119:	
   531                           
   532                           ; 3 bytes @ 0x3F
   533  00DF                     	ds	3
   534  00E2                     ?_main:	
   535  00E2                     main@argc:	
   536                           ; 2 bytes @ 0x42
   537                           
   538                           
   539                           ; 2 bytes @ 0x42
   540  00E2                     	ds	2
   541  00E4                     main@argv:	
   542                           
   543                           ; 2 bytes @ 0x44
   544  00E4                     	ds	2
   545                           
   546                           	psect	cstackCOMMON
   547  0070                     __pcstackCOMMON:	
   548  0070                     ?_config:	
   549  0070                     ?_initialize_i2c:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0070                     ?_fillRegister:	
   553                           ; 0 bytes @ 0x0
   554                           
   555  0070                     ?_receiveData:	
   556                           ; 0 bytes @ 0x0
   557                           
   558  0070                     ??_receiveData:	
   559                           ; 0 bytes @ 0x0
   560                           
   561  0070                     ?_ISR:	
   562                           ; 0 bytes @ 0x0
   563                           
   564  0070                     ?_tempCalibration:	
   565                           ; 0 bytes @ 0x0
   566                           
   567                           
   568                           ; 3 bytes @ 0x0
   569  0070                     	ds	1
   570  0071                     ??_ISR:	
   571                           
   572                           ; 0 bytes @ 0x1
   573  0071                     	ds	5
   574                           
   575                           	psect	cstackBANK0
   576  0020                     __pcstackBANK0:	
   577  0020                     ??_config:	
   578  0020                     ??_initialize_i2c:	
   579                           ; 0 bytes @ 0x0
   580                           
   581  0020                     ?___ftge:	
   582                           ; 0 bytes @ 0x0
   583                           
   584  0020                     ?___bmul:	
   585                           ; 1 bit 
   586                           
   587  0020                     ?_read:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0020                     ?___ftpack:	
   591                           ; 2 bytes @ 0x0
   592                           
   593  0020                     ?_frexp:	
   594                           ; 3 bytes @ 0x0
   595                           
   596  0020                     ?___ftneg:	
   597                           ; 3 bytes @ 0x0
   598                           
   599  0020                     ___bmul@multiplicand:	
   600                           ; 3 bytes @ 0x0
   601                           
   602  0020                     read@channel:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0020                     ___ftpack@arg:	
   606                           ; 2 bytes @ 0x0
   607                           
   608  0020                     ___ftge@ff1:	
   609                           ; 3 bytes @ 0x0
   610                           
   611  0020                     ___ftneg@f1:	
   612                           ; 3 bytes @ 0x0
   613                           
   614  0020                     frexp@value:	
   615                           ; 3 bytes @ 0x0
   616                           
   617                           
   618                           ; 3 bytes @ 0x0
   619  0020                     	ds	1
   620  0021                     ??___bmul:	
   621                           
   622                           ; 0 bytes @ 0x1
   623  0021                     	ds	1
   624  0022                     read@justification:	
   625  0022                     ___bmul@product:	
   626                           ; 1 bytes @ 0x2
   627                           
   628                           
   629                           ; 1 bytes @ 0x2
   630  0022                     	ds	1
   631  0023                     ??_read:	
   632  0023                     ??___ftneg:	
   633                           ; 0 bytes @ 0x3
   634                           
   635  0023                     ___bmul@multiplier:	
   636                           ; 0 bytes @ 0x3
   637                           
   638  0023                     ___ftpack@exp:	
   639                           ; 1 bytes @ 0x3
   640                           
   641  0023                     frexp@eptr:	
   642                           ; 1 bytes @ 0x3
   643                           
   644  0023                     read@analogValue:	
   645                           ; 1 bytes @ 0x3
   646                           
   647  0023                     ___ftge@ff2:	
   648                           ; 2 bytes @ 0x3
   649                           
   650                           
   651                           ; 3 bytes @ 0x3
   652  0023                     	ds	1
   653  0024                     ??_frexp:	
   654  0024                     ___ftpack@sign:	
   655                           ; 0 bytes @ 0x4
   656                           
   657                           
   658                           ; 1 bytes @ 0x4
   659  0024                     	ds	1
   660  0025                     ??___ftpack:	
   661                           
   662                           ; 0 bytes @ 0x5
   663  0025                     	ds	1
   664  0026                     ??___ftge:	
   665                           
   666                           ; 0 bytes @ 0x6
   667  0026                     	ds	2
   668  0028                     ?___awtoft:	
   669  0028                     ?___lltoft:	
   670                           ; 3 bytes @ 0x8
   671                           
   672  0028                     ___awtoft@c:	
   673                           ; 3 bytes @ 0x8
   674                           
   675  0028                     ___lltoft@c:	
   676                           ; 2 bytes @ 0x8
   677                           
   678                           
   679                           ; 4 bytes @ 0x8
   680  0028                     	ds	3
   681  002B                     ??___awtoft:	
   682                           
   683                           ; 0 bytes @ 0xB
   684  002B                     	ds	1
   685  002C                     ??___lltoft:	
   686                           
   687                           ; 0 bytes @ 0xC
   688  002C                     	ds	1
   689  002D                     ___awtoft@sign:	
   690  002D                     ___lltoft@exp:	
   691                           ; 1 bytes @ 0xD
   692                           
   693                           
   694                           ; 1 bytes @ 0xD
   695  002D                     	ds	1
   696  002E                     ?___ftmul:	
   697  002E                     ___ftmul@f1:	
   698                           ; 3 bytes @ 0xE
   699                           
   700                           
   701                           ; 3 bytes @ 0xE
   702  002E                     	ds	3
   703  0031                     ___ftmul@f2:	
   704                           
   705                           ; 3 bytes @ 0x11
   706  0031                     	ds	3
   707  0034                     ??___ftmul:	
   708                           
   709                           ; 0 bytes @ 0x14
   710  0034                     	ds	4
   711  0038                     ___ftmul@exp:	
   712                           
   713                           ; 1 bytes @ 0x18
   714  0038                     	ds	1
   715  0039                     ___ftmul@f3_as_product:	
   716                           
   717                           ; 3 bytes @ 0x19
   718  0039                     	ds	3
   719  003C                     ___ftmul@cntr:	
   720                           
   721                           ; 1 bytes @ 0x1C
   722  003C                     	ds	1
   723  003D                     ___ftmul@sign:	
   724                           
   725                           ; 1 bytes @ 0x1D
   726  003D                     	ds	1
   727  003E                     ?___ftdiv:	
   728  003E                     ___ftdiv@f2:	
   729                           ; 3 bytes @ 0x1E
   730                           
   731                           
   732                           ; 3 bytes @ 0x1E
   733  003E                     	ds	3
   734  0041                     ___ftdiv@f1:	
   735                           
   736                           ; 3 bytes @ 0x21
   737  0041                     	ds	3
   738  0044                     ??___ftdiv:	
   739                           
   740                           ; 0 bytes @ 0x24
   741  0044                     	ds	4
   742  0048                     ___ftdiv@cntr:	
   743                           
   744                           ; 1 bytes @ 0x28
   745  0048                     	ds	1
   746  0049                     ___ftdiv@f3:	
   747                           
   748                           ; 3 bytes @ 0x29
   749  0049                     	ds	3
   750  004C                     ___ftdiv@exp:	
   751                           
   752                           ; 1 bytes @ 0x2C
   753  004C                     	ds	1
   754  004D                     ___ftdiv@sign:	
   755                           
   756                           ; 1 bytes @ 0x2D
   757  004D                     	ds	1
   758  004E                     ?_pointToVoltage:	
   759  004E                     ?___ftadd:	
   760                           ; 3 bytes @ 0x2E
   761                           
   762  004E                     pointToVoltage@point:	
   763                           ; 3 bytes @ 0x2E
   764                           
   765  004E                     ___ftadd@f1:	
   766                           ; 3 bytes @ 0x2E
   767                           
   768                           
   769                           ; 3 bytes @ 0x2E
   770  004E                     	ds	3
   771  0051                     ??_pointToVoltage:	
   772  0051                     ?_readAccelerometer:	
   773                           ; 0 bytes @ 0x31
   774                           
   775  0051                     readAccelerometer@axis:	
   776                           ; 3 bytes @ 0x31
   777                           
   778  0051                     ___ftadd@f2:	
   779                           ; 2 bytes @ 0x31
   780                           
   781                           
   782                           ; 3 bytes @ 0x31
   783  0051                     	ds	3
   784  0054                     ??_readAccelerometer:	
   785  0054                     ??___ftadd:	
   786                           ; 0 bytes @ 0x34
   787                           
   788                           
   789                           ; 0 bytes @ 0x34
   790  0054                     	ds	4
   791  0058                     ___ftadd@sign:	
   792                           
   793                           ; 1 bytes @ 0x38
   794  0058                     	ds	1
   795  0059                     ___ftadd@exp2:	
   796                           
   797                           ; 1 bytes @ 0x39
   798  0059                     	ds	1
   799  005A                     ___ftadd@exp1:	
   800                           
   801                           ; 1 bytes @ 0x3A
   802  005A                     	ds	1
   803  005B                     ??_tempCalibration:	
   804  005B                     ?_readTemp:	
   805                           ; 0 bytes @ 0x3B
   806                           
   807  005B                     ?_eval_poly:	
   808                           ; 3 bytes @ 0x3B
   809                           
   810  005B                     ?___ftsub:	
   811                           ; 3 bytes @ 0x3B
   812                           
   813  005B                     tempCalibration@vOut:	
   814                           ; 3 bytes @ 0x3B
   815                           
   816  005B                     ___ftsub@f2:	
   817                           ; 3 bytes @ 0x3B
   818                           
   819  005B                     eval_poly@x:	
   820                           ; 3 bytes @ 0x3B
   821                           
   822                           
   823                           ; 3 bytes @ 0x3B
   824  005B                     	ds	3
   825  005E                     ??_readTemp:	
   826  005E                     eval_poly@d:	
   827                           ; 0 bytes @ 0x3E
   828                           
   829  005E                     readTemp@i:	
   830                           ; 1 bytes @ 0x3E
   831                           
   832  005E                     tempCalibration@vIn:	
   833                           ; 2 bytes @ 0x3E
   834                           
   835  005E                     ___ftsub@f1:	
   836                           ; 3 bytes @ 0x3E
   837                           
   838                           
   839                           ; 3 bytes @ 0x3E
   840  005E                     	ds	1
   841  005F                     eval_poly@n:	
   842                           
   843                           ; 2 bytes @ 0x3F
   844  005F                     	ds	1
   845  0060                     readTemp@temp:	
   846                           
   847                           ; 3 bytes @ 0x40
   848  0060                     	ds	1
   849  0061                     ??_eval_poly:	
   850  0061                     ??___ftsub:	
   851                           ; 0 bytes @ 0x41
   852                           
   853                           
   854                           ; 0 bytes @ 0x41
   855  0061                     	ds	1
   856  0062                     eval_poly@res:	
   857                           
   858                           ; 3 bytes @ 0x42
   859  0062                     	ds	1
   860  0063                     ?___fttol:	
   861  0063                     ___fttol@f1:	
   862                           ; 4 bytes @ 0x43
   863                           
   864                           
   865                           ; 3 bytes @ 0x43
   866  0063                     	ds	2
   867  0065                     ?_log:	
   868  0065                     ?_ldexp:	
   869                           ; 3 bytes @ 0x45
   870                           
   871  0065                     ldexp@value:	
   872                           ; 3 bytes @ 0x45
   873                           
   874  0065                     log@x:	
   875                           ; 3 bytes @ 0x45
   876                           
   877                           
   878                           ; 3 bytes @ 0x45
   879  0065                     	ds	2
   880  0067                     ??___fttol:	
   881                           
   882                           ; 0 bytes @ 0x47
   883  0067                     	ds	1
   884  0068                     ??_log:	
   885  0068                     ldexp@newexp:	
   886                           ; 0 bytes @ 0x48
   887                           
   888                           
   889                           ; 2 bytes @ 0x48
   890  0068                     	ds	1
   891  0069                     log@exponent:	
   892                           
   893                           ; 2 bytes @ 0x49
   894  0069                     	ds	1
   895  006A                     ??_ldexp:	
   896                           
   897                           ; 0 bytes @ 0x4A
   898  006A                     	ds	1
   899  006B                     ?___altoft:	
   900  006B                     ___altoft@c:	
   901                           ; 3 bytes @ 0x4B
   902                           
   903                           
   904                           ; 4 bytes @ 0x4B
   905  006B                     	ds	1
   906  006C                     _ldexp$873:	
   907                           
   908                           ; 3 bytes @ 0x4C
   909  006C                     	ds	3
   910  006F                     ??_floor:	
   911                           
   912                           ; 0 bytes @ 0x4F
   913  006F                     	ds	1
   914  0070                     ??_readLight:	
   915  0070                     ??_main:	
   916                           ; 0 bytes @ 0x50
   917                           
   918                           
   919                           	psect	maintext
   920  16B0                     __pmaintext:	
   921                           ; 0 bytes @ 0x50
   922 ;;
   923 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   924 ;;
   925 ;; *************** function _main *****************
   926 ;; Defined at:
   927 ;;		line 94 in file "SensorBoard.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  argc            2   66[BANK1 ] int 
   930 ;;  argv            2   68[BANK1 ] PTR PTR unsigned char 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2   66[BANK1 ] int 
   935 ;; Registers used:
   936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 17F/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       0       4       0       0
   943 ;;      Locals:         0       0       0       0       0
   944 ;;      Temps:          0       0       0       0       0
   945 ;;      Totals:         0       0       4       0       0
   946 ;;Total ram usage:        4 bytes
   947 ;; Hardware stack levels required when called:    9
   948 ;; This function calls:
   949 ;;		_config
   950 ;;		_fillRegister
   951 ;;		_initialize_i2c
   952 ;;		_tempCalibration
   953 ;; This function is called by:
   954 ;;		Startup code after reset
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           
   959                           ;psect for function _main
   960  16B0                     _main:	
   961                           
   962                           ;SensorBoard.c: 95: config();
   963                           
   964                           ;incstack = 0
   965 ;; hardware stack exceeded
   966                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   967  16B0  120A  118A  20E7   	fcall	_config
      +       160A  118A         
   968                           
   969                           ;SensorBoard.c: 96: initialize_i2c();
   970  16B5  120A  158A  2001   	fcall	_initialize_i2c
      +       160A  118A         
   971                           
   972                           ;SensorBoard.c: 97: tempCalibration();
   973  16BA  120A  158A  21BE   	fcall	_tempCalibration
      +       160A  118A         
   974                           
   975                           ;SensorBoard.c: 98: (TRISCbits.TRISC5) = 0;
   976  16BF  1683               	bsf	3,5	;RP0=1, select bank1
   977  16C0  1303               	bcf	3,6	;RP1=0, select bank1
   978  16C1  1287               	bcf	7,5	;volatile
   979  16C2                     l4330:	
   980                           ;SensorBoard.c: 99: while (1) {
   981                           
   982                           
   983                           ;SensorBoard.c: 100: (PORTCbits.RC5) = 1;
   984  16C2  1283               	bcf	3,5	;RP0=0, select bank0
   985  16C3  1303               	bcf	3,6	;RP1=0, select bank0
   986  16C4  1687               	bsf	7,5	;volatile
   987                           
   988                           ;SensorBoard.c: 101: fillRegister(Temprature);
   989  16C5  3000               	movlw	0
   990  16C6  120A  118A  24A1   	fcall	_fillRegister
      +       160A  118A         
   991                           
   992                           ;SensorBoard.c: 102: fillRegister(Light);
   993  16CB  3001               	movlw	1
   994  16CC  120A  118A  24A1   	fcall	_fillRegister
      +       160A  118A         
   995                           
   996                           ;SensorBoard.c: 103: fillRegister(Accelerometer);
   997  16D1  3002               	movlw	2
   998  16D2  120A  118A  24A1   	fcall	_fillRegister
      +       160A  118A         
   999  16D7  2EC2               	goto	l4330
  1000  16D8                     __end_of_main:	
  1001                           ;SensorBoard.c: 104: }
  1002                           ;SensorBoard.c: 106: return (0);
  1003                           ;	Return value of _main is never used
  1004                           
  1005                           
  1006                           	psect	text1
  1007  09BE                     __ptext1:	
  1008 ;; *************** function _tempCalibration *****************
  1009 ;; Defined at:
  1010 ;;		line 182 in file "Analog.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;  vIn             3   62[BANK0 ] float 
  1015 ;;  vOut            3   59[BANK0 ] float 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  3    6[COMMON] float 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1025 ;;      Params:         0       0       0       0       0
  1026 ;;      Locals:         0       6       0       0       0
  1027 ;;      Temps:          0       0       0       0       0
  1028 ;;      Totals:         0       6       0       0       0
  1029 ;;Total ram usage:        6 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    4
  1032 ;; This function calls:
  1033 ;;		___awtoft
  1034 ;;		___ftadd
  1035 ;;		___ftdiv
  1036 ;;		_read
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function _tempCalibration
  1044  09BE                     _tempCalibration:	
  1045                           
  1046                           ;Analog.c: 183: float vOut = read((0), 0);
  1047                           
  1048                           ;incstack = 0
  1049                           ; Regs used in _tempCalibration: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1050  09BE  1283               	bcf	3,5	;RP0=0, select bank0
  1051  09BF  1303               	bcf	3,6	;RP1=0, select bank0
  1052  09C0  01A2               	clrf	read@justification
  1053  09C1  3000               	movlw	0
  1054  09C2  00A0               	movwf	read@channel
  1055  09C3  3000               	movlw	0
  1056  09C4  00A1               	movwf	read@channel+1
  1057  09C5  120A  158A  22F7   	fcall	_read
      +       120A  158A         
  1058  09CA  1283               	bcf	3,5	;RP0=0, select bank0
  1059  09CB  1303               	bcf	3,6	;RP1=0, select bank0
  1060  09CC  0821               	movf	?_read+1,w
  1061  09CD  01A9               	clrf	___awtoft@c+1
  1062  09CE  07A9               	addwf	___awtoft@c+1,f
  1063  09CF  0820               	movf	?_read,w
  1064  09D0  01A8               	clrf	___awtoft@c
  1065  09D1  07A8               	addwf	___awtoft@c,f
  1066  09D2  160A  118A  2664   	fcall	___awtoft
      +       120A  158A         
  1067  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  1068  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  1069  09D9  0828               	movf	?___awtoft,w
  1070  09DA  00DB               	movwf	tempCalibration@vOut
  1071  09DB  0829               	movf	?___awtoft+1,w
  1072  09DC  00DC               	movwf	tempCalibration@vOut+1
  1073  09DD  082A               	movf	?___awtoft+2,w
  1074  09DE  00DD               	movwf	tempCalibration@vOut+2
  1075                           
  1076                           ;Analog.c: 184: float vIn = (read((2), 0)) - 2.5;
  1077  09DF  3000               	movlw	0
  1078  09E0  00CE               	movwf	___ftadd@f1
  1079  09E1  3020               	movlw	32
  1080  09E2  00CF               	movwf	___ftadd@f1+1
  1081  09E3  30C0               	movlw	192
  1082  09E4  00D0               	movwf	___ftadd@f1+2
  1083  09E5  01A2               	clrf	read@justification
  1084  09E6  3002               	movlw	2
  1085  09E7  00A0               	movwf	read@channel
  1086  09E8  3000               	movlw	0
  1087  09E9  00A1               	movwf	read@channel+1
  1088  09EA  120A  158A  22F7   	fcall	_read
      +       120A  158A         
  1089  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  1090  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  1091  09F1  0821               	movf	?_read+1,w
  1092  09F2  01A9               	clrf	___awtoft@c+1
  1093  09F3  07A9               	addwf	___awtoft@c+1,f
  1094  09F4  0820               	movf	?_read,w
  1095  09F5  01A8               	clrf	___awtoft@c
  1096  09F6  07A8               	addwf	___awtoft@c,f
  1097  09F7  160A  118A  2664   	fcall	___awtoft
      +       120A  158A         
  1098  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  1099  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  1100  09FE  0828               	movf	?___awtoft,w
  1101  09FF  00D1               	movwf	___ftadd@f2
  1102  0A00  0829               	movf	?___awtoft+1,w
  1103  0A01  00D2               	movwf	___ftadd@f2+1
  1104  0A02  082A               	movf	?___awtoft+2,w
  1105  0A03  00D3               	movwf	___ftadd@f2+2
  1106  0A04  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  1107  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0A0B  084E               	movf	?___ftadd,w
  1110  0A0C  00DE               	movwf	tempCalibration@vIn
  1111  0A0D  084F               	movf	?___ftadd+1,w
  1112  0A0E  00DF               	movwf	tempCalibration@vIn+1
  1113  0A0F  0850               	movf	?___ftadd+2,w
  1114  0A10  00E0               	movwf	tempCalibration@vIn+2
  1115                           
  1116                           ;Analog.c: 186: if (vIn != 0)
  1117  0A11  0860               	movf	tempCalibration@vIn+2,w
  1118  0A12  045F               	iorwf	tempCalibration@vIn+1,w
  1119  0A13  045E               	iorwf	tempCalibration@vIn,w
  1120  0A14  1903               	skipnz
  1121  0A15  2A38               	goto	l179
  1122                           
  1123                           ;Analog.c: 187: gainTemp = vOut / vIn;
  1124  0A16  085E               	movf	tempCalibration@vIn,w
  1125  0A17  00BE               	movwf	___ftdiv@f2
  1126  0A18  085F               	movf	tempCalibration@vIn+1,w
  1127  0A19  00BF               	movwf	___ftdiv@f2+1
  1128  0A1A  0860               	movf	tempCalibration@vIn+2,w
  1129  0A1B  00C0               	movwf	___ftdiv@f2+2
  1130  0A1C  085B               	movf	tempCalibration@vOut,w
  1131  0A1D  00C1               	movwf	___ftdiv@f1
  1132  0A1E  085C               	movf	tempCalibration@vOut+1,w
  1133  0A1F  00C2               	movwf	___ftdiv@f1+1
  1134  0A20  085D               	movf	tempCalibration@vOut+2,w
  1135  0A21  00C3               	movwf	___ftdiv@f1+2
  1136  0A22  120A  158A  223F   	fcall	___ftdiv
  1137  0A25  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0A26  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0A27  083E               	movf	?___ftdiv,w
  1140  0A28  1683               	bsf	3,5	;RP0=1, select bank1
  1141  0A29  1303               	bcf	3,6	;RP1=0, select bank1
  1142  0A2A  00E6               	movwf	_gainTemp^(0+128)
  1143  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0A2D  083F               	movf	?___ftdiv+1,w
  1146  0A2E  1683               	bsf	3,5	;RP0=1, select bank1
  1147  0A2F  1303               	bcf	3,6	;RP1=0, select bank1
  1148  0A30  00E7               	movwf	(_gainTemp+1)^(0+128)
  1149  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  1150  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  1151  0A33  0840               	movf	?___ftdiv+2,w
  1152  0A34  1683               	bsf	3,5	;RP0=1, select bank1
  1153  0A35  1303               	bcf	3,6	;RP1=0, select bank1
  1154  0A36  00E8               	movwf	(_gainTemp+2)^(0+128)
  1155  0A37  0008               	return
  1156  0A38                     l179:	
  1157                           
  1158                           ;Analog.c: 188: else
  1159                           ;Analog.c: 189: {
  1160                           ;Analog.c: 190: (TRISCbits.TRISC6) = 0;
  1161  0A38  1683               	bsf	3,5	;RP0=1, select bank1
  1162  0A39  1303               	bcf	3,6	;RP1=0, select bank1
  1163  0A3A  1307               	bcf	7,6	;volatile
  1164                           
  1165                           ;Analog.c: 191: (PORTCbits.RC6) = 1;
  1166  0A3B  1283               	bcf	3,5	;RP0=0, select bank0
  1167  0A3C  1303               	bcf	3,6	;RP1=0, select bank0
  1168  0A3D  1707               	bsf	7,6	;volatile
  1169                           
  1170                           ;Analog.c: 192: return -10;
  1171                           ;	Return value of _tempCalibration is never used
  1172  0A3E  0008               	return
  1173  0A3F                     __end_of_tempCalibration:	
  1174                           ;Analog.c: 193: }
  1175                           ;Analog.c: 195: return gainTemp;
  1176                           ;	Return value of _tempCalibration is never used
  1177                           
  1178                           
  1179                           	psect	text2
  1180  0801                     __ptext2:	
  1181 ;; *************** function _initialize_i2c *****************
  1182 ;; Defined at:
  1183 ;;		line 247 in file "SensorBoard.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;		None               void
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1197 ;;      Params:         0       0       0       0       0
  1198 ;;      Locals:         0       0       0       0       0
  1199 ;;      Temps:          0       3       0       0       0
  1200 ;;      Totals:         0       3       0       0       0
  1201 ;;Total ram usage:        3 bytes
  1202 ;; Hardware stack levels used:    1
  1203 ;; Hardware stack levels required when called:    2
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           
  1212                           ;psect for function _initialize_i2c
  1213  0801                     _initialize_i2c:	
  1214                           
  1215                           ;SensorBoard.c: 249: TRISCbits.TRISC3 = 1;
  1216                           
  1217                           ;incstack = 0
  1218                           ; Regs used in _initialize_i2c: [wreg+status,2+status,0]
  1219  0801  1683               	bsf	3,5	;RP0=1, select bank1
  1220  0802  1303               	bcf	3,6	;RP1=0, select bank1
  1221  0803  1587               	bsf	7,3	;volatile
  1222                           
  1223                           ;SensorBoard.c: 250: TRISCbits.TRISC4 = 1;
  1224  0804  1607               	bsf	7,4	;volatile
  1225                           
  1226                           ;SensorBoard.c: 253: SSPSTATbits.SMP = 0;
  1227  0805  1394               	bcf	20,7	;volatile
  1228                           
  1229                           ;SensorBoard.c: 256: SSPCONbits.WCOL = 0;
  1230  0806  1283               	bcf	3,5	;RP0=0, select bank0
  1231  0807  1303               	bcf	3,6	;RP1=0, select bank0
  1232  0808  1394               	bcf	20,7	;volatile
  1233                           
  1234                           ;SensorBoard.c: 259: SSPCONbits.SSPOV = 0;
  1235  0809  1314               	bcf	20,6	;volatile
  1236                           
  1237                           ;SensorBoard.c: 264: SSPCONbits.SSPM0 = 0;
  1238  080A  1014               	bcf	20,0	;volatile
  1239                           
  1240                           ;SensorBoard.c: 265: SSPCONbits.SSPM1 = 1;
  1241  080B  1494               	bsf	20,1	;volatile
  1242                           
  1243                           ;SensorBoard.c: 266: SSPCONbits.SSPM2 = 1;
  1244  080C  1514               	bsf	20,2	;volatile
  1245                           
  1246                           ;SensorBoard.c: 267: SSPCONbits.SSPM3 = 0;
  1247  080D  1194               	bcf	20,3	;volatile
  1248                           
  1249                           ;SensorBoard.c: 268: SSPCONbits.CKP = 1;
  1250  080E  1614               	bsf	20,4	;volatile
  1251                           
  1252                           ;SensorBoard.c: 269: SSPCONbits.SSPEN = 1;
  1253  080F  1694               	bsf	20,5	;volatile
  1254                           
  1255                           ;SensorBoard.c: 271: (TRISCbits.TRISC0) = 1;
  1256  0810  1683               	bsf	3,5	;RP0=1, select bank1
  1257  0811  1303               	bcf	3,6	;RP1=0, select bank1
  1258  0812  1407               	bsf	7,0	;volatile
  1259                           
  1260                           ;SensorBoard.c: 272: (TRISCbits.TRISC1) = 1;
  1261  0813  1487               	bsf	7,1	;volatile
  1262                           
  1263                           ;SensorBoard.c: 275: SSPADD = (((PORTCbits.RC0)) | ((PORTCbits.RC1) << 1) | 0b01110000) 
      +                          << 1;
  1264  0814  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0815  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0816  0807               	movf	7,w	;volatile
  1267  0817  3901               	andlw	1
  1268  0818  00A0               	movwf	??_initialize_i2c
  1269  0819  0C07               	rrf	7,w	;volatile
  1270  081A  3901               	andlw	1
  1271  081B  00A1               	movwf	??_initialize_i2c+1
  1272  081C  0721               	addwf	??_initialize_i2c+1,w
  1273  081D  0420               	iorwf	??_initialize_i2c,w
  1274  081E  00A2               	movwf	??_initialize_i2c+2
  1275  081F  0722               	addwf	??_initialize_i2c+2,w
  1276  0820  38E0               	iorlw	224
  1277  0821  1683               	bsf	3,5	;RP0=1, select bank1
  1278  0822  1303               	bcf	3,6	;RP1=0, select bank1
  1279  0823  0093               	movwf	19	;volatile
  1280                           
  1281                           ;SensorBoard.c: 278: SSPCON2bits.GCEN = 0;
  1282  0824  1391               	bcf	17,7	;volatile
  1283                           
  1284                           ;SensorBoard.c: 281: PIE1bits.SSPIE = 1;
  1285  0825  158C               	bsf	12,3	;volatile
  1286                           
  1287                           ;SensorBoard.c: 284: PIR1bits.SSPIF = 0;
  1288  0826  1283               	bcf	3,5	;RP0=0, select bank0
  1289  0827  1303               	bcf	3,6	;RP1=0, select bank0
  1290  0828  118C               	bcf	12,3	;volatile
  1291  0829  0008               	return
  1292  082A                     __end_of_initialize_i2c:	
  1293                           
  1294                           	psect	text3
  1295  04A1                     __ptext3:	
  1296 ;; *************** function _fillRegister *****************
  1297 ;; Defined at:
  1298 ;;		line 152 in file "SensorBoard.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  array           1    wreg     unsigned char 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  array           1   62[BANK1 ] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;		None               void
  1305 ;; Registers used:
  1306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1312 ;;      Params:         0       0       0       0       0
  1313 ;;      Locals:         0       0       4       0       0
  1314 ;;      Temps:          0       0       1       0       0
  1315 ;;      Totals:         0       0       5       0       0
  1316 ;;Total ram usage:        5 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    8
  1319 ;; This function calls:
  1320 ;;		___fttol
  1321 ;;		_readAccelerometer
  1322 ;;		_readLight
  1323 ;;		_readTemp
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           
  1330                           ;psect for function _fillRegister
  1331  04A1                     _fillRegister:	
  1332                           
  1333                           ;incstack = 0
  1334 ;; hardware stack exceeded
  1335                           ; Regs used in _fillRegister: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1336                           ;fillRegister@array stored from wreg
  1337  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  1338  04A2  1303               	bcf	3,6	;RP1=0, select bank1
  1339  04A3  00DE               	movwf	fillRegister@array^(0+128)
  1340                           
  1341                           ;SensorBoard.c: 154: switch (array) {
  1342  04A4  2DFE               	goto	l4320
  1343  04A5                     l4310:	
  1344                           ;SensorBoard.c: 155: case Temprature:
  1345                           
  1346                           
  1347                           ;SensorBoard.c: 156: Register[tempL] = (0x00ff & (int)readTemp());
  1348  04A5  120A  158A  2475   	fcall	_readTemp
      +       120A  118A         
  1349  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1350  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1351  04AC  085B               	movf	?_readTemp,w
  1352  04AD  00E3               	movwf	___fttol@f1
  1353  04AE  085C               	movf	?_readTemp+1,w
  1354  04AF  00E4               	movwf	___fttol@f1+1
  1355  04B0  085D               	movf	?_readTemp+2,w
  1356  04B1  00E5               	movwf	___fttol@f1+2
  1357  04B2  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1358  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1359  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1360  04B9  0863               	movf	?___fttol,w
  1361  04BA  1683               	bsf	3,5	;RP0=1, select bank1
  1362  04BB  1303               	bcf	3,6	;RP1=0, select bank1
  1363  04BC  00DD               	movwf	??_fillRegister^(0+128)
  1364  04BD  085D               	movf	??_fillRegister^(0+128),w
  1365  04BE  1683               	bsf	3,5	;RP0=1, select bank3
  1366  04BF  1703               	bsf	3,6	;RP1=1, select bank3
  1367  04C0  0091               	movwf	(_Register^(0+384)+1)
  1368                           
  1369                           ;SensorBoard.c: 157: Register[tempH] = ((int)readTemp() >> 8)&0x00ff;
  1370  04C1  120A  158A  2475   	fcall	_readTemp
      +       120A  118A         
  1371  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  1372  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  1373  04C8  085B               	movf	?_readTemp,w
  1374  04C9  00E3               	movwf	___fttol@f1
  1375  04CA  085C               	movf	?_readTemp+1,w
  1376  04CB  00E4               	movwf	___fttol@f1+1
  1377  04CC  085D               	movf	?_readTemp+2,w
  1378  04CD  00E5               	movwf	___fttol@f1+2
  1379  04CE  120A  158A  23B3   	fcall	___fttol
  1380  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1381  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1382  04D3  0864               	movf	?___fttol+1,w
  1383  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  1384  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  1385  04D6  00DD               	movwf	??_fillRegister^(0+128)
  1386  04D7  085D               	movf	??_fillRegister^(0+128),w
  1387  04D8  1683               	bsf	3,5	;RP0=1, select bank3
  1388  04D9  1703               	bsf	3,6	;RP1=1, select bank3
  1389  04DA  0092               	movwf	(_Register^(0+384)+2)
  1390                           
  1391                           ;SensorBoard.c: 158: break;
  1392  04DB  0008               	return
  1393  04DC                     l4312:	
  1394                           ;SensorBoard.c: 160: case Light:
  1395                           
  1396                           
  1397                           ;SensorBoard.c: 161: Register[lightL] = 0x00ff & (int)readLight();
  1398  04DC  120A  118A  260B   	fcall	_readLight
      +       120A  118A         
  1399  04E1  1683               	bsf	3,5	;RP0=1, select bank1
  1400  04E2  1303               	bcf	3,6	;RP1=0, select bank1
  1401  04E3  0851               	movf	?_readLight^(0+128),w
  1402  04E4  00DF               	movwf	_fillRegister$1119^(0+128)
  1403  04E5  0852               	movf	(?_readLight+1)^(0+128),w
  1404  04E6  00E0               	movwf	(_fillRegister$1119+1)^(0+128)
  1405  04E7  0853               	movf	(?_readLight+2)^(0+128),w
  1406  04E8  00E1               	movwf	(_fillRegister$1119+2)^(0+128)
  1407                           
  1408                           ;SensorBoard.c: 161: Register[lightL] = 0x00ff & (int)readLight();
  1409  04E9  085F               	movf	_fillRegister$1119^(0+128),w
  1410  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1411  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1412  04EC  00E3               	movwf	___fttol@f1
  1413  04ED  1683               	bsf	3,5	;RP0=1, select bank1
  1414  04EE  1303               	bcf	3,6	;RP1=0, select bank1
  1415  04EF  0860               	movf	(_fillRegister$1119+1)^(0+128),w
  1416  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1417  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1418  04F2  00E4               	movwf	___fttol@f1+1
  1419  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  1420  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  1421  04F5  0861               	movf	(_fillRegister$1119+2)^(0+128),w
  1422  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  1423  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  1424  04F8  00E5               	movwf	___fttol@f1+2
  1425  04F9  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1426  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1427  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0500  0863               	movf	?___fttol,w
  1429  0501  1683               	bsf	3,5	;RP0=1, select bank1
  1430  0502  1303               	bcf	3,6	;RP1=0, select bank1
  1431  0503  00DD               	movwf	??_fillRegister^(0+128)
  1432  0504  085D               	movf	??_fillRegister^(0+128),w
  1433  0505  1683               	bsf	3,5	;RP0=1, select bank3
  1434  0506  1703               	bsf	3,6	;RP1=1, select bank3
  1435  0507  0099               	movwf	(_Register^(0+384)+9)
  1436                           
  1437                           ;SensorBoard.c: 162: Register[lightH] = ((int)readLight() >> 8)&0x00ff;
  1438  0508  120A  118A  260B   	fcall	_readLight
      +       120A  118A         
  1439  050D  1683               	bsf	3,5	;RP0=1, select bank1
  1440  050E  1303               	bcf	3,6	;RP1=0, select bank1
  1441  050F  0851               	movf	?_readLight^(0+128),w
  1442  0510  00DF               	movwf	_fillRegister$1119^(0+128)
  1443  0511  0852               	movf	(?_readLight+1)^(0+128),w
  1444  0512  00E0               	movwf	(_fillRegister$1119+1)^(0+128)
  1445  0513  0853               	movf	(?_readLight+2)^(0+128),w
  1446  0514  00E1               	movwf	(_fillRegister$1119+2)^(0+128)
  1447                           
  1448                           ;SensorBoard.c: 162: Register[lightH] = ((int)readLight() >> 8)&0x00ff;
  1449  0515  085F               	movf	_fillRegister$1119^(0+128),w
  1450  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0517  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0518  00E3               	movwf	___fttol@f1
  1453  0519  1683               	bsf	3,5	;RP0=1, select bank1
  1454  051A  1303               	bcf	3,6	;RP1=0, select bank1
  1455  051B  0860               	movf	(_fillRegister$1119+1)^(0+128),w
  1456  051C  1283               	bcf	3,5	;RP0=0, select bank0
  1457  051D  1303               	bcf	3,6	;RP1=0, select bank0
  1458  051E  00E4               	movwf	___fttol@f1+1
  1459  051F  1683               	bsf	3,5	;RP0=1, select bank1
  1460  0520  1303               	bcf	3,6	;RP1=0, select bank1
  1461  0521  0861               	movf	(_fillRegister$1119+2)^(0+128),w
  1462  0522  1283               	bcf	3,5	;RP0=0, select bank0
  1463  0523  1303               	bcf	3,6	;RP1=0, select bank0
  1464  0524  00E5               	movwf	___fttol@f1+2
  1465  0525  120A  158A  23B3   	fcall	___fttol
  1466  0528  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0529  1303               	bcf	3,6	;RP1=0, select bank0
  1468  052A  0864               	movf	?___fttol+1,w
  1469  052B  1683               	bsf	3,5	;RP0=1, select bank1
  1470  052C  1303               	bcf	3,6	;RP1=0, select bank1
  1471  052D  00DD               	movwf	??_fillRegister^(0+128)
  1472  052E  085D               	movf	??_fillRegister^(0+128),w
  1473  052F  1683               	bsf	3,5	;RP0=1, select bank3
  1474  0530  1703               	bsf	3,6	;RP1=1, select bank3
  1475  0531  009A               	movwf	(_Register^(0+384)+10)
  1476                           
  1477                           ;SensorBoard.c: 163: break;
  1478  0532  0008               	return
  1479  0533                     l4318:	
  1480                           ;SensorBoard.c: 165: case Accelerometer:
  1481                           
  1482                           
  1483                           ;SensorBoard.c: 166: Register[accXL] = 0x00ff & (int)readAccelerometer((9));
  1484  0533  3009               	movlw	9
  1485  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0536  00D1               	movwf	readAccelerometer@axis
  1488  0537  3000               	movlw	0
  1489  0538  00D2               	movwf	readAccelerometer@axis+1
  1490  0539  160A  118A  27BB   	fcall	_readAccelerometer
      +       120A  118A         
  1491  053E  1283               	bcf	3,5	;RP0=0, select bank0
  1492  053F  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0540  0851               	movf	?_readAccelerometer,w
  1494  0541  00E3               	movwf	___fttol@f1
  1495  0542  0852               	movf	?_readAccelerometer+1,w
  1496  0543  00E4               	movwf	___fttol@f1+1
  1497  0544  0853               	movf	?_readAccelerometer+2,w
  1498  0545  00E5               	movwf	___fttol@f1+2
  1499  0546  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1500  054B  1283               	bcf	3,5	;RP0=0, select bank0
  1501  054C  1303               	bcf	3,6	;RP1=0, select bank0
  1502  054D  0863               	movf	?___fttol,w
  1503  054E  1683               	bsf	3,5	;RP0=1, select bank1
  1504  054F  1303               	bcf	3,6	;RP1=0, select bank1
  1505  0550  00DD               	movwf	??_fillRegister^(0+128)
  1506  0551  085D               	movf	??_fillRegister^(0+128),w
  1507  0552  1683               	bsf	3,5	;RP0=1, select bank3
  1508  0553  1703               	bsf	3,6	;RP1=1, select bank3
  1509  0554  0093               	movwf	(_Register^(0+384)+3)
  1510                           
  1511                           ;SensorBoard.c: 167: Register[accXH] = ((int)readAccelerometer((9)) >> 8)&0x00ff;
  1512  0555  3009               	movlw	9
  1513  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1515  0558  00D1               	movwf	readAccelerometer@axis
  1516  0559  3000               	movlw	0
  1517  055A  00D2               	movwf	readAccelerometer@axis+1
  1518  055B  160A  118A  27BB   	fcall	_readAccelerometer
      +       120A  118A         
  1519  0560  1283               	bcf	3,5	;RP0=0, select bank0
  1520  0561  1303               	bcf	3,6	;RP1=0, select bank0
  1521  0562  0851               	movf	?_readAccelerometer,w
  1522  0563  00E3               	movwf	___fttol@f1
  1523  0564  0852               	movf	?_readAccelerometer+1,w
  1524  0565  00E4               	movwf	___fttol@f1+1
  1525  0566  0853               	movf	?_readAccelerometer+2,w
  1526  0567  00E5               	movwf	___fttol@f1+2
  1527  0568  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1528  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1529  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1530  056F  0864               	movf	?___fttol+1,w
  1531  0570  1683               	bsf	3,5	;RP0=1, select bank1
  1532  0571  1303               	bcf	3,6	;RP1=0, select bank1
  1533  0572  00DD               	movwf	??_fillRegister^(0+128)
  1534  0573  085D               	movf	??_fillRegister^(0+128),w
  1535  0574  1683               	bsf	3,5	;RP0=1, select bank3
  1536  0575  1703               	bsf	3,6	;RP1=1, select bank3
  1537  0576  0094               	movwf	(_Register^(0+384)+4)
  1538                           
  1539                           ;SensorBoard.c: 168: Register[accYL] = 0x00ff & (int)readAccelerometer((11));
  1540  0577  300B               	movlw	11
  1541  0578  1283               	bcf	3,5	;RP0=0, select bank0
  1542  0579  1303               	bcf	3,6	;RP1=0, select bank0
  1543  057A  00D1               	movwf	readAccelerometer@axis
  1544  057B  3000               	movlw	0
  1545  057C  00D2               	movwf	readAccelerometer@axis+1
  1546  057D  160A  118A  27BB   	fcall	_readAccelerometer
      +       120A  118A         
  1547  0582  1283               	bcf	3,5	;RP0=0, select bank0
  1548  0583  1303               	bcf	3,6	;RP1=0, select bank0
  1549  0584  0851               	movf	?_readAccelerometer,w
  1550  0585  00E3               	movwf	___fttol@f1
  1551  0586  0852               	movf	?_readAccelerometer+1,w
  1552  0587  00E4               	movwf	___fttol@f1+1
  1553  0588  0853               	movf	?_readAccelerometer+2,w
  1554  0589  00E5               	movwf	___fttol@f1+2
  1555  058A  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1556  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1557  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1558  0591  0863               	movf	?___fttol,w
  1559  0592  1683               	bsf	3,5	;RP0=1, select bank1
  1560  0593  1303               	bcf	3,6	;RP1=0, select bank1
  1561  0594  00DD               	movwf	??_fillRegister^(0+128)
  1562  0595  085D               	movf	??_fillRegister^(0+128),w
  1563  0596  1683               	bsf	3,5	;RP0=1, select bank3
  1564  0597  1703               	bsf	3,6	;RP1=1, select bank3
  1565  0598  0095               	movwf	(_Register^(0+384)+5)
  1566                           
  1567                           ;SensorBoard.c: 169: Register[accYH] = ((int)readAccelerometer((11)) >> 8)&0x00ff;
  1568  0599  300B               	movlw	11
  1569  059A  1283               	bcf	3,5	;RP0=0, select bank0
  1570  059B  1303               	bcf	3,6	;RP1=0, select bank0
  1571  059C  00D1               	movwf	readAccelerometer@axis
  1572  059D  3000               	movlw	0
  1573  059E  00D2               	movwf	readAccelerometer@axis+1
  1574  059F  160A  118A  27BB   	fcall	_readAccelerometer
      +       120A  118A         
  1575  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1576  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1577  05A6  0851               	movf	?_readAccelerometer,w
  1578  05A7  00E3               	movwf	___fttol@f1
  1579  05A8  0852               	movf	?_readAccelerometer+1,w
  1580  05A9  00E4               	movwf	___fttol@f1+1
  1581  05AA  0853               	movf	?_readAccelerometer+2,w
  1582  05AB  00E5               	movwf	___fttol@f1+2
  1583  05AC  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1584  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1585  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1586  05B3  0864               	movf	?___fttol+1,w
  1587  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  1588  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  1589  05B6  00DD               	movwf	??_fillRegister^(0+128)
  1590  05B7  085D               	movf	??_fillRegister^(0+128),w
  1591  05B8  1683               	bsf	3,5	;RP0=1, select bank3
  1592  05B9  1703               	bsf	3,6	;RP1=1, select bank3
  1593  05BA  0096               	movwf	(_Register^(0+384)+6)
  1594                           
  1595                           ;SensorBoard.c: 170: Register[accZL] = 0x00ff & (int)readAccelerometer((13));
  1596  05BB  300D               	movlw	13
  1597  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1598  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1599  05BE  00D1               	movwf	readAccelerometer@axis
  1600  05BF  3000               	movlw	0
  1601  05C0  00D2               	movwf	readAccelerometer@axis+1
  1602  05C1  160A  118A  27BB   	fcall	_readAccelerometer
      +       120A  118A         
  1603  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  1604  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  1605  05C8  0851               	movf	?_readAccelerometer,w
  1606  05C9  00E3               	movwf	___fttol@f1
  1607  05CA  0852               	movf	?_readAccelerometer+1,w
  1608  05CB  00E4               	movwf	___fttol@f1+1
  1609  05CC  0853               	movf	?_readAccelerometer+2,w
  1610  05CD  00E5               	movwf	___fttol@f1+2
  1611  05CE  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1612  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  1613  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  1614  05D5  0863               	movf	?___fttol,w
  1615  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  1616  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  1617  05D8  00DD               	movwf	??_fillRegister^(0+128)
  1618  05D9  085D               	movf	??_fillRegister^(0+128),w
  1619  05DA  1683               	bsf	3,5	;RP0=1, select bank3
  1620  05DB  1703               	bsf	3,6	;RP1=1, select bank3
  1621  05DC  0097               	movwf	(_Register^(0+384)+7)
  1622                           
  1623                           ;SensorBoard.c: 171: Register[accZH] = ((int)readAccelerometer((13)) >> 8)&0x00ff;
  1624  05DD  300D               	movlw	13
  1625  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1626  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1627  05E0  00D1               	movwf	readAccelerometer@axis
  1628  05E1  3000               	movlw	0
  1629  05E2  00D2               	movwf	readAccelerometer@axis+1
  1630  05E3  160A  118A  27BB   	fcall	_readAccelerometer
      +       120A  118A         
  1631  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1632  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1633  05EA  0851               	movf	?_readAccelerometer,w
  1634  05EB  00E3               	movwf	___fttol@f1
  1635  05EC  0852               	movf	?_readAccelerometer+1,w
  1636  05ED  00E4               	movwf	___fttol@f1+1
  1637  05EE  0853               	movf	?_readAccelerometer+2,w
  1638  05EF  00E5               	movwf	___fttol@f1+2
  1639  05F0  120A  158A  23B3   	fcall	___fttol
  1640  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1641  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1642  05F5  0864               	movf	?___fttol+1,w
  1643  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  1644  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  1645  05F8  00DD               	movwf	??_fillRegister^(0+128)
  1646  05F9  085D               	movf	??_fillRegister^(0+128),w
  1647  05FA  1683               	bsf	3,5	;RP0=1, select bank3
  1648  05FB  1703               	bsf	3,6	;RP1=1, select bank3
  1649  05FC  0098               	movwf	(_Register^(0+384)+8)
  1650                           
  1651                           ;SensorBoard.c: 172: }
  1652  05FD  0008               	return
  1653  05FE                     l4320:	
  1654  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  1655  05FF  085E               	movf	fillRegister@array^(0+128),w
  1656                           
  1657                           ; Switch size 1, requested type "space"
  1658                           ; Number of cases is 3, Range of values is 0 to 2
  1659                           ; switch strategies available:
  1660                           ; Name         Instructions Cycles
  1661                           ; simple_byte           10     6 (average)
  1662                           ; direct_byte           17     8 (fixed)
  1663                           ; jumptable            260     6 (fixed)
  1664                           ;	Chosen strategy is simple_byte
  1665  0600  3A00               	xorlw	0	; case 0
  1666  0601  1903               	skipnz
  1667  0602  2CA5               	goto	l4310
  1668  0603  3A01               	xorlw	1	; case 1
  1669  0604  1903               	skipnz
  1670  0605  2CDC               	goto	l4312
  1671  0606  3A03               	xorlw	3	; case 2
  1672  0607  1903               	skipnz
  1673  0608  2D33               	goto	l4318
  1674  0609  2E0A               	goto	l88
  1675  060A                     l88:	
  1676  060A  0008               	return
  1677  060B                     __end_of_fillRegister:	
  1678                           
  1679                           	psect	text4
  1680  0C75                     __ptext4:	
  1681 ;; *************** function _readTemp *****************
  1682 ;; Defined at:
  1683 ;;		line 199 in file "Analog.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;  i               2   62[BANK0 ] int 
  1688 ;;  temp            3   64[BANK0 ] float 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  3   59[BANK0 ] float 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1698 ;;      Params:         0       3       0       0       0
  1699 ;;      Locals:         0       5       0       0       0
  1700 ;;      Temps:          0       0       0       0       0
  1701 ;;      Totals:         0       8       0       0       0
  1702 ;;Total ram usage:        8 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    5
  1705 ;; This function calls:
  1706 ;;		___awtoft
  1707 ;;		___ftadd
  1708 ;;		___ftdiv
  1709 ;;		___ftmul
  1710 ;;		_pointToVoltage
  1711 ;;		_read
  1712 ;; This function is called by:
  1713 ;;		_fillRegister
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           
  1718                           ;psect for function _readTemp
  1719  0C75                     _readTemp:	
  1720                           
  1721                           ;Analog.c: 200: float temp = 0;
  1722                           
  1723                           ;incstack = 0
  1724                           ; Regs used in _readTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1725  0C75  3000               	movlw	0
  1726  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  1727  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  1728  0C78  00E0               	movwf	readTemp@temp
  1729  0C79  3000               	movlw	0
  1730  0C7A  00E1               	movwf	readTemp@temp+1
  1731  0C7B  3000               	movlw	0
  1732  0C7C  00E2               	movwf	readTemp@temp+2
  1733                           
  1734                           ;Analog.c: 202: for (int i = 0; i < 5; i++)
  1735  0C7D  01DE               	clrf	readTemp@i
  1736  0C7E  01DF               	clrf	readTemp@i+1
  1737  0C7F  085F               	movf	readTemp@i+1,w
  1738  0C80  3A80               	xorlw	128
  1739  0C81  00FF               	movwf	127
  1740  0C82  3080               	movlw	128
  1741  0C83  027F               	subwf	127,w
  1742  0C84  1D03               	skipz
  1743  0C85  2C88               	goto	u3645
  1744  0C86  3005               	movlw	5
  1745  0C87  025E               	subwf	readTemp@i,w
  1746  0C88                     u3645:	
  1747  0C88  1803               	btfsc	3,0
  1748  0C89  2CCF               	goto	l4254
  1749  0C8A                     l4248:	
  1750                           
  1751                           ;Analog.c: 203: temp = (float) read((0), 0) + temp;
  1752  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0C8C  0860               	movf	readTemp@temp,w
  1755  0C8D  00CE               	movwf	___ftadd@f1
  1756  0C8E  0861               	movf	readTemp@temp+1,w
  1757  0C8F  00CF               	movwf	___ftadd@f1+1
  1758  0C90  0862               	movf	readTemp@temp+2,w
  1759  0C91  00D0               	movwf	___ftadd@f1+2
  1760  0C92  01A2               	clrf	read@justification
  1761  0C93  3000               	movlw	0
  1762  0C94  00A0               	movwf	read@channel
  1763  0C95  3000               	movlw	0
  1764  0C96  00A1               	movwf	read@channel+1
  1765  0C97  120A  158A  22F7   	fcall	_read
      +       120A  158A         
  1766  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0C9E  0821               	movf	?_read+1,w
  1769  0C9F  01A9               	clrf	___awtoft@c+1
  1770  0CA0  07A9               	addwf	___awtoft@c+1,f
  1771  0CA1  0820               	movf	?_read,w
  1772  0CA2  01A8               	clrf	___awtoft@c
  1773  0CA3  07A8               	addwf	___awtoft@c,f
  1774  0CA4  160A  118A  2664   	fcall	___awtoft
      +       120A  158A         
  1775  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0CAB  0828               	movf	?___awtoft,w
  1778  0CAC  00D1               	movwf	___ftadd@f2
  1779  0CAD  0829               	movf	?___awtoft+1,w
  1780  0CAE  00D2               	movwf	___ftadd@f2+1
  1781  0CAF  082A               	movf	?___awtoft+2,w
  1782  0CB0  00D3               	movwf	___ftadd@f2+2
  1783  0CB1  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  1784  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0CB8  084E               	movf	?___ftadd,w
  1787  0CB9  00E0               	movwf	readTemp@temp
  1788  0CBA  084F               	movf	?___ftadd+1,w
  1789  0CBB  00E1               	movwf	readTemp@temp+1
  1790  0CBC  0850               	movf	?___ftadd+2,w
  1791  0CBD  00E2               	movwf	readTemp@temp+2
  1792  0CBE  3001               	movlw	1
  1793  0CBF  07DE               	addwf	readTemp@i,f
  1794  0CC0  1803               	skipnc
  1795  0CC1  0ADF               	incf	readTemp@i+1,f
  1796  0CC2  3000               	movlw	0
  1797  0CC3  07DF               	addwf	readTemp@i+1,f
  1798  0CC4  085F               	movf	readTemp@i+1,w
  1799  0CC5  3A80               	xorlw	128
  1800  0CC6  00FF               	movwf	127
  1801  0CC7  3080               	movlw	128
  1802  0CC8  027F               	subwf	127,w
  1803  0CC9  1D03               	skipz
  1804  0CCA  2CCD               	goto	u3655
  1805  0CCB  3005               	movlw	5
  1806  0CCC  025E               	subwf	readTemp@i,w
  1807  0CCD                     u3655:	
  1808  0CCD  1C03               	skipc
  1809  0CCE  2C8A               	goto	l4248
  1810  0CCF                     l4254:	
  1811                           
  1812                           ;Analog.c: 205: temp = temp / 5;
  1813  0CCF  3000               	movlw	0
  1814  0CD0  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0CD1  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0CD2  00BE               	movwf	___ftdiv@f2
  1817  0CD3  30A0               	movlw	160
  1818  0CD4  00BF               	movwf	___ftdiv@f2+1
  1819  0CD5  3040               	movlw	64
  1820  0CD6  00C0               	movwf	___ftdiv@f2+2
  1821  0CD7  0860               	movf	readTemp@temp,w
  1822  0CD8  00C1               	movwf	___ftdiv@f1
  1823  0CD9  0861               	movf	readTemp@temp+1,w
  1824  0CDA  00C2               	movwf	___ftdiv@f1+1
  1825  0CDB  0862               	movf	readTemp@temp+2,w
  1826  0CDC  00C3               	movwf	___ftdiv@f1+2
  1827  0CDD  120A  158A  223F   	fcall	___ftdiv
      +       120A  158A         
  1828  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0CE4  083E               	movf	?___ftdiv,w
  1831  0CE5  00E0               	movwf	readTemp@temp
  1832  0CE6  083F               	movf	?___ftdiv+1,w
  1833  0CE7  00E1               	movwf	readTemp@temp+1
  1834  0CE8  0840               	movf	?___ftdiv+2,w
  1835  0CE9  00E2               	movwf	readTemp@temp+2
  1836                           
  1837                           ;Analog.c: 206: temp = pointToVoltage(temp);
  1838  0CEA  0860               	movf	readTemp@temp,w
  1839  0CEB  00CE               	movwf	pointToVoltage@point
  1840  0CEC  0861               	movf	readTemp@temp+1,w
  1841  0CED  00CF               	movwf	pointToVoltage@point+1
  1842  0CEE  0862               	movf	readTemp@temp+2,w
  1843  0CEF  00D0               	movwf	pointToVoltage@point+2
  1844  0CF0  160A  118A  26D8   	fcall	_pointToVoltage
      +       120A  158A         
  1845  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0CF7  084E               	movf	?_pointToVoltage,w
  1848  0CF8  00E0               	movwf	readTemp@temp
  1849  0CF9  084F               	movf	?_pointToVoltage+1,w
  1850  0CFA  00E1               	movwf	readTemp@temp+1
  1851  0CFB  0850               	movf	?_pointToVoltage+2,w
  1852  0CFC  00E2               	movwf	readTemp@temp+2
  1853                           
  1854                           ;Analog.c: 207: temp = (gainTemp * temp) + (-23.15);
  1855  0CFD  3033               	movlw	51
  1856  0CFE  00CE               	movwf	___ftadd@f1
  1857  0CFF  30B9               	movlw	185
  1858  0D00  00CF               	movwf	___ftadd@f1+1
  1859  0D01  30C1               	movlw	193
  1860  0D02  00D0               	movwf	___ftadd@f1+2
  1861  0D03  0860               	movf	readTemp@temp,w
  1862  0D04  00AE               	movwf	___ftmul@f1
  1863  0D05  0861               	movf	readTemp@temp+1,w
  1864  0D06  00AF               	movwf	___ftmul@f1+1
  1865  0D07  0862               	movf	readTemp@temp+2,w
  1866  0D08  00B0               	movwf	___ftmul@f1+2
  1867  0D09  1683               	bsf	3,5	;RP0=1, select bank1
  1868  0D0A  1303               	bcf	3,6	;RP1=0, select bank1
  1869  0D0B  0866               	movf	_gainTemp^(0+128),w
  1870  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  1871  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  1872  0D0E  00B1               	movwf	___ftmul@f2
  1873  0D0F  1683               	bsf	3,5	;RP0=1, select bank1
  1874  0D10  1303               	bcf	3,6	;RP1=0, select bank1
  1875  0D11  0867               	movf	(_gainTemp+1)^(0+128),w
  1876  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0D14  00B2               	movwf	___ftmul@f2+1
  1879  0D15  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0D16  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0D17  0868               	movf	(_gainTemp+2)^(0+128),w
  1882  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0D19  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0D1A  00B3               	movwf	___ftmul@f2+2
  1885  0D1B  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  1886  0D20  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0D21  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0D22  082E               	movf	?___ftmul,w
  1889  0D23  00D1               	movwf	___ftadd@f2
  1890  0D24  082F               	movf	?___ftmul+1,w
  1891  0D25  00D2               	movwf	___ftadd@f2+1
  1892  0D26  0830               	movf	?___ftmul+2,w
  1893  0D27  00D3               	movwf	___ftadd@f2+2
  1894  0D28  120A  158A  26F7   	fcall	___ftadd
  1895  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  1896  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0D2D  084E               	movf	?___ftadd,w
  1898  0D2E  00E0               	movwf	readTemp@temp
  1899  0D2F  084F               	movf	?___ftadd+1,w
  1900  0D30  00E1               	movwf	readTemp@temp+1
  1901  0D31  0850               	movf	?___ftadd+2,w
  1902  0D32  00E2               	movwf	readTemp@temp+2
  1903                           
  1904                           ;Analog.c: 209: return temp;
  1905  0D33  0860               	movf	readTemp@temp,w
  1906  0D34  00DB               	movwf	?_readTemp
  1907  0D35  0861               	movf	readTemp@temp+1,w
  1908  0D36  00DC               	movwf	?_readTemp+1
  1909  0D37  0862               	movf	readTemp@temp+2,w
  1910  0D38  00DD               	movwf	?_readTemp+2
  1911  0D39  0008               	return
  1912  0D3A                     __end_of_readTemp:	
  1913                           
  1914                           	psect	text5
  1915  060B                     __ptext5:	
  1916 ;; *************** function _readLight *****************
  1917 ;; Defined at:
  1918 ;;		line 161 in file "Analog.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  lightVal        3   58[BANK1 ] float 
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  3   49[BANK1 ] float 
  1925 ;; Registers used:
  1926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1932 ;;      Params:         0       0       3       0       0
  1933 ;;      Locals:         0       0       9       0       0
  1934 ;;      Temps:          0       0       0       0       0
  1935 ;;      Totals:         0       0      12       0       0
  1936 ;;Total ram usage:       12 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    7
  1939 ;; This function calls:
  1940 ;;		___awtoft
  1941 ;;		___ftadd
  1942 ;;		___ftdiv
  1943 ;;		___ftmul
  1944 ;;		_pointToVoltage
  1945 ;;		_pow
  1946 ;;		_read
  1947 ;; This function is called by:
  1948 ;;		_fillRegister
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           
  1953                           ;psect for function _readLight
  1954  060B                     _readLight:	
  1955                           
  1956                           ;Analog.c: 162: double lightVal;
  1957                           ;Analog.c: 163: lightVal = (pointToVoltage((const double) read((1), 0)) * (-4));
  1958                           
  1959                           ;incstack = 0
  1960 ;; hardware stack exceeded
  1961                           ; Regs used in _readLight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1962  060B  1283               	bcf	3,5	;RP0=0, select bank0
  1963  060C  1303               	bcf	3,6	;RP1=0, select bank0
  1964  060D  01A2               	clrf	read@justification
  1965  060E  3001               	movlw	1
  1966  060F  00A0               	movwf	read@channel
  1967  0610  3000               	movlw	0
  1968  0611  00A1               	movwf	read@channel+1
  1969  0612  120A  158A  22F7   	fcall	_read
      +       120A  118A         
  1970  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1971  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1972  0619  0821               	movf	?_read+1,w
  1973  061A  01A9               	clrf	___awtoft@c+1
  1974  061B  07A9               	addwf	___awtoft@c+1,f
  1975  061C  0820               	movf	?_read,w
  1976  061D  01A8               	clrf	___awtoft@c
  1977  061E  07A8               	addwf	___awtoft@c,f
  1978  061F  160A  118A  2664   	fcall	___awtoft
      +       120A  118A         
  1979  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0625  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0626  0828               	movf	?___awtoft,w
  1982  0627  00CE               	movwf	pointToVoltage@point
  1983  0628  0829               	movf	?___awtoft+1,w
  1984  0629  00CF               	movwf	pointToVoltage@point+1
  1985  062A  082A               	movf	?___awtoft+2,w
  1986  062B  00D0               	movwf	pointToVoltage@point+2
  1987  062C  160A  118A  26D8   	fcall	_pointToVoltage
      +       120A  118A         
  1988  0631  1283               	bcf	3,5	;RP0=0, select bank0
  1989  0632  1303               	bcf	3,6	;RP1=0, select bank0
  1990  0633  084E               	movf	?_pointToVoltage,w
  1991  0634  1683               	bsf	3,5	;RP0=1, select bank1
  1992  0635  1303               	bcf	3,6	;RP1=0, select bank1
  1993  0636  00D4               	movwf	_readLight$1120^(0+128)
  1994  0637  1283               	bcf	3,5	;RP0=0, select bank0
  1995  0638  1303               	bcf	3,6	;RP1=0, select bank0
  1996  0639  084F               	movf	?_pointToVoltage+1,w
  1997  063A  1683               	bsf	3,5	;RP0=1, select bank1
  1998  063B  1303               	bcf	3,6	;RP1=0, select bank1
  1999  063C  00D5               	movwf	(_readLight$1120+1)^(0+128)
  2000  063D  1283               	bcf	3,5	;RP0=0, select bank0
  2001  063E  1303               	bcf	3,6	;RP1=0, select bank0
  2002  063F  0850               	movf	?_pointToVoltage+2,w
  2003  0640  1683               	bsf	3,5	;RP0=1, select bank1
  2004  0641  1303               	bcf	3,6	;RP1=0, select bank1
  2005  0642  00D6               	movwf	(_readLight$1120+2)^(0+128)
  2006                           
  2007                           ;Analog.c: 162: double lightVal;
  2008                           ;Analog.c: 163: lightVal = (pointToVoltage((const double) read((1), 0)) * (-4));
  2009  0643  3000               	movlw	0
  2010  0644  1283               	bcf	3,5	;RP0=0, select bank0
  2011  0645  1303               	bcf	3,6	;RP1=0, select bank0
  2012  0646  00AE               	movwf	___ftmul@f1
  2013  0647  3080               	movlw	128
  2014  0648  00AF               	movwf	___ftmul@f1+1
  2015  0649  30C0               	movlw	192
  2016  064A  00B0               	movwf	___ftmul@f1+2
  2017  064B  1683               	bsf	3,5	;RP0=1, select bank1
  2018  064C  1303               	bcf	3,6	;RP1=0, select bank1
  2019  064D  0854               	movf	_readLight$1120^(0+128),w
  2020  064E  1283               	bcf	3,5	;RP0=0, select bank0
  2021  064F  1303               	bcf	3,6	;RP1=0, select bank0
  2022  0650  00B1               	movwf	___ftmul@f2
  2023  0651  1683               	bsf	3,5	;RP0=1, select bank1
  2024  0652  1303               	bcf	3,6	;RP1=0, select bank1
  2025  0653  0855               	movf	(_readLight$1120+1)^(0+128),w
  2026  0654  1283               	bcf	3,5	;RP0=0, select bank0
  2027  0655  1303               	bcf	3,6	;RP1=0, select bank0
  2028  0656  00B2               	movwf	___ftmul@f2+1
  2029  0657  1683               	bsf	3,5	;RP0=1, select bank1
  2030  0658  1303               	bcf	3,6	;RP1=0, select bank1
  2031  0659  0856               	movf	(_readLight$1120+2)^(0+128),w
  2032  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2033  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2034  065C  00B3               	movwf	___ftmul@f2+2
  2035  065D  120A  118A  2718   	fcall	___ftmul
      +       120A  118A         
  2036  0662  1283               	bcf	3,5	;RP0=0, select bank0
  2037  0663  1303               	bcf	3,6	;RP1=0, select bank0
  2038  0664  082E               	movf	?___ftmul,w
  2039  0665  1683               	bsf	3,5	;RP0=1, select bank1
  2040  0666  1303               	bcf	3,6	;RP1=0, select bank1
  2041  0667  00DA               	movwf	readLight@lightVal^(0+128)
  2042  0668  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0669  1303               	bcf	3,6	;RP1=0, select bank0
  2044  066A  082F               	movf	?___ftmul+1,w
  2045  066B  1683               	bsf	3,5	;RP0=1, select bank1
  2046  066C  1303               	bcf	3,6	;RP1=0, select bank1
  2047  066D  00DB               	movwf	(readLight@lightVal+1)^(0+128)
  2048  066E  1283               	bcf	3,5	;RP0=0, select bank0
  2049  066F  1303               	bcf	3,6	;RP1=0, select bank0
  2050  0670  0830               	movf	?___ftmul+2,w
  2051  0671  1683               	bsf	3,5	;RP0=1, select bank1
  2052  0672  1303               	bcf	3,6	;RP1=0, select bank1
  2053  0673  00DC               	movwf	(readLight@lightVal+2)^(0+128)
  2054                           
  2055                           ;Analog.c: 164: lightVal = lightVal / (2.22) + (10);
  2056  0674  3000               	movlw	0
  2057  0675  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0676  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0677  00CE               	movwf	___ftadd@f1
  2060  0678  3020               	movlw	32
  2061  0679  00CF               	movwf	___ftadd@f1+1
  2062  067A  3041               	movlw	65
  2063  067B  00D0               	movwf	___ftadd@f1+2
  2064  067C  3014               	movlw	20
  2065  067D  00BE               	movwf	___ftdiv@f2
  2066  067E  300E               	movlw	14
  2067  067F  00BF               	movwf	___ftdiv@f2+1
  2068  0680  3040               	movlw	64
  2069  0681  00C0               	movwf	___ftdiv@f2+2
  2070  0682  1683               	bsf	3,5	;RP0=1, select bank1
  2071  0683  1303               	bcf	3,6	;RP1=0, select bank1
  2072  0684  085A               	movf	readLight@lightVal^(0+128),w
  2073  0685  1283               	bcf	3,5	;RP0=0, select bank0
  2074  0686  1303               	bcf	3,6	;RP1=0, select bank0
  2075  0687  00C1               	movwf	___ftdiv@f1
  2076  0688  1683               	bsf	3,5	;RP0=1, select bank1
  2077  0689  1303               	bcf	3,6	;RP1=0, select bank1
  2078  068A  085B               	movf	(readLight@lightVal+1)^(0+128),w
  2079  068B  1283               	bcf	3,5	;RP0=0, select bank0
  2080  068C  1303               	bcf	3,6	;RP1=0, select bank0
  2081  068D  00C2               	movwf	___ftdiv@f1+1
  2082  068E  1683               	bsf	3,5	;RP0=1, select bank1
  2083  068F  1303               	bcf	3,6	;RP1=0, select bank1
  2084  0690  085C               	movf	(readLight@lightVal+2)^(0+128),w
  2085  0691  1283               	bcf	3,5	;RP0=0, select bank0
  2086  0692  1303               	bcf	3,6	;RP1=0, select bank0
  2087  0693  00C3               	movwf	___ftdiv@f1+2
  2088  0694  120A  158A  223F   	fcall	___ftdiv
      +       120A  118A         
  2089  0699  1283               	bcf	3,5	;RP0=0, select bank0
  2090  069A  1303               	bcf	3,6	;RP1=0, select bank0
  2091  069B  083E               	movf	?___ftdiv,w
  2092  069C  00D1               	movwf	___ftadd@f2
  2093  069D  083F               	movf	?___ftdiv+1,w
  2094  069E  00D2               	movwf	___ftadd@f2+1
  2095  069F  0840               	movf	?___ftdiv+2,w
  2096  06A0  00D3               	movwf	___ftadd@f2+2
  2097  06A1  120A  158A  26F7   	fcall	___ftadd
      +       120A  118A         
  2098  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  2099  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  2100  06A8  084E               	movf	?___ftadd,w
  2101  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  2102  06AA  1303               	bcf	3,6	;RP1=0, select bank1
  2103  06AB  00DA               	movwf	readLight@lightVal^(0+128)
  2104  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  2105  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  2106  06AE  084F               	movf	?___ftadd+1,w
  2107  06AF  1683               	bsf	3,5	;RP0=1, select bank1
  2108  06B0  1303               	bcf	3,6	;RP1=0, select bank1
  2109  06B1  00DB               	movwf	(readLight@lightVal+1)^(0+128)
  2110  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  2111  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  2112  06B4  0850               	movf	?___ftadd+2,w
  2113  06B5  1683               	bsf	3,5	;RP0=1, select bank1
  2114  06B6  1303               	bcf	3,6	;RP1=0, select bank1
  2115  06B7  00DC               	movwf	(readLight@lightVal+2)^(0+128)
  2116                           
  2117                           ;Analog.c: 167: if (lightVal != 0)
  2118  06B8  085C               	movf	(readLight@lightVal+2)^(0+128),w
  2119  06B9  045B               	iorwf	(readLight@lightVal+1)^(0+128),w
  2120  06BA  045A               	iorwf	readLight@lightVal^(0+128),w
  2121  06BB  1903               	skipnz
  2122  06BC  2F04               	goto	l174
  2123                           
  2124                           ;Analog.c: 168: lightVal = pow(((31,62) / (double) lightVal), (1 / (double) (0,5)));
  2125  06BD  085A               	movf	readLight@lightVal^(0+128),w
  2126  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  2127  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  2128  06C0  00BE               	movwf	___ftdiv@f2
  2129  06C1  1683               	bsf	3,5	;RP0=1, select bank1
  2130  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  2131  06C3  085B               	movf	(readLight@lightVal+1)^(0+128),w
  2132  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  2133  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  2134  06C6  00BF               	movwf	___ftdiv@f2+1
  2135  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  2136  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  2137  06C9  085C               	movf	(readLight@lightVal+2)^(0+128),w
  2138  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2139  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2140  06CC  00C0               	movwf	___ftdiv@f2+2
  2141  06CD  3000               	movlw	0
  2142  06CE  00C1               	movwf	___ftdiv@f1
  2143  06CF  3078               	movlw	120
  2144  06D0  00C2               	movwf	___ftdiv@f1+1
  2145  06D1  3042               	movlw	66
  2146  06D2  00C3               	movwf	___ftdiv@f1+2
  2147  06D3  120A  158A  223F   	fcall	___ftdiv
      +       120A  118A         
  2148  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2149  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2150  06DA  083E               	movf	?___ftdiv,w
  2151  06DB  1683               	bsf	3,5	;RP0=1, select bank1
  2152  06DC  1303               	bcf	3,6	;RP1=0, select bank1
  2153  06DD  00D7               	movwf	_readLight$1121^(0+128)
  2154  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2155  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2156  06E0  083F               	movf	?___ftdiv+1,w
  2157  06E1  1683               	bsf	3,5	;RP0=1, select bank1
  2158  06E2  1303               	bcf	3,6	;RP1=0, select bank1
  2159  06E3  00D8               	movwf	(_readLight$1121+1)^(0+128)
  2160  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  2161  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  2162  06E6  0840               	movf	?___ftdiv+2,w
  2163  06E7  1683               	bsf	3,5	;RP0=1, select bank1
  2164  06E8  1303               	bcf	3,6	;RP1=0, select bank1
  2165  06E9  00D9               	movwf	(_readLight$1121+2)^(0+128)
  2166                           
  2167                           ;Analog.c: 168: lightVal = pow(((31,62) / (double) lightVal), (1 / (double) (0,5)));
  2168  06EA  0857               	movf	_readLight$1121^(0+128),w
  2169  06EB  00BF               	movwf	pow@x^(0+128)
  2170  06EC  0858               	movf	(_readLight$1121+1)^(0+128),w
  2171  06ED  00C0               	movwf	(pow@x+1)^(0+128)
  2172  06EE  0859               	movf	(_readLight$1121+2)^(0+128),w
  2173  06EF  00C1               	movwf	(pow@x+2)^(0+128)
  2174  06F0  30CD               	movlw	205
  2175  06F1  00C2               	movwf	pow@y^(0+128)
  2176  06F2  304C               	movlw	76
  2177  06F3  00C3               	movwf	(pow@y+1)^(0+128)
  2178  06F4  303E               	movlw	62
  2179  06F5  00C4               	movwf	(pow@y+2)^(0+128)
  2180  06F6  120A  118A  2305   	fcall	_pow
      +       120A  118A         
  2181  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  2182  06FC  1303               	bcf	3,6	;RP1=0, select bank1
  2183  06FD  083F               	movf	?_pow^(0+128),w
  2184  06FE  00DA               	movwf	readLight@lightVal^(0+128)
  2185  06FF  0840               	movf	(?_pow+1)^(0+128),w
  2186  0700  00DB               	movwf	(readLight@lightVal+1)^(0+128)
  2187  0701  0841               	movf	(?_pow+2)^(0+128),w
  2188  0702  00DC               	movwf	(readLight@lightVal+2)^(0+128)
  2189  0703  2F11               	goto	l4276
  2190  0704                     l174:	
  2191                           
  2192                           ;Analog.c: 169: else
  2193                           ;Analog.c: 170: {
  2194                           ;Analog.c: 171: (TRISCbits.TRISC6) = 0;
  2195  0704  1307               	bcf	7,6	;volatile
  2196                           
  2197                           ;Analog.c: 172: (PORTCbits.RC6) = 1;
  2198  0705  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0706  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0707  1707               	bsf	7,6	;volatile
  2201                           
  2202                           ;Analog.c: 173: return -10;
  2203  0708  3000               	movlw	0
  2204  0709  1683               	bsf	3,5	;RP0=1, select bank1
  2205  070A  1303               	bcf	3,6	;RP1=0, select bank1
  2206  070B  00D1               	movwf	?_readLight^(0+128)
  2207  070C  3020               	movlw	32
  2208  070D  00D2               	movwf	(?_readLight+1)^(0+128)
  2209  070E  30C1               	movlw	193
  2210  070F  00D3               	movwf	(?_readLight+2)^(0+128)
  2211  0710  0008               	return
  2212  0711                     l4276:	
  2213                           
  2214                           ;Analog.c: 174: }
  2215                           ;Analog.c: 177: return (float) lightVal;
  2216  0711  085A               	movf	readLight@lightVal^(0+128),w
  2217  0712  00D1               	movwf	?_readLight^(0+128)
  2218  0713  085B               	movf	(readLight@lightVal+1)^(0+128),w
  2219  0714  00D2               	movwf	(?_readLight+1)^(0+128)
  2220  0715  085C               	movf	(readLight@lightVal+2)^(0+128),w
  2221  0716  00D3               	movwf	(?_readLight+2)^(0+128)
  2222  0717  0008               	return
  2223  0718                     __end_of_readLight:	
  2224                           
  2225                           	psect	text6
  2226  0305                     __ptext6:	
  2227 ;; *************** function _pow *****************
  2228 ;; Defined at:
  2229 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\pow.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  x               3   31[BANK1 ] float 
  2232 ;;  y               3   34[BANK1 ] float 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  yi              4   45[BANK1 ] unsigned long 
  2235 ;;  sign            1   44[BANK1 ] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  3   31[BANK1 ] unsigned char 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         0       0       6       0       0
  2246 ;;      Locals:         0       0      11       0       0
  2247 ;;      Temps:          0       0       1       0       0
  2248 ;;      Totals:         0       0      18       0       0
  2249 ;;Total ram usage:       18 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    6
  2252 ;; This function calls:
  2253 ;;		___ftge
  2254 ;;		___ftmul
  2255 ;;		___ftneg
  2256 ;;		___fttol
  2257 ;;		___lltoft
  2258 ;;		_exp
  2259 ;;		_log
  2260 ;; This function is called by:
  2261 ;;		_readLight
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function _pow
  2267  0305                     _pow:	
  2268                           
  2269                           ;incstack = 0
  2270 ;; hardware stack exceeded
  2271                           ; Regs used in _pow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2272  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2273  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2274  0307  01CC               	clrf	pow@sign^(0+128)
  2275  0308  0841               	movf	(pow@x+2)^(0+128),w
  2276  0309  0440               	iorwf	(pow@x+1)^(0+128),w
  2277  030A  043F               	iorwf	pow@x^(0+128),w
  2278  030B  1D03               	skipz
  2279  030C  2B3D               	goto	l4210
  2280  030D  3000               	movlw	0
  2281  030E  1283               	bcf	3,5	;RP0=0, select bank0
  2282  030F  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0310  00A0               	movwf	___ftge@ff1
  2284  0311  3000               	movlw	0
  2285  0312  00A1               	movwf	___ftge@ff1+1
  2286  0313  3000               	movlw	0
  2287  0314  00A2               	movwf	___ftge@ff1+2
  2288  0315  1683               	bsf	3,5	;RP0=1, select bank1
  2289  0316  1303               	bcf	3,6	;RP1=0, select bank1
  2290  0317  0842               	movf	pow@y^(0+128),w
  2291  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2292  0319  1303               	bcf	3,6	;RP1=0, select bank0
  2293  031A  00A3               	movwf	___ftge@ff2
  2294  031B  1683               	bsf	3,5	;RP0=1, select bank1
  2295  031C  1303               	bcf	3,6	;RP1=0, select bank1
  2296  031D  0843               	movf	(pow@y+1)^(0+128),w
  2297  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2298  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2299  0320  00A4               	movwf	___ftge@ff2+1
  2300  0321  1683               	bsf	3,5	;RP0=1, select bank1
  2301  0322  1303               	bcf	3,6	;RP1=0, select bank1
  2302  0323  0844               	movf	(pow@y+2)^(0+128),w
  2303  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2305  0326  00A5               	movwf	___ftge@ff2+2
  2306  0327  120A  158A  207C   	fcall	___ftge
      +       120A  118A         
  2307  032C  1C03               	btfss	3,0
  2308  032D  2B34               	goto	l635
  2309  032E  3021               	movlw	33
  2310  032F  1683               	bsf	3,5	;RP0=1, select bank1
  2311  0330  1303               	bcf	3,6	;RP1=0, select bank1
  2312  0331  00E9               	movwf	_errno^(0+128)
  2313  0332  3000               	movlw	0
  2314  0333  00EA               	movwf	(_errno^(0+128)+1)
  2315  0334                     l635:	
  2316  0334  3000               	movlw	0
  2317  0335  1683               	bsf	3,5	;RP0=1, select bank1
  2318  0336  1303               	bcf	3,6	;RP1=0, select bank1
  2319  0337  00BF               	movwf	?_pow^(0+128)
  2320  0338  3000               	movlw	0
  2321  0339  00C0               	movwf	(?_pow+1)^(0+128)
  2322  033A  3000               	movlw	0
  2323  033B  00C1               	movwf	(?_pow+2)^(0+128)
  2324  033C  0008               	return
  2325  033D                     l4210:	
  2326  033D  0844               	movf	(pow@y+2)^(0+128),w
  2327  033E  0443               	iorwf	(pow@y+1)^(0+128),w
  2328  033F  0442               	iorwf	pow@y^(0+128),w
  2329  0340  1D03               	skipz
  2330  0341  2B49               	goto	l4216
  2331  0342  3000               	movlw	0
  2332  0343  00BF               	movwf	?_pow^(0+128)
  2333  0344  3080               	movlw	128
  2334  0345  00C0               	movwf	(?_pow+1)^(0+128)
  2335  0346  303F               	movlw	63
  2336  0347  00C1               	movwf	(?_pow+2)^(0+128)
  2337  0348  0008               	return
  2338  0349                     l4216:	
  2339  0349  083F               	movf	pow@x^(0+128),w
  2340  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2341  034B  1303               	bcf	3,6	;RP1=0, select bank0
  2342  034C  00A0               	movwf	___ftge@ff1
  2343  034D  1683               	bsf	3,5	;RP0=1, select bank1
  2344  034E  1303               	bcf	3,6	;RP1=0, select bank1
  2345  034F  0840               	movf	(pow@x+1)^(0+128),w
  2346  0350  1283               	bcf	3,5	;RP0=0, select bank0
  2347  0351  1303               	bcf	3,6	;RP1=0, select bank0
  2348  0352  00A1               	movwf	___ftge@ff1+1
  2349  0353  1683               	bsf	3,5	;RP0=1, select bank1
  2350  0354  1303               	bcf	3,6	;RP1=0, select bank1
  2351  0355  0841               	movf	(pow@x+2)^(0+128),w
  2352  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2353  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2354  0358  00A2               	movwf	___ftge@ff1+2
  2355  0359  3000               	movlw	0
  2356  035A  00A3               	movwf	___ftge@ff2
  2357  035B  3000               	movlw	0
  2358  035C  00A4               	movwf	___ftge@ff2+1
  2359  035D  3000               	movlw	0
  2360  035E  00A5               	movwf	___ftge@ff2+2
  2361  035F  120A  158A  207C   	fcall	___ftge
      +       120A  118A         
  2362  0364  1803               	btfsc	3,0
  2363  0365  2C03               	goto	l4228
  2364  0366  1683               	bsf	3,5	;RP0=1, select bank1
  2365  0367  1303               	bcf	3,6	;RP1=0, select bank1
  2366  0368  0842               	movf	pow@y^(0+128),w
  2367  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2368  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2369  036B  00E3               	movwf	___fttol@f1
  2370  036C  1683               	bsf	3,5	;RP0=1, select bank1
  2371  036D  1303               	bcf	3,6	;RP1=0, select bank1
  2372  036E  0843               	movf	(pow@y+1)^(0+128),w
  2373  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0371  00E4               	movwf	___fttol@f1+1
  2376  0372  1683               	bsf	3,5	;RP0=1, select bank1
  2377  0373  1303               	bcf	3,6	;RP1=0, select bank1
  2378  0374  0844               	movf	(pow@y+2)^(0+128),w
  2379  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0377  00E5               	movwf	___fttol@f1+2
  2382  0378  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  2383  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2384  037E  1303               	bcf	3,6	;RP1=0, select bank0
  2385  037F  0866               	movf	?___fttol+3,w
  2386  0380  1683               	bsf	3,5	;RP0=1, select bank1
  2387  0381  1303               	bcf	3,6	;RP1=0, select bank1
  2388  0382  00D0               	movwf	(pow@yi+3)^(0+128)
  2389  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2390  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2391  0385  0865               	movf	?___fttol+2,w
  2392  0386  1683               	bsf	3,5	;RP0=1, select bank1
  2393  0387  1303               	bcf	3,6	;RP1=0, select bank1
  2394  0388  00CF               	movwf	(pow@yi+2)^(0+128)
  2395  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2396  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2397  038B  0864               	movf	?___fttol+1,w
  2398  038C  1683               	bsf	3,5	;RP0=1, select bank1
  2399  038D  1303               	bcf	3,6	;RP1=0, select bank1
  2400  038E  00CE               	movwf	(pow@yi+1)^(0+128)
  2401  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0390  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0391  0863               	movf	?___fttol,w
  2404  0392  1683               	bsf	3,5	;RP0=1, select bank1
  2405  0393  1303               	bcf	3,6	;RP1=0, select bank1
  2406  0394  00CD               	movwf	pow@yi^(0+128)
  2407  0395  0850               	movf	(pow@yi+3)^(0+128),w
  2408  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0398  00AB               	movwf	___lltoft@c+3
  2411  0399  1683               	bsf	3,5	;RP0=1, select bank1
  2412  039A  1303               	bcf	3,6	;RP1=0, select bank1
  2413  039B  084F               	movf	(pow@yi+2)^(0+128),w
  2414  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2415  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2416  039E  00AA               	movwf	___lltoft@c+2
  2417  039F  1683               	bsf	3,5	;RP0=1, select bank1
  2418  03A0  1303               	bcf	3,6	;RP1=0, select bank1
  2419  03A1  084E               	movf	(pow@yi+1)^(0+128),w
  2420  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2421  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2422  03A4  00A9               	movwf	___lltoft@c+1
  2423  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2424  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2425  03A7  084D               	movf	pow@yi^(0+128),w
  2426  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2427  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2428  03AA  00A8               	movwf	___lltoft@c
  2429  03AB  160A  118A  2705   	fcall	___lltoft
      +       120A  118A         
  2430  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2431  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2432  03B2  0844               	movf	(pow@y+2)^(0+128),w
  2433  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2434  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  2435  03B5  062A               	xorwf	?___lltoft+2,w
  2436  03B6  1D03               	skipz
  2437  03B7  2BC6               	goto	u3625
  2438  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2439  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2440  03BA  0843               	movf	(pow@y+1)^(0+128),w
  2441  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2442  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2443  03BD  0629               	xorwf	?___lltoft+1,w
  2444  03BE  1D03               	skipz
  2445  03BF  2BC6               	goto	u3625
  2446  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  2447  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  2448  03C2  0842               	movf	pow@y^(0+128),w
  2449  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2450  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2451  03C5  0628               	xorwf	?___lltoft,w
  2452  03C6                     u3625:	
  2453  03C6  1903               	skipnz
  2454  03C7  2BD5               	goto	l4224
  2455  03C8  3021               	movlw	33
  2456  03C9  1683               	bsf	3,5	;RP0=1, select bank1
  2457  03CA  1303               	bcf	3,6	;RP1=0, select bank1
  2458  03CB  00E9               	movwf	_errno^(0+128)
  2459  03CC  3000               	movlw	0
  2460  03CD  00EA               	movwf	(_errno^(0+128)+1)
  2461  03CE  3000               	movlw	0
  2462  03CF  00BF               	movwf	?_pow^(0+128)
  2463  03D0  3000               	movlw	0
  2464  03D1  00C0               	movwf	(?_pow+1)^(0+128)
  2465  03D2  3000               	movlw	0
  2466  03D3  00C1               	movwf	(?_pow+2)^(0+128)
  2467  03D4  0008               	return
  2468  03D5                     l4224:	
  2469  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2470  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2471  03D7  084D               	movf	pow@yi^(0+128),w
  2472  03D8  3901               	andlw	1
  2473  03D9  00C5               	movwf	??_pow^(0+128)
  2474  03DA  0845               	movf	??_pow^(0+128),w
  2475  03DB  00CC               	movwf	pow@sign^(0+128)
  2476  03DC  083F               	movf	pow@x^(0+128),w
  2477  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2478  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2479  03DF  00A0               	movwf	___ftneg@f1
  2480  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2481  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2482  03E2  0840               	movf	(pow@x+1)^(0+128),w
  2483  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2484  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2485  03E5  00A1               	movwf	___ftneg@f1+1
  2486  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  2487  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  2488  03E8  0841               	movf	(pow@x+2)^(0+128),w
  2489  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2490  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2491  03EB  00A2               	movwf	___ftneg@f1+2
  2492  03EC  120A  118A  20F4   	fcall	___ftneg
      +       120A  118A         
  2493  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2494  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2495  03F3  0820               	movf	?___ftneg,w
  2496  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2497  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  2498  03F6  00BF               	movwf	pow@x^(0+128)
  2499  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2500  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2501  03F9  0821               	movf	?___ftneg+1,w
  2502  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  2503  03FB  1303               	bcf	3,6	;RP1=0, select bank1
  2504  03FC  00C0               	movwf	(pow@x+1)^(0+128)
  2505  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2506  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2507  03FF  0822               	movf	?___ftneg+2,w
  2508  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2509  0401  1303               	bcf	3,6	;RP1=0, select bank1
  2510  0402  00C1               	movwf	(pow@x+2)^(0+128)
  2511  0403                     l4228:	
  2512  0403  1683               	bsf	3,5	;RP0=1, select bank1
  2513  0404  1303               	bcf	3,6	;RP1=0, select bank1
  2514  0405  083F               	movf	pow@x^(0+128),w
  2515  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2516  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0408  00E5               	movwf	log@x
  2518  0409  1683               	bsf	3,5	;RP0=1, select bank1
  2519  040A  1303               	bcf	3,6	;RP1=0, select bank1
  2520  040B  0840               	movf	(pow@x+1)^(0+128),w
  2521  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2522  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2523  040E  00E6               	movwf	log@x+1
  2524  040F  1683               	bsf	3,5	;RP0=1, select bank1
  2525  0410  1303               	bcf	3,6	;RP1=0, select bank1
  2526  0411  0841               	movf	(pow@x+2)^(0+128),w
  2527  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2528  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2529  0414  00E7               	movwf	log@x+2
  2530  0415  120A  158A  253A   	fcall	_log
      +       120A  118A         
  2531  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2532  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2533  041C  0865               	movf	?_log,w
  2534  041D  1683               	bsf	3,5	;RP0=1, select bank1
  2535  041E  1303               	bcf	3,6	;RP1=0, select bank1
  2536  041F  00C6               	movwf	_pow$1122^(0+128)
  2537  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2538  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2539  0422  0866               	movf	?_log+1,w
  2540  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2541  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2542  0425  00C7               	movwf	(_pow$1122+1)^(0+128)
  2543  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0427  1303               	bcf	3,6	;RP1=0, select bank0
  2545  0428  0867               	movf	?_log+2,w
  2546  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2547  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2548  042B  00C8               	movwf	(_pow$1122+2)^(0+128)
  2549  042C  0842               	movf	pow@y^(0+128),w
  2550  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2551  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2552  042F  00AE               	movwf	___ftmul@f1
  2553  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2554  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2555  0432  0843               	movf	(pow@y+1)^(0+128),w
  2556  0433  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0434  1303               	bcf	3,6	;RP1=0, select bank0
  2558  0435  00AF               	movwf	___ftmul@f1+1
  2559  0436  1683               	bsf	3,5	;RP0=1, select bank1
  2560  0437  1303               	bcf	3,6	;RP1=0, select bank1
  2561  0438  0844               	movf	(pow@y+2)^(0+128),w
  2562  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2563  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2564  043B  00B0               	movwf	___ftmul@f1+2
  2565  043C  1683               	bsf	3,5	;RP0=1, select bank1
  2566  043D  1303               	bcf	3,6	;RP1=0, select bank1
  2567  043E  0846               	movf	_pow$1122^(0+128),w
  2568  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2569  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2570  0441  00B1               	movwf	___ftmul@f2
  2571  0442  1683               	bsf	3,5	;RP0=1, select bank1
  2572  0443  1303               	bcf	3,6	;RP1=0, select bank1
  2573  0444  0847               	movf	(_pow$1122+1)^(0+128),w
  2574  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2575  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2576  0447  00B2               	movwf	___ftmul@f2+1
  2577  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2578  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2579  044A  0848               	movf	(_pow$1122+2)^(0+128),w
  2580  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2581  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2582  044D  00B3               	movwf	___ftmul@f2+2
  2583  044E  120A  118A  2718   	fcall	___ftmul
      +       120A  118A         
  2584  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0455  082E               	movf	?___ftmul,w
  2587  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2588  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2589  0458  00C9               	movwf	_pow$1123^(0+128)
  2590  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2591  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2592  045B  082F               	movf	?___ftmul+1,w
  2593  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2594  045D  1303               	bcf	3,6	;RP1=0, select bank1
  2595  045E  00CA               	movwf	(_pow$1123+1)^(0+128)
  2596  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0461  0830               	movf	?___ftmul+2,w
  2599  0462  1683               	bsf	3,5	;RP0=1, select bank1
  2600  0463  1303               	bcf	3,6	;RP1=0, select bank1
  2601  0464  00CB               	movwf	(_pow$1123+2)^(0+128)
  2602  0465  0849               	movf	_pow$1123^(0+128),w
  2603  0466  00B2               	movwf	exp@x^(0+128)
  2604  0467  084A               	movf	(_pow$1123+1)^(0+128),w
  2605  0468  00B3               	movwf	(exp@x+1)^(0+128)
  2606  0469  084B               	movf	(_pow$1123+2)^(0+128),w
  2607  046A  00B4               	movwf	(exp@x+2)^(0+128)
  2608  046B  120A  118A  210F   	fcall	_exp
      +       120A  118A         
  2609  0470  1683               	bsf	3,5	;RP0=1, select bank1
  2610  0471  1303               	bcf	3,6	;RP1=0, select bank1
  2611  0472  0832               	movf	?_exp^(0+128),w
  2612  0473  00BF               	movwf	pow@x^(0+128)
  2613  0474  0833               	movf	(?_exp+1)^(0+128),w
  2614  0475  00C0               	movwf	(pow@x+1)^(0+128)
  2615  0476  0834               	movf	(?_exp+2)^(0+128),w
  2616  0477  00C1               	movwf	(pow@x+2)^(0+128)
  2617  0478  084C               	movf	pow@sign^(0+128),w
  2618  0479  1903               	btfsc	3,2
  2619  047A  0008               	return
  2620  047B  083F               	movf	pow@x^(0+128),w
  2621  047C  1283               	bcf	3,5	;RP0=0, select bank0
  2622  047D  1303               	bcf	3,6	;RP1=0, select bank0
  2623  047E  00A0               	movwf	___ftneg@f1
  2624  047F  1683               	bsf	3,5	;RP0=1, select bank1
  2625  0480  1303               	bcf	3,6	;RP1=0, select bank1
  2626  0481  0840               	movf	(pow@x+1)^(0+128),w
  2627  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0483  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0484  00A1               	movwf	___ftneg@f1+1
  2630  0485  1683               	bsf	3,5	;RP0=1, select bank1
  2631  0486  1303               	bcf	3,6	;RP1=0, select bank1
  2632  0487  0841               	movf	(pow@x+2)^(0+128),w
  2633  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2635  048A  00A2               	movwf	___ftneg@f1+2
  2636  048B  120A  118A  20F4   	fcall	___ftneg
  2637  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2638  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2639  0490  0820               	movf	?___ftneg,w
  2640  0491  1683               	bsf	3,5	;RP0=1, select bank1
  2641  0492  1303               	bcf	3,6	;RP1=0, select bank1
  2642  0493  00BF               	movwf	?_pow^(0+128)
  2643  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0496  0821               	movf	?___ftneg+1,w
  2646  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2647  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2648  0499  00C0               	movwf	(?_pow+1)^(0+128)
  2649  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2650  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2651  049C  0822               	movf	?___ftneg+2,w
  2652  049D  1683               	bsf	3,5	;RP0=1, select bank1
  2653  049E  1303               	bcf	3,6	;RP1=0, select bank1
  2654  049F  00C1               	movwf	(?_pow+2)^(0+128)
  2655  04A0  0008               	return
  2656  04A1                     __end_of_pow:	
  2657                           
  2658                           	psect	text7
  2659  0D3A                     __ptext7:	
  2660 ;; *************** function _log *****************
  2661 ;; Defined at:
  2662 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\log.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  x               3   69[BANK0 ] unsigned char 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  exponent        2   73[BANK0 ] int 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  3   69[BANK0 ] int 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         0       3       0       0       0
  2677 ;;      Locals:         0       2       0       0       0
  2678 ;;      Temps:          0       1       0       0       0
  2679 ;;      Totals:         0       6       0       0       0
  2680 ;;Total ram usage:        6 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    5
  2683 ;; This function calls:
  2684 ;;		___awtoft
  2685 ;;		___ftadd
  2686 ;;		___ftge
  2687 ;;		___ftmul
  2688 ;;		_eval_poly
  2689 ;;		_frexp
  2690 ;; This function is called by:
  2691 ;;		_pow
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _log
  2697  0D3A                     _log:	
  2698                           
  2699                           ;incstack = 0
  2700 ;; hardware stack exceeded
  2701                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2702  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  2704  0D3C  0865               	movf	log@x,w
  2705  0D3D  00A0               	movwf	___ftge@ff1
  2706  0D3E  0866               	movf	log@x+1,w
  2707  0D3F  00A1               	movwf	___ftge@ff1+1
  2708  0D40  0867               	movf	log@x+2,w
  2709  0D41  00A2               	movwf	___ftge@ff1+2
  2710  0D42  3000               	movlw	0
  2711  0D43  00A3               	movwf	___ftge@ff2
  2712  0D44  3000               	movlw	0
  2713  0D45  00A4               	movwf	___ftge@ff2+1
  2714  0D46  3000               	movlw	0
  2715  0D47  00A5               	movwf	___ftge@ff2+2
  2716  0D48  120A  158A  207C   	fcall	___ftge
      +       120A  158A         
  2717  0D4D  1803               	btfsc	3,0
  2718  0D4E  2D5E               	goto	l4098
  2719  0D4F  3021               	movlw	33
  2720  0D50  1683               	bsf	3,5	;RP0=1, select bank1
  2721  0D51  1303               	bcf	3,6	;RP1=0, select bank1
  2722  0D52  00E9               	movwf	_errno^(0+128)
  2723  0D53  3000               	movlw	0
  2724  0D54  00EA               	movwf	(_errno^(0+128)+1)
  2725  0D55  3000               	movlw	0
  2726  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0D58  00E5               	movwf	?_log
  2729  0D59  3000               	movlw	0
  2730  0D5A  00E6               	movwf	?_log+1
  2731  0D5B  3000               	movlw	0
  2732  0D5C  00E7               	movwf	?_log+2
  2733  0D5D  0008               	return
  2734  0D5E                     l4098:	
  2735  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0D60  0867               	movf	log@x+2,w
  2738  0D61  0466               	iorwf	log@x+1,w
  2739  0D62  0465               	iorwf	log@x,w
  2740  0D63  1D03               	skipz
  2741  0D64  2D74               	goto	l4104
  2742  0D65  3022               	movlw	34
  2743  0D66  1683               	bsf	3,5	;RP0=1, select bank1
  2744  0D67  1303               	bcf	3,6	;RP1=0, select bank1
  2745  0D68  00E9               	movwf	_errno^(0+128)
  2746  0D69  3000               	movlw	0
  2747  0D6A  00EA               	movwf	(_errno^(0+128)+1)
  2748  0D6B  3000               	movlw	0
  2749  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  2750  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  2751  0D6E  00E5               	movwf	?_log
  2752  0D6F  3000               	movlw	0
  2753  0D70  00E6               	movwf	?_log+1
  2754  0D71  3000               	movlw	0
  2755  0D72  00E7               	movwf	?_log+2
  2756  0D73  0008               	return
  2757  0D74                     l4104:	
  2758  0D74  3000               	movlw	0
  2759  0D75  00CE               	movwf	___ftadd@f1
  2760  0D76  3080               	movlw	128
  2761  0D77  00CF               	movwf	___ftadd@f1+1
  2762  0D78  30BF               	movlw	191
  2763  0D79  00D0               	movwf	___ftadd@f1+2
  2764  0D7A  3000               	movlw	0
  2765  0D7B  00AE               	movwf	___ftmul@f1
  2766  0D7C  3000               	movlw	0
  2767  0D7D  00AF               	movwf	___ftmul@f1+1
  2768  0D7E  3040               	movlw	64
  2769  0D7F  00B0               	movwf	___ftmul@f1+2
  2770  0D80  3069               	movlw	log@exponent& (0+255)
  2771  0D81  00E8               	movwf	??_log
  2772  0D82  0868               	movf	??_log,w
  2773  0D83  00A3               	movwf	frexp@eptr
  2774  0D84  0865               	movf	log@x,w
  2775  0D85  00A0               	movwf	frexp@value
  2776  0D86  0866               	movf	log@x+1,w
  2777  0D87  00A1               	movwf	frexp@value+1
  2778  0D88  0867               	movf	log@x+2,w
  2779  0D89  00A2               	movwf	frexp@value+2
  2780  0D8A  160A  118A  2734   	fcall	_frexp
      +       120A  158A         
  2781  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  2782  0D90  1303               	bcf	3,6	;RP1=0, select bank0
  2783  0D91  0820               	movf	?_frexp,w
  2784  0D92  00B1               	movwf	___ftmul@f2
  2785  0D93  0821               	movf	?_frexp+1,w
  2786  0D94  00B2               	movwf	___ftmul@f2+1
  2787  0D95  0822               	movf	?_frexp+2,w
  2788  0D96  00B3               	movwf	___ftmul@f2+2
  2789  0D97  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  2790  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  2792  0D9E  082E               	movf	?___ftmul,w
  2793  0D9F  00D1               	movwf	___ftadd@f2
  2794  0DA0  082F               	movf	?___ftmul+1,w
  2795  0DA1  00D2               	movwf	___ftadd@f2+1
  2796  0DA2  0830               	movf	?___ftmul+2,w
  2797  0DA3  00D3               	movwf	___ftadd@f2+2
  2798  0DA4  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  2799  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0DAB  084E               	movf	?___ftadd,w
  2802  0DAC  00E5               	movwf	log@x
  2803  0DAD  084F               	movf	?___ftadd+1,w
  2804  0DAE  00E6               	movwf	log@x+1
  2805  0DAF  0850               	movf	?___ftadd+2,w
  2806  0DB0  00E7               	movwf	log@x+2
  2807  0DB1  30FF               	movlw	255
  2808  0DB2  07E9               	addwf	log@exponent,f
  2809  0DB3  1803               	skipnc
  2810  0DB4  0AEA               	incf	log@exponent+1,f
  2811  0DB5  30FF               	movlw	255
  2812  0DB6  07EA               	addwf	log@exponent+1,f
  2813  0DB7  0865               	movf	log@x,w
  2814  0DB8  00DB               	movwf	eval_poly@x
  2815  0DB9  0866               	movf	log@x+1,w
  2816  0DBA  00DC               	movwf	eval_poly@x+1
  2817  0DBB  0867               	movf	log@x+2,w
  2818  0DBC  00DD               	movwf	eval_poly@x+2
  2819  0DBD  301F               	movlw	(log@coeff-__stringbase)& (0+255)
  2820  0DBE  00E8               	movwf	??_log
  2821  0DBF  0868               	movf	??_log,w
  2822  0DC0  00DE               	movwf	eval_poly@d
  2823  0DC1  3008               	movlw	8
  2824  0DC2  00DF               	movwf	eval_poly@n
  2825  0DC3  3000               	movlw	0
  2826  0DC4  00E0               	movwf	eval_poly@n+1
  2827  0DC5  120A  158A  2145   	fcall	_eval_poly
      +       120A  158A         
  2828  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0DCC  085B               	movf	?_eval_poly,w
  2831  0DCD  00E5               	movwf	log@x
  2832  0DCE  085C               	movf	?_eval_poly+1,w
  2833  0DCF  00E6               	movwf	log@x+1
  2834  0DD0  085D               	movf	?_eval_poly+2,w
  2835  0DD1  00E7               	movwf	log@x+2
  2836  0DD2  0865               	movf	log@x,w
  2837  0DD3  00CE               	movwf	___ftadd@f1
  2838  0DD4  0866               	movf	log@x+1,w
  2839  0DD5  00CF               	movwf	___ftadd@f1+1
  2840  0DD6  0867               	movf	log@x+2,w
  2841  0DD7  00D0               	movwf	___ftadd@f1+2
  2842  0DD8  3072               	movlw	114
  2843  0DD9  00AE               	movwf	___ftmul@f1
  2844  0DDA  3031               	movlw	49
  2845  0DDB  00AF               	movwf	___ftmul@f1+1
  2846  0DDC  303F               	movlw	63
  2847  0DDD  00B0               	movwf	___ftmul@f1+2
  2848  0DDE  086A               	movf	log@exponent+1,w
  2849  0DDF  01A9               	clrf	___awtoft@c+1
  2850  0DE0  07A9               	addwf	___awtoft@c+1,f
  2851  0DE1  0869               	movf	log@exponent,w
  2852  0DE2  01A8               	clrf	___awtoft@c
  2853  0DE3  07A8               	addwf	___awtoft@c,f
  2854  0DE4  160A  118A  2664   	fcall	___awtoft
      +       120A  158A         
  2855  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  2856  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  2857  0DEB  0828               	movf	?___awtoft,w
  2858  0DEC  00B1               	movwf	___ftmul@f2
  2859  0DED  0829               	movf	?___awtoft+1,w
  2860  0DEE  00B2               	movwf	___ftmul@f2+1
  2861  0DEF  082A               	movf	?___awtoft+2,w
  2862  0DF0  00B3               	movwf	___ftmul@f2+2
  2863  0DF1  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  2864  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  2865  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  2866  0DF8  082E               	movf	?___ftmul,w
  2867  0DF9  00D1               	movwf	___ftadd@f2
  2868  0DFA  082F               	movf	?___ftmul+1,w
  2869  0DFB  00D2               	movwf	___ftadd@f2+1
  2870  0DFC  0830               	movf	?___ftmul+2,w
  2871  0DFD  00D3               	movwf	___ftadd@f2+2
  2872  0DFE  120A  158A  26F7   	fcall	___ftadd
  2873  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0E03  084E               	movf	?___ftadd,w
  2876  0E04  00E5               	movwf	?_log
  2877  0E05  084F               	movf	?___ftadd+1,w
  2878  0E06  00E6               	movwf	?_log+1
  2879  0E07  0850               	movf	?___ftadd+2,w
  2880  0E08  00E7               	movwf	?_log+2
  2881  0E09  0008               	return
  2882  0E0A                     __end_of_log:	
  2883                           
  2884                           	psect	text8
  2885  010F                     __ptext8:	
  2886 ;; *************** function _exp *****************
  2887 ;; Defined at:
  2888 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\exp.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  x               3   18[BANK1 ] int 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  exponent        2   28[BANK1 ] int 
  2893 ;;  sign            1   30[BANK1 ] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  3   18[BANK1 ] unsigned char 
  2896 ;; Registers used:
  2897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2903 ;;      Params:         0       0       3       0       0
  2904 ;;      Locals:         0       0       9       0       0
  2905 ;;      Temps:          0       0       1       0       0
  2906 ;;      Totals:         0       0      13       0       0
  2907 ;;Total ram usage:       13 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    5
  2910 ;; This function calls:
  2911 ;;		___awtoft
  2912 ;;		___ftdiv
  2913 ;;		___ftge
  2914 ;;		___ftmul
  2915 ;;		___ftneg
  2916 ;;		___ftsub
  2917 ;;		___fttol
  2918 ;;		_eval_poly
  2919 ;;		_floor
  2920 ;;		_ldexp
  2921 ;; This function is called by:
  2922 ;;		_pow
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           
  2927                           ;psect for function _exp
  2928  010F                     _exp:	
  2929                           
  2930                           ;incstack = 0
  2931 ;; hardware stack exceeded
  2932                           ; Regs used in _exp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2933  010F  1683               	bsf	3,5	;RP0=1, select bank1
  2934  0110  1303               	bcf	3,6	;RP1=0, select bank1
  2935  0111  0834               	movf	(exp@x+2)^(0+128),w
  2936  0112  0433               	iorwf	(exp@x+1)^(0+128),w
  2937  0113  0432               	iorwf	exp@x^(0+128),w
  2938  0114  1D03               	skipz
  2939  0115  291D               	goto	l4120
  2940  0116  3000               	movlw	0
  2941  0117  00B2               	movwf	?_exp^(0+128)
  2942  0118  3080               	movlw	128
  2943  0119  00B3               	movwf	(?_exp+1)^(0+128)
  2944  011A  303F               	movlw	63
  2945  011B  00B4               	movwf	(?_exp+2)^(0+128)
  2946  011C  0008               	return
  2947  011D                     l4120:	
  2948  011D  3072               	movlw	114
  2949  011E  1283               	bcf	3,5	;RP0=0, select bank0
  2950  011F  1303               	bcf	3,6	;RP1=0, select bank0
  2951  0120  00A0               	movwf	___ftge@ff1
  2952  0121  3031               	movlw	49
  2953  0122  00A1               	movwf	___ftge@ff1+1
  2954  0123  3044               	movlw	68
  2955  0124  00A2               	movwf	___ftge@ff1+2
  2956  0125  1683               	bsf	3,5	;RP0=1, select bank1
  2957  0126  1303               	bcf	3,6	;RP1=0, select bank1
  2958  0127  0832               	movf	exp@x^(0+128),w
  2959  0128  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0129  1303               	bcf	3,6	;RP1=0, select bank0
  2961  012A  00A3               	movwf	___ftge@ff2
  2962  012B  1683               	bsf	3,5	;RP0=1, select bank1
  2963  012C  1303               	bcf	3,6	;RP1=0, select bank1
  2964  012D  0833               	movf	(exp@x+1)^(0+128),w
  2965  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2966  012F  1303               	bcf	3,6	;RP1=0, select bank0
  2967  0130  00A4               	movwf	___ftge@ff2+1
  2968  0131  1683               	bsf	3,5	;RP0=1, select bank1
  2969  0132  1303               	bcf	3,6	;RP1=0, select bank1
  2970  0133  0834               	movf	(exp@x+2)^(0+128),w
  2971  0134  1283               	bcf	3,5	;RP0=0, select bank0
  2972  0135  1303               	bcf	3,6	;RP1=0, select bank0
  2973  0136  00A5               	movwf	___ftge@ff2+2
  2974  0137  120A  158A  207C   	fcall	___ftge
      +       120A  118A         
  2975  013C  1803               	btfsc	3,0
  2976  013D  294B               	goto	l4130
  2977  013E  3022               	movlw	34
  2978  013F  1683               	bsf	3,5	;RP0=1, select bank1
  2979  0140  1303               	bcf	3,6	;RP1=0, select bank1
  2980  0141  00E9               	movwf	_errno^(0+128)
  2981  0142  3000               	movlw	0
  2982  0143  00EA               	movwf	(_errno^(0+128)+1)
  2983  0144  30FF               	movlw	255
  2984  0145  00B2               	movwf	?_exp^(0+128)
  2985  0146  307F               	movlw	127
  2986  0147  00B3               	movwf	(?_exp+1)^(0+128)
  2987  0148  307F               	movlw	127
  2988  0149  00B4               	movwf	(?_exp+2)^(0+128)
  2989  014A  0008               	return
  2990  014B                     l4130:	
  2991  014B  1683               	bsf	3,5	;RP0=1, select bank1
  2992  014C  1303               	bcf	3,6	;RP1=0, select bank1
  2993  014D  0832               	movf	exp@x^(0+128),w
  2994  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2995  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2996  0150  00A0               	movwf	___ftge@ff1
  2997  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2998  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2999  0153  0833               	movf	(exp@x+1)^(0+128),w
  3000  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3001  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0156  00A1               	movwf	___ftge@ff1+1
  3003  0157  1683               	bsf	3,5	;RP0=1, select bank1
  3004  0158  1303               	bcf	3,6	;RP1=0, select bank1
  3005  0159  0834               	movf	(exp@x+2)^(0+128),w
  3006  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3007  015B  1303               	bcf	3,6	;RP1=0, select bank0
  3008  015C  00A2               	movwf	___ftge@ff1+2
  3009  015D  3049               	movlw	73
  3010  015E  00A3               	movwf	___ftge@ff2
  3011  015F  303A               	movlw	58
  3012  0160  00A4               	movwf	___ftge@ff2+1
  3013  0161  30C4               	movlw	196
  3014  0162  00A5               	movwf	___ftge@ff2+2
  3015  0163  120A  158A  207C   	fcall	___ftge
      +       120A  118A         
  3016  0168  1803               	btfsc	3,0
  3017  0169  2977               	goto	l4136
  3018  016A  3022               	movlw	34
  3019  016B  1683               	bsf	3,5	;RP0=1, select bank1
  3020  016C  1303               	bcf	3,6	;RP1=0, select bank1
  3021  016D  00E9               	movwf	_errno^(0+128)
  3022  016E  3000               	movlw	0
  3023  016F  00EA               	movwf	(_errno^(0+128)+1)
  3024  0170  3000               	movlw	0
  3025  0171  00B2               	movwf	?_exp^(0+128)
  3026  0172  3000               	movlw	0
  3027  0173  00B3               	movwf	(?_exp+1)^(0+128)
  3028  0174  3000               	movlw	0
  3029  0175  00B4               	movwf	(?_exp+2)^(0+128)
  3030  0176  0008               	return
  3031  0177                     l4136:	
  3032  0177  1683               	bsf	3,5	;RP0=1, select bank1
  3033  0178  1303               	bcf	3,6	;RP1=0, select bank1
  3034  0179  0832               	movf	exp@x^(0+128),w
  3035  017A  1283               	bcf	3,5	;RP0=0, select bank0
  3036  017B  1303               	bcf	3,6	;RP1=0, select bank0
  3037  017C  00A0               	movwf	___ftge@ff1
  3038  017D  1683               	bsf	3,5	;RP0=1, select bank1
  3039  017E  1303               	bcf	3,6	;RP1=0, select bank1
  3040  017F  0833               	movf	(exp@x+1)^(0+128),w
  3041  0180  1283               	bcf	3,5	;RP0=0, select bank0
  3042  0181  1303               	bcf	3,6	;RP1=0, select bank0
  3043  0182  00A1               	movwf	___ftge@ff1+1
  3044  0183  1683               	bsf	3,5	;RP0=1, select bank1
  3045  0184  1303               	bcf	3,6	;RP1=0, select bank1
  3046  0185  0834               	movf	(exp@x+2)^(0+128),w
  3047  0186  1283               	bcf	3,5	;RP0=0, select bank0
  3048  0187  1303               	bcf	3,6	;RP1=0, select bank0
  3049  0188  00A2               	movwf	___ftge@ff1+2
  3050  0189  3000               	movlw	0
  3051  018A  00A3               	movwf	___ftge@ff2
  3052  018B  3000               	movlw	0
  3053  018C  00A4               	movwf	___ftge@ff2+1
  3054  018D  3000               	movlw	0
  3055  018E  00A5               	movwf	___ftge@ff2+2
  3056  018F  120A  158A  207C   	fcall	___ftge
      +       120A  118A         
  3057  0194  3000               	movlw	0
  3058  0195  1C03               	btfss	3,0
  3059  0196  3001               	movlw	1
  3060  0197  1683               	bsf	3,5	;RP0=1, select bank1
  3061  0198  1303               	bcf	3,6	;RP1=0, select bank1
  3062  0199  00B5               	movwf	??_exp^(0+128)
  3063  019A  0835               	movf	??_exp^(0+128),w
  3064  019B  00BE               	movwf	exp@sign^(0+128)
  3065  019C  083E               	movf	exp@sign^(0+128),w
  3066  019D  1903               	btfsc	3,2
  3067  019E  29C6               	goto	l4142
  3068  019F  0832               	movf	exp@x^(0+128),w
  3069  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3070  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  3071  01A2  00A0               	movwf	___ftneg@f1
  3072  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  3073  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  3074  01A5  0833               	movf	(exp@x+1)^(0+128),w
  3075  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  3076  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  3077  01A8  00A1               	movwf	___ftneg@f1+1
  3078  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  3079  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  3080  01AB  0834               	movf	(exp@x+2)^(0+128),w
  3081  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  3082  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  3083  01AE  00A2               	movwf	___ftneg@f1+2
  3084  01AF  120A  118A  20F4   	fcall	___ftneg
      +       120A  118A         
  3085  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  3086  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  3087  01B6  0820               	movf	?___ftneg,w
  3088  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  3089  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  3090  01B9  00B2               	movwf	exp@x^(0+128)
  3091  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  3092  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  3093  01BC  0821               	movf	?___ftneg+1,w
  3094  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  3095  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  3096  01BF  00B3               	movwf	(exp@x+1)^(0+128)
  3097  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  3098  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  3099  01C2  0822               	movf	?___ftneg+2,w
  3100  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  3101  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  3102  01C5  00B4               	movwf	(exp@x+2)^(0+128)
  3103  01C6                     l4142:	
  3104  01C6  30AA               	movlw	170
  3105  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  3106  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  3107  01C9  00AE               	movwf	___ftmul@f1
  3108  01CA  30B8               	movlw	184
  3109  01CB  00AF               	movwf	___ftmul@f1+1
  3110  01CC  303F               	movlw	63
  3111  01CD  00B0               	movwf	___ftmul@f1+2
  3112  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  3113  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  3114  01D0  0832               	movf	exp@x^(0+128),w
  3115  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  3116  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  3117  01D3  00B1               	movwf	___ftmul@f2
  3118  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  3119  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  3120  01D6  0833               	movf	(exp@x+1)^(0+128),w
  3121  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  3122  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  3123  01D9  00B2               	movwf	___ftmul@f2+1
  3124  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  3125  01DB  1303               	bcf	3,6	;RP1=0, select bank1
  3126  01DC  0834               	movf	(exp@x+2)^(0+128),w
  3127  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  3128  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  3129  01DF  00B3               	movwf	___ftmul@f2+2
  3130  01E0  120A  118A  2718   	fcall	___ftmul
      +       120A  118A         
  3131  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  3132  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  3133  01E7  082E               	movf	?___ftmul,w
  3134  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  3135  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  3136  01EA  00B2               	movwf	exp@x^(0+128)
  3137  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  3138  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  3139  01ED  082F               	movf	?___ftmul+1,w
  3140  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  3141  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  3142  01F0  00B3               	movwf	(exp@x+1)^(0+128)
  3143  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3144  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3145  01F3  0830               	movf	?___ftmul+2,w
  3146  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  3147  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  3148  01F6  00B4               	movwf	(exp@x+2)^(0+128)
  3149  01F7  0832               	movf	exp@x^(0+128),w
  3150  01F8  00AA               	movwf	floor@x^(0+128)
  3151  01F9  0833               	movf	(exp@x+1)^(0+128),w
  3152  01FA  00AB               	movwf	(floor@x+1)^(0+128)
  3153  01FB  0834               	movf	(exp@x+2)^(0+128),w
  3154  01FC  00AC               	movwf	(floor@x+2)^(0+128)
  3155  01FD  120A  158A  260A   	fcall	_floor
      +       120A  118A         
  3156  0202  1683               	bsf	3,5	;RP0=1, select bank1
  3157  0203  1303               	bcf	3,6	;RP1=0, select bank1
  3158  0204  082A               	movf	?_floor^(0+128),w
  3159  0205  00B6               	movwf	_exp$1124^(0+128)
  3160  0206  082B               	movf	(?_floor+1)^(0+128),w
  3161  0207  00B7               	movwf	(_exp$1124+1)^(0+128)
  3162  0208  082C               	movf	(?_floor+2)^(0+128),w
  3163  0209  00B8               	movwf	(_exp$1124+2)^(0+128)
  3164  020A  0836               	movf	_exp$1124^(0+128),w
  3165  020B  1283               	bcf	3,5	;RP0=0, select bank0
  3166  020C  1303               	bcf	3,6	;RP1=0, select bank0
  3167  020D  00E3               	movwf	___fttol@f1
  3168  020E  1683               	bsf	3,5	;RP0=1, select bank1
  3169  020F  1303               	bcf	3,6	;RP1=0, select bank1
  3170  0210  0837               	movf	(_exp$1124+1)^(0+128),w
  3171  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0213  00E4               	movwf	___fttol@f1+1
  3174  0214  1683               	bsf	3,5	;RP0=1, select bank1
  3175  0215  1303               	bcf	3,6	;RP1=0, select bank1
  3176  0216  0838               	movf	(_exp$1124+2)^(0+128),w
  3177  0217  1283               	bcf	3,5	;RP0=0, select bank0
  3178  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3179  0219  00E5               	movwf	___fttol@f1+2
  3180  021A  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  3181  021F  1283               	bcf	3,5	;RP0=0, select bank0
  3182  0220  1303               	bcf	3,6	;RP1=0, select bank0
  3183  0221  0864               	movf	?___fttol+1,w
  3184  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3185  0223  1303               	bcf	3,6	;RP1=0, select bank1
  3186  0224  01BD               	clrf	(exp@exponent+1)^(0+128)
  3187  0225  07BD               	addwf	(exp@exponent+1)^(0+128),f
  3188  0226  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0227  1303               	bcf	3,6	;RP1=0, select bank0
  3190  0228  0863               	movf	?___fttol,w
  3191  0229  1683               	bsf	3,5	;RP0=1, select bank1
  3192  022A  1303               	bcf	3,6	;RP1=0, select bank1
  3193  022B  01BC               	clrf	exp@exponent^(0+128)
  3194  022C  07BC               	addwf	exp@exponent^(0+128),f
  3195  022D  083D               	movf	(exp@exponent+1)^(0+128),w
  3196  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3197  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3198  0230  01A9               	clrf	___awtoft@c+1
  3199  0231  07A9               	addwf	___awtoft@c+1,f
  3200  0232  1683               	bsf	3,5	;RP0=1, select bank1
  3201  0233  1303               	bcf	3,6	;RP1=0, select bank1
  3202  0234  083C               	movf	exp@exponent^(0+128),w
  3203  0235  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0236  1303               	bcf	3,6	;RP1=0, select bank0
  3205  0237  01A8               	clrf	___awtoft@c
  3206  0238  07A8               	addwf	___awtoft@c,f
  3207  0239  160A  118A  2664   	fcall	___awtoft
      +       120A  118A         
  3208  023E  1283               	bcf	3,5	;RP0=0, select bank0
  3209  023F  1303               	bcf	3,6	;RP1=0, select bank0
  3210  0240  0828               	movf	?___awtoft,w
  3211  0241  00DB               	movwf	___ftsub@f2
  3212  0242  0829               	movf	?___awtoft+1,w
  3213  0243  00DC               	movwf	___ftsub@f2+1
  3214  0244  082A               	movf	?___awtoft+2,w
  3215  0245  00DD               	movwf	___ftsub@f2+2
  3216  0246  1683               	bsf	3,5	;RP0=1, select bank1
  3217  0247  1303               	bcf	3,6	;RP1=0, select bank1
  3218  0248  0832               	movf	exp@x^(0+128),w
  3219  0249  1283               	bcf	3,5	;RP0=0, select bank0
  3220  024A  1303               	bcf	3,6	;RP1=0, select bank0
  3221  024B  00DE               	movwf	___ftsub@f1
  3222  024C  1683               	bsf	3,5	;RP0=1, select bank1
  3223  024D  1303               	bcf	3,6	;RP1=0, select bank1
  3224  024E  0833               	movf	(exp@x+1)^(0+128),w
  3225  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3226  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3227  0251  00DF               	movwf	___ftsub@f1+1
  3228  0252  1683               	bsf	3,5	;RP0=1, select bank1
  3229  0253  1303               	bcf	3,6	;RP1=0, select bank1
  3230  0254  0834               	movf	(exp@x+2)^(0+128),w
  3231  0255  1283               	bcf	3,5	;RP0=0, select bank0
  3232  0256  1303               	bcf	3,6	;RP1=0, select bank0
  3233  0257  00E0               	movwf	___ftsub@f1+2
  3234  0258  160A  118A  2648   	fcall	___ftsub
      +       120A  118A         
  3235  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3236  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3237  025F  085B               	movf	?___ftsub,w
  3238  0260  1683               	bsf	3,5	;RP0=1, select bank1
  3239  0261  1303               	bcf	3,6	;RP1=0, select bank1
  3240  0262  00B2               	movwf	exp@x^(0+128)
  3241  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3242  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3243  0265  085C               	movf	?___ftsub+1,w
  3244  0266  1683               	bsf	3,5	;RP0=1, select bank1
  3245  0267  1303               	bcf	3,6	;RP1=0, select bank1
  3246  0268  00B3               	movwf	(exp@x+1)^(0+128)
  3247  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3248  026A  1303               	bcf	3,6	;RP1=0, select bank0
  3249  026B  085D               	movf	?___ftsub+2,w
  3250  026C  1683               	bsf	3,5	;RP0=1, select bank1
  3251  026D  1303               	bcf	3,6	;RP1=0, select bank1
  3252  026E  00B4               	movwf	(exp@x+2)^(0+128)
  3253  026F  0832               	movf	exp@x^(0+128),w
  3254  0270  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0271  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0272  00DB               	movwf	eval_poly@x
  3257  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3258  0274  1303               	bcf	3,6	;RP1=0, select bank1
  3259  0275  0833               	movf	(exp@x+1)^(0+128),w
  3260  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0278  00DC               	movwf	eval_poly@x+1
  3263  0279  1683               	bsf	3,5	;RP0=1, select bank1
  3264  027A  1303               	bcf	3,6	;RP1=0, select bank1
  3265  027B  0834               	movf	(exp@x+2)^(0+128),w
  3266  027C  1283               	bcf	3,5	;RP0=0, select bank0
  3267  027D  1303               	bcf	3,6	;RP1=0, select bank0
  3268  027E  00DD               	movwf	eval_poly@x+2
  3269  027F  3001               	movlw	(exp@coeff-__stringbase)& (0+255)
  3270  0280  1683               	bsf	3,5	;RP0=1, select bank1
  3271  0281  1303               	bcf	3,6	;RP1=0, select bank1
  3272  0282  00B5               	movwf	??_exp^(0+128)
  3273  0283  0835               	movf	??_exp^(0+128),w
  3274  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3276  0286  00DE               	movwf	eval_poly@d
  3277  0287  3009               	movlw	9
  3278  0288  00DF               	movwf	eval_poly@n
  3279  0289  3000               	movlw	0
  3280  028A  00E0               	movwf	eval_poly@n+1
  3281  028B  120A  158A  2145   	fcall	_eval_poly
      +       120A  118A         
  3282  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3284  0292  085B               	movf	?_eval_poly,w
  3285  0293  00E5               	movwf	ldexp@value
  3286  0294  085C               	movf	?_eval_poly+1,w
  3287  0295  00E6               	movwf	ldexp@value+1
  3288  0296  085D               	movf	?_eval_poly+2,w
  3289  0297  00E7               	movwf	ldexp@value+2
  3290  0298  1683               	bsf	3,5	;RP0=1, select bank1
  3291  0299  1303               	bcf	3,6	;RP1=0, select bank1
  3292  029A  083D               	movf	(exp@exponent+1)^(0+128),w
  3293  029B  1283               	bcf	3,5	;RP0=0, select bank0
  3294  029C  1303               	bcf	3,6	;RP1=0, select bank0
  3295  029D  01E9               	clrf	ldexp@newexp+1
  3296  029E  07E9               	addwf	ldexp@newexp+1,f
  3297  029F  1683               	bsf	3,5	;RP0=1, select bank1
  3298  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  3299  02A1  083C               	movf	exp@exponent^(0+128),w
  3300  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  3301  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  3302  02A4  01E8               	clrf	ldexp@newexp
  3303  02A5  07E8               	addwf	ldexp@newexp,f
  3304  02A6  120A  118A  204E   	fcall	_ldexp
      +       120A  118A         
  3305  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  3306  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  3307  02AD  0865               	movf	?_ldexp,w
  3308  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  3309  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  3310  02B0  00B2               	movwf	exp@x^(0+128)
  3311  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  3312  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  3313  02B3  0866               	movf	?_ldexp+1,w
  3314  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  3315  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  3316  02B6  00B3               	movwf	(exp@x+1)^(0+128)
  3317  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  3318  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  3319  02B9  0867               	movf	?_ldexp+2,w
  3320  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  3321  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  3322  02BC  00B4               	movwf	(exp@x+2)^(0+128)
  3323  02BD  083E               	movf	exp@sign^(0+128),w
  3324  02BE  1903               	btfsc	3,2
  3325  02BF  0008               	return
  3326  02C0  30FF               	movlw	255
  3327  02C1  00B9               	movwf	_exp$836^(0+128)
  3328  02C2  307F               	movlw	127
  3329  02C3  00BA               	movwf	(_exp$836+1)^(0+128)
  3330  02C4  307F               	movlw	127
  3331  02C5  00BB               	movwf	(_exp$836+2)^(0+128)
  3332  02C6  0834               	movf	(exp@x+2)^(0+128),w
  3333  02C7  063B               	xorwf	(_exp$836+2)^(0+128),w
  3334  02C8  1D03               	skipz
  3335  02C9  2AD0               	goto	u3545
  3336  02CA  0833               	movf	(exp@x+1)^(0+128),w
  3337  02CB  063A               	xorwf	(_exp$836+1)^(0+128),w
  3338  02CC  1D03               	skipz
  3339  02CD  2AD0               	goto	u3545
  3340  02CE  0832               	movf	exp@x^(0+128),w
  3341  02CF  0639               	xorwf	_exp$836^(0+128),w
  3342  02D0                     u3545:	
  3343  02D0  1D03               	skipz
  3344  02D1  2AD9               	goto	l4164
  3345  02D2  3000               	movlw	0
  3346  02D3  00B2               	movwf	?_exp^(0+128)
  3347  02D4  3000               	movlw	0
  3348  02D5  00B3               	movwf	(?_exp+1)^(0+128)
  3349  02D6  3000               	movlw	0
  3350  02D7  00B4               	movwf	(?_exp+2)^(0+128)
  3351  02D8  0008               	return
  3352  02D9                     l4164:	
  3353  02D9  0832               	movf	exp@x^(0+128),w
  3354  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3355  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  3356  02DC  00BE               	movwf	___ftdiv@f2
  3357  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  3358  02DE  1303               	bcf	3,6	;RP1=0, select bank1
  3359  02DF  0833               	movf	(exp@x+1)^(0+128),w
  3360  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  3361  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  3362  02E2  00BF               	movwf	___ftdiv@f2+1
  3363  02E3  1683               	bsf	3,5	;RP0=1, select bank1
  3364  02E4  1303               	bcf	3,6	;RP1=0, select bank1
  3365  02E5  0834               	movf	(exp@x+2)^(0+128),w
  3366  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  3367  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  3368  02E8  00C0               	movwf	___ftdiv@f2+2
  3369  02E9  3000               	movlw	0
  3370  02EA  00C1               	movwf	___ftdiv@f1
  3371  02EB  3080               	movlw	128
  3372  02EC  00C2               	movwf	___ftdiv@f1+1
  3373  02ED  303F               	movlw	63
  3374  02EE  00C3               	movwf	___ftdiv@f1+2
  3375  02EF  120A  158A  223F   	fcall	___ftdiv
  3376  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  3377  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  3378  02F4  083E               	movf	?___ftdiv,w
  3379  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  3380  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  3381  02F7  00B2               	movwf	?_exp^(0+128)
  3382  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  3383  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  3384  02FA  083F               	movf	?___ftdiv+1,w
  3385  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  3386  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  3387  02FD  00B3               	movwf	(?_exp+1)^(0+128)
  3388  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3389  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  3390  0300  0840               	movf	?___ftdiv+2,w
  3391  0301  1683               	bsf	3,5	;RP0=1, select bank1
  3392  0302  1303               	bcf	3,6	;RP1=0, select bank1
  3393  0303  00B4               	movwf	(?_exp+2)^(0+128)
  3394  0304  0008               	return
  3395  0305                     __end_of_exp:	
  3396                           
  3397                           	psect	text9
  3398  004E                     __ptext9:	
  3399 ;; *************** function _ldexp *****************
  3400 ;; Defined at:
  3401 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\frexp.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  value           3   69[BANK0 ] unsigned char 
  3404 ;;  newexp          2   72[BANK0 ] int 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  3   69[BANK0 ] int 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3416 ;;      Params:         0       5       0       0       0
  3417 ;;      Locals:         0       3       0       0       0
  3418 ;;      Temps:          0       2       0       0       0
  3419 ;;      Totals:         0      10       0       0       0
  3420 ;;Total ram usage:       10 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    3
  3423 ;; This function calls:
  3424 ;;		___ftge
  3425 ;;		___ftneg
  3426 ;; This function is called by:
  3427 ;;		_exp
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           
  3432                           ;psect for function _ldexp
  3433  004E                     _ldexp:	
  3434                           
  3435                           ;incstack = 0
  3436                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3437  004E  1283               	bcf	3,5	;RP0=0, select bank0
  3438  004F  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0050  0867               	movf	ldexp@value+2,w
  3440  0051  0466               	iorwf	ldexp@value+1,w
  3441  0052  0465               	iorwf	ldexp@value,w
  3442  0053  1D03               	skipz
  3443  0054  285C               	goto	l4042
  3444  0055  3000               	movlw	0
  3445  0056  00E5               	movwf	?_ldexp
  3446  0057  3000               	movlw	0
  3447  0058  00E6               	movwf	?_ldexp+1
  3448  0059  3000               	movlw	0
  3449  005A  00E7               	movwf	?_ldexp+2
  3450  005B  0008               	return
  3451  005C                     l4042:	
  3452  005C  0867               	movf	ldexp@value+2,w
  3453  005D  397F               	andlw	127
  3454  005E  00EA               	movwf	??_ldexp
  3455  005F  01EB               	clrf	??_ldexp+1
  3456  0060  1003               	clrc
  3457  0061  0DEA               	rlf	??_ldexp,f
  3458  0062  0DEB               	rlf	??_ldexp+1,f
  3459  0063  086A               	movf	??_ldexp,w
  3460  0064  07E8               	addwf	ldexp@newexp,f
  3461  0065  1803               	skipnc
  3462  0066  0AE9               	incf	ldexp@newexp+1,f
  3463  0067  086B               	movf	??_ldexp+1,w
  3464  0068  07E9               	addwf	ldexp@newexp+1,f
  3465  0069  0D66               	rlf	ldexp@value+1,w
  3466  006A  0D66               	rlf	ldexp@value+1,w
  3467  006B  3901               	andlw	1
  3468  006C  00EA               	movwf	??_ldexp
  3469  006D  01EB               	clrf	??_ldexp+1
  3470  006E  086A               	movf	??_ldexp,w
  3471  006F  07E8               	addwf	ldexp@newexp,f
  3472  0070  1803               	skipnc
  3473  0071  0AE9               	incf	ldexp@newexp+1,f
  3474  0072  086B               	movf	??_ldexp+1,w
  3475  0073  07E9               	addwf	ldexp@newexp+1,f
  3476  0074  1FE9               	btfss	ldexp@newexp+1,7
  3477  0075  2885               	goto	l4052
  3478  0076  3022               	movlw	34
  3479  0077  1683               	bsf	3,5	;RP0=1, select bank1
  3480  0078  1303               	bcf	3,6	;RP1=0, select bank1
  3481  0079  00E9               	movwf	_errno^(0+128)
  3482  007A  3000               	movlw	0
  3483  007B  00EA               	movwf	(_errno^(0+128)+1)
  3484  007C  3000               	movlw	0
  3485  007D  1283               	bcf	3,5	;RP0=0, select bank0
  3486  007E  1303               	bcf	3,6	;RP1=0, select bank0
  3487  007F  00E5               	movwf	?_ldexp
  3488  0080  3000               	movlw	0
  3489  0081  00E6               	movwf	?_ldexp+1
  3490  0082  3000               	movlw	0
  3491  0083  00E7               	movwf	?_ldexp+2
  3492  0084  0008               	return
  3493  0085                     l4052:	
  3494  0085  0869               	movf	ldexp@newexp+1,w
  3495  0086  3A80               	xorlw	128
  3496  0087  00FF               	movwf	127
  3497  0088  3081               	movlw	129
  3498  0089  027F               	subwf	127,w
  3499  008A  1D03               	skipz
  3500  008B  288E               	goto	u3435
  3501  008C  3000               	movlw	0
  3502  008D  0268               	subwf	ldexp@newexp,w
  3503  008E                     u3435:	
  3504  008E  1C03               	skipc
  3505  008F  28CE               	goto	l4076
  3506  0090  3022               	movlw	34
  3507  0091  1683               	bsf	3,5	;RP0=1, select bank1
  3508  0092  1303               	bcf	3,6	;RP1=0, select bank1
  3509  0093  00E9               	movwf	_errno^(0+128)
  3510  0094  3000               	movlw	0
  3511  0095  00EA               	movwf	(_errno^(0+128)+1)
  3512  0096  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0097  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0098  0865               	movf	ldexp@value,w
  3515  0099  00A0               	movwf	___ftge@ff1
  3516  009A  0866               	movf	ldexp@value+1,w
  3517  009B  00A1               	movwf	___ftge@ff1+1
  3518  009C  0867               	movf	ldexp@value+2,w
  3519  009D  00A2               	movwf	___ftge@ff1+2
  3520  009E  3000               	movlw	0
  3521  009F  00A3               	movwf	___ftge@ff2
  3522  00A0  3000               	movlw	0
  3523  00A1  00A4               	movwf	___ftge@ff2+1
  3524  00A2  3000               	movlw	0
  3525  00A3  00A5               	movwf	___ftge@ff2+2
  3526  00A4  120A  158A  207C   	fcall	___ftge
      +       120A  118A         
  3527  00A9  1803               	btfsc	3,0
  3528  00AA  28C5               	goto	l4072
  3529  00AB  30FF               	movlw	255
  3530  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  3531  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  3532  00AE  00EC               	movwf	_ldexp$873
  3533  00AF  307F               	movlw	127
  3534  00B0  00ED               	movwf	_ldexp$873+1
  3535  00B1  307F               	movlw	127
  3536  00B2  00EE               	movwf	_ldexp$873+2
  3537  00B3  086C               	movf	_ldexp$873,w
  3538  00B4  00A0               	movwf	___ftneg@f1
  3539  00B5  086D               	movf	_ldexp$873+1,w
  3540  00B6  00A1               	movwf	___ftneg@f1+1
  3541  00B7  086E               	movf	_ldexp$873+2,w
  3542  00B8  00A2               	movwf	___ftneg@f1+2
  3543  00B9  120A  118A  20F4   	fcall	___ftneg
  3544  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  3545  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  3546  00BE  0820               	movf	?___ftneg,w
  3547  00BF  00E5               	movwf	?_ldexp
  3548  00C0  0821               	movf	?___ftneg+1,w
  3549  00C1  00E6               	movwf	?_ldexp+1
  3550  00C2  0822               	movf	?___ftneg+2,w
  3551  00C3  00E7               	movwf	?_ldexp+2
  3552  00C4  0008               	return
  3553  00C5                     l4072:	
  3554  00C5  30FF               	movlw	255
  3555  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  3556  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  3557  00C8  00E5               	movwf	?_ldexp
  3558  00C9  307F               	movlw	127
  3559  00CA  00E6               	movwf	?_ldexp+1
  3560  00CB  307F               	movlw	127
  3561  00CC  00E7               	movwf	?_ldexp+2
  3562  00CD  0008               	return
  3563  00CE                     l4076:	
  3564  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  3565  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  3566  00D0  0869               	movf	ldexp@newexp+1,w
  3567  00D1  00EB               	movwf	??_ldexp+1
  3568  00D2  0868               	movf	ldexp@newexp,w
  3569  00D3  00EA               	movwf	??_ldexp
  3570  00D4  0D6B               	rlf	??_ldexp+1,w
  3571  00D5  0CEB               	rrf	??_ldexp+1,f
  3572  00D6  0CEA               	rrf	??_ldexp,f
  3573  00D7  0867               	movf	ldexp@value+2,w
  3574  00D8  066A               	xorwf	??_ldexp,w
  3575  00D9  3980               	andlw	-128
  3576  00DA  066A               	xorwf	??_ldexp,w
  3577  00DB  00E7               	movwf	ldexp@value+2
  3578  00DC  0868               	movf	ldexp@newexp,w
  3579  00DD  3901               	andlw	1
  3580  00DE  00EA               	movwf	??_ldexp
  3581  00DF  0CEA               	rrf	??_ldexp,f
  3582  00E0  0CEA               	rrf	??_ldexp,f
  3583  00E1  0866               	movf	ldexp@value+1,w
  3584  00E2  066A               	xorwf	??_ldexp,w
  3585  00E3  397F               	andlw	-129
  3586  00E4  066A               	xorwf	??_ldexp,w
  3587  00E5  00E6               	movwf	ldexp@value+1
  3588  00E6  0008               	return
  3589  00E7                     __end_of_ldexp:	
  3590                           
  3591                           	psect	text10
  3592  00F4                     __ptext10:	
  3593 ;; *************** function ___ftneg *****************
  3594 ;; Defined at:
  3595 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftneg.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  f1              3    0[BANK0 ] float 
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  3    0[BANK0 ] float 
  3602 ;; Registers used:
  3603 ;;		wreg
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3609 ;;      Params:         0       3       0       0       0
  3610 ;;      Locals:         0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0
  3612 ;;      Totals:         0       3       0       0       0
  3613 ;;Total ram usage:        3 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    2
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_pow
  3620 ;;		_exp
  3621 ;;		_ldexp
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           
  3626                           ;psect for function ___ftneg
  3627  00F4                     ___ftneg:	
  3628                           
  3629                           ;incstack = 0
  3630                           ; Regs used in ___ftneg: [wreg]
  3631  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  3632  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  3633  00F6  0822               	movf	___ftneg@f1+2,w
  3634  00F7  0421               	iorwf	___ftneg@f1+1,w
  3635  00F8  0420               	iorwf	___ftneg@f1,w
  3636  00F9  1903               	skipnz
  3637  00FA  0008               	return
  3638  00FB  3080               	movlw	128
  3639  00FC  06A2               	xorwf	___ftneg@f1+2,f
  3640  00FD  0008               	return
  3641  00FE                     __end_of___ftneg:	
  3642                           
  3643                           	psect	text11
  3644  0E0A                     __ptext11:	
  3645 ;; *************** function _floor *****************
  3646 ;; Defined at:
  3647 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\floor.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  x               3   10[BANK1 ] float 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  i               3   13[BANK1 ] float 
  3652 ;;  expon           2   16[BANK1 ] int 
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  3   10[BANK1 ] int 
  3655 ;; Registers used:
  3656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3662 ;;      Params:         0       0       3       0       0
  3663 ;;      Locals:         0       0       5       0       0
  3664 ;;      Temps:          0       1       0       0       0
  3665 ;;      Totals:         0       1       8       0       0
  3666 ;;Total ram usage:        9 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    4
  3669 ;; This function calls:
  3670 ;;		___altoft
  3671 ;;		___ftadd
  3672 ;;		___ftge
  3673 ;;		___fttol
  3674 ;;		_frexp
  3675 ;; This function is called by:
  3676 ;;		_exp
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           
  3681                           ;psect for function _floor
  3682  0E0A                     _floor:	
  3683                           
  3684                           ;incstack = 0
  3685 ;; hardware stack exceeded
  3686                           ; Regs used in _floor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3687  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  3688  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  3689  0E0C  082A               	movf	floor@x^(0+128),w
  3690  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0E0F  00A0               	movwf	frexp@value
  3693  0E10  1683               	bsf	3,5	;RP0=1, select bank1
  3694  0E11  1303               	bcf	3,6	;RP1=0, select bank1
  3695  0E12  082B               	movf	(floor@x+1)^(0+128),w
  3696  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  3697  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  3698  0E15  00A1               	movwf	frexp@value+1
  3699  0E16  1683               	bsf	3,5	;RP0=1, select bank1
  3700  0E17  1303               	bcf	3,6	;RP1=0, select bank1
  3701  0E18  082C               	movf	(floor@x+2)^(0+128),w
  3702  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0E1B  00A2               	movwf	frexp@value+2
  3705  0E1C  30B0               	movlw	floor@expon& (0+255)
  3706  0E1D  00EF               	movwf	??_floor
  3707  0E1E  086F               	movf	??_floor,w
  3708  0E1F  00A3               	movwf	frexp@eptr
  3709  0E20  160A  118A  2734   	fcall	_frexp
      +       120A  158A         
  3710  0E25  1683               	bsf	3,5	;RP0=1, select bank1
  3711  0E26  1303               	bcf	3,6	;RP1=0, select bank1
  3712  0E27  1FB1               	btfss	(floor@expon+1)^(0+128),7
  3713  0E28  2E58               	goto	l4012
  3714  0E29  082A               	movf	floor@x^(0+128),w
  3715  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  3717  0E2C  00A0               	movwf	___ftge@ff1
  3718  0E2D  1683               	bsf	3,5	;RP0=1, select bank1
  3719  0E2E  1303               	bcf	3,6	;RP1=0, select bank1
  3720  0E2F  082B               	movf	(floor@x+1)^(0+128),w
  3721  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  3722  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  3723  0E32  00A1               	movwf	___ftge@ff1+1
  3724  0E33  1683               	bsf	3,5	;RP0=1, select bank1
  3725  0E34  1303               	bcf	3,6	;RP1=0, select bank1
  3726  0E35  082C               	movf	(floor@x+2)^(0+128),w
  3727  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  3728  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  3729  0E38  00A2               	movwf	___ftge@ff1+2
  3730  0E39  3000               	movlw	0
  3731  0E3A  00A3               	movwf	___ftge@ff2
  3732  0E3B  3000               	movlw	0
  3733  0E3C  00A4               	movwf	___ftge@ff2+1
  3734  0E3D  3000               	movlw	0
  3735  0E3E  00A5               	movwf	___ftge@ff2+2
  3736  0E3F  120A  158A  207C   	fcall	___ftge
      +       120A  158A         
  3737  0E44  1803               	btfsc	3,0
  3738  0E45  2E4F               	goto	l4008
  3739  0E46  3000               	movlw	0
  3740  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  3741  0E48  1303               	bcf	3,6	;RP1=0, select bank1
  3742  0E49  00AA               	movwf	?_floor^(0+128)
  3743  0E4A  3080               	movlw	128
  3744  0E4B  00AB               	movwf	(?_floor+1)^(0+128)
  3745  0E4C  30BF               	movlw	191
  3746  0E4D  00AC               	movwf	(?_floor+2)^(0+128)
  3747  0E4E  0008               	return
  3748  0E4F                     l4008:	
  3749  0E4F  3000               	movlw	0
  3750  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  3751  0E51  1303               	bcf	3,6	;RP1=0, select bank1
  3752  0E52  00AA               	movwf	?_floor^(0+128)
  3753  0E53  3000               	movlw	0
  3754  0E54  00AB               	movwf	(?_floor+1)^(0+128)
  3755  0E55  3000               	movlw	0
  3756  0E56  00AC               	movwf	(?_floor+2)^(0+128)
  3757  0E57  0008               	return
  3758  0E58                     l4012:	
  3759  0E58  3000               	movlw	0
  3760  0E59  0231               	subwf	(floor@expon+1)^(0+128),w
  3761  0E5A  3015               	movlw	21
  3762  0E5B  1903               	skipnz
  3763  0E5C  0230               	subwf	floor@expon^(0+128),w
  3764  0E5D  1803               	btfsc	3,0
  3765  0E5E  0008               	return
  3766  0E5F  082A               	movf	floor@x^(0+128),w
  3767  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  3768  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  3769  0E62  00E3               	movwf	___fttol@f1
  3770  0E63  1683               	bsf	3,5	;RP0=1, select bank1
  3771  0E64  1303               	bcf	3,6	;RP1=0, select bank1
  3772  0E65  082B               	movf	(floor@x+1)^(0+128),w
  3773  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  3774  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  3775  0E68  00E4               	movwf	___fttol@f1+1
  3776  0E69  1683               	bsf	3,5	;RP0=1, select bank1
  3777  0E6A  1303               	bcf	3,6	;RP1=0, select bank1
  3778  0E6B  082C               	movf	(floor@x+2)^(0+128),w
  3779  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  3780  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  3781  0E6E  00E5               	movwf	___fttol@f1+2
  3782  0E6F  120A  158A  23B3   	fcall	___fttol
      +       120A  158A         
  3783  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0E76  0866               	movf	?___fttol+3,w
  3786  0E77  00EE               	movwf	___altoft@c+3
  3787  0E78  0865               	movf	?___fttol+2,w
  3788  0E79  00ED               	movwf	___altoft@c+2
  3789  0E7A  0864               	movf	?___fttol+1,w
  3790  0E7B  00EC               	movwf	___altoft@c+1
  3791  0E7C  0863               	movf	?___fttol,w
  3792  0E7D  00EB               	movwf	___altoft@c
  3793  0E7E  120A  158A  202A   	fcall	___altoft
      +       120A  158A         
  3794  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0E85  086B               	movf	?___altoft,w
  3797  0E86  1683               	bsf	3,5	;RP0=1, select bank1
  3798  0E87  1303               	bcf	3,6	;RP1=0, select bank1
  3799  0E88  00AD               	movwf	floor@i^(0+128)
  3800  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0E8B  086C               	movf	?___altoft+1,w
  3803  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  3804  0E8D  1303               	bcf	3,6	;RP1=0, select bank1
  3805  0E8E  00AE               	movwf	(floor@i+1)^(0+128)
  3806  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3807  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3808  0E91  086D               	movf	?___altoft+2,w
  3809  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  3810  0E93  1303               	bcf	3,6	;RP1=0, select bank1
  3811  0E94  00AF               	movwf	(floor@i+2)^(0+128)
  3812  0E95  082A               	movf	floor@x^(0+128),w
  3813  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  3815  0E98  00A0               	movwf	___ftge@ff1
  3816  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  3817  0E9A  1303               	bcf	3,6	;RP1=0, select bank1
  3818  0E9B  082B               	movf	(floor@x+1)^(0+128),w
  3819  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  3820  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  3821  0E9E  00A1               	movwf	___ftge@ff1+1
  3822  0E9F  1683               	bsf	3,5	;RP0=1, select bank1
  3823  0EA0  1303               	bcf	3,6	;RP1=0, select bank1
  3824  0EA1  082C               	movf	(floor@x+2)^(0+128),w
  3825  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  3826  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  3827  0EA4  00A2               	movwf	___ftge@ff1+2
  3828  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  3829  0EA6  1303               	bcf	3,6	;RP1=0, select bank1
  3830  0EA7  082D               	movf	floor@i^(0+128),w
  3831  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  3833  0EAA  00A3               	movwf	___ftge@ff2
  3834  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  3835  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  3836  0EAD  082E               	movf	(floor@i+1)^(0+128),w
  3837  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0EB0  00A4               	movwf	___ftge@ff2+1
  3840  0EB1  1683               	bsf	3,5	;RP0=1, select bank1
  3841  0EB2  1303               	bcf	3,6	;RP1=0, select bank1
  3842  0EB3  082F               	movf	(floor@i+2)^(0+128),w
  3843  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  3844  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  3845  0EB6  00A5               	movwf	___ftge@ff2+2
  3846  0EB7  120A  158A  207C   	fcall	___ftge
      +       120A  158A         
  3847  0EBC  1803               	btfsc	3,0
  3848  0EBD  2EEE               	goto	l4022
  3849  0EBE  3000               	movlw	0
  3850  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  3852  0EC1  00CE               	movwf	___ftadd@f1
  3853  0EC2  3080               	movlw	128
  3854  0EC3  00CF               	movwf	___ftadd@f1+1
  3855  0EC4  30BF               	movlw	191
  3856  0EC5  00D0               	movwf	___ftadd@f1+2
  3857  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  3858  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  3859  0EC8  082D               	movf	floor@i^(0+128),w
  3860  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  3861  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  3862  0ECB  00D1               	movwf	___ftadd@f2
  3863  0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  3864  0ECD  1303               	bcf	3,6	;RP1=0, select bank1
  3865  0ECE  082E               	movf	(floor@i+1)^(0+128),w
  3866  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3867  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3868  0ED1  00D2               	movwf	___ftadd@f2+1
  3869  0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  3870  0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  3871  0ED4  082F               	movf	(floor@i+2)^(0+128),w
  3872  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  3873  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  3874  0ED7  00D3               	movwf	___ftadd@f2+2
  3875  0ED8  120A  158A  26F7   	fcall	___ftadd
  3876  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  3877  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  3878  0EDD  084E               	movf	?___ftadd,w
  3879  0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  3880  0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  3881  0EE0  00AA               	movwf	?_floor^(0+128)
  3882  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  3883  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  3884  0EE3  084F               	movf	?___ftadd+1,w
  3885  0EE4  1683               	bsf	3,5	;RP0=1, select bank1
  3886  0EE5  1303               	bcf	3,6	;RP1=0, select bank1
  3887  0EE6  00AB               	movwf	(?_floor+1)^(0+128)
  3888  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0EE9  0850               	movf	?___ftadd+2,w
  3891  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  3892  0EEB  1303               	bcf	3,6	;RP1=0, select bank1
  3893  0EEC  00AC               	movwf	(?_floor+2)^(0+128)
  3894  0EED  0008               	return
  3895  0EEE                     l4022:	
  3896  0EEE  1683               	bsf	3,5	;RP0=1, select bank1
  3897  0EEF  1303               	bcf	3,6	;RP1=0, select bank1
  3898  0EF0  082D               	movf	floor@i^(0+128),w
  3899  0EF1  00AA               	movwf	?_floor^(0+128)
  3900  0EF2  082E               	movf	(floor@i+1)^(0+128),w
  3901  0EF3  00AB               	movwf	(?_floor+1)^(0+128)
  3902  0EF4  082F               	movf	(floor@i+2)^(0+128),w
  3903  0EF5  00AC               	movwf	(?_floor+2)^(0+128)
  3904  0EF6  0008               	return
  3905  0EF7                     __end_of_floor:	
  3906                           
  3907                           	psect	text12
  3908  1734                     __ptext12:	
  3909 ;; *************** function _frexp *****************
  3910 ;; Defined at:
  3911 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\frexp.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  value           3    0[BANK0 ] int 
  3914 ;;  eptr            1    3[BANK0 ] PTR int 
  3915 ;;		 -> log@exponent(2), floor@expon(2), 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  3    0[BANK0 ] PTR int 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3927 ;;      Params:         0       4       0       0       0
  3928 ;;      Locals:         0       0       0       0       0
  3929 ;;      Temps:          0       2       0       0       0
  3930 ;;      Totals:         0       6       0       0       0
  3931 ;;Total ram usage:        6 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    2
  3934 ;; This function calls:
  3935 ;;		Nothing
  3936 ;; This function is called by:
  3937 ;;		_floor
  3938 ;;		_log
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _frexp
  3944  1734                     _frexp:	
  3945                           
  3946                           ;incstack = 0
  3947                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3948  1734  1283               	bcf	3,5	;RP0=0, select bank0
  3949  1735  1303               	bcf	3,6	;RP1=0, select bank0
  3950  1736  0822               	movf	frexp@value+2,w
  3951  1737  0421               	iorwf	frexp@value+1,w
  3952  1738  0420               	iorwf	frexp@value,w
  3953  1739  1D03               	skipz
  3954  173A  2F48               	goto	l3926
  3955  173B  0823               	movf	frexp@eptr,w
  3956  173C  0084               	movwf	4
  3957  173D  1383               	bcf	3,7	;select IRP bank0
  3958  173E  0180               	clrf	0
  3959  173F  0A84               	incf	4,f
  3960  1740  0180               	clrf	0
  3961  1741  3000               	movlw	0
  3962  1742  00A0               	movwf	?_frexp
  3963  1743  3000               	movlw	0
  3964  1744  00A1               	movwf	?_frexp+1
  3965  1745  3000               	movlw	0
  3966  1746  00A2               	movwf	?_frexp+2
  3967  1747  0008               	return
  3968  1748                     l3926:	
  3969  1748  0822               	movf	frexp@value+2,w
  3970  1749  397F               	andlw	127
  3971  174A  00A4               	movwf	??_frexp
  3972  174B  01A5               	clrf	??_frexp+1
  3973  174C  1003               	clrc
  3974  174D  0DA4               	rlf	??_frexp,f
  3975  174E  0DA5               	rlf	??_frexp+1,f
  3976  174F  0823               	movf	frexp@eptr,w
  3977  1750  0084               	movwf	4
  3978  1751  0824               	movf	??_frexp,w
  3979  1752  1383               	bcf	3,7	;select IRP bank0
  3980  1753  0080               	movwf	0
  3981  1754  0A84               	incf	4,f
  3982  1755  0825               	movf	??_frexp+1,w
  3983  1756  0080               	movwf	0
  3984  1757  0D21               	rlf	frexp@value+1,w
  3985  1758  0D21               	rlf	frexp@value+1,w
  3986  1759  3901               	andlw	1
  3987  175A  00A4               	movwf	??_frexp
  3988  175B  01A5               	clrf	??_frexp+1
  3989  175C  0823               	movf	frexp@eptr,w
  3990  175D  0084               	movwf	4
  3991  175E  0824               	movf	??_frexp,w
  3992  175F  0480               	iorwf	0,f
  3993  1760  0A84               	incf	4,f
  3994  1761  0825               	movf	??_frexp+1,w
  3995  1762  0480               	iorwf	0,f
  3996  1763  0823               	movf	frexp@eptr,w
  3997  1764  0084               	movwf	4
  3998  1765  3082               	movlw	130
  3999  1766  0780               	addwf	0,f
  4000  1767  0F84               	incfsz	4,f
  4001  1768  0800               	movf	0,w
  4002  1769  1803               	skipnc
  4003  176A  0A00               	incf	0,w
  4004  176B  00FF               	movwf	127
  4005  176C  30FF               	movlw	255
  4006  176D  077F               	addwf	127,w
  4007  176E  0080               	movwf	0
  4008  176F  0384               	decf	4,f
  4009  1770  0822               	movf	frexp@value+2,w
  4010  1771  3980               	andlw	-128
  4011  1772  383F               	iorlw	63
  4012  1773  00A2               	movwf	frexp@value+2
  4013  1774  13A1               	bcf	frexp@value+1,7
  4014  1775  0008               	return
  4015  1776                     __end_of_frexp:	
  4016                           
  4017                           	psect	text13
  4018  0BB3                     __ptext13:	
  4019 ;; *************** function ___fttol *****************
  4020 ;; Defined at:
  4021 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\fttol.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  f1              3   67[BANK0 ] float 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  lval            4    1[BANK1 ] unsigned long 
  4026 ;;  exp1            1    5[BANK1 ] unsigned char 
  4027 ;;  sign1           1    0[BANK1 ] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  4   67[BANK0 ] long 
  4030 ;; Registers used:
  4031 ;;		wreg, status,2, status,0
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4037 ;;      Params:         0       4       0       0       0
  4038 ;;      Locals:         0       0       6       0       0
  4039 ;;      Temps:          0       4       0       0       0
  4040 ;;      Totals:         0       8       6       0       0
  4041 ;;Total ram usage:       14 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    2
  4044 ;; This function calls:
  4045 ;;		Nothing
  4046 ;; This function is called by:
  4047 ;;		_fillRegister
  4048 ;;		_pow
  4049 ;;		_exp
  4050 ;;		_floor
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function ___fttol
  4056  0BB3                     ___fttol:	
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4060  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  4061  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  4062  0BB5  0863               	movf	___fttol@f1,w
  4063  0BB6  00E7               	movwf	??___fttol
  4064  0BB7  0864               	movf	___fttol@f1+1,w
  4065  0BB8  00E8               	movwf	??___fttol+1
  4066  0BB9  0865               	movf	___fttol@f1+2,w
  4067  0BBA  00E9               	movwf	??___fttol+2
  4068  0BBB  1003               	clrc
  4069  0BBC  0D68               	rlf	??___fttol+1,w
  4070  0BBD  0D69               	rlf	??___fttol+2,w
  4071  0BBE  00EA               	movwf	??___fttol+3
  4072  0BBF  086A               	movf	??___fttol+3,w
  4073  0BC0  1683               	bsf	3,5	;RP0=1, select bank1
  4074  0BC1  1303               	bcf	3,6	;RP1=0, select bank1
  4075  0BC2  00A5               	movwf	___fttol@exp1^(0+128)
  4076  0BC3  08A5               	movf	___fttol@exp1^(0+128),f
  4077  0BC4  1D03               	skipz
  4078  0BC5  2BD1               	goto	l2996
  4079  0BC6  3000               	movlw	0
  4080  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  4081  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  4082  0BC9  00E6               	movwf	?___fttol+3
  4083  0BCA  3000               	movlw	0
  4084  0BCB  00E5               	movwf	?___fttol+2
  4085  0BCC  3000               	movlw	0
  4086  0BCD  00E4               	movwf	?___fttol+1
  4087  0BCE  3000               	movlw	0
  4088  0BCF  00E3               	movwf	?___fttol
  4089  0BD0  0008               	return
  4090  0BD1                     l2996:	
  4091  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0BD2  0863               	movf	___fttol@f1,w
  4093  0BD3  00E7               	movwf	??___fttol
  4094  0BD4  0864               	movf	___fttol@f1+1,w
  4095  0BD5  00E8               	movwf	??___fttol+1
  4096  0BD6  0865               	movf	___fttol@f1+2,w
  4097  0BD7  00E9               	movwf	??___fttol+2
  4098  0BD8  3017               	movlw	23
  4099  0BD9                     u1975:	
  4100  0BD9  1003               	clrc
  4101  0BDA  0CE9               	rrf	??___fttol+2,f
  4102  0BDB  0CE8               	rrf	??___fttol+1,f
  4103  0BDC  0CE7               	rrf	??___fttol,f
  4104  0BDD  3EFF               	addlw	-1
  4105  0BDE  1D03               	skipz
  4106  0BDF  2BD9               	goto	u1975
  4107  0BE0  0867               	movf	??___fttol,w
  4108  0BE1  00EA               	movwf	??___fttol+3
  4109  0BE2  086A               	movf	??___fttol+3,w
  4110  0BE3  1683               	bsf	3,5	;RP0=1, select bank1
  4111  0BE4  1303               	bcf	3,6	;RP1=0, select bank1
  4112  0BE5  00A0               	movwf	___fttol@sign1^(0+128)
  4113  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0BE8  17E4               	bsf	___fttol@f1+1,7
  4116  0BE9  30FF               	movlw	255
  4117  0BEA  05E3               	andwf	___fttol@f1,f
  4118  0BEB  30FF               	movlw	255
  4119  0BEC  05E4               	andwf	___fttol@f1+1,f
  4120  0BED  3000               	movlw	0
  4121  0BEE  05E5               	andwf	___fttol@f1+2,f
  4122  0BEF  0863               	movf	___fttol@f1,w
  4123  0BF0  1683               	bsf	3,5	;RP0=1, select bank1
  4124  0BF1  1303               	bcf	3,6	;RP1=0, select bank1
  4125  0BF2  00A1               	movwf	___fttol@lval^(0+128)
  4126  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  4127  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
  4128  0BF5  0864               	movf	___fttol@f1+1,w
  4129  0BF6  1683               	bsf	3,5	;RP0=1, select bank1
  4130  0BF7  1303               	bcf	3,6	;RP1=0, select bank1
  4131  0BF8  00A2               	movwf	(___fttol@lval^(0+128)+1)
  4132  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  4133  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  4134  0BFB  0865               	movf	___fttol@f1+2,w
  4135  0BFC  1683               	bsf	3,5	;RP0=1, select bank1
  4136  0BFD  1303               	bcf	3,6	;RP1=0, select bank1
  4137  0BFE  00A3               	movwf	(___fttol@lval^(0+128)+2)
  4138  0BFF  01A4               	clrf	(___fttol@lval^(0+128)+3)
  4139  0C00  308E               	movlw	142
  4140  0C01  02A5               	subwf	___fttol@exp1^(0+128),f
  4141  0C02  1FA5               	btfss	___fttol@exp1^(0+128),7
  4142  0C03  2C2A               	goto	l3016
  4143  0C04  0825               	movf	___fttol@exp1^(0+128),w
  4144  0C05  3A80               	xorlw	128
  4145  0C06  3E8F               	addlw	143
  4146  0C07  1803               	skipnc
  4147  0C08  2C14               	goto	l3014
  4148  0C09  3000               	movlw	0
  4149  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  4150  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  4151  0C0C  00E6               	movwf	?___fttol+3
  4152  0C0D  3000               	movlw	0
  4153  0C0E  00E5               	movwf	?___fttol+2
  4154  0C0F  3000               	movlw	0
  4155  0C10  00E4               	movwf	?___fttol+1
  4156  0C11  3000               	movlw	0
  4157  0C12  00E3               	movwf	?___fttol
  4158  0C13  0008               	return
  4159  0C14                     l3014:	
  4160  0C14  3001               	movlw	1
  4161  0C15                     u2005:	
  4162  0C15  1003               	clrc
  4163  0C16  1683               	bsf	3,5	;RP0=1, select bank1
  4164  0C17  1303               	bcf	3,6	;RP1=0, select bank1
  4165  0C18  0CA4               	rrf	(___fttol@lval+3)^(0+128),f
  4166  0C19  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  4167  0C1A  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  4168  0C1B  0CA1               	rrf	___fttol@lval^(0+128),f
  4169  0C1C  3EFF               	addlw	-1
  4170  0C1D  1D03               	skipz
  4171  0C1E  2C15               	goto	u2005
  4172  0C1F  3001               	movlw	1
  4173  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  4174  0C21  1303               	bcf	3,6	;RP1=0, select bank0
  4175  0C22  00E7               	movwf	??___fttol
  4176  0C23  0867               	movf	??___fttol,w
  4177  0C24  1683               	bsf	3,5	;RP0=1, select bank1
  4178  0C25  1303               	bcf	3,6	;RP1=0, select bank1
  4179  0C26  07A5               	addwf	___fttol@exp1^(0+128),f
  4180  0C27  1903               	btfsc	3,2
  4181  0C28  2C50               	goto	l3026
  4182  0C29  2C14               	goto	l3014
  4183  0C2A                     l3016:	
  4184  0C2A  3018               	movlw	24
  4185  0C2B  0225               	subwf	___fttol@exp1^(0+128),w
  4186  0C2C  1C03               	skipc
  4187  0C2D  2C4B               	goto	l3024
  4188  0C2E  3000               	movlw	0
  4189  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0C31  00E6               	movwf	?___fttol+3
  4192  0C32  3000               	movlw	0
  4193  0C33  00E5               	movwf	?___fttol+2
  4194  0C34  3000               	movlw	0
  4195  0C35  00E4               	movwf	?___fttol+1
  4196  0C36  3000               	movlw	0
  4197  0C37  00E3               	movwf	?___fttol
  4198  0C38  0008               	return
  4199  0C39                     l3022:	
  4200  0C39  3001               	movlw	1
  4201  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  4202  0C3B  00E7               	movwf	??___fttol
  4203  0C3C                     u2035:	
  4204  0C3C  1003               	clrc
  4205  0C3D  1683               	bsf	3,5	;RP0=1, select bank1
  4206  0C3E  1303               	bcf	3,6	;RP1=0, select bank1
  4207  0C3F  0DA1               	rlf	___fttol@lval^(0+128),f
  4208  0C40  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  4209  0C41  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  4210  0C42  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  4211  0C43  1283               	bcf	3,5	;RP0=0, select bank0
  4212  0C44  1303               	bcf	3,6	;RP1=0, select bank0
  4213  0C45  0BE7               	decfsz	??___fttol,f
  4214  0C46  2C3C               	goto	u2035
  4215  0C47  3001               	movlw	1
  4216  0C48  1683               	bsf	3,5	;RP0=1, select bank1
  4217  0C49  1303               	bcf	3,6	;RP1=0, select bank1
  4218  0C4A  02A5               	subwf	___fttol@exp1^(0+128),f
  4219  0C4B                     l3024:	
  4220  0C4B  1683               	bsf	3,5	;RP0=1, select bank1
  4221  0C4C  1303               	bcf	3,6	;RP1=0, select bank1
  4222  0C4D  08A5               	movf	___fttol@exp1^(0+128),f
  4223  0C4E  1D03               	skipz
  4224  0C4F  2C39               	goto	l3022
  4225  0C50                     l3026:	
  4226  0C50  0820               	movf	___fttol@sign1^(0+128),w
  4227  0C51  1903               	btfsc	3,2
  4228  0C52  2C5E               	goto	l3030
  4229  0C53  09A1               	comf	___fttol@lval^(0+128),f
  4230  0C54  09A2               	comf	(___fttol@lval+1)^(0+128),f
  4231  0C55  09A3               	comf	(___fttol@lval+2)^(0+128),f
  4232  0C56  09A4               	comf	(___fttol@lval+3)^(0+128),f
  4233  0C57  0AA1               	incf	___fttol@lval^(0+128),f
  4234  0C58  1903               	skipnz
  4235  0C59  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  4236  0C5A  1903               	skipnz
  4237  0C5B  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  4238  0C5C  1903               	skipnz
  4239  0C5D  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  4240  0C5E                     l3030:	
  4241  0C5E  0824               	movf	(___fttol@lval+3)^(0+128),w
  4242  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  4244  0C61  00E6               	movwf	?___fttol+3
  4245  0C62  1683               	bsf	3,5	;RP0=1, select bank1
  4246  0C63  1303               	bcf	3,6	;RP1=0, select bank1
  4247  0C64  0823               	movf	(___fttol@lval+2)^(0+128),w
  4248  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  4249  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  4250  0C67  00E5               	movwf	?___fttol+2
  4251  0C68  1683               	bsf	3,5	;RP0=1, select bank1
  4252  0C69  1303               	bcf	3,6	;RP1=0, select bank1
  4253  0C6A  0822               	movf	(___fttol@lval+1)^(0+128),w
  4254  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  4256  0C6D  00E4               	movwf	?___fttol+1
  4257  0C6E  1683               	bsf	3,5	;RP0=1, select bank1
  4258  0C6F  1303               	bcf	3,6	;RP1=0, select bank1
  4259  0C70  0821               	movf	___fttol@lval^(0+128),w
  4260  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  4261  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  4262  0C73  00E3               	movwf	?___fttol
  4263  0C74  0008               	return
  4264  0C75                     __end_of___fttol:	
  4265                           
  4266                           	psect	text14
  4267  087C                     __ptext14:	
  4268 ;; *************** function ___ftge *****************
  4269 ;; Defined at:
  4270 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftge.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  ff1             3    0[BANK0 ] float 
  4273 ;;  ff2             3    3[BANK0 ] float 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;		None               void
  4278 ;; Registers used:
  4279 ;;		wreg, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4285 ;;      Params:         0       6       0       0       0
  4286 ;;      Locals:         0       0       0       0       0
  4287 ;;      Temps:          0       6       0       0       0
  4288 ;;      Totals:         0      12       0       0       0
  4289 ;;Total ram usage:       12 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    2
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_pow
  4296 ;;		_exp
  4297 ;;		_floor
  4298 ;;		_ldexp
  4299 ;;		_log
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function ___ftge
  4305  087C                     ___ftge:	
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4309  087C  1283               	bcf	3,5	;RP0=0, select bank0
  4310  087D  1303               	bcf	3,6	;RP1=0, select bank0
  4311  087E  1FA2               	btfss	___ftge@ff1+2,7
  4312  087F  28A5               	goto	l2916
  4313  0880  3000               	movlw	0
  4314  0881  00A6               	movwf	??___ftge
  4315  0882  3000               	movlw	0
  4316  0883  00A7               	movwf	??___ftge+1
  4317  0884  3080               	movlw	128
  4318  0885  00A8               	movwf	??___ftge+2
  4319  0886  0920               	comf	___ftge@ff1,w
  4320  0887  00A9               	movwf	??___ftge+3
  4321  0888  0921               	comf	___ftge@ff1+1,w
  4322  0889  00AA               	movwf	??___ftge+4
  4323  088A  0922               	comf	___ftge@ff1+2,w
  4324  088B  00AB               	movwf	??___ftge+5
  4325  088C  0AA9               	incf	??___ftge+3,f
  4326  088D  1903               	skipnz
  4327  088E  0AAA               	incf	??___ftge+4,f
  4328  088F  1903               	skipnz
  4329  0890  0AAB               	incf	??___ftge+5,f
  4330  0891  0829               	movf	??___ftge+3,w
  4331  0892  07A6               	addwf	??___ftge,f
  4332  0893  082A               	movf	??___ftge+4,w
  4333  0894  1803               	skipnc
  4334  0895  0F2A               	incfsz	??___ftge+4,w
  4335  0896  2898               	goto	u1771
  4336  0897  2899               	goto	u1772
  4337  0898                     u1771:	
  4338  0898  07A7               	addwf	??___ftge+1,f
  4339  0899                     u1772:	
  4340  0899  082B               	movf	??___ftge+5,w
  4341  089A  1803               	skipnc
  4342  089B  0F2B               	incfsz	??___ftge+5,w
  4343  089C  289E               	goto	u1773
  4344  089D  289F               	goto	u1774
  4345  089E                     u1773:	
  4346  089E  07A8               	addwf	??___ftge+2,f
  4347  089F                     u1774:	
  4348  089F  0826               	movf	??___ftge,w
  4349  08A0  00A0               	movwf	___ftge@ff1
  4350  08A1  0827               	movf	??___ftge+1,w
  4351  08A2  00A1               	movwf	___ftge@ff1+1
  4352  08A3  0828               	movf	??___ftge+2,w
  4353  08A4  00A2               	movwf	___ftge@ff1+2
  4354  08A5                     l2916:	
  4355  08A5  1FA5               	btfss	___ftge@ff2+2,7
  4356  08A6  28CC               	goto	l2920
  4357  08A7  3000               	movlw	0
  4358  08A8  00A6               	movwf	??___ftge
  4359  08A9  3000               	movlw	0
  4360  08AA  00A7               	movwf	??___ftge+1
  4361  08AB  3080               	movlw	128
  4362  08AC  00A8               	movwf	??___ftge+2
  4363  08AD  0923               	comf	___ftge@ff2,w
  4364  08AE  00A9               	movwf	??___ftge+3
  4365  08AF  0924               	comf	___ftge@ff2+1,w
  4366  08B0  00AA               	movwf	??___ftge+4
  4367  08B1  0925               	comf	___ftge@ff2+2,w
  4368  08B2  00AB               	movwf	??___ftge+5
  4369  08B3  0AA9               	incf	??___ftge+3,f
  4370  08B4  1903               	skipnz
  4371  08B5  0AAA               	incf	??___ftge+4,f
  4372  08B6  1903               	skipnz
  4373  08B7  0AAB               	incf	??___ftge+5,f
  4374  08B8  0829               	movf	??___ftge+3,w
  4375  08B9  07A6               	addwf	??___ftge,f
  4376  08BA  082A               	movf	??___ftge+4,w
  4377  08BB  1803               	skipnc
  4378  08BC  0F2A               	incfsz	??___ftge+4,w
  4379  08BD  28BF               	goto	u1791
  4380  08BE  28C0               	goto	u1792
  4381  08BF                     u1791:	
  4382  08BF  07A7               	addwf	??___ftge+1,f
  4383  08C0                     u1792:	
  4384  08C0  082B               	movf	??___ftge+5,w
  4385  08C1  1803               	skipnc
  4386  08C2  0F2B               	incfsz	??___ftge+5,w
  4387  08C3  28C5               	goto	u1793
  4388  08C4  28C6               	goto	u1794
  4389  08C5                     u1793:	
  4390  08C5  07A8               	addwf	??___ftge+2,f
  4391  08C6                     u1794:	
  4392  08C6  0826               	movf	??___ftge,w
  4393  08C7  00A3               	movwf	___ftge@ff2
  4394  08C8  0827               	movf	??___ftge+1,w
  4395  08C9  00A4               	movwf	___ftge@ff2+1
  4396  08CA  0828               	movf	??___ftge+2,w
  4397  08CB  00A5               	movwf	___ftge@ff2+2
  4398  08CC                     l2920:	
  4399  08CC  3080               	movlw	128
  4400  08CD  06A2               	xorwf	___ftge@ff1+2,f
  4401  08CE  3080               	movlw	128
  4402  08CF  06A5               	xorwf	___ftge@ff2+2,f
  4403  08D0  0825               	movf	___ftge@ff2+2,w
  4404  08D1  0222               	subwf	___ftge@ff1+2,w
  4405  08D2  1D03               	skipz
  4406  08D3  0008               	return
  4407  08D4  0824               	movf	___ftge@ff2+1,w
  4408  08D5  0221               	subwf	___ftge@ff1+1,w
  4409  08D6  1D03               	skipz
  4410  08D7  0008               	return
  4411  08D8  0823               	movf	___ftge@ff2,w
  4412  08D9  0220               	subwf	___ftge@ff1,w
  4413  08DA  0008               	return
  4414  08DB                     __end_of___ftge:	
  4415                           
  4416                           	psect	text15
  4417  082A                     __ptext15:	
  4418 ;; *************** function ___altoft *****************
  4419 ;; Defined at:
  4420 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\altoft.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  c               4   75[BANK0 ] long 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  sign            1    9[BANK1 ] unsigned char 
  4425 ;;  exp             1    8[BANK1 ] unsigned char 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  3   75[BANK0 ] float 
  4428 ;; Registers used:
  4429 ;;		wreg, status,2, status,0, pclath, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4435 ;;      Params:         0       4       0       0       0
  4436 ;;      Locals:         0       0       2       0       0
  4437 ;;      Temps:          0       0       2       0       0
  4438 ;;      Totals:         0       4       4       0       0
  4439 ;;Total ram usage:        8 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    3
  4442 ;; This function calls:
  4443 ;;		___ftpack
  4444 ;; This function is called by:
  4445 ;;		_floor
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           
  4450                           ;psect for function ___altoft
  4451  082A                     ___altoft:	
  4452                           
  4453                           ;incstack = 0
  4454 ;; hardware stack exceeded
  4455                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4456  082A  1683               	bsf	3,5	;RP0=1, select bank1
  4457  082B  1303               	bcf	3,6	;RP1=0, select bank1
  4458  082C  01A9               	clrf	___altoft@sign^(0+128)
  4459  082D  308E               	movlw	142
  4460  082E  00A6               	movwf	??___altoft^(0+128)
  4461  082F  0826               	movf	??___altoft^(0+128),w
  4462  0830  00A8               	movwf	___altoft@exp^(0+128)
  4463  0831  1283               	bcf	3,5	;RP0=0, select bank0
  4464  0832  1303               	bcf	3,6	;RP1=0, select bank0
  4465  0833  1FEE               	btfss	___altoft@c+3,7
  4466  0834  2844               	goto	l3766
  4467  0835  09EB               	comf	___altoft@c,f
  4468  0836  09EC               	comf	___altoft@c+1,f
  4469  0837  09ED               	comf	___altoft@c+2,f
  4470  0838  09EE               	comf	___altoft@c+3,f
  4471  0839  0AEB               	incf	___altoft@c,f
  4472  083A  1903               	skipnz
  4473  083B  0AEC               	incf	___altoft@c+1,f
  4474  083C  1903               	skipnz
  4475  083D  0AED               	incf	___altoft@c+2,f
  4476  083E  1903               	skipnz
  4477  083F  0AEE               	incf	___altoft@c+3,f
  4478  0840  1683               	bsf	3,5	;RP0=1, select bank1
  4479  0841  1303               	bcf	3,6	;RP1=0, select bank1
  4480  0842  01A9               	clrf	___altoft@sign^(0+128)
  4481  0843  0AA9               	incf	___altoft@sign^(0+128),f
  4482  0844                     l3766:	
  4483  0844  30FF               	movlw	255
  4484  0845  1283               	bcf	3,5	;RP0=0, select bank0
  4485  0846  056E               	andwf	___altoft@c+3,w
  4486  0847  1903               	btfsc	3,2
  4487  0848  285A               	goto	l3768
  4488  0849  3001               	movlw	1
  4489  084A                     u2835:	
  4490  084A  1003               	clrc
  4491  084B  1283               	bcf	3,5	;RP0=0, select bank0
  4492  084C  0CEE               	rrf	___altoft@c+3,f
  4493  084D  0CED               	rrf	___altoft@c+2,f
  4494  084E  0CEC               	rrf	___altoft@c+1,f
  4495  084F  0CEB               	rrf	___altoft@c,f
  4496  0850  3EFF               	addlw	-1
  4497  0851  1D03               	skipz
  4498  0852  284A               	goto	u2835
  4499  0853  3001               	movlw	1
  4500  0854  1683               	bsf	3,5	;RP0=1, select bank1
  4501  0855  1303               	bcf	3,6	;RP1=0, select bank1
  4502  0856  00A6               	movwf	??___altoft^(0+128)
  4503  0857  0826               	movf	??___altoft^(0+128),w
  4504  0858  07A8               	addwf	___altoft@exp^(0+128),f
  4505  0859  2844               	goto	l3766
  4506  085A                     l3768:	
  4507  085A  086B               	movf	___altoft@c,w
  4508  085B  00A0               	movwf	___ftpack@arg
  4509  085C  086C               	movf	___altoft@c+1,w
  4510  085D  00A1               	movwf	___ftpack@arg+1
  4511  085E  086D               	movf	___altoft@c+2,w
  4512  085F  00A2               	movwf	___ftpack@arg+2
  4513  0860  1683               	bsf	3,5	;RP0=1, select bank1
  4514  0861  1303               	bcf	3,6	;RP1=0, select bank1
  4515  0862  0828               	movf	___altoft@exp^(0+128),w
  4516  0863  00A6               	movwf	??___altoft^(0+128)
  4517  0864  0826               	movf	??___altoft^(0+128),w
  4518  0865  1283               	bcf	3,5	;RP0=0, select bank0
  4519  0866  1303               	bcf	3,6	;RP1=0, select bank0
  4520  0867  00A3               	movwf	___ftpack@exp
  4521  0868  1683               	bsf	3,5	;RP0=1, select bank1
  4522  0869  1303               	bcf	3,6	;RP1=0, select bank1
  4523  086A  0829               	movf	___altoft@sign^(0+128),w
  4524  086B  00A7               	movwf	(??___altoft+1)^(0+128)
  4525  086C  0827               	movf	(??___altoft+1)^(0+128),w
  4526  086D  1283               	bcf	3,5	;RP0=0, select bank0
  4527  086E  1303               	bcf	3,6	;RP1=0, select bank0
  4528  086F  00A4               	movwf	___ftpack@sign
  4529  0870  120A  158A  20DB   	fcall	___ftpack
  4530  0873  1283               	bcf	3,5	;RP0=0, select bank0
  4531  0874  1303               	bcf	3,6	;RP1=0, select bank0
  4532  0875  0820               	movf	?___ftpack,w
  4533  0876  00EB               	movwf	?___altoft
  4534  0877  0821               	movf	?___ftpack+1,w
  4535  0878  00EC               	movwf	?___altoft+1
  4536  0879  0822               	movf	?___ftpack+2,w
  4537  087A  00ED               	movwf	?___altoft+2
  4538  087B  0008               	return
  4539  087C                     __end_of___altoft:	
  4540                           
  4541                           	psect	text16
  4542  0945                     __ptext16:	
  4543 ;; *************** function _eval_poly *****************
  4544 ;; Defined at:
  4545 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\evalpoly.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  x               3   59[BANK0 ] float 
  4548 ;;  d               1   62[BANK0 ] PTR const 
  4549 ;;		 -> log@coeff(27), exp@coeff(30), 
  4550 ;;  n               2   63[BANK0 ] int 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  res             3   66[BANK0 ] int 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;                  3   59[BANK0 ] int 
  4555 ;; Registers used:
  4556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4562 ;;      Params:         0       6       0       0       0
  4563 ;;      Locals:         0       3       0       0       0
  4564 ;;      Temps:          0       1       0       0       0
  4565 ;;      Totals:         0      10       0       0       0
  4566 ;;Total ram usage:       10 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    4
  4569 ;; This function calls:
  4570 ;;		___bmul
  4571 ;;		___ftadd
  4572 ;;		___ftmul
  4573 ;; This function is called by:
  4574 ;;		_exp
  4575 ;;		_log
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           
  4580                           ;psect for function _eval_poly
  4581  0945                     _eval_poly:	
  4582                           
  4583                           ;incstack = 0
  4584 ;; hardware stack exceeded
  4585                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4586  0945  3003               	movlw	3
  4587  0946  1283               	bcf	3,5	;RP0=0, select bank0
  4588  0947  1303               	bcf	3,6	;RP1=0, select bank0
  4589  0948  00E1               	movwf	??_eval_poly
  4590  0949  0861               	movf	??_eval_poly,w
  4591  094A  00A0               	movwf	___bmul@multiplicand
  4592  094B  085F               	movf	eval_poly@n,w
  4593  094C  120A  118A  27EB   	fcall	___bmul
      +       120A  158A         
  4594  0951  1283               	bcf	3,5	;RP0=0, select bank0
  4595  0952  1303               	bcf	3,6	;RP1=0, select bank0
  4596  0953  075E               	addwf	eval_poly@d,w
  4597  0954  0084               	movwf	4
  4598  0955  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4599  095A  00E2               	movwf	eval_poly@res
  4600  095B  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4601  0960  00E3               	movwf	eval_poly@res+1
  4602  0961  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4603  0966                     L3:	
  4604  0966  00E4               	movwf	eval_poly@res+2
  4605  0967  0860               	movf	eval_poly@n+1,w
  4606  0968  045F               	iorwf	eval_poly@n,w
  4607  0969  1903               	btfsc	3,2
  4608  096A  29B7               	goto	l4032
  4609  096B  3003               	movlw	3
  4610  096C  00E1               	movwf	??_eval_poly
  4611  096D  0861               	movf	??_eval_poly,w
  4612  096E  00A0               	movwf	___bmul@multiplicand
  4613  096F  30FF               	movlw	255
  4614  0970  07DF               	addwf	eval_poly@n,f
  4615  0971  1803               	skipnc
  4616  0972  0AE0               	incf	eval_poly@n+1,f
  4617  0973  30FF               	movlw	255
  4618  0974  07E0               	addwf	eval_poly@n+1,f
  4619  0975  085F               	movf	eval_poly@n,w
  4620  0976  120A  118A  27EB   	fcall	___bmul
      +       120A  158A         
  4621  097B  1283               	bcf	3,5	;RP0=0, select bank0
  4622  097C  1303               	bcf	3,6	;RP1=0, select bank0
  4623  097D  075E               	addwf	eval_poly@d,w
  4624  097E  0084               	movwf	4
  4625  097F  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4626  0984  00CE               	movwf	___ftadd@f1
  4627  0985  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4628  098A  00CF               	movwf	___ftadd@f1+1
  4629  098B  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4630  0990  00D0               	movwf	___ftadd@f1+2
  4631  0991  0862               	movf	eval_poly@res,w
  4632  0992  00AE               	movwf	___ftmul@f1
  4633  0993  0863               	movf	eval_poly@res+1,w
  4634  0994  00AF               	movwf	___ftmul@f1+1
  4635  0995  0864               	movf	eval_poly@res+2,w
  4636  0996  00B0               	movwf	___ftmul@f1+2
  4637  0997  085B               	movf	eval_poly@x,w
  4638  0998  00B1               	movwf	___ftmul@f2
  4639  0999  085C               	movf	eval_poly@x+1,w
  4640  099A  00B2               	movwf	___ftmul@f2+1
  4641  099B  085D               	movf	eval_poly@x+2,w
  4642  099C  00B3               	movwf	___ftmul@f2+2
  4643  099D  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  4644  09A2  1283               	bcf	3,5	;RP0=0, select bank0
  4645  09A3  1303               	bcf	3,6	;RP1=0, select bank0
  4646  09A4  082E               	movf	?___ftmul,w
  4647  09A5  00D1               	movwf	___ftadd@f2
  4648  09A6  082F               	movf	?___ftmul+1,w
  4649  09A7  00D2               	movwf	___ftadd@f2+1
  4650  09A8  0830               	movf	?___ftmul+2,w
  4651  09A9  00D3               	movwf	___ftadd@f2+2
  4652  09AA  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  4653  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  4654  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  4655  09B1  084E               	movf	?___ftadd,w
  4656  09B2  00E2               	movwf	eval_poly@res
  4657  09B3  084F               	movf	?___ftadd+1,w
  4658  09B4  00E3               	movwf	eval_poly@res+1
  4659  09B5  0850               	movf	?___ftadd+2,w
  4660  09B6  2966               	goto	L3
  4661  09B7                     l4032:	
  4662  09B7  0862               	movf	eval_poly@res,w
  4663  09B8  00DB               	movwf	?_eval_poly
  4664  09B9  0863               	movf	eval_poly@res+1,w
  4665  09BA  00DC               	movwf	?_eval_poly+1
  4666  09BB  0864               	movf	eval_poly@res+2,w
  4667  09BC  00DD               	movwf	?_eval_poly+2
  4668  09BD  0008               	return
  4669  09BE                     __end_of_eval_poly:	
  4670                           
  4671                           	psect	text17
  4672  07EB                     __ptext17:	
  4673 ;; *************** function ___bmul *****************
  4674 ;; Defined at:
  4675 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\bmul.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  multiplier      1    wreg     unsigned char 
  4678 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4681 ;;  product         1    2[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      unsigned char 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4691 ;;      Params:         0       1       0       0       0
  4692 ;;      Locals:         0       2       0       0       0
  4693 ;;      Temps:          0       1       0       0       0
  4694 ;;      Totals:         0       4       0       0       0
  4695 ;;Total ram usage:        4 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    2
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_eval_poly
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           
  4706                           ;psect for function ___bmul
  4707  07EB                     ___bmul:	
  4708                           
  4709                           ;incstack = 0
  4710                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4711                           ;___bmul@multiplier stored from wreg
  4712  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  4713  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  4714  07ED  00A3               	movwf	___bmul@multiplier
  4715  07EE  01A2               	clrf	___bmul@product
  4716  07EF                     l3774:	
  4717  07EF  1C23               	btfss	___bmul@multiplier,0
  4718  07F0  2FF5               	goto	l3778
  4719  07F1  0820               	movf	___bmul@multiplicand,w
  4720  07F2  00A1               	movwf	??___bmul
  4721  07F3  0821               	movf	??___bmul,w
  4722  07F4  07A2               	addwf	___bmul@product,f
  4723  07F5                     l3778:	
  4724  07F5  1003               	clrc
  4725  07F6  0DA0               	rlf	___bmul@multiplicand,f
  4726  07F7  1003               	clrc
  4727  07F8  0CA3               	rrf	___bmul@multiplier,f
  4728  07F9  08A3               	movf	___bmul@multiplier,f
  4729  07FA  1D03               	skipz
  4730  07FB  2FEF               	goto	l3774
  4731  07FC  0822               	movf	___bmul@product,w
  4732  07FD  0008               	return
  4733  07FE                     __end_of___bmul:	
  4734                           
  4735                           	psect	text18
  4736  1648                     __ptext18:	
  4737 ;; *************** function ___ftsub *****************
  4738 ;; Defined at:
  4739 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftsub.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  f2              3   59[BANK0 ] float 
  4742 ;;  f1              3   62[BANK0 ] float 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  3   59[BANK0 ] float 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, pclath, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4754 ;;      Params:         0       6       0       0       0
  4755 ;;      Locals:         0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0
  4757 ;;      Totals:         0       6       0       0       0
  4758 ;;Total ram usage:        6 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    4
  4761 ;; This function calls:
  4762 ;;		___ftadd
  4763 ;; This function is called by:
  4764 ;;		_exp
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function ___ftsub
  4770  1648                     ___ftsub:	
  4771                           
  4772                           ;incstack = 0
  4773 ;; hardware stack exceeded
  4774                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4775  1648  3080               	movlw	128
  4776  1649  1283               	bcf	3,5	;RP0=0, select bank0
  4777  164A  1303               	bcf	3,6	;RP1=0, select bank0
  4778  164B  06DD               	xorwf	___ftsub@f2+2,f
  4779  164C  085E               	movf	___ftsub@f1,w
  4780  164D  00CE               	movwf	___ftadd@f1
  4781  164E  085F               	movf	___ftsub@f1+1,w
  4782  164F  00CF               	movwf	___ftadd@f1+1
  4783  1650  0860               	movf	___ftsub@f1+2,w
  4784  1651  00D0               	movwf	___ftadd@f1+2
  4785  1652  085B               	movf	___ftsub@f2,w
  4786  1653  00D1               	movwf	___ftadd@f2
  4787  1654  085C               	movf	___ftsub@f2+1,w
  4788  1655  00D2               	movwf	___ftadd@f2+1
  4789  1656  085D               	movf	___ftsub@f2+2,w
  4790  1657  00D3               	movwf	___ftadd@f2+2
  4791  1658  120A  158A  26F7   	fcall	___ftadd
  4792  165B  1283               	bcf	3,5	;RP0=0, select bank0
  4793  165C  1303               	bcf	3,6	;RP1=0, select bank0
  4794  165D  084E               	movf	?___ftadd,w
  4795  165E  00DB               	movwf	?___ftsub
  4796  165F  084F               	movf	?___ftadd+1,w
  4797  1660  00DC               	movwf	?___ftsub+1
  4798  1661  0850               	movf	?___ftadd+2,w
  4799  1662  00DD               	movwf	?___ftsub+2
  4800  1663  0008               	return
  4801  1664                     __end_of___ftsub:	
  4802                           
  4803                           	psect	text19
  4804  0EF7                     __ptext19:	
  4805 ;; *************** function ___ftadd *****************
  4806 ;; Defined at:
  4807 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftadd.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  f1              3   46[BANK0 ] float 
  4810 ;;  f2              3   49[BANK0 ] float 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  exp1            1   58[BANK0 ] unsigned char 
  4813 ;;  exp2            1   57[BANK0 ] unsigned char 
  4814 ;;  sign            1   56[BANK0 ] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  3   46[BANK0 ] float 
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4824 ;;      Params:         0       6       0       0       0
  4825 ;;      Locals:         0       3       0       0       0
  4826 ;;      Temps:          0       4       0       0       0
  4827 ;;      Totals:         0      13       0       0       0
  4828 ;;Total ram usage:       13 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    3
  4831 ;; This function calls:
  4832 ;;		___ftpack
  4833 ;; This function is called by:
  4834 ;;		_readLight
  4835 ;;		_tempCalibration
  4836 ;;		_readTemp
  4837 ;;		___ftsub
  4838 ;;		_floor
  4839 ;;		_log
  4840 ;;		_eval_poly
  4841 ;;		_singleAxisMeasure
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           
  4846                           ;psect for function ___ftadd
  4847  0EF7                     ___ftadd:	
  4848                           
  4849                           ;incstack = 0
  4850                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4851  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  4852  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  4853  0EF9  084E               	movf	___ftadd@f1,w
  4854  0EFA  00D4               	movwf	??___ftadd
  4855  0EFB  084F               	movf	___ftadd@f1+1,w
  4856  0EFC  00D5               	movwf	??___ftadd+1
  4857  0EFD  0850               	movf	___ftadd@f1+2,w
  4858  0EFE  00D6               	movwf	??___ftadd+2
  4859  0EFF  1003               	clrc
  4860  0F00  0D55               	rlf	??___ftadd+1,w
  4861  0F01  0D56               	rlf	??___ftadd+2,w
  4862  0F02  00D7               	movwf	??___ftadd+3
  4863  0F03  0857               	movf	??___ftadd+3,w
  4864  0F04  00DA               	movwf	___ftadd@exp1
  4865  0F05  0851               	movf	___ftadd@f2,w
  4866  0F06  00D4               	movwf	??___ftadd
  4867  0F07  0852               	movf	___ftadd@f2+1,w
  4868  0F08  00D5               	movwf	??___ftadd+1
  4869  0F09  0853               	movf	___ftadd@f2+2,w
  4870  0F0A  00D6               	movwf	??___ftadd+2
  4871  0F0B  1003               	clrc
  4872  0F0C  0D55               	rlf	??___ftadd+1,w
  4873  0F0D  0D56               	rlf	??___ftadd+2,w
  4874  0F0E  00D7               	movwf	??___ftadd+3
  4875  0F0F  0857               	movf	??___ftadd+3,w
  4876  0F10  00D9               	movwf	___ftadd@exp2
  4877  0F11  085A               	movf	___ftadd@exp1,w
  4878  0F12  1903               	btfsc	3,2
  4879  0F13  2F20               	goto	l3796
  4880  0F14  0859               	movf	___ftadd@exp2,w
  4881  0F15  025A               	subwf	___ftadd@exp1,w
  4882  0F16  1803               	skipnc
  4883  0F17  2F27               	goto	l3800
  4884  0F18  035A               	decf	___ftadd@exp1,w
  4885  0F19  3AFF               	xorlw	255
  4886  0F1A  0759               	addwf	___ftadd@exp2,w
  4887  0F1B  00D4               	movwf	??___ftadd
  4888  0F1C  3019               	movlw	25
  4889  0F1D  0254               	subwf	??___ftadd,w
  4890  0F1E  1C03               	skipc
  4891  0F1F  2F27               	goto	l3800
  4892  0F20                     l3796:	
  4893  0F20  0851               	movf	___ftadd@f2,w
  4894  0F21  00CE               	movwf	?___ftadd
  4895  0F22  0852               	movf	___ftadd@f2+1,w
  4896  0F23  00CF               	movwf	?___ftadd+1
  4897  0F24  0853               	movf	___ftadd@f2+2,w
  4898  0F25  00D0               	movwf	?___ftadd+2
  4899  0F26  0008               	return
  4900  0F27                     l3800:	
  4901  0F27  0859               	movf	___ftadd@exp2,w
  4902  0F28  1903               	btfsc	3,2
  4903  0F29  0008               	return
  4904  0F2A  085A               	movf	___ftadd@exp1,w
  4905  0F2B  0259               	subwf	___ftadd@exp2,w
  4906  0F2C  1803               	skipnc
  4907  0F2D  2F36               	goto	l3806
  4908  0F2E  0359               	decf	___ftadd@exp2,w
  4909  0F2F  3AFF               	xorlw	255
  4910  0F30  075A               	addwf	___ftadd@exp1,w
  4911  0F31  00D4               	movwf	??___ftadd
  4912  0F32  3019               	movlw	25
  4913  0F33  0254               	subwf	??___ftadd,w
  4914  0F34  1803               	btfsc	3,0
  4915  0F35  0008               	return
  4916  0F36                     l3806:	
  4917  0F36  3006               	movlw	6
  4918  0F37  00D4               	movwf	??___ftadd
  4919  0F38  0854               	movf	??___ftadd,w
  4920  0F39  00D8               	movwf	___ftadd@sign
  4921  0F3A  1BD0               	btfsc	___ftadd@f1+2,7
  4922  0F3B  17D8               	bsf	___ftadd@sign,7
  4923  0F3C  1BD3               	btfsc	___ftadd@f2+2,7
  4924  0F3D  1758               	bsf	___ftadd@sign,6
  4925  0F3E  17CF               	bsf	___ftadd@f1+1,7
  4926  0F3F  30FF               	movlw	255
  4927  0F40  05CE               	andwf	___ftadd@f1,f
  4928  0F41  30FF               	movlw	255
  4929  0F42  05CF               	andwf	___ftadd@f1+1,f
  4930  0F43  3000               	movlw	0
  4931  0F44  05D0               	andwf	___ftadd@f1+2,f
  4932  0F45  17D2               	bsf	___ftadd@f2+1,7
  4933  0F46  30FF               	movlw	255
  4934  0F47  05D1               	andwf	___ftadd@f2,f
  4935  0F48  30FF               	movlw	255
  4936  0F49  05D2               	andwf	___ftadd@f2+1,f
  4937  0F4A  3000               	movlw	0
  4938  0F4B  05D3               	andwf	___ftadd@f2+2,f
  4939  0F4C  0859               	movf	___ftadd@exp2,w
  4940  0F4D  025A               	subwf	___ftadd@exp1,w
  4941  0F4E  1803               	skipnc
  4942  0F4F  2F76               	goto	l3828
  4943  0F50                     l3818:	
  4944  0F50  3001               	movlw	1
  4945  0F51                     u2965:	
  4946  0F51  1003               	clrc
  4947  0F52  0DD1               	rlf	___ftadd@f2,f
  4948  0F53  0DD2               	rlf	___ftadd@f2+1,f
  4949  0F54  0DD3               	rlf	___ftadd@f2+2,f
  4950  0F55  3EFF               	addlw	-1
  4951  0F56  1D03               	skipz
  4952  0F57  2F51               	goto	u2965
  4953  0F58  3001               	movlw	1
  4954  0F59  02D9               	subwf	___ftadd@exp2,f
  4955  0F5A  0859               	movf	___ftadd@exp2,w
  4956  0F5B  065A               	xorwf	___ftadd@exp1,w
  4957  0F5C  1903               	skipnz
  4958  0F5D  2F71               	goto	l3826
  4959  0F5E  3001               	movlw	1
  4960  0F5F  02D8               	subwf	___ftadd@sign,f
  4961  0F60  0858               	movf	___ftadd@sign,w
  4962  0F61  3907               	andlw	7
  4963  0F62  1903               	btfsc	3,2
  4964  0F63  2F71               	goto	l3826
  4965  0F64  2F50               	goto	l3818
  4966  0F65                     l3824:	
  4967  0F65  3001               	movlw	1
  4968  0F66                     u2995:	
  4969  0F66  1003               	clrc
  4970  0F67  0CD0               	rrf	___ftadd@f1+2,f
  4971  0F68  0CCF               	rrf	___ftadd@f1+1,f
  4972  0F69  0CCE               	rrf	___ftadd@f1,f
  4973  0F6A  3EFF               	addlw	-1
  4974  0F6B  1D03               	skipz
  4975  0F6C  2F66               	goto	u2995
  4976  0F6D  3001               	movlw	1
  4977  0F6E  00D4               	movwf	??___ftadd
  4978  0F6F  0854               	movf	??___ftadd,w
  4979  0F70  07DA               	addwf	___ftadd@exp1,f
  4980  0F71                     l3826:	
  4981  0F71  085A               	movf	___ftadd@exp1,w
  4982  0F72  0659               	xorwf	___ftadd@exp2,w
  4983  0F73  1903               	btfsc	3,2
  4984  0F74  2F9F               	goto	l458
  4985  0F75  2F65               	goto	l3824
  4986  0F76                     l3828:	
  4987  0F76  085A               	movf	___ftadd@exp1,w
  4988  0F77  0259               	subwf	___ftadd@exp2,w
  4989  0F78  1803               	skipnc
  4990  0F79  2F9F               	goto	l458
  4991  0F7A                     l3830:	
  4992  0F7A  3001               	movlw	1
  4993  0F7B                     u3025:	
  4994  0F7B  1003               	clrc
  4995  0F7C  0DCE               	rlf	___ftadd@f1,f
  4996  0F7D  0DCF               	rlf	___ftadd@f1+1,f
  4997  0F7E  0DD0               	rlf	___ftadd@f1+2,f
  4998  0F7F  3EFF               	addlw	-1
  4999  0F80  1D03               	skipz
  5000  0F81  2F7B               	goto	u3025
  5001  0F82  3001               	movlw	1
  5002  0F83  02DA               	subwf	___ftadd@exp1,f
  5003  0F84  0859               	movf	___ftadd@exp2,w
  5004  0F85  065A               	xorwf	___ftadd@exp1,w
  5005  0F86  1903               	skipnz
  5006  0F87  2F9B               	goto	l3838
  5007  0F88  3001               	movlw	1
  5008  0F89  02D8               	subwf	___ftadd@sign,f
  5009  0F8A  0858               	movf	___ftadd@sign,w
  5010  0F8B  3907               	andlw	7
  5011  0F8C  1903               	btfsc	3,2
  5012  0F8D  2F9B               	goto	l3838
  5013  0F8E  2F7A               	goto	l3830
  5014  0F8F                     l3836:	
  5015  0F8F  3001               	movlw	1
  5016  0F90                     u3055:	
  5017  0F90  1003               	clrc
  5018  0F91  0CD3               	rrf	___ftadd@f2+2,f
  5019  0F92  0CD2               	rrf	___ftadd@f2+1,f
  5020  0F93  0CD1               	rrf	___ftadd@f2,f
  5021  0F94  3EFF               	addlw	-1
  5022  0F95  1D03               	skipz
  5023  0F96  2F90               	goto	u3055
  5024  0F97  3001               	movlw	1
  5025  0F98  00D4               	movwf	??___ftadd
  5026  0F99  0854               	movf	??___ftadd,w
  5027  0F9A  07D9               	addwf	___ftadd@exp2,f
  5028  0F9B                     l3838:	
  5029  0F9B  085A               	movf	___ftadd@exp1,w
  5030  0F9C  0659               	xorwf	___ftadd@exp2,w
  5031  0F9D  1D03               	skipz
  5032  0F9E  2F8F               	goto	l3836
  5033  0F9F                     l458:	
  5034  0F9F  1FD8               	btfss	___ftadd@sign,7
  5035  0FA0  2FB1               	goto	l3842
  5036  0FA1  30FF               	movlw	255
  5037  0FA2  06CE               	xorwf	___ftadd@f1,f
  5038  0FA3  30FF               	movlw	255
  5039  0FA4  06CF               	xorwf	___ftadd@f1+1,f
  5040  0FA5  30FF               	movlw	255
  5041  0FA6  06D0               	xorwf	___ftadd@f1+2,f
  5042  0FA7  3001               	movlw	1
  5043  0FA8  07CE               	addwf	___ftadd@f1,f
  5044  0FA9  3000               	movlw	0
  5045  0FAA  1803               	skipnc
  5046  0FAB  3001               	movlw	1
  5047  0FAC  07CF               	addwf	___ftadd@f1+1,f
  5048  0FAD  3000               	movlw	0
  5049  0FAE  1803               	skipnc
  5050  0FAF  3001               	movlw	1
  5051  0FB0  07D0               	addwf	___ftadd@f1+2,f
  5052  0FB1                     l3842:	
  5053  0FB1  1F58               	btfss	___ftadd@sign,6
  5054  0FB2  2FC3               	goto	l3846
  5055  0FB3  30FF               	movlw	255
  5056  0FB4  06D1               	xorwf	___ftadd@f2,f
  5057  0FB5  30FF               	movlw	255
  5058  0FB6  06D2               	xorwf	___ftadd@f2+1,f
  5059  0FB7  30FF               	movlw	255
  5060  0FB8  06D3               	xorwf	___ftadd@f2+2,f
  5061  0FB9  3001               	movlw	1
  5062  0FBA  07D1               	addwf	___ftadd@f2,f
  5063  0FBB  3000               	movlw	0
  5064  0FBC  1803               	skipnc
  5065  0FBD  3001               	movlw	1
  5066  0FBE  07D2               	addwf	___ftadd@f2+1,f
  5067  0FBF  3000               	movlw	0
  5068  0FC0  1803               	skipnc
  5069  0FC1  3001               	movlw	1
  5070  0FC2  07D3               	addwf	___ftadd@f2+2,f
  5071  0FC3                     l3846:	
  5072  0FC3  01D8               	clrf	___ftadd@sign
  5073  0FC4  084E               	movf	___ftadd@f1,w
  5074  0FC5  07D1               	addwf	___ftadd@f2,f
  5075  0FC6  084F               	movf	___ftadd@f1+1,w
  5076  0FC7  1103               	clrz
  5077  0FC8  1803               	skipnc
  5078  0FC9  0A4F               	incf	___ftadd@f1+1,w
  5079  0FCA  1D03               	btfss	3,2
  5080  0FCB  07D2               	addwf	___ftadd@f2+1,f
  5081  0FCC  0850               	movf	___ftadd@f1+2,w
  5082  0FCD  1103               	clrz
  5083  0FCE  1803               	skipnc
  5084  0FCF  0A50               	incf	___ftadd@f1+2,w
  5085  0FD0  1D03               	btfss	3,2
  5086  0FD1  07D3               	addwf	___ftadd@f2+2,f
  5087  0FD2  1FD3               	btfss	___ftadd@f2+2,7
  5088  0FD3  2FE6               	goto	l3856
  5089  0FD4  30FF               	movlw	255
  5090  0FD5  06D1               	xorwf	___ftadd@f2,f
  5091  0FD6  30FF               	movlw	255
  5092  0FD7  06D2               	xorwf	___ftadd@f2+1,f
  5093  0FD8  30FF               	movlw	255
  5094  0FD9  06D3               	xorwf	___ftadd@f2+2,f
  5095  0FDA  3001               	movlw	1
  5096  0FDB  07D1               	addwf	___ftadd@f2,f
  5097  0FDC  3000               	movlw	0
  5098  0FDD  1803               	skipnc
  5099  0FDE  3001               	movlw	1
  5100  0FDF  07D2               	addwf	___ftadd@f2+1,f
  5101  0FE0  3000               	movlw	0
  5102  0FE1  1803               	skipnc
  5103  0FE2  3001               	movlw	1
  5104  0FE3  07D3               	addwf	___ftadd@f2+2,f
  5105  0FE4  01D8               	clrf	___ftadd@sign
  5106  0FE5  0AD8               	incf	___ftadd@sign,f
  5107  0FE6                     l3856:	
  5108  0FE6  0851               	movf	___ftadd@f2,w
  5109  0FE7  00A0               	movwf	___ftpack@arg
  5110  0FE8  0852               	movf	___ftadd@f2+1,w
  5111  0FE9  00A1               	movwf	___ftpack@arg+1
  5112  0FEA  0853               	movf	___ftadd@f2+2,w
  5113  0FEB  00A2               	movwf	___ftpack@arg+2
  5114  0FEC  085A               	movf	___ftadd@exp1,w
  5115  0FED  00D4               	movwf	??___ftadd
  5116  0FEE  0854               	movf	??___ftadd,w
  5117  0FEF  00A3               	movwf	___ftpack@exp
  5118  0FF0  0858               	movf	___ftadd@sign,w
  5119  0FF1  00D5               	movwf	??___ftadd+1
  5120  0FF2  0855               	movf	??___ftadd+1,w
  5121  0FF3  00A4               	movwf	___ftpack@sign
  5122  0FF4  120A  158A  20DB   	fcall	___ftpack
  5123  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  5124  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  5125  0FF9  0820               	movf	?___ftpack,w
  5126  0FFA  00CE               	movwf	?___ftadd
  5127  0FFB  0821               	movf	?___ftpack+1,w
  5128  0FFC  00CF               	movwf	?___ftadd+1
  5129  0FFD  0822               	movf	?___ftpack+2,w
  5130  0FFE  00D0               	movwf	?___ftadd+2
  5131  0FFF  0008               	return
  5132  1000                     __end_of___ftadd:	
  5133                           
  5134                           	psect	text20
  5135  1705                     __ptext20:	
  5136 ;; *************** function ___lltoft *****************
  5137 ;; Defined at:
  5138 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lltoft.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  c               4    8[BANK0 ] unsigned long 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  exp             1   13[BANK0 ] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  3    8[BANK0 ] float 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0, pclath, cstack
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5152 ;;      Params:         0       4       0       0       0
  5153 ;;      Locals:         0       1       0       0       0
  5154 ;;      Temps:          0       1       0       0       0
  5155 ;;      Totals:         0       6       0       0       0
  5156 ;;Total ram usage:        6 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    3
  5159 ;; This function calls:
  5160 ;;		___ftpack
  5161 ;; This function is called by:
  5162 ;;		_pow
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function ___lltoft
  5168  1705                     ___lltoft:	
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5172  1705  308E               	movlw	142
  5173  1706  1283               	bcf	3,5	;RP0=0, select bank0
  5174  1707  1303               	bcf	3,6	;RP1=0, select bank0
  5175  1708  00AC               	movwf	??___lltoft
  5176  1709  082C               	movf	??___lltoft,w
  5177  170A  00AD               	movwf	___lltoft@exp
  5178  170B                     l4086:	
  5179  170B  30FF               	movlw	255
  5180  170C  052B               	andwf	___lltoft@c+3,w
  5181  170D  1903               	btfsc	3,2
  5182  170E  2F1D               	goto	l4088
  5183  170F  3001               	movlw	1
  5184  1710                     u3455:	
  5185  1710  1003               	clrc
  5186  1711  0CAB               	rrf	___lltoft@c+3,f
  5187  1712  0CAA               	rrf	___lltoft@c+2,f
  5188  1713  0CA9               	rrf	___lltoft@c+1,f
  5189  1714  0CA8               	rrf	___lltoft@c,f
  5190  1715  3EFF               	addlw	-1
  5191  1716  1D03               	skipz
  5192  1717  2F10               	goto	u3455
  5193  1718  3001               	movlw	1
  5194  1719  00AC               	movwf	??___lltoft
  5195  171A  082C               	movf	??___lltoft,w
  5196  171B  07AD               	addwf	___lltoft@exp,f
  5197  171C  2F0B               	goto	l4086
  5198  171D                     l4088:	
  5199  171D  0828               	movf	___lltoft@c,w
  5200  171E  00A0               	movwf	___ftpack@arg
  5201  171F  0829               	movf	___lltoft@c+1,w
  5202  1720  00A1               	movwf	___ftpack@arg+1
  5203  1721  082A               	movf	___lltoft@c+2,w
  5204  1722  00A2               	movwf	___ftpack@arg+2
  5205  1723  082D               	movf	___lltoft@exp,w
  5206  1724  00AC               	movwf	??___lltoft
  5207  1725  082C               	movf	??___lltoft,w
  5208  1726  00A3               	movwf	___ftpack@exp
  5209  1727  01A4               	clrf	___ftpack@sign
  5210  1728  120A  158A  20DB   	fcall	___ftpack
  5211  172B  1283               	bcf	3,5	;RP0=0, select bank0
  5212  172C  1303               	bcf	3,6	;RP1=0, select bank0
  5213  172D  0820               	movf	?___ftpack,w
  5214  172E  00A8               	movwf	?___lltoft
  5215  172F  0821               	movf	?___ftpack+1,w
  5216  1730  00A9               	movwf	?___lltoft+1
  5217  1731  0822               	movf	?___ftpack+2,w
  5218  1732  00AA               	movwf	?___lltoft+2
  5219  1733  0008               	return
  5220  1734                     __end_of___lltoft:	
  5221                           
  5222                           	psect	text21
  5223  17BB                     __ptext21:	
  5224 ;; *************** function _readAccelerometer *****************
  5225 ;; Defined at:
  5226 ;;		line 230 in file "Analog.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  axis            2   49[BANK0 ] int 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  3   49[BANK0 ] float 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5240 ;;      Params:         0       3       0       0       0
  5241 ;;      Locals:         0       0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0
  5243 ;;      Totals:         0       3       0       0       0
  5244 ;;Total ram usage:        3 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    5
  5247 ;; This function calls:
  5248 ;;		___awtoft
  5249 ;;		_pointToVoltage
  5250 ;;		_read
  5251 ;; This function is called by:
  5252 ;;		_fillRegister
  5253 ;;		_singleAxisMeasure
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _readAccelerometer
  5259  17BB                     _readAccelerometer:	
  5260                           
  5261                           ;Analog.c: 231: if(axis == (9) ||axis == (11) ||axis == (13))
  5262                           
  5263                           ;incstack = 0
  5264                           ; Regs used in _readAccelerometer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5265  17BB  3009               	movlw	9
  5266  17BC  1283               	bcf	3,5	;RP0=0, select bank0
  5267  17BD  1303               	bcf	3,6	;RP1=0, select bank0
  5268  17BE  0651               	xorwf	readAccelerometer@axis,w
  5269  17BF  0452               	iorwf	readAccelerometer@axis+1,w
  5270  17C0  1903               	skipnz
  5271  17C1  2FCC               	goto	l4286
  5272  17C2  300B               	movlw	11
  5273  17C3  0651               	xorwf	readAccelerometer@axis,w
  5274  17C4  0452               	iorwf	readAccelerometer@axis+1,w
  5275  17C5  1903               	skipnz
  5276  17C6  2FCC               	goto	l4286
  5277  17C7  300D               	movlw	13
  5278  17C8  0651               	xorwf	readAccelerometer@axis,w
  5279  17C9  0452               	iorwf	readAccelerometer@axis+1,w
  5280  17CA  1D03               	skipz
  5281  17CB  2FF9               	goto	l4292
  5282  17CC                     l4286:	
  5283                           
  5284                           ;Analog.c: 232: return pointToVoltage((int) read(axis, 0));
  5285  17CC  01A2               	clrf	read@justification
  5286  17CD  0852               	movf	readAccelerometer@axis+1,w
  5287  17CE  01A1               	clrf	read@channel+1
  5288  17CF  07A1               	addwf	read@channel+1,f
  5289  17D0  0851               	movf	readAccelerometer@axis,w
  5290  17D1  01A0               	clrf	read@channel
  5291  17D2  07A0               	addwf	read@channel,f
  5292  17D3  120A  158A  22F7   	fcall	_read
      +       160A  118A         
  5293  17D8  1283               	bcf	3,5	;RP0=0, select bank0
  5294  17D9  1303               	bcf	3,6	;RP1=0, select bank0
  5295  17DA  0821               	movf	?_read+1,w
  5296  17DB  01A9               	clrf	___awtoft@c+1
  5297  17DC  07A9               	addwf	___awtoft@c+1,f
  5298  17DD  0820               	movf	?_read,w
  5299  17DE  01A8               	clrf	___awtoft@c
  5300  17DF  07A8               	addwf	___awtoft@c,f
  5301  17E0  160A  118A  2664   	fcall	___awtoft
      +       160A  118A         
  5302  17E5  1283               	bcf	3,5	;RP0=0, select bank0
  5303  17E6  1303               	bcf	3,6	;RP1=0, select bank0
  5304  17E7  0828               	movf	?___awtoft,w
  5305  17E8  00CE               	movwf	pointToVoltage@point
  5306  17E9  0829               	movf	?___awtoft+1,w
  5307  17EA  00CF               	movwf	pointToVoltage@point+1
  5308  17EB  082A               	movf	?___awtoft+2,w
  5309  17EC  00D0               	movwf	pointToVoltage@point+2
  5310  17ED  160A  118A  26D8   	fcall	_pointToVoltage
  5311  17F0  1283               	bcf	3,5	;RP0=0, select bank0
  5312  17F1  1303               	bcf	3,6	;RP1=0, select bank0
  5313  17F2  084E               	movf	?_pointToVoltage,w
  5314  17F3  00D1               	movwf	?_readAccelerometer
  5315  17F4  084F               	movf	?_pointToVoltage+1,w
  5316  17F5  00D2               	movwf	?_readAccelerometer+1
  5317  17F6  0850               	movf	?_pointToVoltage+2,w
  5318  17F7  00D3               	movwf	?_readAccelerometer+2
  5319  17F8  0008               	return
  5320  17F9                     l4292:	
  5321                           
  5322                           ;Analog.c: 233: else
  5323                           ;Analog.c: 234: return -11;
  5324  17F9  3000               	movlw	0
  5325  17FA  00D1               	movwf	?_readAccelerometer
  5326  17FB  3030               	movlw	48
  5327  17FC  00D2               	movwf	?_readAccelerometer+1
  5328  17FD  30C1               	movlw	193
  5329  17FE  00D3               	movwf	?_readAccelerometer+2
  5330  17FF  0008               	return
  5331  1800                     __end_of_readAccelerometer:	
  5332                           
  5333                           	psect	text22
  5334  0AF7                     __ptext22:	
  5335 ;; *************** function _read *****************
  5336 ;; Defined at:
  5337 ;;		line 16 in file "Analog.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  channel         2    0[BANK0 ] int 
  5340 ;;  justificatio    1    2[BANK0 ] unsigned char 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  analogValue     2    3[BANK0 ] int 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  2    0[BANK0 ] int 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5352 ;;      Params:         0       3       0       0       0
  5353 ;;      Locals:         0       2       0       0       0
  5354 ;;      Temps:          0       0       0       0       0
  5355 ;;      Totals:         0       5       0       0       0
  5356 ;;Total ram usage:        5 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    2
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_readLight
  5363 ;;		_tempCalibration
  5364 ;;		_readTemp
  5365 ;;		_readAccelerometer
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function _read
  5371  0AF7                     _read:	
  5372                           
  5373                           ;Analog.c: 17: int analogValue;
  5374                           ;Analog.c: 20: ANSEL = 0x00;
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _read: [wreg-fsr0h+status,2+status,0]
  5378  0AF7  1683               	bsf	3,5	;RP0=1, select bank3
  5379  0AF8  1703               	bsf	3,6	;RP1=1, select bank3
  5380  0AF9  0188               	clrf	8	;volatile
  5381                           
  5382                           ;Analog.c: 21: switch (channel) {
  5383  0AFA  2B48               	goto	l4176
  5384  0AFB                     l148:	
  5385                           ;Analog.c: 22: case 0:
  5386                           
  5387                           
  5388                           ;Analog.c: 23: ANSELbits.ANS0 = 1;
  5389  0AFB  1683               	bsf	3,5	;RP0=1, select bank3
  5390  0AFC  1703               	bsf	3,6	;RP1=1, select bank3
  5391  0AFD  1408               	bsf	8,0	;volatile
  5392                           
  5393                           ;Analog.c: 24: ADCON0bits.CHS0 = 0;
  5394  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  5395  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  5396  0B00  111F               	bcf	31,2	;volatile
  5397  0B01  2B08               	goto	L4
  5398  0B02                     l150:	
  5399                           ;Analog.c: 30: case 1:
  5400                           
  5401                           ;Analog.c: 28: break;
  5402                           
  5403                           ;Analog.c: 27: ADCON0bits.CHS3 = 0;
  5404                           
  5405                           ;Analog.c: 26: ADCON0bits.CHS2 = 0;
  5406                           
  5407                           ;Analog.c: 25: ADCON0bits.CHS1 = 0;
  5408                           
  5409                           
  5410                           ;Analog.c: 31: ANSELbits.ANS1 = 1;
  5411  0B02  1683               	bsf	3,5	;RP0=1, select bank3
  5412  0B03  1703               	bsf	3,6	;RP1=1, select bank3
  5413  0B04  1488               	bsf	8,1	;volatile
  5414                           
  5415                           ;Analog.c: 32: ADCON0bits.CHS0 = 1;
  5416  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  5417  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  5418  0B07  151F               	bsf	31,2	;volatile
  5419  0B08                     L4:	
  5420                           
  5421                           ;Analog.c: 33: ADCON0bits.CHS1 = 0;
  5422  0B08  119F               	bcf	31,3	;volatile
  5423  0B09  2B18               	goto	L6
  5424  0B0A                     l151:	
  5425                           ;Analog.c: 38: case 2:
  5426                           
  5427                           ;Analog.c: 36: break;
  5428                           
  5429                           ;Analog.c: 35: ADCON0bits.CHS3 = 0;
  5430                           
  5431                           ;Analog.c: 34: ADCON0bits.CHS2 = 0;
  5432                           
  5433                           
  5434                           ;Analog.c: 39: ANSELbits.ANS2 = 1;
  5435  0B0A  1683               	bsf	3,5	;RP0=1, select bank3
  5436  0B0B  1703               	bsf	3,6	;RP1=1, select bank3
  5437  0B0C  1508               	bsf	8,2	;volatile
  5438                           
  5439                           ;Analog.c: 40: ADCON0bits.CHS0 = 0;
  5440  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  5441  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  5442  0B0F  111F               	bcf	31,2	;volatile
  5443  0B10  2B17               	goto	L17
  5444  0B11                     l152:	
  5445                           ;Analog.c: 46: case 3:
  5446                           
  5447                           ;Analog.c: 44: break;
  5448                           
  5449                           ;Analog.c: 43: ADCON0bits.CHS3 = 0;
  5450                           
  5451                           ;Analog.c: 42: ADCON0bits.CHS2 = 0;
  5452                           
  5453                           ;Analog.c: 41: ADCON0bits.CHS1 = 1;
  5454                           
  5455                           
  5456                           ;Analog.c: 47: ANSELbits.ANS3 = 1;
  5457  0B11  1683               	bsf	3,5	;RP0=1, select bank3
  5458  0B12  1703               	bsf	3,6	;RP1=1, select bank3
  5459  0B13  1588               	bsf	8,3	;volatile
  5460                           
  5461                           ;Analog.c: 48: ADCON0bits.CHS0 = 1;
  5462  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  5463  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  5464  0B16  151F               	bsf	31,2	;volatile
  5465  0B17                     L17:	
  5466                           
  5467                           ;Analog.c: 49: ADCON0bits.CHS1 = 1;
  5468  0B17  159F               	bsf	31,3	;volatile
  5469  0B18                     L6:	
  5470                           
  5471                           ;Analog.c: 50: ADCON0bits.CHS2 = 0;
  5472  0B18  121F               	bcf	31,4	;volatile
  5473  0B19  2B29               	goto	L10
  5474  0B1A                     l153:	
  5475                           ;Analog.c: 54: case 4:
  5476                           
  5477                           ;Analog.c: 52: break;
  5478                           
  5479                           ;Analog.c: 51: ADCON0bits.CHS3 = 0;
  5480                           
  5481                           
  5482                           ;Analog.c: 55: ANSELbits.ANS4 = 1;
  5483  0B1A  1683               	bsf	3,5	;RP0=1, select bank3
  5484  0B1B  1703               	bsf	3,6	;RP1=1, select bank3
  5485  0B1C  1608               	bsf	8,4	;volatile
  5486                           
  5487                           ;Analog.c: 56: ADCON0bits.CHS0 = 0;
  5488  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  5489  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  5490  0B1F  111F               	bcf	31,2	;volatile
  5491  0B20  2B22               	goto	L22
  5492  0B21                     l154:	
  5493                           ;Analog.c: 62: case 5:
  5494                           
  5495                           ;Analog.c: 60: break;
  5496                           
  5497                           ;Analog.c: 59: ADCON0bits.CHS3 = 0;
  5498                           
  5499                           ;Analog.c: 58: ADCON0bits.CHS2 = 1;
  5500                           
  5501                           ;Analog.c: 57: ADCON0bits.CHS1 = 0;
  5502                           
  5503                           
  5504                           ;Analog.c: 63: ADCON0bits.CHS0 = 1;
  5505  0B21  151F               	bsf	31,2	;volatile
  5506  0B22                     L22:	
  5507                           
  5508                           ;Analog.c: 64: ADCON0bits.CHS1 = 0;
  5509  0B22  119F               	bcf	31,3	;volatile
  5510  0B23  2B28               	goto	L20
  5511  0B24                     l155:	
  5512                           ;Analog.c: 69: case 6:
  5513                           
  5514                           ;Analog.c: 67: break;
  5515                           
  5516                           ;Analog.c: 66: ADCON0bits.CHS3 = 0;
  5517                           
  5518                           ;Analog.c: 65: ADCON0bits.CHS2 = 1;
  5519                           
  5520                           
  5521                           ;Analog.c: 70: ADCON0bits.CHS0 = 0;
  5522  0B24  111F               	bcf	31,2	;volatile
  5523  0B25  2B27               	goto	L21
  5524  0B26                     l156:	
  5525                           ;Analog.c: 76: case 7:
  5526                           
  5527                           ;Analog.c: 74: break;
  5528                           
  5529                           ;Analog.c: 73: ADCON0bits.CHS3 = 0;
  5530                           
  5531                           ;Analog.c: 72: ADCON0bits.CHS2 = 1;
  5532                           
  5533                           ;Analog.c: 71: ADCON0bits.CHS1 = 1;
  5534                           
  5535                           
  5536                           ;Analog.c: 77: ADCON0bits.CHS0 = 1;
  5537  0B26  151F               	bsf	31,2	;volatile
  5538  0B27                     L21:	
  5539                           
  5540                           ;Analog.c: 78: ADCON0bits.CHS1 = 1;
  5541  0B27  159F               	bsf	31,3	;volatile
  5542  0B28                     L20:	
  5543                           
  5544                           ;Analog.c: 79: ADCON0bits.CHS2 = 1;
  5545  0B28  161F               	bsf	31,4	;volatile
  5546  0B29                     L10:	
  5547                           
  5548                           ;Analog.c: 80: ADCON0bits.CHS3 = 0;
  5549  0B29  129F               	bcf	31,5	;volatile
  5550                           
  5551                           ;Analog.c: 81: break;
  5552  0B2A  2B7B               	goto	l4178
  5553  0B2B                     l157:	
  5554                           ;Analog.c: 83: case 8:
  5555                           
  5556                           
  5557                           ;Analog.c: 84: ADCON0bits.CHS0 = 0;
  5558  0B2B  111F               	bcf	31,2	;volatile
  5559  0B2C  2B2E               	goto	L11
  5560  0B2D                     l158:	
  5561                           ;Analog.c: 90: case 9:
  5562                           
  5563                           ;Analog.c: 88: break;
  5564                           
  5565                           ;Analog.c: 87: ADCON0bits.CHS3 = 1;
  5566                           
  5567                           ;Analog.c: 86: ADCON0bits.CHS2 = 0;
  5568                           
  5569                           ;Analog.c: 85: ADCON0bits.CHS1 = 0;
  5570                           
  5571                           
  5572                           ;Analog.c: 91: ADCON0bits.CHS0 = 1;
  5573  0B2D  151F               	bsf	31,2	;volatile
  5574  0B2E                     L11:	
  5575                           
  5576                           ;Analog.c: 92: ADCON0bits.CHS1 = 0;
  5577  0B2E  119F               	bcf	31,3	;volatile
  5578  0B2F  2B34               	goto	L13
  5579  0B30                     l159:	
  5580                           ;Analog.c: 97: case 10:
  5581                           
  5582                           ;Analog.c: 95: break;
  5583                           
  5584                           ;Analog.c: 94: ADCON0bits.CHS3 = 1;
  5585                           
  5586                           ;Analog.c: 93: ADCON0bits.CHS2 = 0;
  5587                           
  5588                           
  5589                           ;Analog.c: 98: ADCON0bits.CHS0 = 0;
  5590  0B30  111F               	bcf	31,2	;volatile
  5591  0B31  2B33               	goto	L18
  5592  0B32                     l160:	
  5593                           ;Analog.c: 104: case 11:
  5594                           
  5595                           ;Analog.c: 102: break;
  5596                           
  5597                           ;Analog.c: 101: ADCON0bits.CHS3 = 1;
  5598                           
  5599                           ;Analog.c: 100: ADCON0bits.CHS2 = 0;
  5600                           
  5601                           ;Analog.c: 99: ADCON0bits.CHS1 = 1;
  5602                           
  5603                           
  5604                           ;Analog.c: 105: ADCON0bits.CHS0 = 1;
  5605  0B32  151F               	bsf	31,2	;volatile
  5606  0B33                     L18:	
  5607                           
  5608                           ;Analog.c: 106: ADCON0bits.CHS1 = 1;
  5609  0B33  159F               	bsf	31,3	;volatile
  5610  0B34                     L13:	
  5611                           
  5612                           ;Analog.c: 107: ADCON0bits.CHS2 = 0;
  5613  0B34  121F               	bcf	31,4	;volatile
  5614  0B35  2B3B               	goto	L15
  5615  0B36                     l161:	
  5616                           ;Analog.c: 111: case 12:
  5617                           
  5618                           ;Analog.c: 109: break;
  5619                           
  5620                           ;Analog.c: 108: ADCON0bits.CHS3 = 1;
  5621                           
  5622                           
  5623                           ;Analog.c: 112: ADCON0bits.CHS0 = 0;
  5624  0B36  111F               	bcf	31,2	;volatile
  5625  0B37  2B39               	goto	L19
  5626  0B38                     l162:	
  5627                           ;Analog.c: 118: case 13:
  5628                           
  5629                           ;Analog.c: 116: break;
  5630                           
  5631                           ;Analog.c: 115: ADCON0bits.CHS3 = 1;
  5632                           
  5633                           ;Analog.c: 114: ADCON0bits.CHS2 = 1;
  5634                           
  5635                           ;Analog.c: 113: ADCON0bits.CHS1 = 0;
  5636                           
  5637                           
  5638                           ;Analog.c: 119: ADCON0bits.CHS0 = 1;
  5639  0B38  151F               	bsf	31,2	;volatile
  5640  0B39                     L19:	
  5641                           
  5642                           ;Analog.c: 120: ADCON0bits.CHS1 = 0;
  5643  0B39  119F               	bcf	31,3	;volatile
  5644                           
  5645                           ;Analog.c: 121: ADCON0bits.CHS2 = 1;
  5646  0B3A  161F               	bsf	31,4	;volatile
  5647  0B3B                     L15:	
  5648                           
  5649                           ;Analog.c: 122: ADCON0bits.CHS3 = 1;
  5650  0B3B  169F               	bsf	31,5	;volatile
  5651                           
  5652                           ;Analog.c: 123: break;
  5653  0B3C  2B7B               	goto	l4178
  5654  0B3D                     l163:	
  5655                           ;Analog.c: 125: default:
  5656                           
  5657                           
  5658                           ;Analog.c: 126: (TRISCbits.TRISC6) = 0;
  5659  0B3D  1683               	bsf	3,5	;RP0=1, select bank1
  5660  0B3E  1303               	bcf	3,6	;RP1=0, select bank1
  5661  0B3F  1307               	bcf	7,6	;volatile
  5662                           
  5663                           ;Analog.c: 127: (PORTCbits.RC6) = 1;
  5664  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0B42  1707               	bsf	7,6	;volatile
  5667                           
  5668                           ;Analog.c: 128: return -11;
  5669  0B43  30F5               	movlw	245
  5670  0B44  00A0               	movwf	?_read
  5671  0B45  30FF               	movlw	255
  5672  0B46  00A1               	movwf	?_read+1
  5673  0B47  0008               	return
  5674  0B48                     l4176:	
  5675                           ;Analog.c: 129: }
  5676                           
  5677                           
  5678                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5679                           ; Switch size 1, requested type "space"
  5680                           ; Number of cases is 1, Range of values is 0 to 0
  5681                           ; switch strategies available:
  5682                           ; Name         Instructions Cycles
  5683                           ; simple_byte            4     3 (average)
  5684                           ; direct_byte           11     8 (fixed)
  5685                           ; jumptable            260     6 (fixed)
  5686                           ;	Chosen strategy is simple_byte
  5687  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0B4A  0821               	movf	read@channel+1,w
  5690  0B4B  3A00               	xorlw	0	; case 0
  5691  0B4C  1903               	skipnz
  5692  0B4D  2B4F               	goto	l4374
  5693  0B4E  2B3D               	goto	l163
  5694  0B4F                     l4374:	
  5695                           
  5696                           ; Switch size 1, requested type "space"
  5697                           ; Number of cases is 14, Range of values is 0 to 13
  5698                           ; switch strategies available:
  5699                           ; Name         Instructions Cycles
  5700                           ; simple_byte           43    22 (average)
  5701                           ; direct_byte           50     8 (fixed)
  5702                           ; jumptable            260     6 (fixed)
  5703                           ;	Chosen strategy is simple_byte
  5704  0B4F  0820               	movf	read@channel,w
  5705  0B50  3A00               	xorlw	0	; case 0
  5706  0B51  1903               	skipnz
  5707  0B52  2AFB               	goto	l148
  5708  0B53  3A01               	xorlw	1	; case 1
  5709  0B54  1903               	skipnz
  5710  0B55  2B02               	goto	l150
  5711  0B56  3A03               	xorlw	3	; case 2
  5712  0B57  1903               	skipnz
  5713  0B58  2B0A               	goto	l151
  5714  0B59  3A01               	xorlw	1	; case 3
  5715  0B5A  1903               	skipnz
  5716  0B5B  2B11               	goto	l152
  5717  0B5C  3A07               	xorlw	7	; case 4
  5718  0B5D  1903               	skipnz
  5719  0B5E  2B1A               	goto	l153
  5720  0B5F  3A01               	xorlw	1	; case 5
  5721  0B60  1903               	skipnz
  5722  0B61  2B21               	goto	l154
  5723  0B62  3A03               	xorlw	3	; case 6
  5724  0B63  1903               	skipnz
  5725  0B64  2B24               	goto	l155
  5726  0B65  3A01               	xorlw	1	; case 7
  5727  0B66  1903               	skipnz
  5728  0B67  2B26               	goto	l156
  5729  0B68  3A0F               	xorlw	15	; case 8
  5730  0B69  1903               	skipnz
  5731  0B6A  2B2B               	goto	l157
  5732  0B6B  3A01               	xorlw	1	; case 9
  5733  0B6C  1903               	skipnz
  5734  0B6D  2B2D               	goto	l158
  5735  0B6E  3A03               	xorlw	3	; case 10
  5736  0B6F  1903               	skipnz
  5737  0B70  2B30               	goto	l159
  5738  0B71  3A01               	xorlw	1	; case 11
  5739  0B72  1903               	skipnz
  5740  0B73  2B32               	goto	l160
  5741  0B74  3A07               	xorlw	7	; case 12
  5742  0B75  1903               	skipnz
  5743  0B76  2B36               	goto	l161
  5744  0B77  3A01               	xorlw	1	; case 13
  5745  0B78  1903               	skipnz
  5746  0B79  2B38               	goto	l162
  5747  0B7A  2B3D               	goto	l163
  5748  0B7B                     l4178:	
  5749                           
  5750                           ;Analog.c: 132: if (justification == 1) ADCON1bits.ADFM = 0;
  5751  0B7B  0822               	movf	read@justification,w
  5752  0B7C  3A01               	xorlw	1
  5753  0B7D  1D03               	skipz
  5754  0B7E  2B83               	goto	l165
  5755  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  5756  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  5757  0B81  139F               	bcf	31,7	;volatile
  5758  0B82  2B86               	goto	l166
  5759  0B83                     l165:	
  5760                           
  5761                           ;Analog.c: 133: else ADCON1bits.ADFM = 1;
  5762  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  5763  0B84  1303               	bcf	3,6	;RP1=0, select bank1
  5764  0B85  179F               	bsf	31,7	;volatile
  5765  0B86                     l166:	
  5766                           
  5767                           ;Analog.c: 136: ADCON0bits.ADCS0 = 1;
  5768  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  5769  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  5770  0B88  171F               	bsf	31,6	;volatile
  5771                           
  5772                           ;Analog.c: 137: ADCON0bits.ADCS1 = 1;
  5773  0B89  179F               	bsf	31,7	;volatile
  5774                           
  5775                           ;Analog.c: 140: ADCON1bits.VCFG0 = 0;
  5776  0B8A  1683               	bsf	3,5	;RP0=1, select bank1
  5777  0B8B  1303               	bcf	3,6	;RP1=0, select bank1
  5778  0B8C  121F               	bcf	31,4	;volatile
  5779                           
  5780                           ;Analog.c: 141: ADCON1bits.VCFG1 = 0;
  5781  0B8D  129F               	bcf	31,5	;volatile
  5782                           
  5783                           ;Analog.c: 144: ADCON0bits.ADON = 1;
  5784  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  5785  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  5786  0B90  141F               	bsf	31,0	;volatile
  5787                           
  5788                           ;Analog.c: 147: GO_DONE = 1;
  5789  0B91  149F               	bsf	31,1	;volatile
  5790  0B92                     l167:	
  5791                           ;Analog.c: 148: while (GO_DONE);
  5792                           
  5793  0B92  189F               	btfsc	31,1	;volatile
  5794  0B93  2B92               	goto	l167
  5795                           
  5796                           ;Analog.c: 151: if (justification == 1) analogValue = ((ADRESL << 8) + ADRESH);
  5797  0B94  0822               	movf	read@justification,w
  5798  0B95  3A01               	xorlw	1
  5799  0B96  1D03               	skipz
  5800  0B97  2BA1               	goto	l4186
  5801  0B98  1683               	bsf	3,5	;RP0=1, select bank1
  5802  0B99  1303               	bcf	3,6	;RP1=0, select bank1
  5803  0B9A  081E               	movf	30,w	;volatile
  5804  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  5805  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  5806  0B9D  01A4               	clrf	read@analogValue+1
  5807  0B9E  07A4               	addwf	read@analogValue+1,f
  5808  0B9F  081E               	movf	30,w	;volatile
  5809  0BA0  2BA9               	goto	L16
  5810  0BA1                     l4186:	
  5811                           
  5812                           ;Analog.c: 152: else analogValue = ((ADRESH << 8) + ADRESL);
  5813  0BA1  081E               	movf	30,w	;volatile
  5814  0BA2  01A4               	clrf	read@analogValue+1
  5815  0BA3  07A4               	addwf	read@analogValue+1,f
  5816  0BA4  1683               	bsf	3,5	;RP0=1, select bank1
  5817  0BA5  1303               	bcf	3,6	;RP1=0, select bank1
  5818  0BA6  081E               	movf	30,w	;volatile
  5819  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  5820  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0BA9                     L16:	
  5822  0BA9  01A3               	clrf	read@analogValue
  5823  0BAA  07A3               	addwf	read@analogValue,f
  5824                           
  5825                           ;Analog.c: 155: ADCON0bits.ADON = 0;
  5826  0BAB  101F               	bcf	31,0	;volatile
  5827                           
  5828                           ;Analog.c: 157: return analogValue;
  5829  0BAC  0824               	movf	read@analogValue+1,w
  5830  0BAD  01A1               	clrf	?_read+1
  5831  0BAE  07A1               	addwf	?_read+1,f
  5832  0BAF  0823               	movf	read@analogValue,w
  5833  0BB0  01A0               	clrf	?_read
  5834  0BB1  07A0               	addwf	?_read,f
  5835  0BB2  0008               	return
  5836  0BB3                     __end_of_read:	
  5837                           
  5838                           	psect	text23
  5839  16D8                     __ptext23:	
  5840 ;; *************** function _pointToVoltage *****************
  5841 ;; Defined at:
  5842 ;;		line 238 in file "Analog.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  point           3   46[BANK0 ] int 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  3   46[BANK0 ] int 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, pclath, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5856 ;;      Params:         0       3       0       0       0
  5857 ;;      Locals:         0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0
  5859 ;;      Totals:         0       3       0       0       0
  5860 ;;Total ram usage:        3 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    4
  5863 ;; This function calls:
  5864 ;;		___ftdiv
  5865 ;;		___ftmul
  5866 ;; This function is called by:
  5867 ;;		_readLight
  5868 ;;		_readTemp
  5869 ;;		_readAccelerometer
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873                           
  5874                           ;psect for function _pointToVoltage
  5875  16D8                     _pointToVoltage:	
  5876                           
  5877                           ;Analog.c: 239: return (5 * point) / 1023;
  5878                           
  5879                           ;incstack = 0
  5880                           ; Regs used in _pointToVoltage: [wreg+status,2+status,0+pclath+cstack]
  5881  16D8  30C0               	movlw	192
  5882  16D9  1283               	bcf	3,5	;RP0=0, select bank0
  5883  16DA  1303               	bcf	3,6	;RP1=0, select bank0
  5884  16DB  00BE               	movwf	___ftdiv@f2
  5885  16DC  307F               	movlw	127
  5886  16DD  00BF               	movwf	___ftdiv@f2+1
  5887  16DE  3044               	movlw	68
  5888  16DF  00C0               	movwf	___ftdiv@f2+2
  5889  16E0  3000               	movlw	0
  5890  16E1  00AE               	movwf	___ftmul@f1
  5891  16E2  30A0               	movlw	160
  5892  16E3  00AF               	movwf	___ftmul@f1+1
  5893  16E4  3040               	movlw	64
  5894  16E5  00B0               	movwf	___ftmul@f1+2
  5895  16E6  084E               	movf	pointToVoltage@point,w
  5896  16E7  00B1               	movwf	___ftmul@f2
  5897  16E8  084F               	movf	pointToVoltage@point+1,w
  5898  16E9  00B2               	movwf	___ftmul@f2+1
  5899  16EA  0850               	movf	pointToVoltage@point+2,w
  5900  16EB  00B3               	movwf	___ftmul@f2+2
  5901  16EC  120A  118A  2718   	fcall	___ftmul
      +       160A  118A         
  5902  16F1  1283               	bcf	3,5	;RP0=0, select bank0
  5903  16F2  1303               	bcf	3,6	;RP1=0, select bank0
  5904  16F3  082E               	movf	?___ftmul,w
  5905  16F4  00C1               	movwf	___ftdiv@f1
  5906  16F5  082F               	movf	?___ftmul+1,w
  5907  16F6  00C2               	movwf	___ftdiv@f1+1
  5908  16F7  0830               	movf	?___ftmul+2,w
  5909  16F8  00C3               	movwf	___ftdiv@f1+2
  5910  16F9  120A  158A  223F   	fcall	___ftdiv
  5911  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  5912  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  5913  16FE  083E               	movf	?___ftdiv,w
  5914  16FF  00CE               	movwf	?_pointToVoltage
  5915  1700  083F               	movf	?___ftdiv+1,w
  5916  1701  00CF               	movwf	?_pointToVoltage+1
  5917  1702  0840               	movf	?___ftdiv+2,w
  5918  1703  00D0               	movwf	?_pointToVoltage+2
  5919  1704  0008               	return
  5920  1705                     __end_of_pointToVoltage:	
  5921                           
  5922                           	psect	text24
  5923  0718                     __ptext24:	
  5924 ;; *************** function ___ftmul *****************
  5925 ;; Defined at:
  5926 ;;		line 51 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftmul.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  f1              3   14[BANK0 ] float 
  5929 ;;  f2              3   17[BANK0 ] float 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  5932 ;;  sign            1   29[BANK0 ] unsigned char 
  5933 ;;  cntr            1   28[BANK0 ] unsigned char 
  5934 ;;  exp             1   24[BANK0 ] unsigned char 
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  3   14[BANK0 ] float 
  5937 ;; Registers used:
  5938 ;;		wreg, status,2, status,0, pclath, cstack
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5944 ;;      Params:         0       6       0       0       0
  5945 ;;      Locals:         0       6       0       0       0
  5946 ;;      Temps:          0       4       0       0       0
  5947 ;;      Totals:         0      16       0       0       0
  5948 ;;Total ram usage:       16 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    3
  5951 ;; This function calls:
  5952 ;;		___ftpack
  5953 ;; This function is called by:
  5954 ;;		_readLight
  5955 ;;		_readTemp
  5956 ;;		_pointToVoltage
  5957 ;;		_pow
  5958 ;;		_exp
  5959 ;;		_log
  5960 ;;		_eval_poly
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           
  5965                           ;psect for function ___ftmul
  5966  0718                     ___ftmul:	
  5967                           
  5968                           ;incstack = 0
  5969                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5970  0718  1283               	bcf	3,5	;RP0=0, select bank0
  5971  0719  1303               	bcf	3,6	;RP1=0, select bank0
  5972  071A  082E               	movf	___ftmul@f1,w
  5973  071B  00B4               	movwf	??___ftmul
  5974  071C  082F               	movf	___ftmul@f1+1,w
  5975  071D  00B5               	movwf	??___ftmul+1
  5976  071E  0830               	movf	___ftmul@f1+2,w
  5977  071F  00B6               	movwf	??___ftmul+2
  5978  0720  1003               	clrc
  5979  0721  0D35               	rlf	??___ftmul+1,w
  5980  0722  0D36               	rlf	??___ftmul+2,w
  5981  0723  00B7               	movwf	??___ftmul+3
  5982  0724  0837               	movf	??___ftmul+3,w
  5983  0725  00B8               	movwf	___ftmul@exp
  5984  0726  08B8               	movf	___ftmul@exp,f
  5985  0727  1D03               	skipz
  5986  0728  2F30               	goto	l3866
  5987  0729  3000               	movlw	0
  5988  072A  00AE               	movwf	?___ftmul
  5989  072B  3000               	movlw	0
  5990  072C  00AF               	movwf	?___ftmul+1
  5991  072D  3000               	movlw	0
  5992  072E  00B0               	movwf	?___ftmul+2
  5993  072F  0008               	return
  5994  0730                     l3866:	
  5995  0730  0831               	movf	___ftmul@f2,w
  5996  0731  00B4               	movwf	??___ftmul
  5997  0732  0832               	movf	___ftmul@f2+1,w
  5998  0733  00B5               	movwf	??___ftmul+1
  5999  0734  0833               	movf	___ftmul@f2+2,w
  6000  0735  00B6               	movwf	??___ftmul+2
  6001  0736  1003               	clrc
  6002  0737  0D35               	rlf	??___ftmul+1,w
  6003  0738  0D36               	rlf	??___ftmul+2,w
  6004  0739  00B7               	movwf	??___ftmul+3
  6005  073A  0837               	movf	??___ftmul+3,w
  6006  073B  00BD               	movwf	___ftmul@sign
  6007  073C  08BD               	movf	___ftmul@sign,f
  6008  073D  1D03               	skipz
  6009  073E  2F46               	goto	l3872
  6010  073F  3000               	movlw	0
  6011  0740  00AE               	movwf	?___ftmul
  6012  0741  3000               	movlw	0
  6013  0742  00AF               	movwf	?___ftmul+1
  6014  0743  3000               	movlw	0
  6015  0744  00B0               	movwf	?___ftmul+2
  6016  0745  0008               	return
  6017  0746                     l3872:	
  6018  0746  083D               	movf	___ftmul@sign,w
  6019  0747  3E7B               	addlw	123
  6020  0748  00B4               	movwf	??___ftmul
  6021  0749  0834               	movf	??___ftmul,w
  6022  074A  07B8               	addwf	___ftmul@exp,f
  6023  074B  082E               	movf	___ftmul@f1,w
  6024  074C  00B4               	movwf	??___ftmul
  6025  074D  082F               	movf	___ftmul@f1+1,w
  6026  074E  00B5               	movwf	??___ftmul+1
  6027  074F  0830               	movf	___ftmul@f1+2,w
  6028  0750  00B6               	movwf	??___ftmul+2
  6029  0751  3010               	movlw	16
  6030  0752                     u3135:	
  6031  0752  1003               	clrc
  6032  0753  0CB6               	rrf	??___ftmul+2,f
  6033  0754  0CB5               	rrf	??___ftmul+1,f
  6034  0755  0CB4               	rrf	??___ftmul,f
  6035  0756  3EFF               	addlw	-1
  6036  0757  1D03               	skipz
  6037  0758  2F52               	goto	u3135
  6038  0759  0834               	movf	??___ftmul,w
  6039  075A  00B7               	movwf	??___ftmul+3
  6040  075B  0837               	movf	??___ftmul+3,w
  6041  075C  00BD               	movwf	___ftmul@sign
  6042  075D  0831               	movf	___ftmul@f2,w
  6043  075E  00B4               	movwf	??___ftmul
  6044  075F  0832               	movf	___ftmul@f2+1,w
  6045  0760  00B5               	movwf	??___ftmul+1
  6046  0761  0833               	movf	___ftmul@f2+2,w
  6047  0762  00B6               	movwf	??___ftmul+2
  6048  0763  3010               	movlw	16
  6049  0764                     u3145:	
  6050  0764  1003               	clrc
  6051  0765  0CB6               	rrf	??___ftmul+2,f
  6052  0766  0CB5               	rrf	??___ftmul+1,f
  6053  0767  0CB4               	rrf	??___ftmul,f
  6054  0768  3EFF               	addlw	-1
  6055  0769  1D03               	skipz
  6056  076A  2F64               	goto	u3145
  6057  076B  0834               	movf	??___ftmul,w
  6058  076C  00B7               	movwf	??___ftmul+3
  6059  076D  0837               	movf	??___ftmul+3,w
  6060  076E  06BD               	xorwf	___ftmul@sign,f
  6061  076F  3080               	movlw	128
  6062  0770  00B4               	movwf	??___ftmul
  6063  0771  0834               	movf	??___ftmul,w
  6064  0772  05BD               	andwf	___ftmul@sign,f
  6065  0773  17AF               	bsf	___ftmul@f1+1,7
  6066  0774  17B2               	bsf	___ftmul@f2+1,7
  6067  0775  30FF               	movlw	255
  6068  0776  05B1               	andwf	___ftmul@f2,f
  6069  0777  30FF               	movlw	255
  6070  0778  05B2               	andwf	___ftmul@f2+1,f
  6071  0779  3000               	movlw	0
  6072  077A  05B3               	andwf	___ftmul@f2+2,f
  6073  077B  3000               	movlw	0
  6074  077C  00B9               	movwf	___ftmul@f3_as_product
  6075  077D  3000               	movlw	0
  6076  077E  00BA               	movwf	___ftmul@f3_as_product+1
  6077  077F  3000               	movlw	0
  6078  0780  00BB               	movwf	___ftmul@f3_as_product+2
  6079  0781  3007               	movlw	7
  6080  0782  00B4               	movwf	??___ftmul
  6081  0783  0834               	movf	??___ftmul,w
  6082  0784  00BC               	movwf	___ftmul@cntr
  6083  0785                     l3884:	
  6084  0785  1C2E               	btfss	___ftmul@f1,0
  6085  0786  2F95               	goto	l3888
  6086  0787  0831               	movf	___ftmul@f2,w
  6087  0788  07B9               	addwf	___ftmul@f3_as_product,f
  6088  0789  0832               	movf	___ftmul@f2+1,w
  6089  078A  1103               	clrz
  6090  078B  1803               	skipnc
  6091  078C  0A32               	incf	___ftmul@f2+1,w
  6092  078D  1D03               	btfss	3,2
  6093  078E  07BA               	addwf	___ftmul@f3_as_product+1,f
  6094  078F  0833               	movf	___ftmul@f2+2,w
  6095  0790  1103               	clrz
  6096  0791  1803               	skipnc
  6097  0792  0A33               	incf	___ftmul@f2+2,w
  6098  0793  1D03               	btfss	3,2
  6099  0794  07BB               	addwf	___ftmul@f3_as_product+2,f
  6100  0795                     l3888:	
  6101  0795  3001               	movlw	1
  6102  0796                     u3175:	
  6103  0796  1003               	clrc
  6104  0797  0CB0               	rrf	___ftmul@f1+2,f
  6105  0798  0CAF               	rrf	___ftmul@f1+1,f
  6106  0799  0CAE               	rrf	___ftmul@f1,f
  6107  079A  3EFF               	addlw	-1
  6108  079B  1D03               	skipz
  6109  079C  2F96               	goto	u3175
  6110  079D  3001               	movlw	1
  6111  079E                     u3185:	
  6112  079E  1003               	clrc
  6113  079F  0DB1               	rlf	___ftmul@f2,f
  6114  07A0  0DB2               	rlf	___ftmul@f2+1,f
  6115  07A1  0DB3               	rlf	___ftmul@f2+2,f
  6116  07A2  3EFF               	addlw	-1
  6117  07A3  1D03               	skipz
  6118  07A4  2F9E               	goto	u3185
  6119  07A5  3001               	movlw	1
  6120  07A6  02BC               	subwf	___ftmul@cntr,f
  6121  07A7  1D03               	btfss	3,2
  6122  07A8  2F85               	goto	l3884
  6123  07A9  3009               	movlw	9
  6124  07AA  00B4               	movwf	??___ftmul
  6125  07AB  0834               	movf	??___ftmul,w
  6126  07AC  00BC               	movwf	___ftmul@cntr
  6127  07AD                     l3896:	
  6128  07AD  1C2E               	btfss	___ftmul@f1,0
  6129  07AE  2FBD               	goto	l3900
  6130  07AF  0831               	movf	___ftmul@f2,w
  6131  07B0  07B9               	addwf	___ftmul@f3_as_product,f
  6132  07B1  0832               	movf	___ftmul@f2+1,w
  6133  07B2  1103               	clrz
  6134  07B3  1803               	skipnc
  6135  07B4  0A32               	incf	___ftmul@f2+1,w
  6136  07B5  1D03               	btfss	3,2
  6137  07B6  07BA               	addwf	___ftmul@f3_as_product+1,f
  6138  07B7  0833               	movf	___ftmul@f2+2,w
  6139  07B8  1103               	clrz
  6140  07B9  1803               	skipnc
  6141  07BA  0A33               	incf	___ftmul@f2+2,w
  6142  07BB  1D03               	btfss	3,2
  6143  07BC  07BB               	addwf	___ftmul@f3_as_product+2,f
  6144  07BD                     l3900:	
  6145  07BD  3001               	movlw	1
  6146  07BE                     u3225:	
  6147  07BE  1003               	clrc
  6148  07BF  0CB0               	rrf	___ftmul@f1+2,f
  6149  07C0  0CAF               	rrf	___ftmul@f1+1,f
  6150  07C1  0CAE               	rrf	___ftmul@f1,f
  6151  07C2  3EFF               	addlw	-1
  6152  07C3  1D03               	skipz
  6153  07C4  2FBE               	goto	u3225
  6154  07C5  3001               	movlw	1
  6155  07C6                     u3235:	
  6156  07C6  1003               	clrc
  6157  07C7  0CBB               	rrf	___ftmul@f3_as_product+2,f
  6158  07C8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  6159  07C9  0CB9               	rrf	___ftmul@f3_as_product,f
  6160  07CA  3EFF               	addlw	-1
  6161  07CB  1D03               	skipz
  6162  07CC  2FC6               	goto	u3235
  6163  07CD  3001               	movlw	1
  6164  07CE  02BC               	subwf	___ftmul@cntr,f
  6165  07CF  1D03               	btfss	3,2
  6166  07D0  2FAD               	goto	l3896
  6167  07D1  0839               	movf	___ftmul@f3_as_product,w
  6168  07D2  00A0               	movwf	___ftpack@arg
  6169  07D3  083A               	movf	___ftmul@f3_as_product+1,w
  6170  07D4  00A1               	movwf	___ftpack@arg+1
  6171  07D5  083B               	movf	___ftmul@f3_as_product+2,w
  6172  07D6  00A2               	movwf	___ftpack@arg+2
  6173  07D7  0838               	movf	___ftmul@exp,w
  6174  07D8  00B4               	movwf	??___ftmul
  6175  07D9  0834               	movf	??___ftmul,w
  6176  07DA  00A3               	movwf	___ftpack@exp
  6177  07DB  083D               	movf	___ftmul@sign,w
  6178  07DC  00B5               	movwf	??___ftmul+1
  6179  07DD  0835               	movf	??___ftmul+1,w
  6180  07DE  00A4               	movwf	___ftpack@sign
  6181  07DF  120A  158A  20DB   	fcall	___ftpack
  6182  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  6183  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  6184  07E4  0820               	movf	?___ftpack,w
  6185  07E5  00AE               	movwf	?___ftmul
  6186  07E6  0821               	movf	?___ftpack+1,w
  6187  07E7  00AF               	movwf	?___ftmul+1
  6188  07E8  0822               	movf	?___ftpack+2,w
  6189  07E9  00B0               	movwf	?___ftmul+2
  6190  07EA  0008               	return
  6191  07EB                     __end_of___ftmul:	
  6192                           
  6193                           	psect	text25
  6194  0A3F                     __ptext25:	
  6195 ;; *************** function ___ftdiv *****************
  6196 ;; Defined at:
  6197 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic\ftdiv.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  f2              3   30[BANK0 ] float 
  6200 ;;  f1              3   33[BANK0 ] float 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  f3              3   41[BANK0 ] float 
  6203 ;;  sign            1   45[BANK0 ] unsigned char 
  6204 ;;  exp             1   44[BANK0 ] unsigned char 
  6205 ;;  cntr            1   40[BANK0 ] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  3   30[BANK0 ] float 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, pclath, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6215 ;;      Params:         0       6       0       0       0
  6216 ;;      Locals:         0       6       0       0       0
  6217 ;;      Temps:          0       4       0       0       0
  6218 ;;      Totals:         0      16       0       0       0
  6219 ;;Total ram usage:       16 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    3
  6222 ;; This function calls:
  6223 ;;		___ftpack
  6224 ;; This function is called by:
  6225 ;;		_readLight
  6226 ;;		_tempCalibration
  6227 ;;		_readTemp
  6228 ;;		_pointToVoltage
  6229 ;;		_exp
  6230 ;;		_singleAxisMeasure
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           
  6235                           ;psect for function ___ftdiv
  6236  0A3F                     ___ftdiv:	
  6237                           
  6238                           ;incstack = 0
  6239                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6240  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  6241  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  6242  0A41  0841               	movf	___ftdiv@f1,w
  6243  0A42  00C4               	movwf	??___ftdiv
  6244  0A43  0842               	movf	___ftdiv@f1+1,w
  6245  0A44  00C5               	movwf	??___ftdiv+1
  6246  0A45  0843               	movf	___ftdiv@f1+2,w
  6247  0A46  00C6               	movwf	??___ftdiv+2
  6248  0A47  1003               	clrc
  6249  0A48  0D45               	rlf	??___ftdiv+1,w
  6250  0A49  0D46               	rlf	??___ftdiv+2,w
  6251  0A4A  00C7               	movwf	??___ftdiv+3
  6252  0A4B  0847               	movf	??___ftdiv+3,w
  6253  0A4C  00CC               	movwf	___ftdiv@exp
  6254  0A4D  08CC               	movf	___ftdiv@exp,f
  6255  0A4E  1D03               	skipz
  6256  0A4F  2A57               	goto	l3956
  6257  0A50  3000               	movlw	0
  6258  0A51  00BE               	movwf	?___ftdiv
  6259  0A52  3000               	movlw	0
  6260  0A53  00BF               	movwf	?___ftdiv+1
  6261  0A54  3000               	movlw	0
  6262  0A55  00C0               	movwf	?___ftdiv+2
  6263  0A56  0008               	return
  6264  0A57                     l3956:	
  6265  0A57  083E               	movf	___ftdiv@f2,w
  6266  0A58  00C4               	movwf	??___ftdiv
  6267  0A59  083F               	movf	___ftdiv@f2+1,w
  6268  0A5A  00C5               	movwf	??___ftdiv+1
  6269  0A5B  0840               	movf	___ftdiv@f2+2,w
  6270  0A5C  00C6               	movwf	??___ftdiv+2
  6271  0A5D  1003               	clrc
  6272  0A5E  0D45               	rlf	??___ftdiv+1,w
  6273  0A5F  0D46               	rlf	??___ftdiv+2,w
  6274  0A60  00C7               	movwf	??___ftdiv+3
  6275  0A61  0847               	movf	??___ftdiv+3,w
  6276  0A62  00CD               	movwf	___ftdiv@sign
  6277  0A63  08CD               	movf	___ftdiv@sign,f
  6278  0A64  1D03               	skipz
  6279  0A65  2A6D               	goto	l3962
  6280  0A66  3000               	movlw	0
  6281  0A67  00BE               	movwf	?___ftdiv
  6282  0A68  3000               	movlw	0
  6283  0A69  00BF               	movwf	?___ftdiv+1
  6284  0A6A  3000               	movlw	0
  6285  0A6B  00C0               	movwf	?___ftdiv+2
  6286  0A6C  0008               	return
  6287  0A6D                     l3962:	
  6288  0A6D  3000               	movlw	0
  6289  0A6E  00C9               	movwf	___ftdiv@f3
  6290  0A6F  3000               	movlw	0
  6291  0A70  00CA               	movwf	___ftdiv@f3+1
  6292  0A71  3000               	movlw	0
  6293  0A72  00CB               	movwf	___ftdiv@f3+2
  6294  0A73  3089               	movlw	137
  6295  0A74  074D               	addwf	___ftdiv@sign,w
  6296  0A75  00C4               	movwf	??___ftdiv
  6297  0A76  0844               	movf	??___ftdiv,w
  6298  0A77  02CC               	subwf	___ftdiv@exp,f
  6299  0A78  0841               	movf	___ftdiv@f1,w
  6300  0A79  00C4               	movwf	??___ftdiv
  6301  0A7A  0842               	movf	___ftdiv@f1+1,w
  6302  0A7B  00C5               	movwf	??___ftdiv+1
  6303  0A7C  0843               	movf	___ftdiv@f1+2,w
  6304  0A7D  00C6               	movwf	??___ftdiv+2
  6305  0A7E  3010               	movlw	16
  6306  0A7F                     u3305:	
  6307  0A7F  1003               	clrc
  6308  0A80  0CC6               	rrf	??___ftdiv+2,f
  6309  0A81  0CC5               	rrf	??___ftdiv+1,f
  6310  0A82  0CC4               	rrf	??___ftdiv,f
  6311  0A83  3EFF               	addlw	-1
  6312  0A84  1D03               	skipz
  6313  0A85  2A7F               	goto	u3305
  6314  0A86  0844               	movf	??___ftdiv,w
  6315  0A87  00C7               	movwf	??___ftdiv+3
  6316  0A88  0847               	movf	??___ftdiv+3,w
  6317  0A89  00CD               	movwf	___ftdiv@sign
  6318  0A8A  083E               	movf	___ftdiv@f2,w
  6319  0A8B  00C4               	movwf	??___ftdiv
  6320  0A8C  083F               	movf	___ftdiv@f2+1,w
  6321  0A8D  00C5               	movwf	??___ftdiv+1
  6322  0A8E  0840               	movf	___ftdiv@f2+2,w
  6323  0A8F  00C6               	movwf	??___ftdiv+2
  6324  0A90  3010               	movlw	16
  6325  0A91                     u3315:	
  6326  0A91  1003               	clrc
  6327  0A92  0CC6               	rrf	??___ftdiv+2,f
  6328  0A93  0CC5               	rrf	??___ftdiv+1,f
  6329  0A94  0CC4               	rrf	??___ftdiv,f
  6330  0A95  3EFF               	addlw	-1
  6331  0A96  1D03               	skipz
  6332  0A97  2A91               	goto	u3315
  6333  0A98  0844               	movf	??___ftdiv,w
  6334  0A99  00C7               	movwf	??___ftdiv+3
  6335  0A9A  0847               	movf	??___ftdiv+3,w
  6336  0A9B  06CD               	xorwf	___ftdiv@sign,f
  6337  0A9C  3080               	movlw	128
  6338  0A9D  00C4               	movwf	??___ftdiv
  6339  0A9E  0844               	movf	??___ftdiv,w
  6340  0A9F  05CD               	andwf	___ftdiv@sign,f
  6341  0AA0  17C2               	bsf	___ftdiv@f1+1,7
  6342  0AA1  30FF               	movlw	255
  6343  0AA2  05C1               	andwf	___ftdiv@f1,f
  6344  0AA3  30FF               	movlw	255
  6345  0AA4  05C2               	andwf	___ftdiv@f1+1,f
  6346  0AA5  3000               	movlw	0
  6347  0AA6  05C3               	andwf	___ftdiv@f1+2,f
  6348  0AA7  17BF               	bsf	___ftdiv@f2+1,7
  6349  0AA8  30FF               	movlw	255
  6350  0AA9  05BE               	andwf	___ftdiv@f2,f
  6351  0AAA  30FF               	movlw	255
  6352  0AAB  05BF               	andwf	___ftdiv@f2+1,f
  6353  0AAC  3000               	movlw	0
  6354  0AAD  05C0               	andwf	___ftdiv@f2+2,f
  6355  0AAE  3018               	movlw	24
  6356  0AAF  00C4               	movwf	??___ftdiv
  6357  0AB0  0844               	movf	??___ftdiv,w
  6358  0AB1  00C8               	movwf	___ftdiv@cntr
  6359  0AB2                     l3976:	
  6360  0AB2  3001               	movlw	1
  6361  0AB3                     u3325:	
  6362  0AB3  1003               	clrc
  6363  0AB4  0DC9               	rlf	___ftdiv@f3,f
  6364  0AB5  0DCA               	rlf	___ftdiv@f3+1,f
  6365  0AB6  0DCB               	rlf	___ftdiv@f3+2,f
  6366  0AB7  3EFF               	addlw	-1
  6367  0AB8  1D03               	skipz
  6368  0AB9  2AB3               	goto	u3325
  6369  0ABA  0840               	movf	___ftdiv@f2+2,w
  6370  0ABB  0243               	subwf	___ftdiv@f1+2,w
  6371  0ABC  1D03               	skipz
  6372  0ABD  2AC4               	goto	u3335
  6373  0ABE  083F               	movf	___ftdiv@f2+1,w
  6374  0ABF  0242               	subwf	___ftdiv@f1+1,w
  6375  0AC0  1D03               	skipz
  6376  0AC1  2AC4               	goto	u3335
  6377  0AC2  083E               	movf	___ftdiv@f2,w
  6378  0AC3  0241               	subwf	___ftdiv@f1,w
  6379  0AC4                     u3335:	
  6380  0AC4  1C03               	skipc
  6381  0AC5  2AD1               	goto	l3984
  6382  0AC6  083E               	movf	___ftdiv@f2,w
  6383  0AC7  02C1               	subwf	___ftdiv@f1,f
  6384  0AC8  083F               	movf	___ftdiv@f2+1,w
  6385  0AC9  1C03               	skipc
  6386  0ACA  0F3F               	incfsz	___ftdiv@f2+1,w
  6387  0ACB  02C2               	subwf	___ftdiv@f1+1,f
  6388  0ACC  0840               	movf	___ftdiv@f2+2,w
  6389  0ACD  1C03               	skipc
  6390  0ACE  0A40               	incf	___ftdiv@f2+2,w
  6391  0ACF  02C3               	subwf	___ftdiv@f1+2,f
  6392  0AD0  1449               	bsf	___ftdiv@f3,0
  6393  0AD1                     l3984:	
  6394  0AD1  3001               	movlw	1
  6395  0AD2                     u3345:	
  6396  0AD2  1003               	clrc
  6397  0AD3  0DC1               	rlf	___ftdiv@f1,f
  6398  0AD4  0DC2               	rlf	___ftdiv@f1+1,f
  6399  0AD5  0DC3               	rlf	___ftdiv@f1+2,f
  6400  0AD6  3EFF               	addlw	-1
  6401  0AD7  1D03               	skipz
  6402  0AD8  2AD2               	goto	u3345
  6403  0AD9  3001               	movlw	1
  6404  0ADA  02C8               	subwf	___ftdiv@cntr,f
  6405  0ADB  1D03               	btfss	3,2
  6406  0ADC  2AB2               	goto	l3976
  6407  0ADD  0849               	movf	___ftdiv@f3,w
  6408  0ADE  00A0               	movwf	___ftpack@arg
  6409  0ADF  084A               	movf	___ftdiv@f3+1,w
  6410  0AE0  00A1               	movwf	___ftpack@arg+1
  6411  0AE1  084B               	movf	___ftdiv@f3+2,w
  6412  0AE2  00A2               	movwf	___ftpack@arg+2
  6413  0AE3  084C               	movf	___ftdiv@exp,w
  6414  0AE4  00C4               	movwf	??___ftdiv
  6415  0AE5  0844               	movf	??___ftdiv,w
  6416  0AE6  00A3               	movwf	___ftpack@exp
  6417  0AE7  084D               	movf	___ftdiv@sign,w
  6418  0AE8  00C5               	movwf	??___ftdiv+1
  6419  0AE9  0845               	movf	??___ftdiv+1,w
  6420  0AEA  00A4               	movwf	___ftpack@sign
  6421  0AEB  120A  158A  20DB   	fcall	___ftpack
  6422  0AEE  1283               	bcf	3,5	;RP0=0, select bank0
  6423  0AEF  1303               	bcf	3,6	;RP1=0, select bank0
  6424  0AF0  0820               	movf	?___ftpack,w
  6425  0AF1  00BE               	movwf	?___ftdiv
  6426  0AF2  0821               	movf	?___ftpack+1,w
  6427  0AF3  00BF               	movwf	?___ftdiv+1
  6428  0AF4  0822               	movf	?___ftpack+2,w
  6429  0AF5  00C0               	movwf	?___ftdiv+2
  6430  0AF6  0008               	return
  6431  0AF7                     __end_of___ftdiv:	
  6432                           
  6433                           	psect	text26
  6434  1664                     __ptext26:	
  6435 ;; *************** function ___awtoft *****************
  6436 ;; Defined at:
  6437 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awtoft.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  c               2    8[BANK0 ] int 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  sign            1   13[BANK0 ] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  3    8[BANK0 ] float 
  6444 ;; Registers used:
  6445 ;;		wreg, status,2, status,0, pclath, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6451 ;;      Params:         0       3       0       0       0
  6452 ;;      Locals:         0       1       0       0       0
  6453 ;;      Temps:          0       2       0       0       0
  6454 ;;      Totals:         0       6       0       0       0
  6455 ;;Total ram usage:        6 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    3
  6458 ;; This function calls:
  6459 ;;		___ftpack
  6460 ;; This function is called by:
  6461 ;;		_readLight
  6462 ;;		_tempCalibration
  6463 ;;		_readTemp
  6464 ;;		_readAccelerometer
  6465 ;;		_exp
  6466 ;;		_log
  6467 ;;		_singleAxisMeasure
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function ___awtoft
  6473  1664                     ___awtoft:	
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6477  1664  1283               	bcf	3,5	;RP0=0, select bank0
  6478  1665  1303               	bcf	3,6	;RP1=0, select bank0
  6479  1666  01AD               	clrf	___awtoft@sign
  6480  1667  1FA9               	btfss	___awtoft@c+1,7
  6481  1668  2E70               	goto	l3946
  6482  1669  09A8               	comf	___awtoft@c,f
  6483  166A  09A9               	comf	___awtoft@c+1,f
  6484  166B  0AA8               	incf	___awtoft@c,f
  6485  166C  1903               	skipnz
  6486  166D  0AA9               	incf	___awtoft@c+1,f
  6487  166E  01AD               	clrf	___awtoft@sign
  6488  166F  0AAD               	incf	___awtoft@sign,f
  6489  1670                     l3946:	
  6490  1670  0828               	movf	___awtoft@c,w
  6491  1671  00A0               	movwf	___ftpack@arg
  6492  1672  0829               	movf	___awtoft@c+1,w
  6493  1673  00A1               	movwf	___ftpack@arg+1
  6494  1674  01A2               	clrf	___ftpack@arg+2
  6495  1675  308E               	movlw	142
  6496  1676  00AB               	movwf	??___awtoft
  6497  1677  082B               	movf	??___awtoft,w
  6498  1678  00A3               	movwf	___ftpack@exp
  6499  1679  082D               	movf	___awtoft@sign,w
  6500  167A  00AC               	movwf	??___awtoft+1
  6501  167B  082C               	movf	??___awtoft+1,w
  6502  167C  00A4               	movwf	___ftpack@sign
  6503  167D  120A  158A  20DB   	fcall	___ftpack
  6504  1680  1283               	bcf	3,5	;RP0=0, select bank0
  6505  1681  1303               	bcf	3,6	;RP1=0, select bank0
  6506  1682  0820               	movf	?___ftpack,w
  6507  1683  00A8               	movwf	?___awtoft
  6508  1684  0821               	movf	?___ftpack+1,w
  6509  1685  00A9               	movwf	?___awtoft+1
  6510  1686  0822               	movf	?___ftpack+2,w
  6511  1687  00AA               	movwf	?___awtoft+2
  6512  1688  0008               	return
  6513  1689                     __end_of___awtoft:	
  6514                           
  6515                           	psect	text27
  6516  08DB                     __ptext27:	
  6517 ;; *************** function ___ftpack *****************
  6518 ;; Defined at:
  6519 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\float.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  arg             3    0[BANK0 ] unsigned um
  6522 ;;  exp             1    3[BANK0 ] unsigned char 
  6523 ;;  sign            1    4[BANK0 ] unsigned char 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  3    0[BANK0 ] float 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6535 ;;      Params:         0       5       0       0       0
  6536 ;;      Locals:         0       0       0       0       0
  6537 ;;      Temps:          0       3       0       0       0
  6538 ;;      Totals:         0       8       0       0       0
  6539 ;;Total ram usage:        8 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    2
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		___altoft
  6546 ;;		___awtoft
  6547 ;;		___ftadd
  6548 ;;		___ftdiv
  6549 ;;		___ftmul
  6550 ;;		___lltoft
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function ___ftpack
  6556  08DB                     ___ftpack:	
  6557                           
  6558                           ;incstack = 0
  6559                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6560  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  6561  08DC  1303               	bcf	3,6	;RP1=0, select bank0
  6562  08DD  0823               	movf	___ftpack@exp,w
  6563  08DE  1903               	btfsc	3,2
  6564  08DF  28E5               	goto	l3730
  6565  08E0  0822               	movf	___ftpack@arg+2,w
  6566  08E1  0421               	iorwf	___ftpack@arg+1,w
  6567  08E2  0420               	iorwf	___ftpack@arg,w
  6568  08E3  1D03               	skipz
  6569  08E4  28F8               	goto	l3736
  6570  08E5                     l3730:	
  6571  08E5  3000               	movlw	0
  6572  08E6  00A0               	movwf	?___ftpack
  6573  08E7  3000               	movlw	0
  6574  08E8  00A1               	movwf	?___ftpack+1
  6575  08E9  3000               	movlw	0
  6576  08EA  00A2               	movwf	?___ftpack+2
  6577  08EB  0008               	return
  6578  08EC                     l3734:	
  6579  08EC  3001               	movlw	1
  6580  08ED  00A5               	movwf	??___ftpack
  6581  08EE  0825               	movf	??___ftpack,w
  6582  08EF  07A3               	addwf	___ftpack@exp,f
  6583  08F0  3001               	movlw	1
  6584  08F1                     u2735:	
  6585  08F1  1003               	clrc
  6586  08F2  0CA2               	rrf	___ftpack@arg+2,f
  6587  08F3  0CA1               	rrf	___ftpack@arg+1,f
  6588  08F4  0CA0               	rrf	___ftpack@arg,f
  6589  08F5  3EFF               	addlw	-1
  6590  08F6  1D03               	skipz
  6591  08F7  28F1               	goto	u2735
  6592  08F8                     l3736:	
  6593  08F8  30FE               	movlw	254
  6594  08F9  0522               	andwf	___ftpack@arg+2,w
  6595  08FA  1903               	btfsc	3,2
  6596  08FB  2913               	goto	l429
  6597  08FC  28EC               	goto	l3734
  6598  08FD                     l3738:	
  6599  08FD  3001               	movlw	1
  6600  08FE  00A5               	movwf	??___ftpack
  6601  08FF  0825               	movf	??___ftpack,w
  6602  0900  07A3               	addwf	___ftpack@exp,f
  6603  0901  3001               	movlw	1
  6604  0902  07A0               	addwf	___ftpack@arg,f
  6605  0903  3000               	movlw	0
  6606  0904  1803               	skipnc
  6607  0905  3001               	movlw	1
  6608  0906  07A1               	addwf	___ftpack@arg+1,f
  6609  0907  3000               	movlw	0
  6610  0908  1803               	skipnc
  6611  0909  3001               	movlw	1
  6612  090A  07A2               	addwf	___ftpack@arg+2,f
  6613  090B  3001               	movlw	1
  6614  090C                     u2755:	
  6615  090C  1003               	clrc
  6616  090D  0CA2               	rrf	___ftpack@arg+2,f
  6617  090E  0CA1               	rrf	___ftpack@arg+1,f
  6618  090F  0CA0               	rrf	___ftpack@arg,f
  6619  0910  3EFF               	addlw	-1
  6620  0911  1D03               	skipz
  6621  0912  290C               	goto	u2755
  6622  0913                     l429:	
  6623  0913  30FF               	movlw	255
  6624  0914  0522               	andwf	___ftpack@arg+2,w
  6625  0915  1903               	btfsc	3,2
  6626  0916  2922               	goto	l3746
  6627  0917  28FD               	goto	l3738
  6628  0918                     l3744:	
  6629  0918  3001               	movlw	1
  6630  0919  02A3               	subwf	___ftpack@exp,f
  6631  091A  3001               	movlw	1
  6632  091B                     u2775:	
  6633  091B  1003               	clrc
  6634  091C  0DA0               	rlf	___ftpack@arg,f
  6635  091D  0DA1               	rlf	___ftpack@arg+1,f
  6636  091E  0DA2               	rlf	___ftpack@arg+2,f
  6637  091F  3EFF               	addlw	-1
  6638  0920  1D03               	skipz
  6639  0921  291B               	goto	u2775
  6640  0922                     l3746:	
  6641  0922  1FA1               	btfss	___ftpack@arg+1,7
  6642  0923  2918               	goto	l3744
  6643  0924  1823               	btfsc	___ftpack@exp,0
  6644  0925  292C               	goto	l435
  6645  0926  30FF               	movlw	255
  6646  0927  05A0               	andwf	___ftpack@arg,f
  6647  0928  307F               	movlw	127
  6648  0929  05A1               	andwf	___ftpack@arg+1,f
  6649  092A  30FF               	movlw	255
  6650  092B  05A2               	andwf	___ftpack@arg+2,f
  6651  092C                     l435:	
  6652  092C  1003               	clrc
  6653  092D  0CA3               	rrf	___ftpack@exp,f
  6654  092E  0823               	movf	___ftpack@exp,w
  6655  092F  00A5               	movwf	??___ftpack
  6656  0930  01A6               	clrf	??___ftpack+1
  6657  0931  01A7               	clrf	??___ftpack+2
  6658  0932  3010               	movlw	16
  6659  0933                     u2805:	
  6660  0933  1003               	clrc
  6661  0934  0DA5               	rlf	??___ftpack,f
  6662  0935  0DA6               	rlf	??___ftpack+1,f
  6663  0936  0DA7               	rlf	??___ftpack+2,f
  6664  0937  3EFF               	addlw	-1
  6665  0938  1D03               	skipz
  6666  0939  2933               	goto	u2805
  6667  093A  0825               	movf	??___ftpack,w
  6668  093B  04A0               	iorwf	___ftpack@arg,f
  6669  093C  0826               	movf	??___ftpack+1,w
  6670  093D  04A1               	iorwf	___ftpack@arg+1,f
  6671  093E  0827               	movf	??___ftpack+2,w
  6672  093F  04A2               	iorwf	___ftpack@arg+2,f
  6673  0940  0824               	movf	___ftpack@sign,w
  6674  0941  1903               	btfsc	3,2
  6675  0942  0008               	return
  6676  0943  17A2               	bsf	___ftpack@arg+2,7
  6677  0944  0008               	return
  6678  0945                     __end_of___ftpack:	
  6679                           
  6680                           	psect	text28
  6681  00E7                     __ptext28:	
  6682 ;; *************** function _config *****************
  6683 ;; Defined at:
  6684 ;;		line 109 in file "SensorBoard.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;		None               void
  6691 ;; Registers used:
  6692 ;;		status,2
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6698 ;;      Params:         0       0       0       0       0
  6699 ;;      Locals:         0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0
  6701 ;;      Totals:         0       0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    2
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           
  6713                           ;psect for function _config
  6714  00E7                     _config:	
  6715                           
  6716                           ;SensorBoard.c: 111: OSCCONbits.IRCF0 = 1;
  6717                           
  6718                           ;incstack = 0
  6719                           ; Regs used in _config: [status,2]
  6720  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  6721  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  6722  00E9  160F               	bsf	15,4	;volatile
  6723                           
  6724                           ;SensorBoard.c: 112: OSCCONbits.IRCF1 = 1;
  6725  00EA  168F               	bsf	15,5	;volatile
  6726                           
  6727                           ;SensorBoard.c: 113: OSCCONbits.IRCF2 = 1;
  6728  00EB  170F               	bsf	15,6	;volatile
  6729                           
  6730                           ;SensorBoard.c: 116: OSCCONbits.SCS = 1;
  6731  00EC  140F               	bsf	15,0	;volatile
  6732                           
  6733                           ;SensorBoard.c: 119: ANSELH = 0x00;
  6734  00ED  1683               	bsf	3,5	;RP0=1, select bank3
  6735  00EE  1703               	bsf	3,6	;RP1=1, select bank3
  6736  00EF  0189               	clrf	9	;volatile
  6737                           
  6738                           ;SensorBoard.c: 121: (TRISCbits.TRISC5) = 0;
  6739  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  6740  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  6741  00F2  1287               	bcf	7,5	;volatile
  6742  00F3  0008               	return
  6743  00F4                     __end_of_config:	
  6744                           
  6745                           	psect	text29
  6746  1776                     __ptext29:	
  6747 ;; *************** function _ISR *****************
  6748 ;; Defined at:
  6749 ;;		line 124 in file "SensorBoard.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6763 ;;      Params:         0       0       0       0       0
  6764 ;;      Locals:         0       0       0       0       0
  6765 ;;      Temps:          5       0       0       0       0
  6766 ;;      Totals:         5       0       0       0       0
  6767 ;;Total ram usage:        5 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    1
  6770 ;; This function calls:
  6771 ;;		_receiveData
  6772 ;; This function is called by:
  6773 ;;		Interrupt level 1
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _ISR
  6779  1776                     _ISR:	
  6780                           
  6781                           ;SensorBoard.c: 126: if (SSPIF)
  6782  1776  1D8C               	btfss	12,3	;volatile
  6783  1777  2FAD               	goto	i1l3504
  6784                           
  6785                           ;SensorBoard.c: 127: {
  6786                           ;SensorBoard.c: 128: (PORTCbits.RC5) = 0;
  6787  1778  1287               	bcf	7,5	;volatile
  6788                           
  6789                           ;SensorBoard.c: 129: if (!D_A && !R_W && BF)
  6790  1779  1683               	bsf	3,5	;RP0=1, select bank1
  6791  177A  1303               	bcf	3,6	;RP1=0, select bank1
  6792  177B  1E94               	btfss	20,5	;volatile
  6793  177C  1914               	btfsc	20,2	;volatile
  6794  177D  2F87               	goto	i1l71
  6795  177E  1C14               	btfss	20,0	;volatile
  6796  177F  2F87               	goto	i1l71
  6797                           
  6798                           ;SensorBoard.c: 130: {
  6799                           ;SensorBoard.c: 131: junk = SSPBUF;
  6800  1780  1283               	bcf	3,5	;RP0=0, select bank0
  6801  1781  1303               	bcf	3,6	;RP1=0, select bank0
  6802  1782  0813               	movf	19,w	;volatile
  6803  1783  00F1               	movwf	??_ISR
  6804  1784  0871               	movf	??_ISR,w
  6805  1785  00F8               	movwf	_junk	;volatile
  6806                           
  6807                           ;SensorBoard.c: 133: } else if (D_A && !R_W && BF)
  6808  1786  2FAD               	goto	i1l3504
  6809  1787                     i1l71:	
  6810  1787  1A94               	btfsc	20,5	;volatile
  6811  1788  1914               	btfsc	20,2	;volatile
  6812  1789  2F92               	goto	i1l73
  6813  178A  1C14               	btfss	20,0	;volatile
  6814  178B  2F92               	goto	i1l73
  6815                           
  6816                           ;SensorBoard.c: 134: {
  6817                           ;SensorBoard.c: 135: receiveData();
  6818  178C  160A  118A  2689   	fcall	_receiveData
      +       160A  118A         
  6819                           
  6820                           ;SensorBoard.c: 137: } else if (!D_A && R_W && !BF)
  6821  1791  2FAD               	goto	i1l3504
  6822  1792                     i1l73:	
  6823  1792  1E94               	btfss	20,5	;volatile
  6824  1793  1D14               	btfss	20,2	;volatile
  6825  1794  2F97               	goto	i1l75
  6826  1795  1C14               	btfss	20,0	;volatile
  6827  1796  2F9C               	goto	i1l3494
  6828  1797                     i1l75:	
  6829                           ;SensorBoard.c: 141: } else if (D_A && R_W && !BF)
  6830                           
  6831                           ;SensorBoard.c: 140: CKP = 1;
  6832                           
  6833                           ;SensorBoard.c: 138: {
  6834                           ;SensorBoard.c: 139: SSPBUF = Register[tempL];
  6835                           
  6836  1797  1A94               	btfsc	20,5	;volatile
  6837  1798  1D14               	btfss	20,2	;volatile
  6838  1799  2FA4               	goto	i1l77
  6839  179A  1814               	btfsc	20,0	;volatile
  6840  179B  2FA4               	goto	i1l77
  6841  179C                     i1l3494:	
  6842                           
  6843                           ;SensorBoard.c: 142: {
  6844                           ;SensorBoard.c: 143: SSPBUF = Register[tempL];
  6845  179C  1683               	bsf	3,5	;RP0=1, select bank3
  6846  179D  1703               	bsf	3,6	;RP1=1, select bank3
  6847  179E  0811               	movf	(_Register^(0+384)+1),w
  6848  179F  1283               	bcf	3,5	;RP0=0, select bank0
  6849  17A0  1303               	bcf	3,6	;RP1=0, select bank0
  6850  17A1  0093               	movwf	19	;volatile
  6851                           
  6852                           ;SensorBoard.c: 144: CKP = 1;
  6853  17A2  1614               	bsf	20,4	;volatile
  6854                           
  6855                           ;SensorBoard.c: 145: } else if (D_A && !R_W && !BF)
  6856  17A3  2FAD               	goto	i1l3504
  6857  17A4                     i1l77:	
  6858  17A4  1A94               	btfsc	20,5	;volatile
  6859  17A5  1914               	btfsc	20,2	;volatile
  6860  17A6  2FAD               	goto	i1l3504
  6861  17A7  1814               	btfsc	20,0	;volatile
  6862  17A8  2FAD               	goto	i1l3504
  6863                           
  6864                           ;SensorBoard.c: 146: {
  6865                           ;SensorBoard.c: 147: counter = 1;
  6866  17A9  3001               	movlw	1
  6867  17AA  00FA               	movwf	_counter
  6868  17AB  3000               	movlw	0
  6869  17AC  00FB               	movwf	_counter+1
  6870  17AD                     i1l3504:	
  6871                           
  6872                           ;SensorBoard.c: 148: }
  6873                           ;SensorBoard.c: 149: }
  6874                           ;SensorBoard.c: 150: SSPIF = 0;
  6875  17AD  1283               	bcf	3,5	;RP0=0, select bank0
  6876  17AE  1303               	bcf	3,6	;RP1=0, select bank0
  6877  17AF  118C               	bcf	12,3	;volatile
  6878  17B0  0875               	movf	??_ISR+4,w
  6879  17B1  00FF               	movwf	127
  6880  17B2  0874               	movf	??_ISR+3,w
  6881  17B3  008A               	movwf	10
  6882  17B4  0873               	movf	??_ISR+2,w
  6883  17B5  0084               	movwf	4
  6884  17B6  0E72               	swapf	(??_ISR+1)^(0+-128),w
  6885  17B7  0083               	movwf	3
  6886  17B8  0EFE               	swapf	126,f
  6887  17B9  0E7E               	swapf	126,w
  6888  17BA  0009               	retfie
  6889  17BB                     __end_of_ISR:	
  6890                           
  6891                           	psect	intentry
  6892  0004                     __pintentry:	
  6893                           ;incstack = 0
  6894 ;; hardware stack exceeded
  6895                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6896                           
  6897  0004                     interrupt_function:	
  6898  007E                     saved_w	set	btemp
  6899  0004  00FE               	movwf	btemp
  6900  0005  0E03               	swapf	3,w
  6901  0006  00F2               	movwf	??_ISR+1
  6902  0007  0804               	movf	4,w
  6903  0008  00F3               	movwf	??_ISR+2
  6904  0009  080A               	movf	10,w
  6905  000A  00F4               	movwf	??_ISR+3
  6906  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6907  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6908  000D  087F               	movf	btemp+1,w
  6909  000E  00F5               	movwf	??_ISR+4
  6910  000F  160A  118A  2F76   	ljmp	_ISR
  6911                           
  6912                           	psect	text30
  6913  1689                     __ptext30:	
  6914 ;; *************** function _receiveData *****************
  6915 ;; Defined at:
  6916 ;;		line 175 in file "SensorBoard.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;		None               void
  6923 ;; Registers used:
  6924 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6930 ;;      Params:         0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0
  6932 ;;      Temps:          1       0       0       0       0
  6933 ;;      Totals:         1       0       0       0       0
  6934 ;;Total ram usage:        1 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_ISR
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function _receiveData
  6945  1689                     _receiveData:	
  6946                           
  6947                           ;SensorBoard.c: 177: if(counter == 1)
  6948                           
  6949                           ;incstack = 0
  6950 ;; hardware stack exceeded
  6951                           ; Regs used in _receiveData: [wreg-fsr0h+status,2+status,0]
  6952  1689  3001               	movlw	1
  6953  168A  067A               	xorwf	_counter,w
  6954  168B  047B               	iorwf	_counter+1,w
  6955  168C  1D03               	skipz
  6956  168D  2E9D               	goto	i1l3446
  6957                           
  6958                           ;SensorBoard.c: 178: {
  6959                           ;SensorBoard.c: 179: Register[index] = SSPBUF;
  6960  168E  1283               	bcf	3,5	;RP0=0, select bank0
  6961  168F  1303               	bcf	3,6	;RP1=0, select bank0
  6962  1690  0813               	movf	19,w	;volatile
  6963  1691  00F0               	movwf	??_receiveData
  6964  1692  0870               	movf	??_receiveData,w
  6965  1693  1683               	bsf	3,5	;RP0=1, select bank3
  6966  1694  1703               	bsf	3,6	;RP1=1, select bank3
  6967  1695  0090               	movwf	_Register^(0+384)
  6968                           
  6969                           ;SensorBoard.c: 180: counter++;
  6970  1696  3001               	movlw	1
  6971  1697  07FA               	addwf	_counter,f
  6972  1698  1803               	skipnc
  6973  1699  0AFB               	incf	_counter+1,f
  6974  169A  3000               	movlw	0
  6975  169B  07FB               	addwf	_counter+1,f
  6976                           
  6977                           ;SensorBoard.c: 181: }
  6978  169C  0008               	return
  6979  169D                     i1l3446:	
  6980                           
  6981                           ;SensorBoard.c: 182: else
  6982                           ;SensorBoard.c: 183: {
  6983                           ;SensorBoard.c: 184: Register[Register[index]] = SSPBUF;
  6984  169D  1283               	bcf	3,5	;RP0=0, select bank0
  6985  169E  1303               	bcf	3,6	;RP1=0, select bank0
  6986  169F  0813               	movf	19,w	;volatile
  6987  16A0  00F0               	movwf	??_receiveData
  6988  16A1  1683               	bsf	3,5	;RP0=1, select bank3
  6989  16A2  1703               	bsf	3,6	;RP1=1, select bank3
  6990  16A3  0810               	movf	_Register^(0+384),w
  6991  16A4  3E90               	addlw	_Register& (0+255)
  6992  16A5  0084               	movwf	4
  6993  16A6  0870               	movf	??_receiveData,w
  6994  16A7  1783               	bsf	3,7	;select IRP bank3
  6995  16A8  0080               	movwf	0
  6996                           
  6997                           ;SensorBoard.c: 185: counter++;
  6998  16A9  3001               	movlw	1
  6999  16AA  07FA               	addwf	_counter,f
  7000  16AB  1803               	skipnc
  7001  16AC  0AFB               	incf	_counter+1,f
  7002  16AD  3000               	movlw	0
  7003  16AE  07FB               	addwf	_counter+1,f
  7004  16AF  0008               	return
  7005  16B0                     __end_of_receiveData:	
  7006  0003                     
  7007                           	psect	functab
  7008  0100                     __pfunctab:	
  7009  0100                     __fptable:	
  7010  0100                     fptable:	
  7011  0100  00FF               	movwf	(btemp+1)& (0+127)
  7012  0101  3001               	movlw	high fptable
  7013  0102  008A               	movwf	10
  7014  0103  087F               	movf	(btemp+1)& (0+127),w
  7015  0104  0782               	addwf	2,f
  7016  0105                     fpbase:	
  7017  0105  2905               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7018  0106                     fp__readAccelerometer:	
  7019  0106                     entry__readAccelerometer:	
  7020  0106  160A  118A  2FBB   	ljmp	_readAccelerometer
  7021  0109                     fp__readLight:	
  7022  0109                     entry__readLight:	
  7023  0109  120A  118A  2E0B   	ljmp	_readLight
  7024  010C                     fp__readTemp:	
  7025  010C                     entry__readTemp:	
  7026  010C  120A  158A  2C75   	ljmp	_readTemp
  7027  010F                     __end_of__fptable:	
  7028  007E                     btemp	set	126	;btemp
  7029  007E                     wtemp	set	126
  7030  007E                     wtemp0	set	126
  7031  0080                     wtemp1	set	128
  7032  0082                     wtemp2	set	130
  7033  0084                     wtemp3	set	132
  7034  0086                     wtemp4	set	134
  7035  0088                     wtemp5	set	136
  7036  007F                     wtemp6	set	127
  7037  007E                     ttemp	set	126
  7038  007E                     ttemp0	set	126
  7039  0081                     ttemp1	set	129
  7040  0084                     ttemp2	set	132
  7041  0087                     ttemp3	set	135
  7042  007F                     ttemp4	set	127
  7043  007E                     ltemp	set	126
  7044  007E                     ltemp0	set	126
  7045  0082                     ltemp1	set	130
  7046  0086                     ltemp2	set	134
  7047  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    57
    Data        5
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     70      75
    BANK3            96      0      13
    BANK2            96      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_receiveData

Critical Paths under _main in BANK0

    _tempCalibration->___ftadd
    _readTemp->___ftadd
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_readTemp
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___lltoft->___ftpack
    _readAccelerometer->_pointToVoltage
    _pointToVoltage->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_fillRegister
    _fillRegister->_readLight
    _readLight->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altoft
    ___altoft->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  144157
                                             66 BANK1      4     0      4
                             _config
                       _fillRegister
                     _initialize_i2c
                    _tempCalibration
 ---------------------------------------------------------------------------------
 (1) _tempCalibration                                      6     6      0   12118
                                             59 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                               _read
 ---------------------------------------------------------------------------------
 (1) _initialize_i2c                                       3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _fillRegister                                         8     8      0  132039
                                             61 BANK1      5     5      0
                            ___fttol
                  _readAccelerometer
                          _readLight
                           _readTemp
 ---------------------------------------------------------------------------------
 (2) _readTemp                                             8     5      3   23650
                                             59 BANK0      8     5      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                     _pointToVoltage
                               _read
 ---------------------------------------------------------------------------------
 (2) _readLight                                           12     9      3   95494
                                             49 BANK1     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                     _pointToVoltage
                                _pow
                               _read
 ---------------------------------------------------------------------------------
 (3) _pow                                                 18    12      6   71881
                                             31 BANK1     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     3      3   22884
                                             69 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 13    10      3   39895
                                             18 BANK1     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                               10     5      5    1941
                                             69 BANK0     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     325
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3   10284
                                             79 BANK0      1     1      0
                                             10 BANK1      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     582
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     941
                                             67 BANK0      8     4      4
                                              0 BANK1      6     6      0
                  _readAccelerometer (ARG)
                           _readTemp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6    1090
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2426
                                             75 BANK0      4     0      4
                                              6 BANK1      4     4      0
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    9455
                                             59 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     224
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    5007
                                             59 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4812
                                             46 BANK0     13     7      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    2324
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _readAccelerometer                                    3     0      3   11787
                                             49 BANK0      3     0      3
                           ___awtoft
                     _pointToVoltage
                               _read
 ---------------------------------------------------------------------------------
 (2) _read                                                 5     2      3     780
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _pointToVoltage                                       3     0      3    7618
                                             46 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv
                            ___ftmul
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3775
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3617
                                             30 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2810
                                              8 BANK0      6     3      3
                           ___ftpack
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2157
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _config                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  5     5      0       0
                                              1 COMMON     5     5      0
                        _receiveData
 ---------------------------------------------------------------------------------
 (9) _receiveData                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config
   _fillRegister
     ___fttol
       _readAccelerometer (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         _pointToVoltage
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           _read (ARG)
         _read
       _readTemp (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _pointToVoltage
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           _read (ARG)
         _read
     _readAccelerometer
       ___awtoft
         ___ftpack
         _read (ARG)
       _pointToVoltage
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _read (ARG)
       _read
     _readLight
       ___awtoft
         ___ftpack
         _read (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       _pointToVoltage
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _read (ARG)
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftneg
         ___fttol
           _readAccelerometer (ARG)
             ___awtoft
               ___ftpack
               _read (ARG)
             _pointToVoltage
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               _read (ARG)
             _read
           _readTemp (ARG)
             ___awtoft
               ___ftpack
               _read (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             _pointToVoltage
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               _read (ARG)
             _read
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
             _read (ARG)
           ___ftdiv
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
           ___fttol
             _readAccelerometer (ARG)
               ___awtoft
                 ___ftpack
                 _read (ARG)
               _pointToVoltage
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 _read (ARG)
               _read
             _readTemp (ARG)
               ___awtoft
                 ___ftpack
                 _read (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___bmul (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftdiv
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               _pointToVoltage
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 _read (ARG)
               _read
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 _readAccelerometer (ARG)
                   ___awtoft
                     ___ftpack
                     _read (ARG)
                   _pointToVoltage
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftdiv (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                           _read (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                         _read (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     _read (ARG)
                   _read
                 _readTemp (ARG)
                   ___awtoft
                     ___ftpack
                     _read (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___bmul (ARG)
                     ___ftdiv (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                           _read (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                         _read (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftdiv
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   _pointToVoltage
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftdiv (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                           _read (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                         _read (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     _read (ARG)
                   _read
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftge
             ___fttol
               _readAccelerometer (ARG)
                 ___awtoft
                   ___ftpack
                   _read (ARG)
                 _pointToVoltage
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftdiv (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   _read (ARG)
                 _read
               _readTemp (ARG)
                 ___awtoft
                   ___ftpack
                   _read (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___bmul (ARG)
                   ___ftdiv (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftdiv
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 _pointToVoltage
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftdiv (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   _read (ARG)
                 _read
             _frexp
           _ldexp
             ___ftge
             ___ftneg
             _eval_poly (ARG)
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___bmul (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
               _read (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             _eval_poly
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___bmul (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
             _read (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___bmul (ARG)
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
           _frexp
       _read
     _readTemp
       ___awtoft
         ___ftpack
         _read (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       _pointToVoltage
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _read (ARG)
       _read
   _initialize_i2c
   _tempCalibration
     ___awtoft
       ___ftpack
       _read (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         _read (ARG)
       ___bmul (ARG)
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       _read (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftpack (ARG)
     _read

 _ISR (ROOT)
   _receiveData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       D       9       13.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     46      4B       7       93.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B4      12        0.0%
ABS                  0      0      B4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Fri Feb 20 12:40:30 2015

              ___altoft@exp 00A8                 fp__readTemp 010C                           pc 0002  
            ___bmul@product 0022                fp__readLight 0109                 __CFG_CP$OFF 0000  
               _SSPSTATbits 0094               ___altoft@sign 00A9                          _BF 04A0  
                        l88 060A                          fsr 0004                ___ftadd@exp1 005A  
              ___ftadd@exp2 0059                ___ftadd@sign 0058              ??_fillRegister 00DD  
                       l150 0B02                         l151 0B0A                         l160 0B32  
                       l152 0B11                         l161 0B36                         l153 0B1A  
                       l162 0B38                         l154 0B21                         l163 0B3D  
                       l155 0B24                         l156 0B26                         l148 0AFB  
                       l165 0B83                         l157 0B2B                         l166 0B86  
                       l158 0B2D                         l174 0704                         l167 0B92  
                       l159 0B30                         l435 092C                         l179 0A38  
                       l429 0913                         l458 0F9F                         l635 0334  
                       _CKP 00A4                         _D_A 04A5                __CFG_CPD$OFF 0000  
                       _ISR 1776                         _R_W 04A2                         _exp 010F  
                       _log 0D3A                         _pow 0305                         fsr0 0004  
                       indf 0000                __CFG_IESO$ON 0000                __CFG_LVP$OFF 0000  
                      ?_ISR 0070                ___ftdiv@cntr 0048                ___ftdiv@sign 004D  
                      l3030 0C5E                        l3022 0C39                        l3014 0C14  
                      l3024 0C4B                        l3016 0C2A                        l3026 0C50  
                      l4012 0E58                        l4022 0EEE                        l4032 09B7  
                      l4008 0E4F                        l4120 011D                        l4104 0D74  
                      l4042 005C                        l4130 014B                        l4210 033D  
                      l4052 0085                        l4142 01C6                        l4310 04A5  
                      l4072 00C5                        l4136 0177                        l4224 03D5  
                      l4216 0349                        l4312 04DC                        l4320 05FE  
                      l4330 16C2                        l4076 00CE                        l4164 02D9  
                      l4228 0403                        l4086 170B                        l4254 0CCF  
                      l4318 0533                        l4176 0B48                        l4088 171D  
                      l3800 0F27                        l2920 08CC                        l4248 0C8A  
                      l3730 08E5                        l4186 0BA1                        l4178 0B7B  
                      l4098 0D5E                        l3900 07BD                        l4292 17F9  
                      l2916 08A5                        l4276 0711                        l3734 08EC  
                      l4374 0B4F                        l4286 17CC                        l3830 0F7A  
                      l3806 0F36                        l3744 0918                        l3736 08F8  
                      l3824 0F65                        l3746 0922                        l3738 08FD  
                      l3842 0FB1                        l3826 0F71                        l3818 0F50  
                      l3836 0F8F                        l3828 0F76                        l3846 0FC3  
                      l3838 0F9B                        l3774 07EF                        l3766 0844  
                      l3926 1748                        l3872 0746                        l3856 0FE6  
                      l3768 085A                        l3946 1670                        l3962 0A6D  
                      l3866 0730                        l3778 07F5                        l3956 0A57  
                      l3884 0785                        l3796 0F20                        l2996 0BD1  
                      ?_exp 00B2                        ?_log 0065                        l3984 0AD1  
                      l3976 0AB2                        l3896 07AD                        l3888 0795  
                      ?_pow 00BF                        u2005 0C15                        u2035 0C3C  
                      u3025 0F7B                        u3135 0752                        u3055 0F90  
                      u3305 0A7F                        u3225 07BE                        u3145 0764  
                      u3315 0A91                        u3235 07C6                        u3325 0AB3  
                      u3335 0AC4                        u3175 0796                        u3345 0AD2  
                      u3185 079E                        u1771 0898                        u3435 008E  
                      u1772 0899                        u2805 0933                        u1773 089E  
                      u1774 089F                        u2735 08F1                        u3455 1710  
                      u1791 08BF                        u1792 08C0                        u1793 08C5  
                      u3545 02D0                        u3625 03C6                        u1794 08C6  
                      u2755 090C                        u2835 084A                        u3645 0C88  
                      u2775 091B                        u1975 0BD9                        u3655 0CCD  
                      u2965 0F51                        i1l71 1787                        i1l73 1792  
                      i1l75 1797                        u2995 0F66                        i1l77 17A4  
          ??_initialize_i2c 0020                __CFG_WRT$OFF 0000               __CFG_FCMEN$ON 0000  
                      _main 16B0                ___ftpack@arg 0020                        _read 0AF7  
              ___ftpack@exp 0023                        _junk 0078                        btemp 007E  
                      exp@x 00B2                        log@x 0065               __CFG_BOREN$ON 0000  
         _readAccelerometer 17BB                        ltemp 007E                        pow@x 00BF  
                      pow@y 00C2                        start 0012                        ttemp 007E  
                      wtemp 007E          ?_readAccelerometer 0051           ___bmul@multiplier 0023  
             __CFG_MCLRE$ON 0000                ___ftmul@cntr 003C                ___ftmul@sign 003D  
                     ??_ISR 0071                ___fttol@exp1 00A5                       ??_exp 00B5  
                     ??_log 0068                ___fttol@lval 00A1                       ??_pow 00C5  
       ??_readAccelerometer 0054                       ?_main 00E2                       ?_read 0020  
           __end_of___ftadd 1000               __CFG_WDTE$OFF 0000             __end_of___ftdiv 0AF7  
           __end_of___ftneg 00FE                       _ANSEL 0188             __end_of___ftmul 07EB  
           __end_of___ftsub 1664             __end_of___fttol 0C75                       _SSPIF 0063  
             __CFG_PWRTE$ON 0000                ___lltoft@exp 002D               ___awtoft@sign 002D  
                     _floor 0E0A                       _ldexp 004E                       _frexp 1734  
                     _errno 00E9               ___ftpack@sign 0024                       fpbase 0105  
                     pclath 000A                       ltemp0 007E                       ltemp1 0082  
                     ltemp2 0086                       ltemp3 0080   __end_of_readAccelerometer 1800  
                     pow@yi 00CD                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F                ?_receiveData 0070  
               exp@exponent 00BC                 ldexp@newexp 0068             __initialization 0015  
               log@exponent 0069                __end_of_main 16D8                __end_of_read 0BB3  
                    ??_main 0070               ___fttol@sign1 00A0                      ??_read 0023  
               read@channel 0020                      ?_floor 00AA                      ?_ldexp 0065  
                    ?_frexp 0020            __end_of___altoft 087C                      _ADRESH 001E  
                    _ADRESL 009E            __end_of___awtoft 1689            __end_of___ftpack 0945  
                    _ANSELH 0189                _I2C_sendByte 0077            __end_of___lltoft 1734  
                    i1l3504 17AD                      i1l3446 169D                      i1l3494 179C  
  __size_of_tempCalibration 0081                      _SSPADD 0093                      _SSPBUF 0013  
          __end_of__fptable 010F        __end_of_fillRegister 060B                      ___bmul 07EB  
                    ___ftge 087C                   ??___ftadd 0054                   ??___ftdiv 0044  
                 ??___ftneg 0023                   ??___ftmul 0034                   ??___ftsub 0061  
                 ??___fttol 0067                      _config 00E7            __end_of_readTemp 0D3A  
       pointToVoltage@point 004E                      floor@i 00AD                      floor@x 00AA  
     ___ftmul@f3_as_product 0039                      fptable 0100                __pdataCOMMON 007A  
                    fptotal 0003                      saved_w 007E            __end_ofexp@coeff 1024  
__size_of_readAccelerometer 0045            __end_oflog@coeff 103F     __end_of__initialization 004A  
                ___altoft@c 006B                  ___ftadd@f1 004E                  ___ftadd@f2 0051  
                ___ftge@ff1 0020                  ___ftge@ff2 0023                eval_poly@res 0062  
                ___ftdiv@f1 0041                  ___ftdiv@f2 003E                  ___ftdiv@f3 0049  
                ___ftneg@f1 0020                  ___awtoft@c 0028         ___bmul@multiplicand 0020  
                ___ftmul@f1 002E                  ___ftmul@f2 0031                  ___ftsub@f1 005E  
                ___ftsub@f2 005B                  ___fttol@f1 0063              __pcstackCOMMON 0070  
              __pidataBANK1 1645                  ___lltoft@c 0028               __end_of_floor 0EF7  
             __end_of_ldexp 00E7               __end_of_frexp 1776                     ??_floor 006F  
                   ??_ldexp 006A                     ??_frexp 0024                  __pbssBANK1 00E9  
                __pbssBANK3 0190          __size_of_eval_poly 0079          __size_of_readLight 010D  
      __size_of_receiveData 0027                  __pmaintext 16B0           ??_tempCalibration 005B  
                   ?___bmul 0020                     ?___ftge 0020             entry__readLight 0109  
                __pintentry 0004                     ?_config 0070                   ?___altoft 006B  
                 ?___awtoft 0028                   ?___ftpack 0020                   ?___lltoft 0028  
                   _GO_DONE 00F9       __size_of_fillRegister 016A                  __stringtab 1000  
                 ?_readTemp 005B           readLight@lightVal 00DA             __size_of___bmul 0013  
           __size_of___ftge 005F                     ___ftadd 0EF7                     ___ftdiv 0A3F  
                   ___ftneg 00F4                     ___ftmul 0718                     ___ftsub 1648  
                   ___fttol 0BB3     __size_of_pointToVoltage 002D             __size_of_config 000D  
                ??___altoft 00A6                     _exp$836 00B9                  ??___awtoft 002B  
                ??___ftpack 0025                   _ANSELbits 0188           __end_of_eval_poly 09BE  
              readTemp@temp 0060                  ??___lltoft 002C                     __ptext1 09BE  
                   __ptext2 0801                     __ptext3 04A1                     __ptext4 0C75  
                   __ptext5 060B                     __ptext6 0305                     __ptext7 0D3A  
                   __ptext8 010F                     __ptext9 004E                __size_of_ISR 0045  
         __end_of_readLight 0718                     _counter 007A                _fillRegister 04A1  
              __size_of_exp 01F6                __size_of_log 00D0                __size_of_pow 019C  
      end_of_initialization 004A                     exp@sign 00BE                  ??_readTemp 005E  
                   pow@sign 00CC     __size_of_initialize_i2c 0029        fp__readAccelerometer 0106  
            _readLight$1120 00D4              _readLight$1121 00D7                   _PORTCbits 0007  
                 _TRISCbits 0087                 ___ftdiv@exp 004C                 ___ftmul@exp 0038  
            __end_of___bmul 07FE              __end_of___ftge 08DB               __pidataCOMMON 07FE  
            __end_of_config 00F4                  floor@expon 00B0         start_initialization 0015  
                eval_poly@d 005E                  eval_poly@n 005F                  eval_poly@x 005B  
               __end_of_ISR 17BB                  ldexp@value 0065                 __end_of_exp 0305  
               __end_of_log 0E0A                 __end_of_pow 04A1     entry__readAccelerometer 0106  
           _tempCalibration 09BE                  frexp@value 0020                    ??___bmul 0021  
                  ??___ftge 0026           fillRegister@array 00DE              _pointToVoltage 16D8  
                  ??_config 0020                 __pdataBANK1 00E6             read@analogValue 0023  
         _fillRegister$1119 00DF           __size_of___altoft 0052           __size_of___awtoft 0025  
         __size_of___ftpack 006A           __size_of___lltoft 002F                 __pbssCOMMON 0076  
                 ___latbits 0002               __pcstackBANK0 0020               __pcstackBANK1 00A0  
         __size_of__fptable 000F               ??_receiveData 0070           __size_of_readTemp 00C5  
         read@justification 0022      __end_of_pointToVoltage 1705                   __pfunctab 0100  
            _initialize_i2c 0801              entry__readTemp 010C                    ?___ftadd 004E  
                  ?___ftdiv 003E                    ?___ftneg 0020                    ?___ftmul 002E  
                  ?___ftsub 005B                    ?___fttol 0063                   __pstrings 1000  
                 _ldexp$873 006C                   _eval_poly 0945     __end_of_tempCalibration 0A3F  
                 _readLight 060B              __size_of_floor 00ED              __size_of_ldexp 0099  
            __size_of_frexp 0042           interrupt_function 0004                    _PIE1bits 008C  
  __CFG_FOSC$EXTRC_NOCLKOUT 0000      __end_of_initialize_i2c 082A                    _PIR1bits 000C  
           ?_pointToVoltage 004E         __end_of_receiveData 16B0                  _ADCON0bits 001F  
               __stringbase 1005                  _ADCON1bits 009F                  ?_eval_poly 005B  
                ?_readLight 00D1                   frexp@eptr 0023                    _Register 0190  
          _I2C_receivedByte 0076             ?_initialize_i2c 0070                   readTemp@i 005E  
          __size_of___ftadd 0109            __size_of___ftdiv 00B8            __size_of___ftneg 000A  
                  ___altoft 082A            __size_of___ftmul 00D3            __size_of___ftsub 001C  
          __size_of___fttol 00C2                    ___awtoft 1664                    ___ftpack 08DB  
        __end_of__stringtab 1006                    ___lltoft 1705                    _exp$1124 00B6  
                  __fptable 0100                    _gainTemp 00E6            ?_tempCalibration 0070  
                  __ptext10 00F4                    __ptext11 0E0A                    __ptext20 1705  
                  __ptext12 1734                    __ptext21 17BB                    __ptext13 0BB3  
                  __ptext30 1689                    __ptext22 0AF7                    __ptext14 087C  
                  __ptext23 16D8                    __ptext15 082A                    __ptext24 0718  
                  __ptext16 0945                    __ptext25 0A3F                    __ptext17 07EB  
                  __ptext26 1664                    __ptext18 1648                    __ptext27 08DB  
                  __ptext19 0EF7                    __ptext28 00E7                    __ptext29 1776  
         __CFG_BOR4V$BOR40V 0000                    _pow$1122 00C6                    _pow$1123 00C9  
                  _readTemp 0C75               __size_of_main 0028               __size_of_read 00BC  
       tempCalibration@vOut 005B                 _receiveData 1689                    main@argc 00E2  
                  main@argv 00E4                    exp@coeff 1006                    log@coeff 1024  
               ??_eval_poly 0061                 ??_readLight 0070                    intlevel1 0100  
        tempCalibration@vIn 005E                   stringcode 1000                  _OSCCONbits 008F  
    sendMaster@indexCounter 0079       readAccelerometer@axis 0051               ?_fillRegister 0070  
                  stringdir 1000                    stringtab 1000                 _SSPCON2bits 0091  
          ??_pointToVoltage 0051                  _SSPCONbits 0014  
