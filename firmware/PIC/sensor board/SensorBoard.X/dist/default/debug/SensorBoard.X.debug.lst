

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Sat Feb 14 10:44:29 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	functab,global,reloc=256,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  008F                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0093                     	;# 
   173  0093                     	;# 
   174  0094                     	;# 
   175  0095                     	;# 
   176  0096                     	;# 
   177  0097                     	;# 
   178  0098                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009B                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009E                     	;# 
   185  009F                     	;# 
   186  0105                     	;# 
   187  0107                     	;# 
   188  0108                     	;# 
   189  0109                     	;# 
   190  010C                     	;# 
   191  010C                     	;# 
   192  010D                     	;# 
   193  010E                     	;# 
   194  010F                     	;# 
   195  0185                     	;# 
   196  0187                     	;# 
   197  0188                     	;# 
   198  0189                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201                           
   202                           	psect	idataCOMMON
   203  07FE                     __pidataCOMMON:	
   204                           
   205                           ;initializer for _counter
   206  07FE  3401               	retlw	1
   207  07FF  3400               	retlw	0
   208                           
   209                           	psect	idataBANK1
   210  00F1                     __pidataBANK1:	
   211                           
   212                           ;initializer for _gainTemp
   213  00F1  3474               	retlw	116
   214  00F2  3491               	retlw	145
   215  00F3  3441               	retlw	65
   216                           
   217                           	psect	strings
   218  1000                     __pstrings:	
   219  1000                     stringtab:	
   220  1000                     __stringtab:	
   221  1000                     stringcode:	
   222                           ;	String table - string pointers are 1 byte each
   223                           
   224  1000                     stringdir:	
   225  1000  3010               	movlw	high stringdir
   226  1001  008A               	movwf	10
   227  1002  0804               	movf	4,w
   228  1003  0A84               	incf	4,f
   229  1004  0782               	addwf	2,f
   230  1005                     __stringbase:	
   231  1005  3400               	retlw	0
   232  1006                     __end_of__stringtab:	
   233  1006                     exp@coeff:	
   234  1006  3400               	retlw	0
   235  1007  3480               	retlw	128
   236  1008  343F               	retlw	63
   237  1009  3472               	retlw	114
   238  100A  3431               	retlw	49
   239  100B  343F               	retlw	63
   240  100C  34FE               	retlw	254
   241  100D  3475               	retlw	117
   242  100E  343E               	retlw	62
   243  100F  3458               	retlw	88
   244  1010  3463               	retlw	99
   245  1011  343D               	retlw	61
   246  1012  3495               	retlw	149
   247  1013  341D               	retlw	29
   248  1014  343C               	retlw	60
   249  1015  34C5               	retlw	197
   250  1016  34AE               	retlw	174
   251  1017  343A               	retlw	58
   252  1018  3479               	retlw	121
   253  1019  3421               	retlw	33
   254  101A  3439               	retlw	57
   255  101B  3494               	retlw	148
   256  101C  3480               	retlw	128
   257  101D  3437               	retlw	55
   258  101E  3493               	retlw	147
   259  101F  34A7               	retlw	167
   260  1020  3435               	retlw	53
   261  1021  3456               	retlw	86
   262  1022  3415               	retlw	21
   263  1023  3434               	retlw	52
   264  1024                     __end_ofexp@coeff:	
   265  1024                     log@coeff:	
   266  1024  3400               	retlw	0
   267  1025  3400               	retlw	0
   268  1026  3400               	retlw	0
   269  1027  3400               	retlw	0
   270  1028  3480               	retlw	128
   271  1029  343F               	retlw	63
   272  102A  34F0               	retlw	240
   273  102B  34FF               	retlw	255
   274  102C  34BE               	retlw	190
   275  102D  34E2               	retlw	226
   276  102E  34A9               	retlw	169
   277  102F  343E               	retlw	62
   278  1030  3483               	retlw	131
   279  1031  3476               	retlw	118
   280  1032  34BE               	retlw	190
   281  1033  34AE               	retlw	174
   282  1034  342B               	retlw	43
   283  1035  343E               	retlw	62
   284  1036  343C               	retlw	60
   285  1037  34C3               	retlw	195
   286  1038  34BD               	retlw	189
   287  1039  34D2               	retlw	210
   288  103A  3413               	retlw	19
   289  103B  343D               	retlw	61
   290  103C  3478               	retlw	120
   291  103D  34D3               	retlw	211
   292  103E  34BB               	retlw	187
   293  103F                     __end_oflog@coeff:	
   294  001F                     _ADCON0bits	set	31
   295  001E                     _ADRESH	set	30
   296  000C                     _PIR1bits	set	12
   297  0006                     _PORTBbits	set	6
   298  0013                     _SSPBUF	set	19
   299  0014                     _SSPCONbits	set	20
   300  00A4                     _CKP	set	164
   301  00F9                     _GO_DONE	set	249
   302  0063                     _SSPIF	set	99
   303  009F                     _ADCON1bits	set	159
   304  009E                     _ADRESL	set	158
   305  008F                     _OSCCONbits	set	143
   306  008C                     _PIE1bits	set	140
   307  0093                     _SSPADD	set	147
   308  0091                     _SSPCON2bits	set	145
   309  0094                     _SSPSTATbits	set	148
   310  0086                     _TRISBbits	set	134
   311  0087                     _TRISCbits	set	135
   312  04A0                     _BF	set	1184
   313  04A5                     _D_A	set	1189
   314  04A2                     _R_W	set	1186
   315  0188                     _ANSEL	set	392
   316  0189                     _ANSELH	set	393
   317  0188                     _ANSELbits	set	392
   318                           
   319                           ; #config settings
   320  0000                     
   321                           	psect	cinit
   322  0015                     start_initialization:	
   323  0015                     __initialization:	
   324                           
   325                           ; Clear objects allocated to COMMON
   326  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   327  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   328  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   329  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   330                           
   331                           ; Clear objects allocated to BANK1
   332  0019  1683               	bsf	3,5	;RP0=1, select bank1
   333  001A  1303               	bcf	3,6	;RP1=0, select bank1
   334  001B  01E9               	clrf	__pbssBANK1& (0+127)
   335  001C  01EA               	clrf	(__pbssBANK1+1)& (0+127)
   336                           
   337                           ; Clear objects allocated to BANK3
   338  001D  1683               	bsf	3,5	;RP0=1, select bank3
   339  001E  1703               	bsf	3,6	;RP1=1, select bank3
   340  001F  0190               	clrf	__pbssBANK3& (0+127)
   341  0020  0191               	clrf	(__pbssBANK3+1)& (0+127)
   342  0021  0192               	clrf	(__pbssBANK3+2)& (0+127)
   343  0022  0193               	clrf	(__pbssBANK3+3)& (0+127)
   344  0023  0194               	clrf	(__pbssBANK3+4)& (0+127)
   345  0024  0195               	clrf	(__pbssBANK3+5)& (0+127)
   346  0025  0196               	clrf	(__pbssBANK3+6)& (0+127)
   347  0026  0197               	clrf	(__pbssBANK3+7)& (0+127)
   348  0027  0198               	clrf	(__pbssBANK3+8)& (0+127)
   349  0028  0199               	clrf	(__pbssBANK3+9)& (0+127)
   350  0029  019A               	clrf	(__pbssBANK3+10)& (0+127)
   351  002A  019B               	clrf	(__pbssBANK3+11)& (0+127)
   352  002B  019C               	clrf	(__pbssBANK3+12)& (0+127)
   353                           
   354                           ; Initialize objects allocated to BANK1
   355  002C  1683               	bsf	3,5	;RP0=1, select bank1
   356  002D  1303               	bcf	3,6	;RP1=0, select bank1
   357  002E  120A  118A  20F1   	fcall	__pidataBANK1	;fetch initializer
      +       120A  118A         
   358  0033  00E6               	movwf	__pdataBANK1& (0+127)
   359  0034  120A  118A  20F2   	fcall	__pidataBANK1+1	;fetch initializer
      +       120A  118A         
   360  0039  00E7               	movwf	(__pdataBANK1+1)& (0+127)
   361  003A  120A  118A  20F3   	fcall	__pidataBANK1+2	;fetch initializer
      +       120A  118A         
   362  003F  00E8               	movwf	(__pdataBANK1+2)& (0+127)
   363                           
   364                           ; Initialize objects allocated to COMMON
   365  0040  120A  118A  27FE   	fcall	__pidataCOMMON	;fetch initializer
      +       120A  118A         
   366  0045  00FA               	movwf	__pdataCOMMON& (0+127)
   367  0046  120A  118A  27FF   	fcall	__pidataCOMMON+1	;fetch initializer
   368  0049  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   369  004A                     end_of_initialization:	
   370                           ;End of C runtime variable initialization code
   371                           
   372  004A                     __end_of__initialization:	
   373  004A  0183               	clrf	3
   374  004B  160A  118A  2DE6   	ljmp	_main	;jump to C main() function
   375                           
   376                           	psect	bssCOMMON
   377  0076                     __pbssCOMMON:	
   378  0076                     _I2C_receivedByte:	
   379  0076                     	ds	1
   380  0077                     _I2C_sendByte:	
   381  0077                     	ds	1
   382  0078                     _junk:	
   383  0078                     	ds	1
   384  0079                     sendMaster@indexCounter:	
   385  0079                     	ds	1
   386                           
   387                           	psect	dataCOMMON
   388  007A                     __pdataCOMMON:	
   389  007A                     _counter:	
   390  007A                     	ds	2
   391                           
   392                           	psect	bssBANK1
   393  00E9                     __pbssBANK1:	
   394  00E9                     _errno:	
   395  00E9                     	ds	2
   396                           
   397                           	psect	dataBANK1
   398  00E6                     __pdataBANK1:	
   399  00E6                     _gainTemp:	
   400  00E6                     	ds	3
   401                           
   402                           	psect	bssBANK3
   403  0190                     __pbssBANK3:	
   404  0190                     _Register:	
   405  0190                     	ds	13
   406                           
   407                           	psect	cstackBANK1
   408  00A0                     __pcstackBANK1:	
   409  00A0                     ___fttol@sign1:	
   410                           
   411                           ; 1 bytes @ 0x0
   412  00A0                     	ds	1
   413  00A1                     ___fttol@lval:	
   414                           
   415                           ; 4 bytes @ 0x1
   416  00A1                     	ds	4
   417  00A5                     ___fttol@exp1:	
   418                           
   419                           ; 1 bytes @ 0x5
   420  00A5                     	ds	1
   421  00A6                     ??___altoft:	
   422                           
   423                           ; 0 bytes @ 0x6
   424  00A6                     	ds	2
   425  00A8                     ___altoft@exp:	
   426                           
   427                           ; 1 bytes @ 0x8
   428  00A8                     	ds	1
   429  00A9                     ___altoft@sign:	
   430                           
   431                           ; 1 bytes @ 0x9
   432  00A9                     	ds	1
   433  00AA                     ?_floor:	
   434  00AA                     floor@x:	
   435                           ; 3 bytes @ 0xA
   436                           
   437                           
   438                           ; 3 bytes @ 0xA
   439  00AA                     	ds	3
   440  00AD                     floor@i:	
   441                           
   442                           ; 3 bytes @ 0xD
   443  00AD                     	ds	3
   444  00B0                     floor@expon:	
   445                           
   446                           ; 2 bytes @ 0x10
   447  00B0                     	ds	2
   448  00B2                     ?_exp:	
   449  00B2                     exp@x:	
   450                           ; 3 bytes @ 0x12
   451                           
   452                           
   453                           ; 3 bytes @ 0x12
   454  00B2                     	ds	3
   455  00B5                     ??_exp:	
   456                           
   457                           ; 0 bytes @ 0x15
   458  00B5                     	ds	1
   459  00B6                     _exp$1144:	
   460                           
   461                           ; 3 bytes @ 0x16
   462  00B6                     	ds	3
   463  00B9                     _exp$859:	
   464                           
   465                           ; 3 bytes @ 0x19
   466  00B9                     	ds	3
   467  00BC                     exp@exponent:	
   468                           
   469                           ; 2 bytes @ 0x1C
   470  00BC                     	ds	2
   471  00BE                     exp@sign:	
   472                           
   473                           ; 1 bytes @ 0x1E
   474  00BE                     	ds	1
   475  00BF                     ?_pow:	
   476  00BF                     pow@x:	
   477                           ; 3 bytes @ 0x1F
   478                           
   479                           
   480                           ; 3 bytes @ 0x1F
   481  00BF                     	ds	3
   482  00C2                     pow@y:	
   483                           
   484                           ; 3 bytes @ 0x22
   485  00C2                     	ds	3
   486  00C5                     ??_pow:	
   487                           
   488                           ; 0 bytes @ 0x25
   489  00C5                     	ds	1
   490  00C6                     _pow$1142:	
   491                           
   492                           ; 3 bytes @ 0x26
   493  00C6                     	ds	3
   494  00C9                     _pow$1143:	
   495                           
   496                           ; 3 bytes @ 0x29
   497  00C9                     	ds	3
   498  00CC                     pow@sign:	
   499                           
   500                           ; 1 bytes @ 0x2C
   501  00CC                     	ds	1
   502  00CD                     pow@yi:	
   503                           
   504                           ; 4 bytes @ 0x2D
   505  00CD                     	ds	4
   506  00D1                     ?_readLight:	
   507                           
   508                           ; 3 bytes @ 0x31
   509  00D1                     	ds	3
   510  00D4                     _readLight$1140:	
   511                           
   512                           ; 3 bytes @ 0x34
   513  00D4                     	ds	3
   514  00D7                     _readLight$1141:	
   515                           
   516                           ; 3 bytes @ 0x37
   517  00D7                     	ds	3
   518  00DA                     readLight@lightVal:	
   519                           
   520                           ; 3 bytes @ 0x3A
   521  00DA                     	ds	3
   522  00DD                     ??_fillRegister:	
   523                           
   524                           ; 0 bytes @ 0x3D
   525  00DD                     	ds	1
   526  00DE                     fillRegister@array:	
   527                           
   528                           ; 1 bytes @ 0x3E
   529  00DE                     	ds	1
   530  00DF                     _fillRegister$1139:	
   531                           
   532                           ; 3 bytes @ 0x3F
   533  00DF                     	ds	3
   534  00E2                     ?_main:	
   535  00E2                     main@argc:	
   536                           ; 2 bytes @ 0x42
   537                           
   538                           
   539                           ; 2 bytes @ 0x42
   540  00E2                     	ds	2
   541  00E4                     main@argv:	
   542                           
   543                           ; 2 bytes @ 0x44
   544  00E4                     	ds	2
   545                           
   546                           	psect	cstackCOMMON
   547  0070                     __pcstackCOMMON:	
   548  0070                     ?_config:	
   549  0070                     ?_fillRegister:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0070                     ??_sendMaster:	
   553                           ; 0 bytes @ 0x0
   554                           
   555  0070                     ?_ISR:	
   556                           ; 0 bytes @ 0x0
   557                           
   558  0070                     ?_sendMaster:	
   559                           ; 0 bytes @ 0x0
   560                           
   561  0070                     ?_tempCalibration:	
   562                           ; 1 bytes @ 0x0
   563                           
   564                           
   565                           ; 3 bytes @ 0x0
   566  0070                     	ds	1
   567  0071                     ??_ISR:	
   568                           
   569                           ; 0 bytes @ 0x1
   570  0071                     	ds	5
   571                           
   572                           	psect	cstackBANK0
   573  0020                     __pcstackBANK0:	
   574  0020                     ??_config:	
   575  0020                     ?___ftge:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  0020                     ?___bmul:	
   579                           ; 1 bit 
   580                           
   581  0020                     ?_read:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0020                     ?___ftpack:	
   585                           ; 2 bytes @ 0x0
   586                           
   587  0020                     ?_frexp:	
   588                           ; 3 bytes @ 0x0
   589                           
   590  0020                     ?___ftneg:	
   591                           ; 3 bytes @ 0x0
   592                           
   593  0020                     ___bmul@multiplicand:	
   594                           ; 3 bytes @ 0x0
   595                           
   596  0020                     read@channel:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0020                     ___ftpack@arg:	
   600                           ; 2 bytes @ 0x0
   601                           
   602  0020                     ___ftge@ff1:	
   603                           ; 3 bytes @ 0x0
   604                           
   605  0020                     ___ftneg@f1:	
   606                           ; 3 bytes @ 0x0
   607                           
   608  0020                     frexp@value:	
   609                           ; 3 bytes @ 0x0
   610                           
   611                           
   612                           ; 3 bytes @ 0x0
   613  0020                     	ds	1
   614  0021                     ??___bmul:	
   615                           
   616                           ; 0 bytes @ 0x1
   617  0021                     	ds	1
   618  0022                     read@justification:	
   619  0022                     ___bmul@product:	
   620                           ; 1 bytes @ 0x2
   621                           
   622                           
   623                           ; 1 bytes @ 0x2
   624  0022                     	ds	1
   625  0023                     ??_read:	
   626  0023                     ??___ftneg:	
   627                           ; 0 bytes @ 0x3
   628                           
   629  0023                     ___bmul@multiplier:	
   630                           ; 0 bytes @ 0x3
   631                           
   632  0023                     ___ftpack@exp:	
   633                           ; 1 bytes @ 0x3
   634                           
   635  0023                     frexp@eptr:	
   636                           ; 1 bytes @ 0x3
   637                           
   638  0023                     read@analogValue:	
   639                           ; 1 bytes @ 0x3
   640                           
   641  0023                     ___ftge@ff2:	
   642                           ; 2 bytes @ 0x3
   643                           
   644                           
   645                           ; 3 bytes @ 0x3
   646  0023                     	ds	1
   647  0024                     ??_frexp:	
   648  0024                     ___ftpack@sign:	
   649                           ; 0 bytes @ 0x4
   650                           
   651                           
   652                           ; 1 bytes @ 0x4
   653  0024                     	ds	1
   654  0025                     ??___ftpack:	
   655                           
   656                           ; 0 bytes @ 0x5
   657  0025                     	ds	1
   658  0026                     ??___ftge:	
   659                           
   660                           ; 0 bytes @ 0x6
   661  0026                     	ds	2
   662  0028                     ?___awtoft:	
   663  0028                     ?___lltoft:	
   664                           ; 3 bytes @ 0x8
   665                           
   666  0028                     ___awtoft@c:	
   667                           ; 3 bytes @ 0x8
   668                           
   669  0028                     ___lltoft@c:	
   670                           ; 2 bytes @ 0x8
   671                           
   672                           
   673                           ; 4 bytes @ 0x8
   674  0028                     	ds	3
   675  002B                     ??___awtoft:	
   676                           
   677                           ; 0 bytes @ 0xB
   678  002B                     	ds	1
   679  002C                     ??___lltoft:	
   680                           
   681                           ; 0 bytes @ 0xC
   682  002C                     	ds	1
   683  002D                     ___awtoft@sign:	
   684  002D                     ___lltoft@exp:	
   685                           ; 1 bytes @ 0xD
   686                           
   687                           
   688                           ; 1 bytes @ 0xD
   689  002D                     	ds	1
   690  002E                     ?___ftmul:	
   691  002E                     ___ftmul@f1:	
   692                           ; 3 bytes @ 0xE
   693                           
   694                           
   695                           ; 3 bytes @ 0xE
   696  002E                     	ds	3
   697  0031                     ___ftmul@f2:	
   698                           
   699                           ; 3 bytes @ 0x11
   700  0031                     	ds	3
   701  0034                     ??___ftmul:	
   702                           
   703                           ; 0 bytes @ 0x14
   704  0034                     	ds	4
   705  0038                     ___ftmul@exp:	
   706                           
   707                           ; 1 bytes @ 0x18
   708  0038                     	ds	1
   709  0039                     ___ftmul@f3_as_product:	
   710                           
   711                           ; 3 bytes @ 0x19
   712  0039                     	ds	3
   713  003C                     ___ftmul@cntr:	
   714                           
   715                           ; 1 bytes @ 0x1C
   716  003C                     	ds	1
   717  003D                     ___ftmul@sign:	
   718                           
   719                           ; 1 bytes @ 0x1D
   720  003D                     	ds	1
   721  003E                     ?___ftdiv:	
   722  003E                     ___ftdiv@f2:	
   723                           ; 3 bytes @ 0x1E
   724                           
   725                           
   726                           ; 3 bytes @ 0x1E
   727  003E                     	ds	3
   728  0041                     ___ftdiv@f1:	
   729                           
   730                           ; 3 bytes @ 0x21
   731  0041                     	ds	3
   732  0044                     ??___ftdiv:	
   733                           
   734                           ; 0 bytes @ 0x24
   735  0044                     	ds	4
   736  0048                     ___ftdiv@cntr:	
   737                           
   738                           ; 1 bytes @ 0x28
   739  0048                     	ds	1
   740  0049                     ___ftdiv@f3:	
   741                           
   742                           ; 3 bytes @ 0x29
   743  0049                     	ds	3
   744  004C                     ___ftdiv@exp:	
   745                           
   746                           ; 1 bytes @ 0x2C
   747  004C                     	ds	1
   748  004D                     ___ftdiv@sign:	
   749                           
   750                           ; 1 bytes @ 0x2D
   751  004D                     	ds	1
   752  004E                     ?_pointToVoltage:	
   753  004E                     ?___ftadd:	
   754                           ; 3 bytes @ 0x2E
   755                           
   756  004E                     pointToVoltage@point:	
   757                           ; 3 bytes @ 0x2E
   758                           
   759  004E                     ___ftadd@f1:	
   760                           ; 3 bytes @ 0x2E
   761                           
   762                           
   763                           ; 3 bytes @ 0x2E
   764  004E                     	ds	3
   765  0051                     ??_pointToVoltage:	
   766  0051                     ?_readAccelerometer:	
   767                           ; 0 bytes @ 0x31
   768                           
   769  0051                     readAccelerometer@axis:	
   770                           ; 3 bytes @ 0x31
   771                           
   772  0051                     ___ftadd@f2:	
   773                           ; 2 bytes @ 0x31
   774                           
   775                           
   776                           ; 3 bytes @ 0x31
   777  0051                     	ds	3
   778  0054                     ??_readAccelerometer:	
   779  0054                     ??___ftadd:	
   780                           ; 0 bytes @ 0x34
   781                           
   782                           
   783                           ; 0 bytes @ 0x34
   784  0054                     	ds	4
   785  0058                     ___ftadd@sign:	
   786                           
   787                           ; 1 bytes @ 0x38
   788  0058                     	ds	1
   789  0059                     ___ftadd@exp2:	
   790                           
   791                           ; 1 bytes @ 0x39
   792  0059                     	ds	1
   793  005A                     ___ftadd@exp1:	
   794                           
   795                           ; 1 bytes @ 0x3A
   796  005A                     	ds	1
   797  005B                     ??_tempCalibration:	
   798  005B                     ?_readTemp:	
   799                           ; 0 bytes @ 0x3B
   800                           
   801  005B                     ?_eval_poly:	
   802                           ; 3 bytes @ 0x3B
   803                           
   804  005B                     ?___ftsub:	
   805                           ; 3 bytes @ 0x3B
   806                           
   807  005B                     tempCalibration@vOut:	
   808                           ; 3 bytes @ 0x3B
   809                           
   810  005B                     ___ftsub@f2:	
   811                           ; 3 bytes @ 0x3B
   812                           
   813  005B                     eval_poly@x:	
   814                           ; 3 bytes @ 0x3B
   815                           
   816                           
   817                           ; 3 bytes @ 0x3B
   818  005B                     	ds	3
   819  005E                     ??_readTemp:	
   820  005E                     eval_poly@d:	
   821                           ; 0 bytes @ 0x3E
   822                           
   823  005E                     readTemp@i:	
   824                           ; 1 bytes @ 0x3E
   825                           
   826  005E                     tempCalibration@vIn:	
   827                           ; 2 bytes @ 0x3E
   828                           
   829  005E                     ___ftsub@f1:	
   830                           ; 3 bytes @ 0x3E
   831                           
   832                           
   833                           ; 3 bytes @ 0x3E
   834  005E                     	ds	1
   835  005F                     eval_poly@n:	
   836                           
   837                           ; 2 bytes @ 0x3F
   838  005F                     	ds	1
   839  0060                     readTemp@temp:	
   840                           
   841                           ; 3 bytes @ 0x40
   842  0060                     	ds	1
   843  0061                     ??_eval_poly:	
   844  0061                     ??___ftsub:	
   845                           ; 0 bytes @ 0x41
   846                           
   847                           
   848                           ; 0 bytes @ 0x41
   849  0061                     	ds	1
   850  0062                     eval_poly@res:	
   851                           
   852                           ; 3 bytes @ 0x42
   853  0062                     	ds	1
   854  0063                     ?___fttol:	
   855  0063                     ___fttol@f1:	
   856                           ; 4 bytes @ 0x43
   857                           
   858                           
   859                           ; 3 bytes @ 0x43
   860  0063                     	ds	2
   861  0065                     ?_log:	
   862  0065                     ?_ldexp:	
   863                           ; 3 bytes @ 0x45
   864                           
   865  0065                     ldexp@value:	
   866                           ; 3 bytes @ 0x45
   867                           
   868  0065                     log@x:	
   869                           ; 3 bytes @ 0x45
   870                           
   871                           
   872                           ; 3 bytes @ 0x45
   873  0065                     	ds	2
   874  0067                     ??___fttol:	
   875                           
   876                           ; 0 bytes @ 0x47
   877  0067                     	ds	1
   878  0068                     ??_log:	
   879  0068                     ldexp@newexp:	
   880                           ; 0 bytes @ 0x48
   881                           
   882                           
   883                           ; 2 bytes @ 0x48
   884  0068                     	ds	1
   885  0069                     log@exponent:	
   886                           
   887                           ; 2 bytes @ 0x49
   888  0069                     	ds	1
   889  006A                     ??_ldexp:	
   890                           
   891                           ; 0 bytes @ 0x4A
   892  006A                     	ds	1
   893  006B                     ?___altoft:	
   894  006B                     ___altoft@c:	
   895                           ; 3 bytes @ 0x4B
   896                           
   897                           
   898                           ; 4 bytes @ 0x4B
   899  006B                     	ds	1
   900  006C                     _ldexp$896:	
   901                           
   902                           ; 3 bytes @ 0x4C
   903  006C                     	ds	3
   904  006F                     ??_floor:	
   905                           
   906                           ; 0 bytes @ 0x4F
   907  006F                     	ds	1
   908  0070                     ??_readLight:	
   909  0070                     ??_main:	
   910                           ; 0 bytes @ 0x50
   911                           
   912                           
   913                           	psect	maintext
   914  15E6                     __pmaintext:	
   915                           ; 0 bytes @ 0x50
   916 ;;
   917 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   918 ;;
   919 ;; *************** function _main *****************
   920 ;; Defined at:
   921 ;;		line 94 in file "SensorBoard.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  argc            2   66[BANK1 ] int 
   924 ;;  argv            2   68[BANK1 ] PTR PTR unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;                  2   66[BANK1 ] int 
   929 ;; Registers used:
   930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 17F/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   936 ;;      Params:         0       0       4       0       0
   937 ;;      Locals:         0       0       0       0       0
   938 ;;      Temps:          0       0       0       0       0
   939 ;;      Totals:         0       0       4       0       0
   940 ;;Total ram usage:        4 bytes
   941 ;; Hardware stack levels required when called:    9
   942 ;; This function calls:
   943 ;;		_config
   944 ;;		_fillRegister
   945 ;;		_tempCalibration
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function _main
   953  15E6                     _main:	
   954                           
   955                           ;SensorBoard.c: 95: config();
   956                           
   957                           ;incstack = 0
   958 ;; hardware stack exceeded
   959                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   960  15E6  160A  118A  2684   	fcall	_config
      +       160A  118A         
   961                           
   962                           ;SensorBoard.c: 97: tempCalibration();
   963  15EB  120A  158A  2136   	fcall	_tempCalibration
      +       160A  118A         
   964  15F0                     l4404:	
   965                           ;SensorBoard.c: 99: while (1) {
   966                           
   967                           
   968                           ;SensorBoard.c: 100: fillRegister(Temprature);
   969  15F0  3000               	movlw	0
   970  15F1  120A  118A  24A1   	fcall	_fillRegister
      +       160A  118A         
   971                           
   972                           ;SensorBoard.c: 101: fillRegister(Light);
   973  15F6  3001               	movlw	1
   974  15F7  120A  118A  24A1   	fcall	_fillRegister
      +       160A  118A         
   975                           
   976                           ;SensorBoard.c: 102: fillRegister(Accelerometer);
   977  15FC  3002               	movlw	2
   978  15FD  120A  118A  24A1   	fcall	_fillRegister
      +       160A  118A         
   979  1602  2DF0               	goto	l4404
   980  1603                     __end_of_main:	
   981                           ;SensorBoard.c: 103: }
   982                           ;SensorBoard.c: 105: return (0);
   983                           ;	Return value of _main is never used
   984                           
   985                           
   986                           	psect	text1
   987  0936                     __ptext1:	
   988 ;; *************** function _tempCalibration *****************
   989 ;; Defined at:
   990 ;;		line 182 in file "Analog.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  vIn             3   62[BANK0 ] float 
   995 ;;  vOut            3   59[BANK0 ] float 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  3    4[COMMON] float 
   998 ;; Registers used:
   999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1005 ;;      Params:         0       0       0       0       0
  1006 ;;      Locals:         0       6       0       0       0
  1007 ;;      Temps:          0       0       0       0       0
  1008 ;;      Totals:         0       6       0       0       0
  1009 ;;Total ram usage:        6 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    4
  1012 ;; This function calls:
  1013 ;;		___awtoft
  1014 ;;		___ftadd
  1015 ;;		___ftdiv
  1016 ;;		_read
  1017 ;; This function is called by:
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function _tempCalibration
  1024  0936                     _tempCalibration:	
  1025                           
  1026                           ;Analog.c: 183: float vOut = read((1), 0);
  1027                           
  1028                           ;incstack = 0
  1029                           ; Regs used in _tempCalibration: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1030  0936  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0937  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0938  01A2               	clrf	read@justification
  1033  0939  3001               	movlw	1
  1034  093A  00A0               	movwf	read@channel
  1035  093B  3000               	movlw	0
  1036  093C  00A1               	movwf	read@channel+1
  1037  093D  120A  158A  22F7   	fcall	_read
      +       120A  158A         
  1038  0942  1283               	bcf	3,5	;RP0=0, select bank0
  1039  0943  1303               	bcf	3,6	;RP1=0, select bank0
  1040  0944  0821               	movf	?_read+1,w
  1041  0945  01A9               	clrf	___awtoft@c+1
  1042  0946  07A9               	addwf	___awtoft@c+1,f
  1043  0947  0820               	movf	?_read,w
  1044  0948  01A8               	clrf	___awtoft@c
  1045  0949  07A8               	addwf	___awtoft@c,f
  1046  094A  160A  118A  2603   	fcall	___awtoft
      +       120A  158A         
  1047  094F  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0950  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0951  0828               	movf	?___awtoft,w
  1050  0952  00DB               	movwf	tempCalibration@vOut
  1051  0953  0829               	movf	?___awtoft+1,w
  1052  0954  00DC               	movwf	tempCalibration@vOut+1
  1053  0955  082A               	movf	?___awtoft+2,w
  1054  0956  00DD               	movwf	tempCalibration@vOut+2
  1055                           
  1056                           ;Analog.c: 184: float vIn = (read((5), 0)) - 2.5;
  1057  0957  3000               	movlw	0
  1058  0958  00CE               	movwf	___ftadd@f1
  1059  0959  3020               	movlw	32
  1060  095A  00CF               	movwf	___ftadd@f1+1
  1061  095B  30C0               	movlw	192
  1062  095C  00D0               	movwf	___ftadd@f1+2
  1063  095D  01A2               	clrf	read@justification
  1064  095E  3005               	movlw	5
  1065  095F  00A0               	movwf	read@channel
  1066  0960  3000               	movlw	0
  1067  0961  00A1               	movwf	read@channel+1
  1068  0962  120A  158A  22F7   	fcall	_read
      +       120A  158A         
  1069  0967  1283               	bcf	3,5	;RP0=0, select bank0
  1070  0968  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0969  0821               	movf	?_read+1,w
  1072  096A  01A9               	clrf	___awtoft@c+1
  1073  096B  07A9               	addwf	___awtoft@c+1,f
  1074  096C  0820               	movf	?_read,w
  1075  096D  01A8               	clrf	___awtoft@c
  1076  096E  07A8               	addwf	___awtoft@c,f
  1077  096F  160A  118A  2603   	fcall	___awtoft
      +       120A  158A         
  1078  0974  1283               	bcf	3,5	;RP0=0, select bank0
  1079  0975  1303               	bcf	3,6	;RP1=0, select bank0
  1080  0976  0828               	movf	?___awtoft,w
  1081  0977  00D1               	movwf	___ftadd@f2
  1082  0978  0829               	movf	?___awtoft+1,w
  1083  0979  00D2               	movwf	___ftadd@f2+1
  1084  097A  082A               	movf	?___awtoft+2,w
  1085  097B  00D3               	movwf	___ftadd@f2+2
  1086  097C  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  1087  0981  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0982  1303               	bcf	3,6	;RP1=0, select bank0
  1089  0983  084E               	movf	?___ftadd,w
  1090  0984  00DE               	movwf	tempCalibration@vIn
  1091  0985  084F               	movf	?___ftadd+1,w
  1092  0986  00DF               	movwf	tempCalibration@vIn+1
  1093  0987  0850               	movf	?___ftadd+2,w
  1094  0988  00E0               	movwf	tempCalibration@vIn+2
  1095                           
  1096                           ;Analog.c: 186: if (vIn != 0)
  1097  0989  0860               	movf	tempCalibration@vIn+2,w
  1098  098A  045F               	iorwf	tempCalibration@vIn+1,w
  1099  098B  045E               	iorwf	tempCalibration@vIn,w
  1100  098C  1903               	skipnz
  1101  098D  29B0               	goto	l173
  1102                           
  1103                           ;Analog.c: 187: gainTemp = vOut / vIn;
  1104  098E  085E               	movf	tempCalibration@vIn,w
  1105  098F  00BE               	movwf	___ftdiv@f2
  1106  0990  085F               	movf	tempCalibration@vIn+1,w
  1107  0991  00BF               	movwf	___ftdiv@f2+1
  1108  0992  0860               	movf	tempCalibration@vIn+2,w
  1109  0993  00C0               	movwf	___ftdiv@f2+2
  1110  0994  085B               	movf	tempCalibration@vOut,w
  1111  0995  00C1               	movwf	___ftdiv@f1
  1112  0996  085C               	movf	tempCalibration@vOut+1,w
  1113  0997  00C2               	movwf	___ftdiv@f1+1
  1114  0998  085D               	movf	tempCalibration@vOut+2,w
  1115  0999  00C3               	movwf	___ftdiv@f1+2
  1116  099A  120A  158A  223F   	fcall	___ftdiv
  1117  099D  1283               	bcf	3,5	;RP0=0, select bank0
  1118  099E  1303               	bcf	3,6	;RP1=0, select bank0
  1119  099F  083E               	movf	?___ftdiv,w
  1120  09A0  1683               	bsf	3,5	;RP0=1, select bank1
  1121  09A1  1303               	bcf	3,6	;RP1=0, select bank1
  1122  09A2  00E6               	movwf	_gainTemp^(0+128)
  1123  09A3  1283               	bcf	3,5	;RP0=0, select bank0
  1124  09A4  1303               	bcf	3,6	;RP1=0, select bank0
  1125  09A5  083F               	movf	?___ftdiv+1,w
  1126  09A6  1683               	bsf	3,5	;RP0=1, select bank1
  1127  09A7  1303               	bcf	3,6	;RP1=0, select bank1
  1128  09A8  00E7               	movwf	(_gainTemp+1)^(0+128)
  1129  09A9  1283               	bcf	3,5	;RP0=0, select bank0
  1130  09AA  1303               	bcf	3,6	;RP1=0, select bank0
  1131  09AB  0840               	movf	?___ftdiv+2,w
  1132  09AC  1683               	bsf	3,5	;RP0=1, select bank1
  1133  09AD  1303               	bcf	3,6	;RP1=0, select bank1
  1134  09AE  00E8               	movwf	(_gainTemp+2)^(0+128)
  1135  09AF  0008               	return
  1136  09B0                     l173:	
  1137                           
  1138                           ;Analog.c: 188: else
  1139                           ;Analog.c: 189: {
  1140                           ;Analog.c: 190: (TRISBbits.TRISB6) = 0;
  1141  09B0  1683               	bsf	3,5	;RP0=1, select bank1
  1142  09B1  1303               	bcf	3,6	;RP1=0, select bank1
  1143  09B2  1306               	bcf	6,6	;volatile
  1144                           
  1145                           ;Analog.c: 191: (PORTBbits.RB6) = 1;
  1146  09B3  1283               	bcf	3,5	;RP0=0, select bank0
  1147  09B4  1303               	bcf	3,6	;RP1=0, select bank0
  1148  09B5  1706               	bsf	6,6	;volatile
  1149                           
  1150                           ;Analog.c: 192: return -10;
  1151                           ;	Return value of _tempCalibration is never used
  1152  09B6  0008               	return
  1153  09B7                     __end_of_tempCalibration:	
  1154                           ;Analog.c: 193: }
  1155                           ;Analog.c: 195: return gainTemp;
  1156                           ;	Return value of _tempCalibration is never used
  1157                           
  1158                           
  1159                           	psect	text2
  1160  04A1                     __ptext2:	
  1161 ;; *************** function _fillRegister *****************
  1162 ;; Defined at:
  1163 ;;		line 195 in file "SensorBoard.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;  array           1    wreg     unsigned char 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  array           1   62[BANK1 ] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;		None               void
  1170 ;; Registers used:
  1171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1177 ;;      Params:         0       0       0       0       0
  1178 ;;      Locals:         0       0       4       0       0
  1179 ;;      Temps:          0       0       1       0       0
  1180 ;;      Totals:         0       0       5       0       0
  1181 ;;Total ram usage:        5 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; Hardware stack levels required when called:    8
  1184 ;; This function calls:
  1185 ;;		___fttol
  1186 ;;		_readAccelerometer
  1187 ;;		_readLight
  1188 ;;		_readTemp
  1189 ;; This function is called by:
  1190 ;;		_main
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           
  1195                           ;psect for function _fillRegister
  1196  04A1                     _fillRegister:	
  1197                           
  1198                           ;incstack = 0
  1199 ;; hardware stack exceeded
  1200                           ; Regs used in _fillRegister: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1201                           ;fillRegister@array stored from wreg
  1202  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  1203  04A2  1303               	bcf	3,6	;RP1=0, select bank1
  1204  04A3  00DE               	movwf	fillRegister@array^(0+128)
  1205                           
  1206                           ;SensorBoard.c: 197: switch (array) {
  1207  04A4  2DFE               	goto	l4398
  1208  04A5                     l4388:	
  1209                           ;SensorBoard.c: 198: case Temprature:
  1210                           
  1211                           
  1212                           ;SensorBoard.c: 199: Register[tempL] = (0x00ff & (int) readTemp());
  1213  04A5  120A  158A  2475   	fcall	_readTemp
      +       120A  118A         
  1214  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1215  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1216  04AC  085B               	movf	?_readTemp,w
  1217  04AD  00E3               	movwf	___fttol@f1
  1218  04AE  085C               	movf	?_readTemp+1,w
  1219  04AF  00E4               	movwf	___fttol@f1+1
  1220  04B0  085D               	movf	?_readTemp+2,w
  1221  04B1  00E5               	movwf	___fttol@f1+2
  1222  04B2  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1223  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1224  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1225  04B9  0863               	movf	?___fttol,w
  1226  04BA  1683               	bsf	3,5	;RP0=1, select bank1
  1227  04BB  1303               	bcf	3,6	;RP1=0, select bank1
  1228  04BC  00DD               	movwf	??_fillRegister^(0+128)
  1229  04BD  085D               	movf	??_fillRegister^(0+128),w
  1230  04BE  1683               	bsf	3,5	;RP0=1, select bank3
  1231  04BF  1703               	bsf	3,6	;RP1=1, select bank3
  1232  04C0  0091               	movwf	(_Register^(0+384)+1)
  1233                           
  1234                           ;SensorBoard.c: 200: Register[tempH] = ((int) readTemp() >> 8)&0x00ff;
  1235  04C1  120A  158A  2475   	fcall	_readTemp
      +       120A  118A         
  1236  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  1237  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  1238  04C8  085B               	movf	?_readTemp,w
  1239  04C9  00E3               	movwf	___fttol@f1
  1240  04CA  085C               	movf	?_readTemp+1,w
  1241  04CB  00E4               	movwf	___fttol@f1+1
  1242  04CC  085D               	movf	?_readTemp+2,w
  1243  04CD  00E5               	movwf	___fttol@f1+2
  1244  04CE  120A  158A  23B3   	fcall	___fttol
  1245  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1246  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1247  04D3  0864               	movf	?___fttol+1,w
  1248  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  1249  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  1250  04D6  00DD               	movwf	??_fillRegister^(0+128)
  1251  04D7  085D               	movf	??_fillRegister^(0+128),w
  1252  04D8  1683               	bsf	3,5	;RP0=1, select bank3
  1253  04D9  1703               	bsf	3,6	;RP1=1, select bank3
  1254  04DA  0092               	movwf	(_Register^(0+384)+2)
  1255                           
  1256                           ;SensorBoard.c: 201: break;
  1257  04DB  0008               	return
  1258  04DC                     l4390:	
  1259                           ;SensorBoard.c: 203: case Light:
  1260                           
  1261                           
  1262                           ;SensorBoard.c: 204: Register[lightL] = 0x00ff & (int) readLight();
  1263  04DC  120A  118A  260B   	fcall	_readLight
      +       120A  118A         
  1264  04E1  1683               	bsf	3,5	;RP0=1, select bank1
  1265  04E2  1303               	bcf	3,6	;RP1=0, select bank1
  1266  04E3  0851               	movf	?_readLight^(0+128),w
  1267  04E4  00DF               	movwf	_fillRegister$1139^(0+128)
  1268  04E5  0852               	movf	(?_readLight+1)^(0+128),w
  1269  04E6  00E0               	movwf	(_fillRegister$1139+1)^(0+128)
  1270  04E7  0853               	movf	(?_readLight+2)^(0+128),w
  1271  04E8  00E1               	movwf	(_fillRegister$1139+2)^(0+128)
  1272                           
  1273                           ;SensorBoard.c: 204: Register[lightL] = 0x00ff & (int) readLight();
  1274  04E9  085F               	movf	_fillRegister$1139^(0+128),w
  1275  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1276  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1277  04EC  00E3               	movwf	___fttol@f1
  1278  04ED  1683               	bsf	3,5	;RP0=1, select bank1
  1279  04EE  1303               	bcf	3,6	;RP1=0, select bank1
  1280  04EF  0860               	movf	(_fillRegister$1139+1)^(0+128),w
  1281  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1282  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1283  04F2  00E4               	movwf	___fttol@f1+1
  1284  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  1285  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  1286  04F5  0861               	movf	(_fillRegister$1139+2)^(0+128),w
  1287  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  1288  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  1289  04F8  00E5               	movwf	___fttol@f1+2
  1290  04F9  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1291  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1292  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1293  0500  0863               	movf	?___fttol,w
  1294  0501  1683               	bsf	3,5	;RP0=1, select bank1
  1295  0502  1303               	bcf	3,6	;RP1=0, select bank1
  1296  0503  00DD               	movwf	??_fillRegister^(0+128)
  1297  0504  085D               	movf	??_fillRegister^(0+128),w
  1298  0505  1683               	bsf	3,5	;RP0=1, select bank3
  1299  0506  1703               	bsf	3,6	;RP1=1, select bank3
  1300  0507  0099               	movwf	(_Register^(0+384)+9)
  1301                           
  1302                           ;SensorBoard.c: 205: Register[lightH] = ((int) readLight() >> 8)&0x00ff;
  1303  0508  120A  118A  260B   	fcall	_readLight
      +       120A  118A         
  1304  050D  1683               	bsf	3,5	;RP0=1, select bank1
  1305  050E  1303               	bcf	3,6	;RP1=0, select bank1
  1306  050F  0851               	movf	?_readLight^(0+128),w
  1307  0510  00DF               	movwf	_fillRegister$1139^(0+128)
  1308  0511  0852               	movf	(?_readLight+1)^(0+128),w
  1309  0512  00E0               	movwf	(_fillRegister$1139+1)^(0+128)
  1310  0513  0853               	movf	(?_readLight+2)^(0+128),w
  1311  0514  00E1               	movwf	(_fillRegister$1139+2)^(0+128)
  1312                           
  1313                           ;SensorBoard.c: 205: Register[lightH] = ((int) readLight() >> 8)&0x00ff;
  1314  0515  085F               	movf	_fillRegister$1139^(0+128),w
  1315  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1316  0517  1303               	bcf	3,6	;RP1=0, select bank0
  1317  0518  00E3               	movwf	___fttol@f1
  1318  0519  1683               	bsf	3,5	;RP0=1, select bank1
  1319  051A  1303               	bcf	3,6	;RP1=0, select bank1
  1320  051B  0860               	movf	(_fillRegister$1139+1)^(0+128),w
  1321  051C  1283               	bcf	3,5	;RP0=0, select bank0
  1322  051D  1303               	bcf	3,6	;RP1=0, select bank0
  1323  051E  00E4               	movwf	___fttol@f1+1
  1324  051F  1683               	bsf	3,5	;RP0=1, select bank1
  1325  0520  1303               	bcf	3,6	;RP1=0, select bank1
  1326  0521  0861               	movf	(_fillRegister$1139+2)^(0+128),w
  1327  0522  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0523  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0524  00E5               	movwf	___fttol@f1+2
  1330  0525  120A  158A  23B3   	fcall	___fttol
  1331  0528  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0529  1303               	bcf	3,6	;RP1=0, select bank0
  1333  052A  0864               	movf	?___fttol+1,w
  1334  052B  1683               	bsf	3,5	;RP0=1, select bank1
  1335  052C  1303               	bcf	3,6	;RP1=0, select bank1
  1336  052D  00DD               	movwf	??_fillRegister^(0+128)
  1337  052E  085D               	movf	??_fillRegister^(0+128),w
  1338  052F  1683               	bsf	3,5	;RP0=1, select bank3
  1339  0530  1703               	bsf	3,6	;RP1=1, select bank3
  1340  0531  009A               	movwf	(_Register^(0+384)+10)
  1341                           
  1342                           ;SensorBoard.c: 206: break;
  1343  0532  0008               	return
  1344  0533                     l4396:	
  1345                           ;SensorBoard.c: 208: case Accelerometer:
  1346                           
  1347                           
  1348                           ;SensorBoard.c: 209: Register[accXL] = 0x00ff & (int) readAccelerometer((2));
  1349  0533  3002               	movlw	2
  1350  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0536  00D1               	movwf	readAccelerometer@axis
  1353  0537  3000               	movlw	0
  1354  0538  00D2               	movwf	readAccelerometer@axis+1
  1355  0539  160A  118A  26FB   	fcall	_readAccelerometer
      +       120A  118A         
  1356  053E  1283               	bcf	3,5	;RP0=0, select bank0
  1357  053F  1303               	bcf	3,6	;RP1=0, select bank0
  1358  0540  0851               	movf	?_readAccelerometer,w
  1359  0541  00E3               	movwf	___fttol@f1
  1360  0542  0852               	movf	?_readAccelerometer+1,w
  1361  0543  00E4               	movwf	___fttol@f1+1
  1362  0544  0853               	movf	?_readAccelerometer+2,w
  1363  0545  00E5               	movwf	___fttol@f1+2
  1364  0546  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1365  054B  1283               	bcf	3,5	;RP0=0, select bank0
  1366  054C  1303               	bcf	3,6	;RP1=0, select bank0
  1367  054D  0863               	movf	?___fttol,w
  1368  054E  1683               	bsf	3,5	;RP0=1, select bank1
  1369  054F  1303               	bcf	3,6	;RP1=0, select bank1
  1370  0550  00DD               	movwf	??_fillRegister^(0+128)
  1371  0551  085D               	movf	??_fillRegister^(0+128),w
  1372  0552  1683               	bsf	3,5	;RP0=1, select bank3
  1373  0553  1703               	bsf	3,6	;RP1=1, select bank3
  1374  0554  0093               	movwf	(_Register^(0+384)+3)
  1375                           
  1376                           ;SensorBoard.c: 210: Register[accXH] = ((int) readAccelerometer((2)) >> 8)&0x00ff;
  1377  0555  3002               	movlw	2
  1378  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1379  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1380  0558  00D1               	movwf	readAccelerometer@axis
  1381  0559  3000               	movlw	0
  1382  055A  00D2               	movwf	readAccelerometer@axis+1
  1383  055B  160A  118A  26FB   	fcall	_readAccelerometer
      +       120A  118A         
  1384  0560  1283               	bcf	3,5	;RP0=0, select bank0
  1385  0561  1303               	bcf	3,6	;RP1=0, select bank0
  1386  0562  0851               	movf	?_readAccelerometer,w
  1387  0563  00E3               	movwf	___fttol@f1
  1388  0564  0852               	movf	?_readAccelerometer+1,w
  1389  0565  00E4               	movwf	___fttol@f1+1
  1390  0566  0853               	movf	?_readAccelerometer+2,w
  1391  0567  00E5               	movwf	___fttol@f1+2
  1392  0568  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1393  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1394  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1395  056F  0864               	movf	?___fttol+1,w
  1396  0570  1683               	bsf	3,5	;RP0=1, select bank1
  1397  0571  1303               	bcf	3,6	;RP1=0, select bank1
  1398  0572  00DD               	movwf	??_fillRegister^(0+128)
  1399  0573  085D               	movf	??_fillRegister^(0+128),w
  1400  0574  1683               	bsf	3,5	;RP0=1, select bank3
  1401  0575  1703               	bsf	3,6	;RP1=1, select bank3
  1402  0576  0094               	movwf	(_Register^(0+384)+4)
  1403                           
  1404                           ;SensorBoard.c: 211: Register[accYL] = 0x00ff & (int) readAccelerometer((3));
  1405  0577  3003               	movlw	3
  1406  0578  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0579  1303               	bcf	3,6	;RP1=0, select bank0
  1408  057A  00D1               	movwf	readAccelerometer@axis
  1409  057B  3000               	movlw	0
  1410  057C  00D2               	movwf	readAccelerometer@axis+1
  1411  057D  160A  118A  26FB   	fcall	_readAccelerometer
      +       120A  118A         
  1412  0582  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0583  1303               	bcf	3,6	;RP1=0, select bank0
  1414  0584  0851               	movf	?_readAccelerometer,w
  1415  0585  00E3               	movwf	___fttol@f1
  1416  0586  0852               	movf	?_readAccelerometer+1,w
  1417  0587  00E4               	movwf	___fttol@f1+1
  1418  0588  0853               	movf	?_readAccelerometer+2,w
  1419  0589  00E5               	movwf	___fttol@f1+2
  1420  058A  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1421  058F  1283               	bcf	3,5	;RP0=0, select bank0
  1422  0590  1303               	bcf	3,6	;RP1=0, select bank0
  1423  0591  0863               	movf	?___fttol,w
  1424  0592  1683               	bsf	3,5	;RP0=1, select bank1
  1425  0593  1303               	bcf	3,6	;RP1=0, select bank1
  1426  0594  00DD               	movwf	??_fillRegister^(0+128)
  1427  0595  085D               	movf	??_fillRegister^(0+128),w
  1428  0596  1683               	bsf	3,5	;RP0=1, select bank3
  1429  0597  1703               	bsf	3,6	;RP1=1, select bank3
  1430  0598  0095               	movwf	(_Register^(0+384)+5)
  1431                           
  1432                           ;SensorBoard.c: 212: Register[accYH] = ((int) readAccelerometer((3)) >> 8)&0x00ff;
  1433  0599  3003               	movlw	3
  1434  059A  1283               	bcf	3,5	;RP0=0, select bank0
  1435  059B  1303               	bcf	3,6	;RP1=0, select bank0
  1436  059C  00D1               	movwf	readAccelerometer@axis
  1437  059D  3000               	movlw	0
  1438  059E  00D2               	movwf	readAccelerometer@axis+1
  1439  059F  160A  118A  26FB   	fcall	_readAccelerometer
      +       120A  118A         
  1440  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1441  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1442  05A6  0851               	movf	?_readAccelerometer,w
  1443  05A7  00E3               	movwf	___fttol@f1
  1444  05A8  0852               	movf	?_readAccelerometer+1,w
  1445  05A9  00E4               	movwf	___fttol@f1+1
  1446  05AA  0853               	movf	?_readAccelerometer+2,w
  1447  05AB  00E5               	movwf	___fttol@f1+2
  1448  05AC  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1449  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  1450  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  1451  05B3  0864               	movf	?___fttol+1,w
  1452  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  1453  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  1454  05B6  00DD               	movwf	??_fillRegister^(0+128)
  1455  05B7  085D               	movf	??_fillRegister^(0+128),w
  1456  05B8  1683               	bsf	3,5	;RP0=1, select bank3
  1457  05B9  1703               	bsf	3,6	;RP1=1, select bank3
  1458  05BA  0096               	movwf	(_Register^(0+384)+6)
  1459                           
  1460                           ;SensorBoard.c: 213: Register[accZL] = 0x00ff & (int) readAccelerometer((4));
  1461  05BB  3004               	movlw	4
  1462  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1463  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1464  05BE  00D1               	movwf	readAccelerometer@axis
  1465  05BF  3000               	movlw	0
  1466  05C0  00D2               	movwf	readAccelerometer@axis+1
  1467  05C1  160A  118A  26FB   	fcall	_readAccelerometer
      +       120A  118A         
  1468  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  1469  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  1470  05C8  0851               	movf	?_readAccelerometer,w
  1471  05C9  00E3               	movwf	___fttol@f1
  1472  05CA  0852               	movf	?_readAccelerometer+1,w
  1473  05CB  00E4               	movwf	___fttol@f1+1
  1474  05CC  0853               	movf	?_readAccelerometer+2,w
  1475  05CD  00E5               	movwf	___fttol@f1+2
  1476  05CE  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  1477  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  1478  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  1479  05D5  0863               	movf	?___fttol,w
  1480  05D6  1683               	bsf	3,5	;RP0=1, select bank1
  1481  05D7  1303               	bcf	3,6	;RP1=0, select bank1
  1482  05D8  00DD               	movwf	??_fillRegister^(0+128)
  1483  05D9  085D               	movf	??_fillRegister^(0+128),w
  1484  05DA  1683               	bsf	3,5	;RP0=1, select bank3
  1485  05DB  1703               	bsf	3,6	;RP1=1, select bank3
  1486  05DC  0097               	movwf	(_Register^(0+384)+7)
  1487                           
  1488                           ;SensorBoard.c: 214: Register[accZH] = ((int) readAccelerometer((4)) >> 8)&0x00ff;
  1489  05DD  3004               	movlw	4
  1490  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1491  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1492  05E0  00D1               	movwf	readAccelerometer@axis
  1493  05E1  3000               	movlw	0
  1494  05E2  00D2               	movwf	readAccelerometer@axis+1
  1495  05E3  160A  118A  26FB   	fcall	_readAccelerometer
      +       120A  118A         
  1496  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1497  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1498  05EA  0851               	movf	?_readAccelerometer,w
  1499  05EB  00E3               	movwf	___fttol@f1
  1500  05EC  0852               	movf	?_readAccelerometer+1,w
  1501  05ED  00E4               	movwf	___fttol@f1+1
  1502  05EE  0853               	movf	?_readAccelerometer+2,w
  1503  05EF  00E5               	movwf	___fttol@f1+2
  1504  05F0  120A  158A  23B3   	fcall	___fttol
  1505  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1506  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1507  05F5  0864               	movf	?___fttol+1,w
  1508  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  1509  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  1510  05F8  00DD               	movwf	??_fillRegister^(0+128)
  1511  05F9  085D               	movf	??_fillRegister^(0+128),w
  1512  05FA  1683               	bsf	3,5	;RP0=1, select bank3
  1513  05FB  1703               	bsf	3,6	;RP1=1, select bank3
  1514  05FC  0098               	movwf	(_Register^(0+384)+8)
  1515                           
  1516                           ;SensorBoard.c: 215: }
  1517  05FD  0008               	return
  1518  05FE                     l4398:	
  1519  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  1520  05FF  085E               	movf	fillRegister@array^(0+128),w
  1521                           
  1522                           ; Switch size 1, requested type "space"
  1523                           ; Number of cases is 3, Range of values is 0 to 2
  1524                           ; switch strategies available:
  1525                           ; Name         Instructions Cycles
  1526                           ; simple_byte           10     6 (average)
  1527                           ; direct_byte           17     8 (fixed)
  1528                           ; jumptable            260     6 (fixed)
  1529                           ;	Chosen strategy is simple_byte
  1530  0600  3A00               	xorlw	0	; case 0
  1531  0601  1903               	skipnz
  1532  0602  2CA5               	goto	l4388
  1533  0603  3A01               	xorlw	1	; case 1
  1534  0604  1903               	skipnz
  1535  0605  2CDC               	goto	l4390
  1536  0606  3A03               	xorlw	3	; case 2
  1537  0607  1903               	skipnz
  1538  0608  2D33               	goto	l4396
  1539  0609  2E0A               	goto	l90
  1540  060A                     l90:	
  1541  060A  0008               	return
  1542  060B                     __end_of_fillRegister:	
  1543                           
  1544                           	psect	text3
  1545  0C75                     __ptext3:	
  1546 ;; *************** function _readTemp *****************
  1547 ;; Defined at:
  1548 ;;		line 199 in file "Analog.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  i               2   62[BANK0 ] int 
  1553 ;;  temp            3   64[BANK0 ] float 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  3   59[BANK0 ] float 
  1556 ;; Registers used:
  1557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1563 ;;      Params:         0       3       0       0       0
  1564 ;;      Locals:         0       5       0       0       0
  1565 ;;      Temps:          0       0       0       0       0
  1566 ;;      Totals:         0       8       0       0       0
  1567 ;;Total ram usage:        8 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    5
  1570 ;; This function calls:
  1571 ;;		___awtoft
  1572 ;;		___ftadd
  1573 ;;		___ftdiv
  1574 ;;		___ftmul
  1575 ;;		_pointToVoltage
  1576 ;;		_read
  1577 ;; This function is called by:
  1578 ;;		_fillRegister
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           
  1583                           ;psect for function _readTemp
  1584  0C75                     _readTemp:	
  1585                           
  1586                           ;Analog.c: 200: float temp = 0;
  1587                           
  1588                           ;incstack = 0
  1589                           ; Regs used in _readTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1590  0C75  3000               	movlw	0
  1591  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0C78  00E0               	movwf	readTemp@temp
  1594  0C79  3000               	movlw	0
  1595  0C7A  00E1               	movwf	readTemp@temp+1
  1596  0C7B  3000               	movlw	0
  1597  0C7C  00E2               	movwf	readTemp@temp+2
  1598                           
  1599                           ;Analog.c: 202: for (int i = 0; i < 5; i++)
  1600  0C7D  01DE               	clrf	readTemp@i
  1601  0C7E  01DF               	clrf	readTemp@i+1
  1602  0C7F  085F               	movf	readTemp@i+1,w
  1603  0C80  3A80               	xorlw	128
  1604  0C81  00FF               	movwf	127
  1605  0C82  3080               	movlw	128
  1606  0C83  027F               	subwf	127,w
  1607  0C84  1D03               	skipz
  1608  0C85  2C88               	goto	u3645
  1609  0C86  3005               	movlw	5
  1610  0C87  025E               	subwf	readTemp@i,w
  1611  0C88                     u3645:	
  1612  0C88  1803               	btfsc	3,0
  1613  0C89  2CCF               	goto	l4338
  1614  0C8A                     l4332:	
  1615                           
  1616                           ;Analog.c: 203: temp = (float) read((1), 0) + temp;
  1617  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0C8C  0860               	movf	readTemp@temp,w
  1620  0C8D  00CE               	movwf	___ftadd@f1
  1621  0C8E  0861               	movf	readTemp@temp+1,w
  1622  0C8F  00CF               	movwf	___ftadd@f1+1
  1623  0C90  0862               	movf	readTemp@temp+2,w
  1624  0C91  00D0               	movwf	___ftadd@f1+2
  1625  0C92  01A2               	clrf	read@justification
  1626  0C93  3001               	movlw	1
  1627  0C94  00A0               	movwf	read@channel
  1628  0C95  3000               	movlw	0
  1629  0C96  00A1               	movwf	read@channel+1
  1630  0C97  120A  158A  22F7   	fcall	_read
      +       120A  158A         
  1631  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  1633  0C9E  0821               	movf	?_read+1,w
  1634  0C9F  01A9               	clrf	___awtoft@c+1
  1635  0CA0  07A9               	addwf	___awtoft@c+1,f
  1636  0CA1  0820               	movf	?_read,w
  1637  0CA2  01A8               	clrf	___awtoft@c
  1638  0CA3  07A8               	addwf	___awtoft@c,f
  1639  0CA4  160A  118A  2603   	fcall	___awtoft
      +       120A  158A         
  1640  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0CAB  0828               	movf	?___awtoft,w
  1643  0CAC  00D1               	movwf	___ftadd@f2
  1644  0CAD  0829               	movf	?___awtoft+1,w
  1645  0CAE  00D2               	movwf	___ftadd@f2+1
  1646  0CAF  082A               	movf	?___awtoft+2,w
  1647  0CB0  00D3               	movwf	___ftadd@f2+2
  1648  0CB1  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  1649  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0CB8  084E               	movf	?___ftadd,w
  1652  0CB9  00E0               	movwf	readTemp@temp
  1653  0CBA  084F               	movf	?___ftadd+1,w
  1654  0CBB  00E1               	movwf	readTemp@temp+1
  1655  0CBC  0850               	movf	?___ftadd+2,w
  1656  0CBD  00E2               	movwf	readTemp@temp+2
  1657  0CBE  3001               	movlw	1
  1658  0CBF  07DE               	addwf	readTemp@i,f
  1659  0CC0  1803               	skipnc
  1660  0CC1  0ADF               	incf	readTemp@i+1,f
  1661  0CC2  3000               	movlw	0
  1662  0CC3  07DF               	addwf	readTemp@i+1,f
  1663  0CC4  085F               	movf	readTemp@i+1,w
  1664  0CC5  3A80               	xorlw	128
  1665  0CC6  00FF               	movwf	127
  1666  0CC7  3080               	movlw	128
  1667  0CC8  027F               	subwf	127,w
  1668  0CC9  1D03               	skipz
  1669  0CCA  2CCD               	goto	u3655
  1670  0CCB  3005               	movlw	5
  1671  0CCC  025E               	subwf	readTemp@i,w
  1672  0CCD                     u3655:	
  1673  0CCD  1C03               	skipc
  1674  0CCE  2C8A               	goto	l4332
  1675  0CCF                     l4338:	
  1676                           
  1677                           ;Analog.c: 205: temp = temp / 5;
  1678  0CCF  3000               	movlw	0
  1679  0CD0  1283               	bcf	3,5	;RP0=0, select bank0
  1680  0CD1  1303               	bcf	3,6	;RP1=0, select bank0
  1681  0CD2  00BE               	movwf	___ftdiv@f2
  1682  0CD3  30A0               	movlw	160
  1683  0CD4  00BF               	movwf	___ftdiv@f2+1
  1684  0CD5  3040               	movlw	64
  1685  0CD6  00C0               	movwf	___ftdiv@f2+2
  1686  0CD7  0860               	movf	readTemp@temp,w
  1687  0CD8  00C1               	movwf	___ftdiv@f1
  1688  0CD9  0861               	movf	readTemp@temp+1,w
  1689  0CDA  00C2               	movwf	___ftdiv@f1+1
  1690  0CDB  0862               	movf	readTemp@temp+2,w
  1691  0CDC  00C3               	movwf	___ftdiv@f1+2
  1692  0CDD  120A  158A  223F   	fcall	___ftdiv
      +       120A  158A         
  1693  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  1694  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  1695  0CE4  083E               	movf	?___ftdiv,w
  1696  0CE5  00E0               	movwf	readTemp@temp
  1697  0CE6  083F               	movf	?___ftdiv+1,w
  1698  0CE7  00E1               	movwf	readTemp@temp+1
  1699  0CE8  0840               	movf	?___ftdiv+2,w
  1700  0CE9  00E2               	movwf	readTemp@temp+2
  1701                           
  1702                           ;Analog.c: 206: temp = pointToVoltage(temp);
  1703  0CEA  0860               	movf	readTemp@temp,w
  1704  0CEB  00CE               	movwf	pointToVoltage@point
  1705  0CEC  0861               	movf	readTemp@temp+1,w
  1706  0CED  00CF               	movwf	pointToVoltage@point+1
  1707  0CEE  0862               	movf	readTemp@temp+2,w
  1708  0CEF  00D0               	movwf	pointToVoltage@point+2
  1709  0CF0  160A  118A  2628   	fcall	_pointToVoltage
      +       120A  158A         
  1710  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
  1711  0CF6  1303               	bcf	3,6	;RP1=0, select bank0
  1712  0CF7  084E               	movf	?_pointToVoltage,w
  1713  0CF8  00E0               	movwf	readTemp@temp
  1714  0CF9  084F               	movf	?_pointToVoltage+1,w
  1715  0CFA  00E1               	movwf	readTemp@temp+1
  1716  0CFB  0850               	movf	?_pointToVoltage+2,w
  1717  0CFC  00E2               	movwf	readTemp@temp+2
  1718                           
  1719                           ;Analog.c: 207: temp = (gainTemp * temp) + (-23.15);
  1720  0CFD  3033               	movlw	51
  1721  0CFE  00CE               	movwf	___ftadd@f1
  1722  0CFF  30B9               	movlw	185
  1723  0D00  00CF               	movwf	___ftadd@f1+1
  1724  0D01  30C1               	movlw	193
  1725  0D02  00D0               	movwf	___ftadd@f1+2
  1726  0D03  0860               	movf	readTemp@temp,w
  1727  0D04  00AE               	movwf	___ftmul@f1
  1728  0D05  0861               	movf	readTemp@temp+1,w
  1729  0D06  00AF               	movwf	___ftmul@f1+1
  1730  0D07  0862               	movf	readTemp@temp+2,w
  1731  0D08  00B0               	movwf	___ftmul@f1+2
  1732  0D09  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0D0A  1303               	bcf	3,6	;RP1=0, select bank1
  1734  0D0B  0866               	movf	_gainTemp^(0+128),w
  1735  0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0D0E  00B1               	movwf	___ftmul@f2
  1738  0D0F  1683               	bsf	3,5	;RP0=1, select bank1
  1739  0D10  1303               	bcf	3,6	;RP1=0, select bank1
  1740  0D11  0867               	movf	(_gainTemp+1)^(0+128),w
  1741  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  1742  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  1743  0D14  00B2               	movwf	___ftmul@f2+1
  1744  0D15  1683               	bsf	3,5	;RP0=1, select bank1
  1745  0D16  1303               	bcf	3,6	;RP1=0, select bank1
  1746  0D17  0868               	movf	(_gainTemp+2)^(0+128),w
  1747  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  1748  0D19  1303               	bcf	3,6	;RP1=0, select bank0
  1749  0D1A  00B3               	movwf	___ftmul@f2+2
  1750  0D1B  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  1751  0D20  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0D21  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0D22  082E               	movf	?___ftmul,w
  1754  0D23  00D1               	movwf	___ftadd@f2
  1755  0D24  082F               	movf	?___ftmul+1,w
  1756  0D25  00D2               	movwf	___ftadd@f2+1
  1757  0D26  0830               	movf	?___ftmul+2,w
  1758  0D27  00D3               	movwf	___ftadd@f2+2
  1759  0D28  120A  158A  26F7   	fcall	___ftadd
  1760  0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  1761  0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  1762  0D2D  084E               	movf	?___ftadd,w
  1763  0D2E  00E0               	movwf	readTemp@temp
  1764  0D2F  084F               	movf	?___ftadd+1,w
  1765  0D30  00E1               	movwf	readTemp@temp+1
  1766  0D31  0850               	movf	?___ftadd+2,w
  1767  0D32  00E2               	movwf	readTemp@temp+2
  1768                           
  1769                           ;Analog.c: 209: return temp;
  1770  0D33  0860               	movf	readTemp@temp,w
  1771  0D34  00DB               	movwf	?_readTemp
  1772  0D35  0861               	movf	readTemp@temp+1,w
  1773  0D36  00DC               	movwf	?_readTemp+1
  1774  0D37  0862               	movf	readTemp@temp+2,w
  1775  0D38  00DD               	movwf	?_readTemp+2
  1776  0D39  0008               	return
  1777  0D3A                     __end_of_readTemp:	
  1778                           
  1779                           	psect	text4
  1780  060B                     __ptext4:	
  1781 ;; *************** function _readLight *****************
  1782 ;; Defined at:
  1783 ;;		line 161 in file "Analog.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;  lightVal        3   58[BANK1 ] float 
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  3   49[BANK1 ] float 
  1790 ;; Registers used:
  1791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1797 ;;      Params:         0       0       3       0       0
  1798 ;;      Locals:         0       0       9       0       0
  1799 ;;      Temps:          0       0       0       0       0
  1800 ;;      Totals:         0       0      12       0       0
  1801 ;;Total ram usage:       12 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    7
  1804 ;; This function calls:
  1805 ;;		___awtoft
  1806 ;;		___ftadd
  1807 ;;		___ftdiv
  1808 ;;		___ftmul
  1809 ;;		_pointToVoltage
  1810 ;;		_pow
  1811 ;;		_read
  1812 ;; This function is called by:
  1813 ;;		_fillRegister
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           
  1818                           ;psect for function _readLight
  1819  060B                     _readLight:	
  1820                           
  1821                           ;Analog.c: 162: double lightVal;
  1822                           ;Analog.c: 163: lightVal = (pointToVoltage((const double) read((0), 0)) * (-4));
  1823                           
  1824                           ;incstack = 0
  1825 ;; hardware stack exceeded
  1826                           ; Regs used in _readLight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1827  060B  1283               	bcf	3,5	;RP0=0, select bank0
  1828  060C  1303               	bcf	3,6	;RP1=0, select bank0
  1829  060D  01A2               	clrf	read@justification
  1830  060E  3000               	movlw	0
  1831  060F  00A0               	movwf	read@channel
  1832  0610  3000               	movlw	0
  1833  0611  00A1               	movwf	read@channel+1
  1834  0612  120A  158A  22F7   	fcall	_read
      +       120A  118A         
  1835  0617  1283               	bcf	3,5	;RP0=0, select bank0
  1836  0618  1303               	bcf	3,6	;RP1=0, select bank0
  1837  0619  0821               	movf	?_read+1,w
  1838  061A  01A9               	clrf	___awtoft@c+1
  1839  061B  07A9               	addwf	___awtoft@c+1,f
  1840  061C  0820               	movf	?_read,w
  1841  061D  01A8               	clrf	___awtoft@c
  1842  061E  07A8               	addwf	___awtoft@c,f
  1843  061F  160A  118A  2603   	fcall	___awtoft
      +       120A  118A         
  1844  0624  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0625  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0626  0828               	movf	?___awtoft,w
  1847  0627  00CE               	movwf	pointToVoltage@point
  1848  0628  0829               	movf	?___awtoft+1,w
  1849  0629  00CF               	movwf	pointToVoltage@point+1
  1850  062A  082A               	movf	?___awtoft+2,w
  1851  062B  00D0               	movwf	pointToVoltage@point+2
  1852  062C  160A  118A  2628   	fcall	_pointToVoltage
      +       120A  118A         
  1853  0631  1283               	bcf	3,5	;RP0=0, select bank0
  1854  0632  1303               	bcf	3,6	;RP1=0, select bank0
  1855  0633  084E               	movf	?_pointToVoltage,w
  1856  0634  1683               	bsf	3,5	;RP0=1, select bank1
  1857  0635  1303               	bcf	3,6	;RP1=0, select bank1
  1858  0636  00D4               	movwf	_readLight$1140^(0+128)
  1859  0637  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0638  1303               	bcf	3,6	;RP1=0, select bank0
  1861  0639  084F               	movf	?_pointToVoltage+1,w
  1862  063A  1683               	bsf	3,5	;RP0=1, select bank1
  1863  063B  1303               	bcf	3,6	;RP1=0, select bank1
  1864  063C  00D5               	movwf	(_readLight$1140+1)^(0+128)
  1865  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1866  063E  1303               	bcf	3,6	;RP1=0, select bank0
  1867  063F  0850               	movf	?_pointToVoltage+2,w
  1868  0640  1683               	bsf	3,5	;RP0=1, select bank1
  1869  0641  1303               	bcf	3,6	;RP1=0, select bank1
  1870  0642  00D6               	movwf	(_readLight$1140+2)^(0+128)
  1871                           
  1872                           ;Analog.c: 162: double lightVal;
  1873                           ;Analog.c: 163: lightVal = (pointToVoltage((const double) read((0), 0)) * (-4));
  1874  0643  3000               	movlw	0
  1875  0644  1283               	bcf	3,5	;RP0=0, select bank0
  1876  0645  1303               	bcf	3,6	;RP1=0, select bank0
  1877  0646  00AE               	movwf	___ftmul@f1
  1878  0647  3080               	movlw	128
  1879  0648  00AF               	movwf	___ftmul@f1+1
  1880  0649  30C0               	movlw	192
  1881  064A  00B0               	movwf	___ftmul@f1+2
  1882  064B  1683               	bsf	3,5	;RP0=1, select bank1
  1883  064C  1303               	bcf	3,6	;RP1=0, select bank1
  1884  064D  0854               	movf	_readLight$1140^(0+128),w
  1885  064E  1283               	bcf	3,5	;RP0=0, select bank0
  1886  064F  1303               	bcf	3,6	;RP1=0, select bank0
  1887  0650  00B1               	movwf	___ftmul@f2
  1888  0651  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0652  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0653  0855               	movf	(_readLight$1140+1)^(0+128),w
  1891  0654  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0655  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0656  00B2               	movwf	___ftmul@f2+1
  1894  0657  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0658  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0659  0856               	movf	(_readLight$1140+2)^(0+128),w
  1897  065A  1283               	bcf	3,5	;RP0=0, select bank0
  1898  065B  1303               	bcf	3,6	;RP1=0, select bank0
  1899  065C  00B3               	movwf	___ftmul@f2+2
  1900  065D  120A  118A  2718   	fcall	___ftmul
      +       120A  118A         
  1901  0662  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0663  1303               	bcf	3,6	;RP1=0, select bank0
  1903  0664  082E               	movf	?___ftmul,w
  1904  0665  1683               	bsf	3,5	;RP0=1, select bank1
  1905  0666  1303               	bcf	3,6	;RP1=0, select bank1
  1906  0667  00DA               	movwf	readLight@lightVal^(0+128)
  1907  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1908  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1909  066A  082F               	movf	?___ftmul+1,w
  1910  066B  1683               	bsf	3,5	;RP0=1, select bank1
  1911  066C  1303               	bcf	3,6	;RP1=0, select bank1
  1912  066D  00DB               	movwf	(readLight@lightVal+1)^(0+128)
  1913  066E  1283               	bcf	3,5	;RP0=0, select bank0
  1914  066F  1303               	bcf	3,6	;RP1=0, select bank0
  1915  0670  0830               	movf	?___ftmul+2,w
  1916  0671  1683               	bsf	3,5	;RP0=1, select bank1
  1917  0672  1303               	bcf	3,6	;RP1=0, select bank1
  1918  0673  00DC               	movwf	(readLight@lightVal+2)^(0+128)
  1919                           
  1920                           ;Analog.c: 164: lightVal = lightVal / (2.22) + (10);
  1921  0674  3000               	movlw	0
  1922  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1923  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1924  0677  00CE               	movwf	___ftadd@f1
  1925  0678  3020               	movlw	32
  1926  0679  00CF               	movwf	___ftadd@f1+1
  1927  067A  3041               	movlw	65
  1928  067B  00D0               	movwf	___ftadd@f1+2
  1929  067C  3014               	movlw	20
  1930  067D  00BE               	movwf	___ftdiv@f2
  1931  067E  300E               	movlw	14
  1932  067F  00BF               	movwf	___ftdiv@f2+1
  1933  0680  3040               	movlw	64
  1934  0681  00C0               	movwf	___ftdiv@f2+2
  1935  0682  1683               	bsf	3,5	;RP0=1, select bank1
  1936  0683  1303               	bcf	3,6	;RP1=0, select bank1
  1937  0684  085A               	movf	readLight@lightVal^(0+128),w
  1938  0685  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0686  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0687  00C1               	movwf	___ftdiv@f1
  1941  0688  1683               	bsf	3,5	;RP0=1, select bank1
  1942  0689  1303               	bcf	3,6	;RP1=0, select bank1
  1943  068A  085B               	movf	(readLight@lightVal+1)^(0+128),w
  1944  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1945  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1946  068D  00C2               	movwf	___ftdiv@f1+1
  1947  068E  1683               	bsf	3,5	;RP0=1, select bank1
  1948  068F  1303               	bcf	3,6	;RP1=0, select bank1
  1949  0690  085C               	movf	(readLight@lightVal+2)^(0+128),w
  1950  0691  1283               	bcf	3,5	;RP0=0, select bank0
  1951  0692  1303               	bcf	3,6	;RP1=0, select bank0
  1952  0693  00C3               	movwf	___ftdiv@f1+2
  1953  0694  120A  158A  223F   	fcall	___ftdiv
      +       120A  118A         
  1954  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1955  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1956  069B  083E               	movf	?___ftdiv,w
  1957  069C  00D1               	movwf	___ftadd@f2
  1958  069D  083F               	movf	?___ftdiv+1,w
  1959  069E  00D2               	movwf	___ftadd@f2+1
  1960  069F  0840               	movf	?___ftdiv+2,w
  1961  06A0  00D3               	movwf	___ftadd@f2+2
  1962  06A1  120A  158A  26F7   	fcall	___ftadd
      +       120A  118A         
  1963  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1964  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1965  06A8  084E               	movf	?___ftadd,w
  1966  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  1967  06AA  1303               	bcf	3,6	;RP1=0, select bank1
  1968  06AB  00DA               	movwf	readLight@lightVal^(0+128)
  1969  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1970  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1971  06AE  084F               	movf	?___ftadd+1,w
  1972  06AF  1683               	bsf	3,5	;RP0=1, select bank1
  1973  06B0  1303               	bcf	3,6	;RP1=0, select bank1
  1974  06B1  00DB               	movwf	(readLight@lightVal+1)^(0+128)
  1975  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  1976  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  1977  06B4  0850               	movf	?___ftadd+2,w
  1978  06B5  1683               	bsf	3,5	;RP0=1, select bank1
  1979  06B6  1303               	bcf	3,6	;RP1=0, select bank1
  1980  06B7  00DC               	movwf	(readLight@lightVal+2)^(0+128)
  1981                           
  1982                           ;Analog.c: 167: if (lightVal != 0)
  1983  06B8  085C               	movf	(readLight@lightVal+2)^(0+128),w
  1984  06B9  045B               	iorwf	(readLight@lightVal+1)^(0+128),w
  1985  06BA  045A               	iorwf	readLight@lightVal^(0+128),w
  1986  06BB  1903               	skipnz
  1987  06BC  2F04               	goto	l168
  1988                           
  1989                           ;Analog.c: 168: lightVal = pow(((31,62) / (double) lightVal), (1 / (double) (0,5)));
  1990  06BD  085A               	movf	readLight@lightVal^(0+128),w
  1991  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1992  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1993  06C0  00BE               	movwf	___ftdiv@f2
  1994  06C1  1683               	bsf	3,5	;RP0=1, select bank1
  1995  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  1996  06C3  085B               	movf	(readLight@lightVal+1)^(0+128),w
  1997  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1998  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1999  06C6  00BF               	movwf	___ftdiv@f2+1
  2000  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  2001  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  2002  06C9  085C               	movf	(readLight@lightVal+2)^(0+128),w
  2003  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2004  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2005  06CC  00C0               	movwf	___ftdiv@f2+2
  2006  06CD  3000               	movlw	0
  2007  06CE  00C1               	movwf	___ftdiv@f1
  2008  06CF  3078               	movlw	120
  2009  06D0  00C2               	movwf	___ftdiv@f1+1
  2010  06D1  3042               	movlw	66
  2011  06D2  00C3               	movwf	___ftdiv@f1+2
  2012  06D3  120A  158A  223F   	fcall	___ftdiv
      +       120A  118A         
  2013  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2014  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2015  06DA  083E               	movf	?___ftdiv,w
  2016  06DB  1683               	bsf	3,5	;RP0=1, select bank1
  2017  06DC  1303               	bcf	3,6	;RP1=0, select bank1
  2018  06DD  00D7               	movwf	_readLight$1141^(0+128)
  2019  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2020  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2021  06E0  083F               	movf	?___ftdiv+1,w
  2022  06E1  1683               	bsf	3,5	;RP0=1, select bank1
  2023  06E2  1303               	bcf	3,6	;RP1=0, select bank1
  2024  06E3  00D8               	movwf	(_readLight$1141+1)^(0+128)
  2025  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  2026  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  2027  06E6  0840               	movf	?___ftdiv+2,w
  2028  06E7  1683               	bsf	3,5	;RP0=1, select bank1
  2029  06E8  1303               	bcf	3,6	;RP1=0, select bank1
  2030  06E9  00D9               	movwf	(_readLight$1141+2)^(0+128)
  2031                           
  2032                           ;Analog.c: 168: lightVal = pow(((31,62) / (double) lightVal), (1 / (double) (0,5)));
  2033  06EA  0857               	movf	_readLight$1141^(0+128),w
  2034  06EB  00BF               	movwf	pow@x^(0+128)
  2035  06EC  0858               	movf	(_readLight$1141+1)^(0+128),w
  2036  06ED  00C0               	movwf	(pow@x+1)^(0+128)
  2037  06EE  0859               	movf	(_readLight$1141+2)^(0+128),w
  2038  06EF  00C1               	movwf	(pow@x+2)^(0+128)
  2039  06F0  30CD               	movlw	205
  2040  06F1  00C2               	movwf	pow@y^(0+128)
  2041  06F2  304C               	movlw	76
  2042  06F3  00C3               	movwf	(pow@y+1)^(0+128)
  2043  06F4  303E               	movlw	62
  2044  06F5  00C4               	movwf	(pow@y+2)^(0+128)
  2045  06F6  120A  118A  2305   	fcall	_pow
      +       120A  118A         
  2046  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  2047  06FC  1303               	bcf	3,6	;RP1=0, select bank1
  2048  06FD  083F               	movf	?_pow^(0+128),w
  2049  06FE  00DA               	movwf	readLight@lightVal^(0+128)
  2050  06FF  0840               	movf	(?_pow+1)^(0+128),w
  2051  0700  00DB               	movwf	(readLight@lightVal+1)^(0+128)
  2052  0701  0841               	movf	(?_pow+2)^(0+128),w
  2053  0702  00DC               	movwf	(readLight@lightVal+2)^(0+128)
  2054  0703  2F11               	goto	l4360
  2055  0704                     l168:	
  2056                           
  2057                           ;Analog.c: 169: else
  2058                           ;Analog.c: 170: {
  2059                           ;Analog.c: 171: (TRISBbits.TRISB6) = 0;
  2060  0704  1306               	bcf	6,6	;volatile
  2061                           
  2062                           ;Analog.c: 172: (PORTBbits.RB6) = 1;
  2063  0705  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0706  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0707  1706               	bsf	6,6	;volatile
  2066                           
  2067                           ;Analog.c: 173: return -10;
  2068  0708  3000               	movlw	0
  2069  0709  1683               	bsf	3,5	;RP0=1, select bank1
  2070  070A  1303               	bcf	3,6	;RP1=0, select bank1
  2071  070B  00D1               	movwf	?_readLight^(0+128)
  2072  070C  3020               	movlw	32
  2073  070D  00D2               	movwf	(?_readLight+1)^(0+128)
  2074  070E  30C1               	movlw	193
  2075  070F  00D3               	movwf	(?_readLight+2)^(0+128)
  2076  0710  0008               	return
  2077  0711                     l4360:	
  2078                           
  2079                           ;Analog.c: 174: }
  2080                           ;Analog.c: 177: return (float) lightVal;
  2081  0711  085A               	movf	readLight@lightVal^(0+128),w
  2082  0712  00D1               	movwf	?_readLight^(0+128)
  2083  0713  085B               	movf	(readLight@lightVal+1)^(0+128),w
  2084  0714  00D2               	movwf	(?_readLight+1)^(0+128)
  2085  0715  085C               	movf	(readLight@lightVal+2)^(0+128),w
  2086  0716  00D3               	movwf	(?_readLight+2)^(0+128)
  2087  0717  0008               	return
  2088  0718                     __end_of_readLight:	
  2089                           
  2090                           	psect	text5
  2091  0305                     __ptext5:	
  2092 ;; *************** function _pow *****************
  2093 ;; Defined at:
  2094 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\pow.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  x               3   31[BANK1 ] float 
  2097 ;;  y               3   34[BANK1 ] float 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;  yi              4   45[BANK1 ] unsigned long 
  2100 ;;  sign            1   44[BANK1 ] unsigned char 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  3   31[BANK1 ] unsigned char 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         0       0       6       0       0
  2111 ;;      Locals:         0       0      11       0       0
  2112 ;;      Temps:          0       0       1       0       0
  2113 ;;      Totals:         0       0      18       0       0
  2114 ;;Total ram usage:       18 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    6
  2117 ;; This function calls:
  2118 ;;		___ftge
  2119 ;;		___ftmul
  2120 ;;		___ftneg
  2121 ;;		___fttol
  2122 ;;		___lltoft
  2123 ;;		_exp
  2124 ;;		_log
  2125 ;; This function is called by:
  2126 ;;		_readLight
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           
  2131                           ;psect for function _pow
  2132  0305                     _pow:	
  2133                           
  2134                           ;incstack = 0
  2135 ;; hardware stack exceeded
  2136                           ; Regs used in _pow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2137  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2138  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2139  0307  01CC               	clrf	pow@sign^(0+128)
  2140  0308  0841               	movf	(pow@x+2)^(0+128),w
  2141  0309  0440               	iorwf	(pow@x+1)^(0+128),w
  2142  030A  043F               	iorwf	pow@x^(0+128),w
  2143  030B  1D03               	skipz
  2144  030C  2B3D               	goto	l4294
  2145  030D  3000               	movlw	0
  2146  030E  1283               	bcf	3,5	;RP0=0, select bank0
  2147  030F  1303               	bcf	3,6	;RP1=0, select bank0
  2148  0310  00A0               	movwf	___ftge@ff1
  2149  0311  3000               	movlw	0
  2150  0312  00A1               	movwf	___ftge@ff1+1
  2151  0313  3000               	movlw	0
  2152  0314  00A2               	movwf	___ftge@ff1+2
  2153  0315  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0316  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0317  0842               	movf	pow@y^(0+128),w
  2156  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2157  0319  1303               	bcf	3,6	;RP1=0, select bank0
  2158  031A  00A3               	movwf	___ftge@ff2
  2159  031B  1683               	bsf	3,5	;RP0=1, select bank1
  2160  031C  1303               	bcf	3,6	;RP1=0, select bank1
  2161  031D  0843               	movf	(pow@y+1)^(0+128),w
  2162  031E  1283               	bcf	3,5	;RP0=0, select bank0
  2163  031F  1303               	bcf	3,6	;RP1=0, select bank0
  2164  0320  00A4               	movwf	___ftge@ff2+1
  2165  0321  1683               	bsf	3,5	;RP0=1, select bank1
  2166  0322  1303               	bcf	3,6	;RP1=0, select bank1
  2167  0323  0844               	movf	(pow@y+2)^(0+128),w
  2168  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0326  00A5               	movwf	___ftge@ff2+2
  2171  0327  160A  118A  2740   	fcall	___ftge
      +       120A  118A         
  2172  032C  1C03               	btfss	3,0
  2173  032D  2B34               	goto	l629
  2174  032E  3021               	movlw	33
  2175  032F  1683               	bsf	3,5	;RP0=1, select bank1
  2176  0330  1303               	bcf	3,6	;RP1=0, select bank1
  2177  0331  00E9               	movwf	_errno^(0+128)
  2178  0332  3000               	movlw	0
  2179  0333  00EA               	movwf	(_errno^(0+128)+1)
  2180  0334                     l629:	
  2181  0334  3000               	movlw	0
  2182  0335  1683               	bsf	3,5	;RP0=1, select bank1
  2183  0336  1303               	bcf	3,6	;RP1=0, select bank1
  2184  0337  00BF               	movwf	?_pow^(0+128)
  2185  0338  3000               	movlw	0
  2186  0339  00C0               	movwf	(?_pow+1)^(0+128)
  2187  033A  3000               	movlw	0
  2188  033B  00C1               	movwf	(?_pow+2)^(0+128)
  2189  033C  0008               	return
  2190  033D                     l4294:	
  2191  033D  0844               	movf	(pow@y+2)^(0+128),w
  2192  033E  0443               	iorwf	(pow@y+1)^(0+128),w
  2193  033F  0442               	iorwf	pow@y^(0+128),w
  2194  0340  1D03               	skipz
  2195  0341  2B49               	goto	l4300
  2196  0342  3000               	movlw	0
  2197  0343  00BF               	movwf	?_pow^(0+128)
  2198  0344  3080               	movlw	128
  2199  0345  00C0               	movwf	(?_pow+1)^(0+128)
  2200  0346  303F               	movlw	63
  2201  0347  00C1               	movwf	(?_pow+2)^(0+128)
  2202  0348  0008               	return
  2203  0349                     l4300:	
  2204  0349  083F               	movf	pow@x^(0+128),w
  2205  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2206  034B  1303               	bcf	3,6	;RP1=0, select bank0
  2207  034C  00A0               	movwf	___ftge@ff1
  2208  034D  1683               	bsf	3,5	;RP0=1, select bank1
  2209  034E  1303               	bcf	3,6	;RP1=0, select bank1
  2210  034F  0840               	movf	(pow@x+1)^(0+128),w
  2211  0350  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0351  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0352  00A1               	movwf	___ftge@ff1+1
  2214  0353  1683               	bsf	3,5	;RP0=1, select bank1
  2215  0354  1303               	bcf	3,6	;RP1=0, select bank1
  2216  0355  0841               	movf	(pow@x+2)^(0+128),w
  2217  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0358  00A2               	movwf	___ftge@ff1+2
  2220  0359  3000               	movlw	0
  2221  035A  00A3               	movwf	___ftge@ff2
  2222  035B  3000               	movlw	0
  2223  035C  00A4               	movwf	___ftge@ff2+1
  2224  035D  3000               	movlw	0
  2225  035E  00A5               	movwf	___ftge@ff2+2
  2226  035F  160A  118A  2740   	fcall	___ftge
      +       120A  118A         
  2227  0364  1803               	btfsc	3,0
  2228  0365  2C03               	goto	l4312
  2229  0366  1683               	bsf	3,5	;RP0=1, select bank1
  2230  0367  1303               	bcf	3,6	;RP1=0, select bank1
  2231  0368  0842               	movf	pow@y^(0+128),w
  2232  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2233  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2234  036B  00E3               	movwf	___fttol@f1
  2235  036C  1683               	bsf	3,5	;RP0=1, select bank1
  2236  036D  1303               	bcf	3,6	;RP1=0, select bank1
  2237  036E  0843               	movf	(pow@y+1)^(0+128),w
  2238  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2239  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2240  0371  00E4               	movwf	___fttol@f1+1
  2241  0372  1683               	bsf	3,5	;RP0=1, select bank1
  2242  0373  1303               	bcf	3,6	;RP1=0, select bank1
  2243  0374  0844               	movf	(pow@y+2)^(0+128),w
  2244  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0377  00E5               	movwf	___fttol@f1+2
  2247  0378  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  2248  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2249  037E  1303               	bcf	3,6	;RP1=0, select bank0
  2250  037F  0866               	movf	?___fttol+3,w
  2251  0380  1683               	bsf	3,5	;RP0=1, select bank1
  2252  0381  1303               	bcf	3,6	;RP1=0, select bank1
  2253  0382  00D0               	movwf	(pow@yi+3)^(0+128)
  2254  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2255  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2256  0385  0865               	movf	?___fttol+2,w
  2257  0386  1683               	bsf	3,5	;RP0=1, select bank1
  2258  0387  1303               	bcf	3,6	;RP1=0, select bank1
  2259  0388  00CF               	movwf	(pow@yi+2)^(0+128)
  2260  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2261  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2262  038B  0864               	movf	?___fttol+1,w
  2263  038C  1683               	bsf	3,5	;RP0=1, select bank1
  2264  038D  1303               	bcf	3,6	;RP1=0, select bank1
  2265  038E  00CE               	movwf	(pow@yi+1)^(0+128)
  2266  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2267  0390  1303               	bcf	3,6	;RP1=0, select bank0
  2268  0391  0863               	movf	?___fttol,w
  2269  0392  1683               	bsf	3,5	;RP0=1, select bank1
  2270  0393  1303               	bcf	3,6	;RP1=0, select bank1
  2271  0394  00CD               	movwf	pow@yi^(0+128)
  2272  0395  0850               	movf	(pow@yi+3)^(0+128),w
  2273  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2275  0398  00AB               	movwf	___lltoft@c+3
  2276  0399  1683               	bsf	3,5	;RP0=1, select bank1
  2277  039A  1303               	bcf	3,6	;RP1=0, select bank1
  2278  039B  084F               	movf	(pow@yi+2)^(0+128),w
  2279  039C  1283               	bcf	3,5	;RP0=0, select bank0
  2280  039D  1303               	bcf	3,6	;RP1=0, select bank0
  2281  039E  00AA               	movwf	___lltoft@c+2
  2282  039F  1683               	bsf	3,5	;RP0=1, select bank1
  2283  03A0  1303               	bcf	3,6	;RP1=0, select bank1
  2284  03A1  084E               	movf	(pow@yi+1)^(0+128),w
  2285  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2286  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2287  03A4  00A9               	movwf	___lltoft@c+1
  2288  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2289  03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2290  03A7  084D               	movf	pow@yi^(0+128),w
  2291  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2292  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2293  03AA  00A8               	movwf	___lltoft@c
  2294  03AB  160A  118A  2655   	fcall	___lltoft
      +       120A  118A         
  2295  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2296  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2297  03B2  0844               	movf	(pow@y+2)^(0+128),w
  2298  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2299  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  2300  03B5  062A               	xorwf	?___lltoft+2,w
  2301  03B6  1D03               	skipz
  2302  03B7  2BC6               	goto	u3625
  2303  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2304  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2305  03BA  0843               	movf	(pow@y+1)^(0+128),w
  2306  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2307  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2308  03BD  0629               	xorwf	?___lltoft+1,w
  2309  03BE  1D03               	skipz
  2310  03BF  2BC6               	goto	u3625
  2311  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  2312  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  2313  03C2  0842               	movf	pow@y^(0+128),w
  2314  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2315  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2316  03C5  0628               	xorwf	?___lltoft,w
  2317  03C6                     u3625:	
  2318  03C6  1903               	skipnz
  2319  03C7  2BD5               	goto	l4308
  2320  03C8  3021               	movlw	33
  2321  03C9  1683               	bsf	3,5	;RP0=1, select bank1
  2322  03CA  1303               	bcf	3,6	;RP1=0, select bank1
  2323  03CB  00E9               	movwf	_errno^(0+128)
  2324  03CC  3000               	movlw	0
  2325  03CD  00EA               	movwf	(_errno^(0+128)+1)
  2326  03CE  3000               	movlw	0
  2327  03CF  00BF               	movwf	?_pow^(0+128)
  2328  03D0  3000               	movlw	0
  2329  03D1  00C0               	movwf	(?_pow+1)^(0+128)
  2330  03D2  3000               	movlw	0
  2331  03D3  00C1               	movwf	(?_pow+2)^(0+128)
  2332  03D4  0008               	return
  2333  03D5                     l4308:	
  2334  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2335  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2336  03D7  084D               	movf	pow@yi^(0+128),w
  2337  03D8  3901               	andlw	1
  2338  03D9  00C5               	movwf	??_pow^(0+128)
  2339  03DA  0845               	movf	??_pow^(0+128),w
  2340  03DB  00CC               	movwf	pow@sign^(0+128)
  2341  03DC  083F               	movf	pow@x^(0+128),w
  2342  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2343  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2344  03DF  00A0               	movwf	___ftneg@f1
  2345  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2346  03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2347  03E2  0840               	movf	(pow@x+1)^(0+128),w
  2348  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2349  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2350  03E5  00A1               	movwf	___ftneg@f1+1
  2351  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  2352  03E7  1303               	bcf	3,6	;RP1=0, select bank1
  2353  03E8  0841               	movf	(pow@x+2)^(0+128),w
  2354  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2355  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2356  03EB  00A2               	movwf	___ftneg@f1+2
  2357  03EC  120A  118A  20E7   	fcall	___ftneg
      +       120A  118A         
  2358  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2359  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2360  03F3  0820               	movf	?___ftneg,w
  2361  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2362  03F5  1303               	bcf	3,6	;RP1=0, select bank1
  2363  03F6  00BF               	movwf	pow@x^(0+128)
  2364  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2365  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2366  03F9  0821               	movf	?___ftneg+1,w
  2367  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  2368  03FB  1303               	bcf	3,6	;RP1=0, select bank1
  2369  03FC  00C0               	movwf	(pow@x+1)^(0+128)
  2370  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2371  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2372  03FF  0822               	movf	?___ftneg+2,w
  2373  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2374  0401  1303               	bcf	3,6	;RP1=0, select bank1
  2375  0402  00C1               	movwf	(pow@x+2)^(0+128)
  2376  0403                     l4312:	
  2377  0403  1683               	bsf	3,5	;RP0=1, select bank1
  2378  0404  1303               	bcf	3,6	;RP1=0, select bank1
  2379  0405  083F               	movf	pow@x^(0+128),w
  2380  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0408  00E5               	movwf	log@x
  2383  0409  1683               	bsf	3,5	;RP0=1, select bank1
  2384  040A  1303               	bcf	3,6	;RP1=0, select bank1
  2385  040B  0840               	movf	(pow@x+1)^(0+128),w
  2386  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2387  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2388  040E  00E6               	movwf	log@x+1
  2389  040F  1683               	bsf	3,5	;RP0=1, select bank1
  2390  0410  1303               	bcf	3,6	;RP1=0, select bank1
  2391  0411  0841               	movf	(pow@x+2)^(0+128),w
  2392  0412  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0413  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0414  00E7               	movwf	log@x+2
  2395  0415  120A  158A  253A   	fcall	_log
      +       120A  118A         
  2396  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2397  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2398  041C  0865               	movf	?_log,w
  2399  041D  1683               	bsf	3,5	;RP0=1, select bank1
  2400  041E  1303               	bcf	3,6	;RP1=0, select bank1
  2401  041F  00C6               	movwf	_pow$1142^(0+128)
  2402  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2403  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2404  0422  0866               	movf	?_log+1,w
  2405  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2406  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2407  0425  00C7               	movwf	(_pow$1142+1)^(0+128)
  2408  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0427  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0428  0867               	movf	?_log+2,w
  2411  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2412  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2413  042B  00C8               	movwf	(_pow$1142+2)^(0+128)
  2414  042C  0842               	movf	pow@y^(0+128),w
  2415  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2416  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2417  042F  00AE               	movwf	___ftmul@f1
  2418  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2419  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2420  0432  0843               	movf	(pow@y+1)^(0+128),w
  2421  0433  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0434  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0435  00AF               	movwf	___ftmul@f1+1
  2424  0436  1683               	bsf	3,5	;RP0=1, select bank1
  2425  0437  1303               	bcf	3,6	;RP1=0, select bank1
  2426  0438  0844               	movf	(pow@y+2)^(0+128),w
  2427  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2428  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2429  043B  00B0               	movwf	___ftmul@f1+2
  2430  043C  1683               	bsf	3,5	;RP0=1, select bank1
  2431  043D  1303               	bcf	3,6	;RP1=0, select bank1
  2432  043E  0846               	movf	_pow$1142^(0+128),w
  2433  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2434  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2435  0441  00B1               	movwf	___ftmul@f2
  2436  0442  1683               	bsf	3,5	;RP0=1, select bank1
  2437  0443  1303               	bcf	3,6	;RP1=0, select bank1
  2438  0444  0847               	movf	(_pow$1142+1)^(0+128),w
  2439  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0447  00B2               	movwf	___ftmul@f2+1
  2442  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2443  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2444  044A  0848               	movf	(_pow$1142+2)^(0+128),w
  2445  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2446  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2447  044D  00B3               	movwf	___ftmul@f2+2
  2448  044E  120A  118A  2718   	fcall	___ftmul
      +       120A  118A         
  2449  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0455  082E               	movf	?___ftmul,w
  2452  0456  1683               	bsf	3,5	;RP0=1, select bank1
  2453  0457  1303               	bcf	3,6	;RP1=0, select bank1
  2454  0458  00C9               	movwf	_pow$1143^(0+128)
  2455  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2456  045A  1303               	bcf	3,6	;RP1=0, select bank0
  2457  045B  082F               	movf	?___ftmul+1,w
  2458  045C  1683               	bsf	3,5	;RP0=1, select bank1
  2459  045D  1303               	bcf	3,6	;RP1=0, select bank1
  2460  045E  00CA               	movwf	(_pow$1143+1)^(0+128)
  2461  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2462  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2463  0461  0830               	movf	?___ftmul+2,w
  2464  0462  1683               	bsf	3,5	;RP0=1, select bank1
  2465  0463  1303               	bcf	3,6	;RP1=0, select bank1
  2466  0464  00CB               	movwf	(_pow$1143+2)^(0+128)
  2467  0465  0849               	movf	_pow$1143^(0+128),w
  2468  0466  00B2               	movwf	exp@x^(0+128)
  2469  0467  084A               	movf	(_pow$1143+1)^(0+128),w
  2470  0468  00B3               	movwf	(exp@x+1)^(0+128)
  2471  0469  084B               	movf	(_pow$1143+2)^(0+128),w
  2472  046A  00B4               	movwf	(exp@x+2)^(0+128)
  2473  046B  120A  118A  210F   	fcall	_exp
      +       120A  118A         
  2474  0470  1683               	bsf	3,5	;RP0=1, select bank1
  2475  0471  1303               	bcf	3,6	;RP1=0, select bank1
  2476  0472  0832               	movf	?_exp^(0+128),w
  2477  0473  00BF               	movwf	pow@x^(0+128)
  2478  0474  0833               	movf	(?_exp+1)^(0+128),w
  2479  0475  00C0               	movwf	(pow@x+1)^(0+128)
  2480  0476  0834               	movf	(?_exp+2)^(0+128),w
  2481  0477  00C1               	movwf	(pow@x+2)^(0+128)
  2482  0478  084C               	movf	pow@sign^(0+128),w
  2483  0479  1903               	btfsc	3,2
  2484  047A  0008               	return
  2485  047B  083F               	movf	pow@x^(0+128),w
  2486  047C  1283               	bcf	3,5	;RP0=0, select bank0
  2487  047D  1303               	bcf	3,6	;RP1=0, select bank0
  2488  047E  00A0               	movwf	___ftneg@f1
  2489  047F  1683               	bsf	3,5	;RP0=1, select bank1
  2490  0480  1303               	bcf	3,6	;RP1=0, select bank1
  2491  0481  0840               	movf	(pow@x+1)^(0+128),w
  2492  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0483  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0484  00A1               	movwf	___ftneg@f1+1
  2495  0485  1683               	bsf	3,5	;RP0=1, select bank1
  2496  0486  1303               	bcf	3,6	;RP1=0, select bank1
  2497  0487  0841               	movf	(pow@x+2)^(0+128),w
  2498  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2499  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2500  048A  00A2               	movwf	___ftneg@f1+2
  2501  048B  120A  118A  20E7   	fcall	___ftneg
  2502  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2503  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2504  0490  0820               	movf	?___ftneg,w
  2505  0491  1683               	bsf	3,5	;RP0=1, select bank1
  2506  0492  1303               	bcf	3,6	;RP1=0, select bank1
  2507  0493  00BF               	movwf	?_pow^(0+128)
  2508  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2509  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2510  0496  0821               	movf	?___ftneg+1,w
  2511  0497  1683               	bsf	3,5	;RP0=1, select bank1
  2512  0498  1303               	bcf	3,6	;RP1=0, select bank1
  2513  0499  00C0               	movwf	(?_pow+1)^(0+128)
  2514  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2515  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2516  049C  0822               	movf	?___ftneg+2,w
  2517  049D  1683               	bsf	3,5	;RP0=1, select bank1
  2518  049E  1303               	bcf	3,6	;RP1=0, select bank1
  2519  049F  00C1               	movwf	(?_pow+2)^(0+128)
  2520  04A0  0008               	return
  2521  04A1                     __end_of_pow:	
  2522                           
  2523                           	psect	text6
  2524  0D3A                     __ptext6:	
  2525 ;; *************** function _log *****************
  2526 ;; Defined at:
  2527 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\log.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  x               3   69[BANK0 ] unsigned char 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  exponent        2   73[BANK0 ] int 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  3   69[BANK0 ] int 
  2534 ;; Registers used:
  2535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2541 ;;      Params:         0       3       0       0       0
  2542 ;;      Locals:         0       2       0       0       0
  2543 ;;      Temps:          0       1       0       0       0
  2544 ;;      Totals:         0       6       0       0       0
  2545 ;;Total ram usage:        6 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    5
  2548 ;; This function calls:
  2549 ;;		___awtoft
  2550 ;;		___ftadd
  2551 ;;		___ftge
  2552 ;;		___ftmul
  2553 ;;		_eval_poly
  2554 ;;		_frexp
  2555 ;; This function is called by:
  2556 ;;		_pow
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _log
  2562  0D3A                     _log:	
  2563                           
  2564                           ;incstack = 0
  2565 ;; hardware stack exceeded
  2566                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2567  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  2568  0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  2569  0D3C  0865               	movf	log@x,w
  2570  0D3D  00A0               	movwf	___ftge@ff1
  2571  0D3E  0866               	movf	log@x+1,w
  2572  0D3F  00A1               	movwf	___ftge@ff1+1
  2573  0D40  0867               	movf	log@x+2,w
  2574  0D41  00A2               	movwf	___ftge@ff1+2
  2575  0D42  3000               	movlw	0
  2576  0D43  00A3               	movwf	___ftge@ff2
  2577  0D44  3000               	movlw	0
  2578  0D45  00A4               	movwf	___ftge@ff2+1
  2579  0D46  3000               	movlw	0
  2580  0D47  00A5               	movwf	___ftge@ff2+2
  2581  0D48  160A  118A  2740   	fcall	___ftge
      +       120A  158A         
  2582  0D4D  1803               	btfsc	3,0
  2583  0D4E  2D5E               	goto	l4182
  2584  0D4F  3021               	movlw	33
  2585  0D50  1683               	bsf	3,5	;RP0=1, select bank1
  2586  0D51  1303               	bcf	3,6	;RP1=0, select bank1
  2587  0D52  00E9               	movwf	_errno^(0+128)
  2588  0D53  3000               	movlw	0
  2589  0D54  00EA               	movwf	(_errno^(0+128)+1)
  2590  0D55  3000               	movlw	0
  2591  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0D58  00E5               	movwf	?_log
  2594  0D59  3000               	movlw	0
  2595  0D5A  00E6               	movwf	?_log+1
  2596  0D5B  3000               	movlw	0
  2597  0D5C  00E7               	movwf	?_log+2
  2598  0D5D  0008               	return
  2599  0D5E                     l4182:	
  2600  0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  2601  0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  2602  0D60  0867               	movf	log@x+2,w
  2603  0D61  0466               	iorwf	log@x+1,w
  2604  0D62  0465               	iorwf	log@x,w
  2605  0D63  1D03               	skipz
  2606  0D64  2D74               	goto	l4188
  2607  0D65  3022               	movlw	34
  2608  0D66  1683               	bsf	3,5	;RP0=1, select bank1
  2609  0D67  1303               	bcf	3,6	;RP1=0, select bank1
  2610  0D68  00E9               	movwf	_errno^(0+128)
  2611  0D69  3000               	movlw	0
  2612  0D6A  00EA               	movwf	(_errno^(0+128)+1)
  2613  0D6B  3000               	movlw	0
  2614  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0D6E  00E5               	movwf	?_log
  2617  0D6F  3000               	movlw	0
  2618  0D70  00E6               	movwf	?_log+1
  2619  0D71  3000               	movlw	0
  2620  0D72  00E7               	movwf	?_log+2
  2621  0D73  0008               	return
  2622  0D74                     l4188:	
  2623  0D74  3000               	movlw	0
  2624  0D75  00CE               	movwf	___ftadd@f1
  2625  0D76  3080               	movlw	128
  2626  0D77  00CF               	movwf	___ftadd@f1+1
  2627  0D78  30BF               	movlw	191
  2628  0D79  00D0               	movwf	___ftadd@f1+2
  2629  0D7A  3000               	movlw	0
  2630  0D7B  00AE               	movwf	___ftmul@f1
  2631  0D7C  3000               	movlw	0
  2632  0D7D  00AF               	movwf	___ftmul@f1+1
  2633  0D7E  3040               	movlw	64
  2634  0D7F  00B0               	movwf	___ftmul@f1+2
  2635  0D80  3069               	movlw	log@exponent& (0+255)
  2636  0D81  00E8               	movwf	??_log
  2637  0D82  0868               	movf	??_log,w
  2638  0D83  00A3               	movwf	frexp@eptr
  2639  0D84  0865               	movf	log@x,w
  2640  0D85  00A0               	movwf	frexp@value
  2641  0D86  0866               	movf	log@x+1,w
  2642  0D87  00A1               	movwf	frexp@value+1
  2643  0D88  0867               	movf	log@x+2,w
  2644  0D89  00A2               	movwf	frexp@value+2
  2645  0D8A  160A  118A  26B9   	fcall	_frexp
      +       120A  158A         
  2646  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0D90  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0D91  0820               	movf	?_frexp,w
  2649  0D92  00B1               	movwf	___ftmul@f2
  2650  0D93  0821               	movf	?_frexp+1,w
  2651  0D94  00B2               	movwf	___ftmul@f2+1
  2652  0D95  0822               	movf	?_frexp+2,w
  2653  0D96  00B3               	movwf	___ftmul@f2+2
  2654  0D97  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  2655  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0D9E  082E               	movf	?___ftmul,w
  2658  0D9F  00D1               	movwf	___ftadd@f2
  2659  0DA0  082F               	movf	?___ftmul+1,w
  2660  0DA1  00D2               	movwf	___ftadd@f2+1
  2661  0DA2  0830               	movf	?___ftmul+2,w
  2662  0DA3  00D3               	movwf	___ftadd@f2+2
  2663  0DA4  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  2664  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0DAB  084E               	movf	?___ftadd,w
  2667  0DAC  00E5               	movwf	log@x
  2668  0DAD  084F               	movf	?___ftadd+1,w
  2669  0DAE  00E6               	movwf	log@x+1
  2670  0DAF  0850               	movf	?___ftadd+2,w
  2671  0DB0  00E7               	movwf	log@x+2
  2672  0DB1  30FF               	movlw	255
  2673  0DB2  07E9               	addwf	log@exponent,f
  2674  0DB3  1803               	skipnc
  2675  0DB4  0AEA               	incf	log@exponent+1,f
  2676  0DB5  30FF               	movlw	255
  2677  0DB6  07EA               	addwf	log@exponent+1,f
  2678  0DB7  0865               	movf	log@x,w
  2679  0DB8  00DB               	movwf	eval_poly@x
  2680  0DB9  0866               	movf	log@x+1,w
  2681  0DBA  00DC               	movwf	eval_poly@x+1
  2682  0DBB  0867               	movf	log@x+2,w
  2683  0DBC  00DD               	movwf	eval_poly@x+2
  2684  0DBD  301F               	movlw	(log@coeff-__stringbase)& (0+255)
  2685  0DBE  00E8               	movwf	??_log
  2686  0DBF  0868               	movf	??_log,w
  2687  0DC0  00DE               	movwf	eval_poly@d
  2688  0DC1  3008               	movlw	8
  2689  0DC2  00DF               	movwf	eval_poly@n
  2690  0DC3  3000               	movlw	0
  2691  0DC4  00E0               	movwf	eval_poly@n+1
  2692  0DC5  120A  158A  20BD   	fcall	_eval_poly
      +       120A  158A         
  2693  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0DCC  085B               	movf	?_eval_poly,w
  2696  0DCD  00E5               	movwf	log@x
  2697  0DCE  085C               	movf	?_eval_poly+1,w
  2698  0DCF  00E6               	movwf	log@x+1
  2699  0DD0  085D               	movf	?_eval_poly+2,w
  2700  0DD1  00E7               	movwf	log@x+2
  2701  0DD2  0865               	movf	log@x,w
  2702  0DD3  00CE               	movwf	___ftadd@f1
  2703  0DD4  0866               	movf	log@x+1,w
  2704  0DD5  00CF               	movwf	___ftadd@f1+1
  2705  0DD6  0867               	movf	log@x+2,w
  2706  0DD7  00D0               	movwf	___ftadd@f1+2
  2707  0DD8  3072               	movlw	114
  2708  0DD9  00AE               	movwf	___ftmul@f1
  2709  0DDA  3031               	movlw	49
  2710  0DDB  00AF               	movwf	___ftmul@f1+1
  2711  0DDC  303F               	movlw	63
  2712  0DDD  00B0               	movwf	___ftmul@f1+2
  2713  0DDE  086A               	movf	log@exponent+1,w
  2714  0DDF  01A9               	clrf	___awtoft@c+1
  2715  0DE0  07A9               	addwf	___awtoft@c+1,f
  2716  0DE1  0869               	movf	log@exponent,w
  2717  0DE2  01A8               	clrf	___awtoft@c
  2718  0DE3  07A8               	addwf	___awtoft@c,f
  2719  0DE4  160A  118A  2603   	fcall	___awtoft
      +       120A  158A         
  2720  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  2721  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  2722  0DEB  0828               	movf	?___awtoft,w
  2723  0DEC  00B1               	movwf	___ftmul@f2
  2724  0DED  0829               	movf	?___awtoft+1,w
  2725  0DEE  00B2               	movwf	___ftmul@f2+1
  2726  0DEF  082A               	movf	?___awtoft+2,w
  2727  0DF0  00B3               	movwf	___ftmul@f2+2
  2728  0DF1  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  2729  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0DF8  082E               	movf	?___ftmul,w
  2732  0DF9  00D1               	movwf	___ftadd@f2
  2733  0DFA  082F               	movf	?___ftmul+1,w
  2734  0DFB  00D2               	movwf	___ftadd@f2+1
  2735  0DFC  0830               	movf	?___ftmul+2,w
  2736  0DFD  00D3               	movwf	___ftadd@f2+2
  2737  0DFE  120A  158A  26F7   	fcall	___ftadd
  2738  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  2739  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  2740  0E03  084E               	movf	?___ftadd,w
  2741  0E04  00E5               	movwf	?_log
  2742  0E05  084F               	movf	?___ftadd+1,w
  2743  0E06  00E6               	movwf	?_log+1
  2744  0E07  0850               	movf	?___ftadd+2,w
  2745  0E08  00E7               	movwf	?_log+2
  2746  0E09  0008               	return
  2747  0E0A                     __end_of_log:	
  2748                           
  2749                           	psect	text7
  2750  010F                     __ptext7:	
  2751 ;; *************** function _exp *****************
  2752 ;; Defined at:
  2753 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\exp.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  x               3   18[BANK1 ] int 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  exponent        2   28[BANK1 ] int 
  2758 ;;  sign            1   30[BANK1 ] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  3   18[BANK1 ] unsigned char 
  2761 ;; Registers used:
  2762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2768 ;;      Params:         0       0       3       0       0
  2769 ;;      Locals:         0       0       9       0       0
  2770 ;;      Temps:          0       0       1       0       0
  2771 ;;      Totals:         0       0      13       0       0
  2772 ;;Total ram usage:       13 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    5
  2775 ;; This function calls:
  2776 ;;		___awtoft
  2777 ;;		___ftdiv
  2778 ;;		___ftge
  2779 ;;		___ftmul
  2780 ;;		___ftneg
  2781 ;;		___ftsub
  2782 ;;		___fttol
  2783 ;;		_eval_poly
  2784 ;;		_floor
  2785 ;;		_ldexp
  2786 ;; This function is called by:
  2787 ;;		_pow
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _exp
  2793  010F                     _exp:	
  2794                           
  2795                           ;incstack = 0
  2796 ;; hardware stack exceeded
  2797                           ; Regs used in _exp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2798  010F  1683               	bsf	3,5	;RP0=1, select bank1
  2799  0110  1303               	bcf	3,6	;RP1=0, select bank1
  2800  0111  0834               	movf	(exp@x+2)^(0+128),w
  2801  0112  0433               	iorwf	(exp@x+1)^(0+128),w
  2802  0113  0432               	iorwf	exp@x^(0+128),w
  2803  0114  1D03               	skipz
  2804  0115  291D               	goto	l4204
  2805  0116  3000               	movlw	0
  2806  0117  00B2               	movwf	?_exp^(0+128)
  2807  0118  3080               	movlw	128
  2808  0119  00B3               	movwf	(?_exp+1)^(0+128)
  2809  011A  303F               	movlw	63
  2810  011B  00B4               	movwf	(?_exp+2)^(0+128)
  2811  011C  0008               	return
  2812  011D                     l4204:	
  2813  011D  3072               	movlw	114
  2814  011E  1283               	bcf	3,5	;RP0=0, select bank0
  2815  011F  1303               	bcf	3,6	;RP1=0, select bank0
  2816  0120  00A0               	movwf	___ftge@ff1
  2817  0121  3031               	movlw	49
  2818  0122  00A1               	movwf	___ftge@ff1+1
  2819  0123  3044               	movlw	68
  2820  0124  00A2               	movwf	___ftge@ff1+2
  2821  0125  1683               	bsf	3,5	;RP0=1, select bank1
  2822  0126  1303               	bcf	3,6	;RP1=0, select bank1
  2823  0127  0832               	movf	exp@x^(0+128),w
  2824  0128  1283               	bcf	3,5	;RP0=0, select bank0
  2825  0129  1303               	bcf	3,6	;RP1=0, select bank0
  2826  012A  00A3               	movwf	___ftge@ff2
  2827  012B  1683               	bsf	3,5	;RP0=1, select bank1
  2828  012C  1303               	bcf	3,6	;RP1=0, select bank1
  2829  012D  0833               	movf	(exp@x+1)^(0+128),w
  2830  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2831  012F  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0130  00A4               	movwf	___ftge@ff2+1
  2833  0131  1683               	bsf	3,5	;RP0=1, select bank1
  2834  0132  1303               	bcf	3,6	;RP1=0, select bank1
  2835  0133  0834               	movf	(exp@x+2)^(0+128),w
  2836  0134  1283               	bcf	3,5	;RP0=0, select bank0
  2837  0135  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0136  00A5               	movwf	___ftge@ff2+2
  2839  0137  160A  118A  2740   	fcall	___ftge
      +       120A  118A         
  2840  013C  1803               	btfsc	3,0
  2841  013D  294B               	goto	l4214
  2842  013E  3022               	movlw	34
  2843  013F  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0140  1303               	bcf	3,6	;RP1=0, select bank1
  2845  0141  00E9               	movwf	_errno^(0+128)
  2846  0142  3000               	movlw	0
  2847  0143  00EA               	movwf	(_errno^(0+128)+1)
  2848  0144  30FF               	movlw	255
  2849  0145  00B2               	movwf	?_exp^(0+128)
  2850  0146  307F               	movlw	127
  2851  0147  00B3               	movwf	(?_exp+1)^(0+128)
  2852  0148  307F               	movlw	127
  2853  0149  00B4               	movwf	(?_exp+2)^(0+128)
  2854  014A  0008               	return
  2855  014B                     l4214:	
  2856  014B  1683               	bsf	3,5	;RP0=1, select bank1
  2857  014C  1303               	bcf	3,6	;RP1=0, select bank1
  2858  014D  0832               	movf	exp@x^(0+128),w
  2859  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2860  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0150  00A0               	movwf	___ftge@ff1
  2862  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2863  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2864  0153  0833               	movf	(exp@x+1)^(0+128),w
  2865  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2866  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2867  0156  00A1               	movwf	___ftge@ff1+1
  2868  0157  1683               	bsf	3,5	;RP0=1, select bank1
  2869  0158  1303               	bcf	3,6	;RP1=0, select bank1
  2870  0159  0834               	movf	(exp@x+2)^(0+128),w
  2871  015A  1283               	bcf	3,5	;RP0=0, select bank0
  2872  015B  1303               	bcf	3,6	;RP1=0, select bank0
  2873  015C  00A2               	movwf	___ftge@ff1+2
  2874  015D  3049               	movlw	73
  2875  015E  00A3               	movwf	___ftge@ff2
  2876  015F  303A               	movlw	58
  2877  0160  00A4               	movwf	___ftge@ff2+1
  2878  0161  30C4               	movlw	196
  2879  0162  00A5               	movwf	___ftge@ff2+2
  2880  0163  160A  118A  2740   	fcall	___ftge
      +       120A  118A         
  2881  0168  1803               	btfsc	3,0
  2882  0169  2977               	goto	l4220
  2883  016A  3022               	movlw	34
  2884  016B  1683               	bsf	3,5	;RP0=1, select bank1
  2885  016C  1303               	bcf	3,6	;RP1=0, select bank1
  2886  016D  00E9               	movwf	_errno^(0+128)
  2887  016E  3000               	movlw	0
  2888  016F  00EA               	movwf	(_errno^(0+128)+1)
  2889  0170  3000               	movlw	0
  2890  0171  00B2               	movwf	?_exp^(0+128)
  2891  0172  3000               	movlw	0
  2892  0173  00B3               	movwf	(?_exp+1)^(0+128)
  2893  0174  3000               	movlw	0
  2894  0175  00B4               	movwf	(?_exp+2)^(0+128)
  2895  0176  0008               	return
  2896  0177                     l4220:	
  2897  0177  1683               	bsf	3,5	;RP0=1, select bank1
  2898  0178  1303               	bcf	3,6	;RP1=0, select bank1
  2899  0179  0832               	movf	exp@x^(0+128),w
  2900  017A  1283               	bcf	3,5	;RP0=0, select bank0
  2901  017B  1303               	bcf	3,6	;RP1=0, select bank0
  2902  017C  00A0               	movwf	___ftge@ff1
  2903  017D  1683               	bsf	3,5	;RP0=1, select bank1
  2904  017E  1303               	bcf	3,6	;RP1=0, select bank1
  2905  017F  0833               	movf	(exp@x+1)^(0+128),w
  2906  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2908  0182  00A1               	movwf	___ftge@ff1+1
  2909  0183  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0184  1303               	bcf	3,6	;RP1=0, select bank1
  2911  0185  0834               	movf	(exp@x+2)^(0+128),w
  2912  0186  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0187  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0188  00A2               	movwf	___ftge@ff1+2
  2915  0189  3000               	movlw	0
  2916  018A  00A3               	movwf	___ftge@ff2
  2917  018B  3000               	movlw	0
  2918  018C  00A4               	movwf	___ftge@ff2+1
  2919  018D  3000               	movlw	0
  2920  018E  00A5               	movwf	___ftge@ff2+2
  2921  018F  160A  118A  2740   	fcall	___ftge
      +       120A  118A         
  2922  0194  3000               	movlw	0
  2923  0195  1C03               	btfss	3,0
  2924  0196  3001               	movlw	1
  2925  0197  1683               	bsf	3,5	;RP0=1, select bank1
  2926  0198  1303               	bcf	3,6	;RP1=0, select bank1
  2927  0199  00B5               	movwf	??_exp^(0+128)
  2928  019A  0835               	movf	??_exp^(0+128),w
  2929  019B  00BE               	movwf	exp@sign^(0+128)
  2930  019C  083E               	movf	exp@sign^(0+128),w
  2931  019D  1903               	btfsc	3,2
  2932  019E  29C6               	goto	l4226
  2933  019F  0832               	movf	exp@x^(0+128),w
  2934  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2935  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  2936  01A2  00A0               	movwf	___ftneg@f1
  2937  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  2938  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  2939  01A5  0833               	movf	(exp@x+1)^(0+128),w
  2940  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  2941  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  2942  01A8  00A1               	movwf	___ftneg@f1+1
  2943  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  2944  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  2945  01AB  0834               	movf	(exp@x+2)^(0+128),w
  2946  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  2947  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  2948  01AE  00A2               	movwf	___ftneg@f1+2
  2949  01AF  120A  118A  20E7   	fcall	___ftneg
      +       120A  118A         
  2950  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  2951  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  2952  01B6  0820               	movf	?___ftneg,w
  2953  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  2954  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  2955  01B9  00B2               	movwf	exp@x^(0+128)
  2956  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2957  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2958  01BC  0821               	movf	?___ftneg+1,w
  2959  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  2960  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  2961  01BF  00B3               	movwf	(exp@x+1)^(0+128)
  2962  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  2963  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  2964  01C2  0822               	movf	?___ftneg+2,w
  2965  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  2966  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  2967  01C5  00B4               	movwf	(exp@x+2)^(0+128)
  2968  01C6                     l4226:	
  2969  01C6  30AA               	movlw	170
  2970  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2971  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2972  01C9  00AE               	movwf	___ftmul@f1
  2973  01CA  30B8               	movlw	184
  2974  01CB  00AF               	movwf	___ftmul@f1+1
  2975  01CC  303F               	movlw	63
  2976  01CD  00B0               	movwf	___ftmul@f1+2
  2977  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  2978  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  2979  01D0  0832               	movf	exp@x^(0+128),w
  2980  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  2981  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  2982  01D3  00B1               	movwf	___ftmul@f2
  2983  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  2984  01D5  1303               	bcf	3,6	;RP1=0, select bank1
  2985  01D6  0833               	movf	(exp@x+1)^(0+128),w
  2986  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  2987  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  2988  01D9  00B2               	movwf	___ftmul@f2+1
  2989  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  2990  01DB  1303               	bcf	3,6	;RP1=0, select bank1
  2991  01DC  0834               	movf	(exp@x+2)^(0+128),w
  2992  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  2993  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  2994  01DF  00B3               	movwf	___ftmul@f2+2
  2995  01E0  120A  118A  2718   	fcall	___ftmul
      +       120A  118A         
  2996  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2997  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2998  01E7  082E               	movf	?___ftmul,w
  2999  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  3000  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  3001  01EA  00B2               	movwf	exp@x^(0+128)
  3002  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  3003  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  3004  01ED  082F               	movf	?___ftmul+1,w
  3005  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  3006  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  3007  01F0  00B3               	movwf	(exp@x+1)^(0+128)
  3008  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3009  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3010  01F3  0830               	movf	?___ftmul+2,w
  3011  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  3012  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  3013  01F6  00B4               	movwf	(exp@x+2)^(0+128)
  3014  01F7  0832               	movf	exp@x^(0+128),w
  3015  01F8  00AA               	movwf	floor@x^(0+128)
  3016  01F9  0833               	movf	(exp@x+1)^(0+128),w
  3017  01FA  00AB               	movwf	(floor@x+1)^(0+128)
  3018  01FB  0834               	movf	(exp@x+2)^(0+128),w
  3019  01FC  00AC               	movwf	(floor@x+2)^(0+128)
  3020  01FD  120A  158A  260A   	fcall	_floor
      +       120A  118A         
  3021  0202  1683               	bsf	3,5	;RP0=1, select bank1
  3022  0203  1303               	bcf	3,6	;RP1=0, select bank1
  3023  0204  082A               	movf	?_floor^(0+128),w
  3024  0205  00B6               	movwf	_exp$1144^(0+128)
  3025  0206  082B               	movf	(?_floor+1)^(0+128),w
  3026  0207  00B7               	movwf	(_exp$1144+1)^(0+128)
  3027  0208  082C               	movf	(?_floor+2)^(0+128),w
  3028  0209  00B8               	movwf	(_exp$1144+2)^(0+128)
  3029  020A  0836               	movf	_exp$1144^(0+128),w
  3030  020B  1283               	bcf	3,5	;RP0=0, select bank0
  3031  020C  1303               	bcf	3,6	;RP1=0, select bank0
  3032  020D  00E3               	movwf	___fttol@f1
  3033  020E  1683               	bsf	3,5	;RP0=1, select bank1
  3034  020F  1303               	bcf	3,6	;RP1=0, select bank1
  3035  0210  0837               	movf	(_exp$1144+1)^(0+128),w
  3036  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3037  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3038  0213  00E4               	movwf	___fttol@f1+1
  3039  0214  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0215  1303               	bcf	3,6	;RP1=0, select bank1
  3041  0216  0838               	movf	(_exp$1144+2)^(0+128),w
  3042  0217  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3044  0219  00E5               	movwf	___fttol@f1+2
  3045  021A  120A  158A  23B3   	fcall	___fttol
      +       120A  118A         
  3046  021F  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0220  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0221  0864               	movf	?___fttol+1,w
  3049  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3050  0223  1303               	bcf	3,6	;RP1=0, select bank1
  3051  0224  01BD               	clrf	(exp@exponent+1)^(0+128)
  3052  0225  07BD               	addwf	(exp@exponent+1)^(0+128),f
  3053  0226  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0227  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0228  0863               	movf	?___fttol,w
  3056  0229  1683               	bsf	3,5	;RP0=1, select bank1
  3057  022A  1303               	bcf	3,6	;RP1=0, select bank1
  3058  022B  01BC               	clrf	exp@exponent^(0+128)
  3059  022C  07BC               	addwf	exp@exponent^(0+128),f
  3060  022D  083D               	movf	(exp@exponent+1)^(0+128),w
  3061  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3062  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0230  01A9               	clrf	___awtoft@c+1
  3064  0231  07A9               	addwf	___awtoft@c+1,f
  3065  0232  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0233  1303               	bcf	3,6	;RP1=0, select bank1
  3067  0234  083C               	movf	exp@exponent^(0+128),w
  3068  0235  1283               	bcf	3,5	;RP0=0, select bank0
  3069  0236  1303               	bcf	3,6	;RP1=0, select bank0
  3070  0237  01A8               	clrf	___awtoft@c
  3071  0238  07A8               	addwf	___awtoft@c,f
  3072  0239  160A  118A  2603   	fcall	___awtoft
      +       120A  118A         
  3073  023E  1283               	bcf	3,5	;RP0=0, select bank0
  3074  023F  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0240  0828               	movf	?___awtoft,w
  3076  0241  00DB               	movwf	___ftsub@f2
  3077  0242  0829               	movf	?___awtoft+1,w
  3078  0243  00DC               	movwf	___ftsub@f2+1
  3079  0244  082A               	movf	?___awtoft+2,w
  3080  0245  00DD               	movwf	___ftsub@f2+2
  3081  0246  1683               	bsf	3,5	;RP0=1, select bank1
  3082  0247  1303               	bcf	3,6	;RP1=0, select bank1
  3083  0248  0832               	movf	exp@x^(0+128),w
  3084  0249  1283               	bcf	3,5	;RP0=0, select bank0
  3085  024A  1303               	bcf	3,6	;RP1=0, select bank0
  3086  024B  00DE               	movwf	___ftsub@f1
  3087  024C  1683               	bsf	3,5	;RP0=1, select bank1
  3088  024D  1303               	bcf	3,6	;RP1=0, select bank1
  3089  024E  0833               	movf	(exp@x+1)^(0+128),w
  3090  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0251  00DF               	movwf	___ftsub@f1+1
  3093  0252  1683               	bsf	3,5	;RP0=1, select bank1
  3094  0253  1303               	bcf	3,6	;RP1=0, select bank1
  3095  0254  0834               	movf	(exp@x+2)^(0+128),w
  3096  0255  1283               	bcf	3,5	;RP0=0, select bank0
  3097  0256  1303               	bcf	3,6	;RP1=0, select bank0
  3098  0257  00E0               	movwf	___ftsub@f1+2
  3099  0258  160A  118A  25CA   	fcall	___ftsub
      +       120A  118A         
  3100  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3101  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3102  025F  085B               	movf	?___ftsub,w
  3103  0260  1683               	bsf	3,5	;RP0=1, select bank1
  3104  0261  1303               	bcf	3,6	;RP1=0, select bank1
  3105  0262  00B2               	movwf	exp@x^(0+128)
  3106  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3107  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3108  0265  085C               	movf	?___ftsub+1,w
  3109  0266  1683               	bsf	3,5	;RP0=1, select bank1
  3110  0267  1303               	bcf	3,6	;RP1=0, select bank1
  3111  0268  00B3               	movwf	(exp@x+1)^(0+128)
  3112  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3113  026A  1303               	bcf	3,6	;RP1=0, select bank0
  3114  026B  085D               	movf	?___ftsub+2,w
  3115  026C  1683               	bsf	3,5	;RP0=1, select bank1
  3116  026D  1303               	bcf	3,6	;RP1=0, select bank1
  3117  026E  00B4               	movwf	(exp@x+2)^(0+128)
  3118  026F  0832               	movf	exp@x^(0+128),w
  3119  0270  1283               	bcf	3,5	;RP0=0, select bank0
  3120  0271  1303               	bcf	3,6	;RP1=0, select bank0
  3121  0272  00DB               	movwf	eval_poly@x
  3122  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3123  0274  1303               	bcf	3,6	;RP1=0, select bank1
  3124  0275  0833               	movf	(exp@x+1)^(0+128),w
  3125  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3127  0278  00DC               	movwf	eval_poly@x+1
  3128  0279  1683               	bsf	3,5	;RP0=1, select bank1
  3129  027A  1303               	bcf	3,6	;RP1=0, select bank1
  3130  027B  0834               	movf	(exp@x+2)^(0+128),w
  3131  027C  1283               	bcf	3,5	;RP0=0, select bank0
  3132  027D  1303               	bcf	3,6	;RP1=0, select bank0
  3133  027E  00DD               	movwf	eval_poly@x+2
  3134  027F  3001               	movlw	(exp@coeff-__stringbase)& (0+255)
  3135  0280  1683               	bsf	3,5	;RP0=1, select bank1
  3136  0281  1303               	bcf	3,6	;RP1=0, select bank1
  3137  0282  00B5               	movwf	??_exp^(0+128)
  3138  0283  0835               	movf	??_exp^(0+128),w
  3139  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3140  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3141  0286  00DE               	movwf	eval_poly@d
  3142  0287  3009               	movlw	9
  3143  0288  00DF               	movwf	eval_poly@n
  3144  0289  3000               	movlw	0
  3145  028A  00E0               	movwf	eval_poly@n+1
  3146  028B  120A  158A  20BD   	fcall	_eval_poly
      +       120A  118A         
  3147  0290  1283               	bcf	3,5	;RP0=0, select bank0
  3148  0291  1303               	bcf	3,6	;RP1=0, select bank0
  3149  0292  085B               	movf	?_eval_poly,w
  3150  0293  00E5               	movwf	ldexp@value
  3151  0294  085C               	movf	?_eval_poly+1,w
  3152  0295  00E6               	movwf	ldexp@value+1
  3153  0296  085D               	movf	?_eval_poly+2,w
  3154  0297  00E7               	movwf	ldexp@value+2
  3155  0298  1683               	bsf	3,5	;RP0=1, select bank1
  3156  0299  1303               	bcf	3,6	;RP1=0, select bank1
  3157  029A  083D               	movf	(exp@exponent+1)^(0+128),w
  3158  029B  1283               	bcf	3,5	;RP0=0, select bank0
  3159  029C  1303               	bcf	3,6	;RP1=0, select bank0
  3160  029D  01E9               	clrf	ldexp@newexp+1
  3161  029E  07E9               	addwf	ldexp@newexp+1,f
  3162  029F  1683               	bsf	3,5	;RP0=1, select bank1
  3163  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  3164  02A1  083C               	movf	exp@exponent^(0+128),w
  3165  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  3166  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  3167  02A4  01E8               	clrf	ldexp@newexp
  3168  02A5  07E8               	addwf	ldexp@newexp,f
  3169  02A6  120A  118A  204E   	fcall	_ldexp
      +       120A  118A         
  3170  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  3171  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  3172  02AD  0865               	movf	?_ldexp,w
  3173  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  3174  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  3175  02B0  00B2               	movwf	exp@x^(0+128)
  3176  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  3177  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  3178  02B3  0866               	movf	?_ldexp+1,w
  3179  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  3180  02B5  1303               	bcf	3,6	;RP1=0, select bank1
  3181  02B6  00B3               	movwf	(exp@x+1)^(0+128)
  3182  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  3183  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  3184  02B9  0867               	movf	?_ldexp+2,w
  3185  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  3186  02BB  1303               	bcf	3,6	;RP1=0, select bank1
  3187  02BC  00B4               	movwf	(exp@x+2)^(0+128)
  3188  02BD  083E               	movf	exp@sign^(0+128),w
  3189  02BE  1903               	btfsc	3,2
  3190  02BF  0008               	return
  3191  02C0  30FF               	movlw	255
  3192  02C1  00B9               	movwf	_exp$859^(0+128)
  3193  02C2  307F               	movlw	127
  3194  02C3  00BA               	movwf	(_exp$859+1)^(0+128)
  3195  02C4  307F               	movlw	127
  3196  02C5  00BB               	movwf	(_exp$859+2)^(0+128)
  3197  02C6  0834               	movf	(exp@x+2)^(0+128),w
  3198  02C7  063B               	xorwf	(_exp$859+2)^(0+128),w
  3199  02C8  1D03               	skipz
  3200  02C9  2AD0               	goto	u3545
  3201  02CA  0833               	movf	(exp@x+1)^(0+128),w
  3202  02CB  063A               	xorwf	(_exp$859+1)^(0+128),w
  3203  02CC  1D03               	skipz
  3204  02CD  2AD0               	goto	u3545
  3205  02CE  0832               	movf	exp@x^(0+128),w
  3206  02CF  0639               	xorwf	_exp$859^(0+128),w
  3207  02D0                     u3545:	
  3208  02D0  1D03               	skipz
  3209  02D1  2AD9               	goto	l4248
  3210  02D2  3000               	movlw	0
  3211  02D3  00B2               	movwf	?_exp^(0+128)
  3212  02D4  3000               	movlw	0
  3213  02D5  00B3               	movwf	(?_exp+1)^(0+128)
  3214  02D6  3000               	movlw	0
  3215  02D7  00B4               	movwf	(?_exp+2)^(0+128)
  3216  02D8  0008               	return
  3217  02D9                     l4248:	
  3218  02D9  0832               	movf	exp@x^(0+128),w
  3219  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3220  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  3221  02DC  00BE               	movwf	___ftdiv@f2
  3222  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  3223  02DE  1303               	bcf	3,6	;RP1=0, select bank1
  3224  02DF  0833               	movf	(exp@x+1)^(0+128),w
  3225  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  3226  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  3227  02E2  00BF               	movwf	___ftdiv@f2+1
  3228  02E3  1683               	bsf	3,5	;RP0=1, select bank1
  3229  02E4  1303               	bcf	3,6	;RP1=0, select bank1
  3230  02E5  0834               	movf	(exp@x+2)^(0+128),w
  3231  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  3232  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  3233  02E8  00C0               	movwf	___ftdiv@f2+2
  3234  02E9  3000               	movlw	0
  3235  02EA  00C1               	movwf	___ftdiv@f1
  3236  02EB  3080               	movlw	128
  3237  02EC  00C2               	movwf	___ftdiv@f1+1
  3238  02ED  303F               	movlw	63
  3239  02EE  00C3               	movwf	___ftdiv@f1+2
  3240  02EF  120A  158A  223F   	fcall	___ftdiv
  3241  02F2  1283               	bcf	3,5	;RP0=0, select bank0
  3242  02F3  1303               	bcf	3,6	;RP1=0, select bank0
  3243  02F4  083E               	movf	?___ftdiv,w
  3244  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  3245  02F6  1303               	bcf	3,6	;RP1=0, select bank1
  3246  02F7  00B2               	movwf	?_exp^(0+128)
  3247  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  3248  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  3249  02FA  083F               	movf	?___ftdiv+1,w
  3250  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  3251  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  3252  02FD  00B3               	movwf	(?_exp+1)^(0+128)
  3253  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  3254  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  3255  0300  0840               	movf	?___ftdiv+2,w
  3256  0301  1683               	bsf	3,5	;RP0=1, select bank1
  3257  0302  1303               	bcf	3,6	;RP1=0, select bank1
  3258  0303  00B4               	movwf	(?_exp+2)^(0+128)
  3259  0304  0008               	return
  3260  0305                     __end_of_exp:	
  3261                           
  3262                           	psect	text8
  3263  004E                     __ptext8:	
  3264 ;; *************** function _ldexp *****************
  3265 ;; Defined at:
  3266 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\frexp.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  value           3   69[BANK0 ] unsigned char 
  3269 ;;  newexp          2   72[BANK0 ] int 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  3   69[BANK0 ] int 
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3281 ;;      Params:         0       5       0       0       0
  3282 ;;      Locals:         0       3       0       0       0
  3283 ;;      Temps:          0       2       0       0       0
  3284 ;;      Totals:         0      10       0       0       0
  3285 ;;Total ram usage:       10 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    3
  3288 ;; This function calls:
  3289 ;;		___ftge
  3290 ;;		___ftneg
  3291 ;; This function is called by:
  3292 ;;		_exp
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _ldexp
  3298  004E                     _ldexp:	
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3302  004E  1283               	bcf	3,5	;RP0=0, select bank0
  3303  004F  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0050  0867               	movf	ldexp@value+2,w
  3305  0051  0466               	iorwf	ldexp@value+1,w
  3306  0052  0465               	iorwf	ldexp@value,w
  3307  0053  1D03               	skipz
  3308  0054  285C               	goto	l4126
  3309  0055  3000               	movlw	0
  3310  0056  00E5               	movwf	?_ldexp
  3311  0057  3000               	movlw	0
  3312  0058  00E6               	movwf	?_ldexp+1
  3313  0059  3000               	movlw	0
  3314  005A  00E7               	movwf	?_ldexp+2
  3315  005B  0008               	return
  3316  005C                     l4126:	
  3317  005C  0867               	movf	ldexp@value+2,w
  3318  005D  397F               	andlw	127
  3319  005E  00EA               	movwf	??_ldexp
  3320  005F  01EB               	clrf	??_ldexp+1
  3321  0060  1003               	clrc
  3322  0061  0DEA               	rlf	??_ldexp,f
  3323  0062  0DEB               	rlf	??_ldexp+1,f
  3324  0063  086A               	movf	??_ldexp,w
  3325  0064  07E8               	addwf	ldexp@newexp,f
  3326  0065  1803               	skipnc
  3327  0066  0AE9               	incf	ldexp@newexp+1,f
  3328  0067  086B               	movf	??_ldexp+1,w
  3329  0068  07E9               	addwf	ldexp@newexp+1,f
  3330  0069  0D66               	rlf	ldexp@value+1,w
  3331  006A  0D66               	rlf	ldexp@value+1,w
  3332  006B  3901               	andlw	1
  3333  006C  00EA               	movwf	??_ldexp
  3334  006D  01EB               	clrf	??_ldexp+1
  3335  006E  086A               	movf	??_ldexp,w
  3336  006F  07E8               	addwf	ldexp@newexp,f
  3337  0070  1803               	skipnc
  3338  0071  0AE9               	incf	ldexp@newexp+1,f
  3339  0072  086B               	movf	??_ldexp+1,w
  3340  0073  07E9               	addwf	ldexp@newexp+1,f
  3341  0074  1FE9               	btfss	ldexp@newexp+1,7
  3342  0075  2885               	goto	l4136
  3343  0076  3022               	movlw	34
  3344  0077  1683               	bsf	3,5	;RP0=1, select bank1
  3345  0078  1303               	bcf	3,6	;RP1=0, select bank1
  3346  0079  00E9               	movwf	_errno^(0+128)
  3347  007A  3000               	movlw	0
  3348  007B  00EA               	movwf	(_errno^(0+128)+1)
  3349  007C  3000               	movlw	0
  3350  007D  1283               	bcf	3,5	;RP0=0, select bank0
  3351  007E  1303               	bcf	3,6	;RP1=0, select bank0
  3352  007F  00E5               	movwf	?_ldexp
  3353  0080  3000               	movlw	0
  3354  0081  00E6               	movwf	?_ldexp+1
  3355  0082  3000               	movlw	0
  3356  0083  00E7               	movwf	?_ldexp+2
  3357  0084  0008               	return
  3358  0085                     l4136:	
  3359  0085  0869               	movf	ldexp@newexp+1,w
  3360  0086  3A80               	xorlw	128
  3361  0087  00FF               	movwf	127
  3362  0088  3081               	movlw	129
  3363  0089  027F               	subwf	127,w
  3364  008A  1D03               	skipz
  3365  008B  288E               	goto	u3435
  3366  008C  3000               	movlw	0
  3367  008D  0268               	subwf	ldexp@newexp,w
  3368  008E                     u3435:	
  3369  008E  1C03               	skipc
  3370  008F  28CE               	goto	l4160
  3371  0090  3022               	movlw	34
  3372  0091  1683               	bsf	3,5	;RP0=1, select bank1
  3373  0092  1303               	bcf	3,6	;RP1=0, select bank1
  3374  0093  00E9               	movwf	_errno^(0+128)
  3375  0094  3000               	movlw	0
  3376  0095  00EA               	movwf	(_errno^(0+128)+1)
  3377  0096  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0097  1303               	bcf	3,6	;RP1=0, select bank0
  3379  0098  0865               	movf	ldexp@value,w
  3380  0099  00A0               	movwf	___ftge@ff1
  3381  009A  0866               	movf	ldexp@value+1,w
  3382  009B  00A1               	movwf	___ftge@ff1+1
  3383  009C  0867               	movf	ldexp@value+2,w
  3384  009D  00A2               	movwf	___ftge@ff1+2
  3385  009E  3000               	movlw	0
  3386  009F  00A3               	movwf	___ftge@ff2
  3387  00A0  3000               	movlw	0
  3388  00A1  00A4               	movwf	___ftge@ff2+1
  3389  00A2  3000               	movlw	0
  3390  00A3  00A5               	movwf	___ftge@ff2+2
  3391  00A4  160A  118A  2740   	fcall	___ftge
      +       120A  118A         
  3392  00A9  1803               	btfsc	3,0
  3393  00AA  28C5               	goto	l4156
  3394  00AB  30FF               	movlw	255
  3395  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  3396  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  3397  00AE  00EC               	movwf	_ldexp$896
  3398  00AF  307F               	movlw	127
  3399  00B0  00ED               	movwf	_ldexp$896+1
  3400  00B1  307F               	movlw	127
  3401  00B2  00EE               	movwf	_ldexp$896+2
  3402  00B3  086C               	movf	_ldexp$896,w
  3403  00B4  00A0               	movwf	___ftneg@f1
  3404  00B5  086D               	movf	_ldexp$896+1,w
  3405  00B6  00A1               	movwf	___ftneg@f1+1
  3406  00B7  086E               	movf	_ldexp$896+2,w
  3407  00B8  00A2               	movwf	___ftneg@f1+2
  3408  00B9  120A  118A  20E7   	fcall	___ftneg
  3409  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  3410  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  3411  00BE  0820               	movf	?___ftneg,w
  3412  00BF  00E5               	movwf	?_ldexp
  3413  00C0  0821               	movf	?___ftneg+1,w
  3414  00C1  00E6               	movwf	?_ldexp+1
  3415  00C2  0822               	movf	?___ftneg+2,w
  3416  00C3  00E7               	movwf	?_ldexp+2
  3417  00C4  0008               	return
  3418  00C5                     l4156:	
  3419  00C5  30FF               	movlw	255
  3420  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  3421  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  3422  00C8  00E5               	movwf	?_ldexp
  3423  00C9  307F               	movlw	127
  3424  00CA  00E6               	movwf	?_ldexp+1
  3425  00CB  307F               	movlw	127
  3426  00CC  00E7               	movwf	?_ldexp+2
  3427  00CD  0008               	return
  3428  00CE                     l4160:	
  3429  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  3430  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  3431  00D0  0869               	movf	ldexp@newexp+1,w
  3432  00D1  00EB               	movwf	??_ldexp+1
  3433  00D2  0868               	movf	ldexp@newexp,w
  3434  00D3  00EA               	movwf	??_ldexp
  3435  00D4  0D6B               	rlf	??_ldexp+1,w
  3436  00D5  0CEB               	rrf	??_ldexp+1,f
  3437  00D6  0CEA               	rrf	??_ldexp,f
  3438  00D7  0867               	movf	ldexp@value+2,w
  3439  00D8  066A               	xorwf	??_ldexp,w
  3440  00D9  3980               	andlw	-128
  3441  00DA  066A               	xorwf	??_ldexp,w
  3442  00DB  00E7               	movwf	ldexp@value+2
  3443  00DC  0868               	movf	ldexp@newexp,w
  3444  00DD  3901               	andlw	1
  3445  00DE  00EA               	movwf	??_ldexp
  3446  00DF  0CEA               	rrf	??_ldexp,f
  3447  00E0  0CEA               	rrf	??_ldexp,f
  3448  00E1  0866               	movf	ldexp@value+1,w
  3449  00E2  066A               	xorwf	??_ldexp,w
  3450  00E3  397F               	andlw	-129
  3451  00E4  066A               	xorwf	??_ldexp,w
  3452  00E5  00E6               	movwf	ldexp@value+1
  3453  00E6  0008               	return
  3454  00E7                     __end_of_ldexp:	
  3455                           
  3456                           	psect	text9
  3457  00E7                     __ptext9:	
  3458 ;; *************** function ___ftneg *****************
  3459 ;; Defined at:
  3460 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftneg.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;  f1              3    0[BANK0 ] float 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  3    0[BANK0 ] float 
  3467 ;; Registers used:
  3468 ;;		wreg
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3474 ;;      Params:         0       3       0       0       0
  3475 ;;      Locals:         0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0
  3477 ;;      Totals:         0       3       0       0       0
  3478 ;;Total ram usage:        3 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    2
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_pow
  3485 ;;		_exp
  3486 ;;		_ldexp
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           
  3491                           ;psect for function ___ftneg
  3492  00E7                     ___ftneg:	
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in ___ftneg: [wreg]
  3496  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  3497  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  3498  00E9  0822               	movf	___ftneg@f1+2,w
  3499  00EA  0421               	iorwf	___ftneg@f1+1,w
  3500  00EB  0420               	iorwf	___ftneg@f1,w
  3501  00EC  1903               	skipnz
  3502  00ED  0008               	return
  3503  00EE  3080               	movlw	128
  3504  00EF  06A2               	xorwf	___ftneg@f1+2,f
  3505  00F0  0008               	return
  3506  00F1                     __end_of___ftneg:	
  3507                           
  3508                           	psect	text10
  3509  0E0A                     __ptext10:	
  3510 ;; *************** function _floor *****************
  3511 ;; Defined at:
  3512 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\floor.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  x               3   10[BANK1 ] float 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  i               3   13[BANK1 ] float 
  3517 ;;  expon           2   16[BANK1 ] int 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  3   10[BANK1 ] int 
  3520 ;; Registers used:
  3521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3527 ;;      Params:         0       0       3       0       0
  3528 ;;      Locals:         0       0       5       0       0
  3529 ;;      Temps:          0       1       0       0       0
  3530 ;;      Totals:         0       1       8       0       0
  3531 ;;Total ram usage:        9 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    4
  3534 ;; This function calls:
  3535 ;;		___altoft
  3536 ;;		___ftadd
  3537 ;;		___ftge
  3538 ;;		___fttol
  3539 ;;		_frexp
  3540 ;; This function is called by:
  3541 ;;		_exp
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function _floor
  3547  0E0A                     _floor:	
  3548                           
  3549                           ;incstack = 0
  3550 ;; hardware stack exceeded
  3551                           ; Regs used in _floor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3552  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  3553  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  3554  0E0C  082A               	movf	floor@x^(0+128),w
  3555  0E0D  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0E0E  1303               	bcf	3,6	;RP1=0, select bank0
  3557  0E0F  00A0               	movwf	frexp@value
  3558  0E10  1683               	bsf	3,5	;RP0=1, select bank1
  3559  0E11  1303               	bcf	3,6	;RP1=0, select bank1
  3560  0E12  082B               	movf	(floor@x+1)^(0+128),w
  3561  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0E15  00A1               	movwf	frexp@value+1
  3564  0E16  1683               	bsf	3,5	;RP0=1, select bank1
  3565  0E17  1303               	bcf	3,6	;RP1=0, select bank1
  3566  0E18  082C               	movf	(floor@x+2)^(0+128),w
  3567  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  3568  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  3569  0E1B  00A2               	movwf	frexp@value+2
  3570  0E1C  30B0               	movlw	floor@expon& (0+255)
  3571  0E1D  00EF               	movwf	??_floor
  3572  0E1E  086F               	movf	??_floor,w
  3573  0E1F  00A3               	movwf	frexp@eptr
  3574  0E20  160A  118A  26B9   	fcall	_frexp
      +       120A  158A         
  3575  0E25  1683               	bsf	3,5	;RP0=1, select bank1
  3576  0E26  1303               	bcf	3,6	;RP1=0, select bank1
  3577  0E27  1FB1               	btfss	(floor@expon+1)^(0+128),7
  3578  0E28  2E58               	goto	l4096
  3579  0E29  082A               	movf	floor@x^(0+128),w
  3580  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  3581  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  3582  0E2C  00A0               	movwf	___ftge@ff1
  3583  0E2D  1683               	bsf	3,5	;RP0=1, select bank1
  3584  0E2E  1303               	bcf	3,6	;RP1=0, select bank1
  3585  0E2F  082B               	movf	(floor@x+1)^(0+128),w
  3586  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  3587  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  3588  0E32  00A1               	movwf	___ftge@ff1+1
  3589  0E33  1683               	bsf	3,5	;RP0=1, select bank1
  3590  0E34  1303               	bcf	3,6	;RP1=0, select bank1
  3591  0E35  082C               	movf	(floor@x+2)^(0+128),w
  3592  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  3593  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  3594  0E38  00A2               	movwf	___ftge@ff1+2
  3595  0E39  3000               	movlw	0
  3596  0E3A  00A3               	movwf	___ftge@ff2
  3597  0E3B  3000               	movlw	0
  3598  0E3C  00A4               	movwf	___ftge@ff2+1
  3599  0E3D  3000               	movlw	0
  3600  0E3E  00A5               	movwf	___ftge@ff2+2
  3601  0E3F  160A  118A  2740   	fcall	___ftge
      +       120A  158A         
  3602  0E44  1803               	btfsc	3,0
  3603  0E45  2E4F               	goto	l4092
  3604  0E46  3000               	movlw	0
  3605  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  3606  0E48  1303               	bcf	3,6	;RP1=0, select bank1
  3607  0E49  00AA               	movwf	?_floor^(0+128)
  3608  0E4A  3080               	movlw	128
  3609  0E4B  00AB               	movwf	(?_floor+1)^(0+128)
  3610  0E4C  30BF               	movlw	191
  3611  0E4D  00AC               	movwf	(?_floor+2)^(0+128)
  3612  0E4E  0008               	return
  3613  0E4F                     l4092:	
  3614  0E4F  3000               	movlw	0
  3615  0E50  1683               	bsf	3,5	;RP0=1, select bank1
  3616  0E51  1303               	bcf	3,6	;RP1=0, select bank1
  3617  0E52  00AA               	movwf	?_floor^(0+128)
  3618  0E53  3000               	movlw	0
  3619  0E54  00AB               	movwf	(?_floor+1)^(0+128)
  3620  0E55  3000               	movlw	0
  3621  0E56  00AC               	movwf	(?_floor+2)^(0+128)
  3622  0E57  0008               	return
  3623  0E58                     l4096:	
  3624  0E58  3000               	movlw	0
  3625  0E59  0231               	subwf	(floor@expon+1)^(0+128),w
  3626  0E5A  3015               	movlw	21
  3627  0E5B  1903               	skipnz
  3628  0E5C  0230               	subwf	floor@expon^(0+128),w
  3629  0E5D  1803               	btfsc	3,0
  3630  0E5E  0008               	return
  3631  0E5F  082A               	movf	floor@x^(0+128),w
  3632  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  3633  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  3634  0E62  00E3               	movwf	___fttol@f1
  3635  0E63  1683               	bsf	3,5	;RP0=1, select bank1
  3636  0E64  1303               	bcf	3,6	;RP1=0, select bank1
  3637  0E65  082B               	movf	(floor@x+1)^(0+128),w
  3638  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  3640  0E68  00E4               	movwf	___fttol@f1+1
  3641  0E69  1683               	bsf	3,5	;RP0=1, select bank1
  3642  0E6A  1303               	bcf	3,6	;RP1=0, select bank1
  3643  0E6B  082C               	movf	(floor@x+2)^(0+128),w
  3644  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0E6E  00E5               	movwf	___fttol@f1+2
  3647  0E6F  120A  158A  23B3   	fcall	___fttol
      +       120A  158A         
  3648  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  3649  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  3650  0E76  0866               	movf	?___fttol+3,w
  3651  0E77  00EE               	movwf	___altoft@c+3
  3652  0E78  0865               	movf	?___fttol+2,w
  3653  0E79  00ED               	movwf	___altoft@c+2
  3654  0E7A  0864               	movf	?___fttol+1,w
  3655  0E7B  00EC               	movwf	___altoft@c+1
  3656  0E7C  0863               	movf	?___fttol,w
  3657  0E7D  00EB               	movwf	___altoft@c
  3658  0E7E  120A  158A  2001   	fcall	___altoft
      +       120A  158A         
  3659  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  3660  0E84  1303               	bcf	3,6	;RP1=0, select bank0
  3661  0E85  086B               	movf	?___altoft,w
  3662  0E86  1683               	bsf	3,5	;RP0=1, select bank1
  3663  0E87  1303               	bcf	3,6	;RP1=0, select bank1
  3664  0E88  00AD               	movwf	floor@i^(0+128)
  3665  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  3666  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  3667  0E8B  086C               	movf	?___altoft+1,w
  3668  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  3669  0E8D  1303               	bcf	3,6	;RP1=0, select bank1
  3670  0E8E  00AE               	movwf	(floor@i+1)^(0+128)
  3671  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  3672  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  3673  0E91  086D               	movf	?___altoft+2,w
  3674  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  3675  0E93  1303               	bcf	3,6	;RP1=0, select bank1
  3676  0E94  00AF               	movwf	(floor@i+2)^(0+128)
  3677  0E95  082A               	movf	floor@x^(0+128),w
  3678  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  3679  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  3680  0E98  00A0               	movwf	___ftge@ff1
  3681  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  3682  0E9A  1303               	bcf	3,6	;RP1=0, select bank1
  3683  0E9B  082B               	movf	(floor@x+1)^(0+128),w
  3684  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  3685  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  3686  0E9E  00A1               	movwf	___ftge@ff1+1
  3687  0E9F  1683               	bsf	3,5	;RP0=1, select bank1
  3688  0EA0  1303               	bcf	3,6	;RP1=0, select bank1
  3689  0EA1  082C               	movf	(floor@x+2)^(0+128),w
  3690  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0EA4  00A2               	movwf	___ftge@ff1+2
  3693  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  3694  0EA6  1303               	bcf	3,6	;RP1=0, select bank1
  3695  0EA7  082D               	movf	floor@i^(0+128),w
  3696  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  3697  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  3698  0EAA  00A3               	movwf	___ftge@ff2
  3699  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  3700  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  3701  0EAD  082E               	movf	(floor@i+1)^(0+128),w
  3702  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0EB0  00A4               	movwf	___ftge@ff2+1
  3705  0EB1  1683               	bsf	3,5	;RP0=1, select bank1
  3706  0EB2  1303               	bcf	3,6	;RP1=0, select bank1
  3707  0EB3  082F               	movf	(floor@i+2)^(0+128),w
  3708  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  3709  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0EB6  00A5               	movwf	___ftge@ff2+2
  3711  0EB7  160A  118A  2740   	fcall	___ftge
      +       120A  158A         
  3712  0EBC  1803               	btfsc	3,0
  3713  0EBD  2EEE               	goto	l4106
  3714  0EBE  3000               	movlw	0
  3715  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  3717  0EC1  00CE               	movwf	___ftadd@f1
  3718  0EC2  3080               	movlw	128
  3719  0EC3  00CF               	movwf	___ftadd@f1+1
  3720  0EC4  30BF               	movlw	191
  3721  0EC5  00D0               	movwf	___ftadd@f1+2
  3722  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  3723  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  3724  0EC8  082D               	movf	floor@i^(0+128),w
  3725  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  3727  0ECB  00D1               	movwf	___ftadd@f2
  3728  0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  3729  0ECD  1303               	bcf	3,6	;RP1=0, select bank1
  3730  0ECE  082E               	movf	(floor@i+1)^(0+128),w
  3731  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  3732  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  3733  0ED1  00D2               	movwf	___ftadd@f2+1
  3734  0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  3735  0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  3736  0ED4  082F               	movf	(floor@i+2)^(0+128),w
  3737  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  3738  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  3739  0ED7  00D3               	movwf	___ftadd@f2+2
  3740  0ED8  120A  158A  26F7   	fcall	___ftadd
  3741  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  3742  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  3743  0EDD  084E               	movf	?___ftadd,w
  3744  0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  3745  0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  3746  0EE0  00AA               	movwf	?_floor^(0+128)
  3747  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  3748  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  3749  0EE3  084F               	movf	?___ftadd+1,w
  3750  0EE4  1683               	bsf	3,5	;RP0=1, select bank1
  3751  0EE5  1303               	bcf	3,6	;RP1=0, select bank1
  3752  0EE6  00AB               	movwf	(?_floor+1)^(0+128)
  3753  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0EE9  0850               	movf	?___ftadd+2,w
  3756  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  3757  0EEB  1303               	bcf	3,6	;RP1=0, select bank1
  3758  0EEC  00AC               	movwf	(?_floor+2)^(0+128)
  3759  0EED  0008               	return
  3760  0EEE                     l4106:	
  3761  0EEE  1683               	bsf	3,5	;RP0=1, select bank1
  3762  0EEF  1303               	bcf	3,6	;RP1=0, select bank1
  3763  0EF0  082D               	movf	floor@i^(0+128),w
  3764  0EF1  00AA               	movwf	?_floor^(0+128)
  3765  0EF2  082E               	movf	(floor@i+1)^(0+128),w
  3766  0EF3  00AB               	movwf	(?_floor+1)^(0+128)
  3767  0EF4  082F               	movf	(floor@i+2)^(0+128),w
  3768  0EF5  00AC               	movwf	(?_floor+2)^(0+128)
  3769  0EF6  0008               	return
  3770  0EF7                     __end_of_floor:	
  3771                           
  3772                           	psect	text11
  3773  16B9                     __ptext11:	
  3774 ;; *************** function _frexp *****************
  3775 ;; Defined at:
  3776 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\frexp.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;  value           3    0[BANK0 ] int 
  3779 ;;  eptr            1    3[BANK0 ] PTR int 
  3780 ;;		 -> log@exponent(2), floor@expon(2), 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  3    0[BANK0 ] PTR int 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3792 ;;      Params:         0       4       0       0       0
  3793 ;;      Locals:         0       0       0       0       0
  3794 ;;      Temps:          0       2       0       0       0
  3795 ;;      Totals:         0       6       0       0       0
  3796 ;;Total ram usage:        6 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    2
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_floor
  3803 ;;		_log
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _frexp
  3809  16B9                     _frexp:	
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3813  16B9  1283               	bcf	3,5	;RP0=0, select bank0
  3814  16BA  1303               	bcf	3,6	;RP1=0, select bank0
  3815  16BB  0822               	movf	frexp@value+2,w
  3816  16BC  0421               	iorwf	frexp@value+1,w
  3817  16BD  0420               	iorwf	frexp@value,w
  3818  16BE  1D03               	skipz
  3819  16BF  2ECD               	goto	l4010
  3820  16C0  0823               	movf	frexp@eptr,w
  3821  16C1  0084               	movwf	4
  3822  16C2  1383               	bcf	3,7	;select IRP bank0
  3823  16C3  0180               	clrf	0
  3824  16C4  0A84               	incf	4,f
  3825  16C5  0180               	clrf	0
  3826  16C6  3000               	movlw	0
  3827  16C7  00A0               	movwf	?_frexp
  3828  16C8  3000               	movlw	0
  3829  16C9  00A1               	movwf	?_frexp+1
  3830  16CA  3000               	movlw	0
  3831  16CB  00A2               	movwf	?_frexp+2
  3832  16CC  0008               	return
  3833  16CD                     l4010:	
  3834  16CD  0822               	movf	frexp@value+2,w
  3835  16CE  397F               	andlw	127
  3836  16CF  00A4               	movwf	??_frexp
  3837  16D0  01A5               	clrf	??_frexp+1
  3838  16D1  1003               	clrc
  3839  16D2  0DA4               	rlf	??_frexp,f
  3840  16D3  0DA5               	rlf	??_frexp+1,f
  3841  16D4  0823               	movf	frexp@eptr,w
  3842  16D5  0084               	movwf	4
  3843  16D6  0824               	movf	??_frexp,w
  3844  16D7  1383               	bcf	3,7	;select IRP bank0
  3845  16D8  0080               	movwf	0
  3846  16D9  0A84               	incf	4,f
  3847  16DA  0825               	movf	??_frexp+1,w
  3848  16DB  0080               	movwf	0
  3849  16DC  0D21               	rlf	frexp@value+1,w
  3850  16DD  0D21               	rlf	frexp@value+1,w
  3851  16DE  3901               	andlw	1
  3852  16DF  00A4               	movwf	??_frexp
  3853  16E0  01A5               	clrf	??_frexp+1
  3854  16E1  0823               	movf	frexp@eptr,w
  3855  16E2  0084               	movwf	4
  3856  16E3  0824               	movf	??_frexp,w
  3857  16E4  0480               	iorwf	0,f
  3858  16E5  0A84               	incf	4,f
  3859  16E6  0825               	movf	??_frexp+1,w
  3860  16E7  0480               	iorwf	0,f
  3861  16E8  0823               	movf	frexp@eptr,w
  3862  16E9  0084               	movwf	4
  3863  16EA  3082               	movlw	130
  3864  16EB  0780               	addwf	0,f
  3865  16EC  0F84               	incfsz	4,f
  3866  16ED  0800               	movf	0,w
  3867  16EE  1803               	skipnc
  3868  16EF  0A00               	incf	0,w
  3869  16F0  00FF               	movwf	127
  3870  16F1  30FF               	movlw	255
  3871  16F2  077F               	addwf	127,w
  3872  16F3  0080               	movwf	0
  3873  16F4  0384               	decf	4,f
  3874  16F5  0822               	movf	frexp@value+2,w
  3875  16F6  3980               	andlw	-128
  3876  16F7  383F               	iorlw	63
  3877  16F8  00A2               	movwf	frexp@value+2
  3878  16F9  13A1               	bcf	frexp@value+1,7
  3879  16FA  0008               	return
  3880  16FB                     __end_of_frexp:	
  3881                           
  3882                           	psect	text12
  3883  0BB3                     __ptext12:	
  3884 ;; *************** function ___fttol *****************
  3885 ;; Defined at:
  3886 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\fttol.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  f1              3   67[BANK0 ] float 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  lval            4    1[BANK1 ] unsigned long 
  3891 ;;  exp1            1    5[BANK1 ] unsigned char 
  3892 ;;  sign1           1    0[BANK1 ] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  4   67[BANK0 ] long 
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3902 ;;      Params:         0       4       0       0       0
  3903 ;;      Locals:         0       0       6       0       0
  3904 ;;      Temps:          0       4       0       0       0
  3905 ;;      Totals:         0       8       6       0       0
  3906 ;;Total ram usage:       14 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    2
  3909 ;; This function calls:
  3910 ;;		Nothing
  3911 ;; This function is called by:
  3912 ;;		_fillRegister
  3913 ;;		_pow
  3914 ;;		_exp
  3915 ;;		_floor
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           
  3920                           ;psect for function ___fttol
  3921  0BB3                     ___fttol:	
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3925  0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  3927  0BB5  0863               	movf	___fttol@f1,w
  3928  0BB6  00E7               	movwf	??___fttol
  3929  0BB7  0864               	movf	___fttol@f1+1,w
  3930  0BB8  00E8               	movwf	??___fttol+1
  3931  0BB9  0865               	movf	___fttol@f1+2,w
  3932  0BBA  00E9               	movwf	??___fttol+2
  3933  0BBB  1003               	clrc
  3934  0BBC  0D68               	rlf	??___fttol+1,w
  3935  0BBD  0D69               	rlf	??___fttol+2,w
  3936  0BBE  00EA               	movwf	??___fttol+3
  3937  0BBF  086A               	movf	??___fttol+3,w
  3938  0BC0  1683               	bsf	3,5	;RP0=1, select bank1
  3939  0BC1  1303               	bcf	3,6	;RP1=0, select bank1
  3940  0BC2  00A5               	movwf	___fttol@exp1^(0+128)
  3941  0BC3  08A5               	movf	___fttol@exp1^(0+128),f
  3942  0BC4  1D03               	skipz
  3943  0BC5  2BD1               	goto	l3032
  3944  0BC6  3000               	movlw	0
  3945  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  3946  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  3947  0BC9  00E6               	movwf	?___fttol+3
  3948  0BCA  3000               	movlw	0
  3949  0BCB  00E5               	movwf	?___fttol+2
  3950  0BCC  3000               	movlw	0
  3951  0BCD  00E4               	movwf	?___fttol+1
  3952  0BCE  3000               	movlw	0
  3953  0BCF  00E3               	movwf	?___fttol
  3954  0BD0  0008               	return
  3955  0BD1                     l3032:	
  3956  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  3957  0BD2  0863               	movf	___fttol@f1,w
  3958  0BD3  00E7               	movwf	??___fttol
  3959  0BD4  0864               	movf	___fttol@f1+1,w
  3960  0BD5  00E8               	movwf	??___fttol+1
  3961  0BD6  0865               	movf	___fttol@f1+2,w
  3962  0BD7  00E9               	movwf	??___fttol+2
  3963  0BD8  3017               	movlw	23
  3964  0BD9                     u1975:	
  3965  0BD9  1003               	clrc
  3966  0BDA  0CE9               	rrf	??___fttol+2,f
  3967  0BDB  0CE8               	rrf	??___fttol+1,f
  3968  0BDC  0CE7               	rrf	??___fttol,f
  3969  0BDD  3EFF               	addlw	-1
  3970  0BDE  1D03               	skipz
  3971  0BDF  2BD9               	goto	u1975
  3972  0BE0  0867               	movf	??___fttol,w
  3973  0BE1  00EA               	movwf	??___fttol+3
  3974  0BE2  086A               	movf	??___fttol+3,w
  3975  0BE3  1683               	bsf	3,5	;RP0=1, select bank1
  3976  0BE4  1303               	bcf	3,6	;RP1=0, select bank1
  3977  0BE5  00A0               	movwf	___fttol@sign1^(0+128)
  3978  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  3980  0BE8  17E4               	bsf	___fttol@f1+1,7
  3981  0BE9  30FF               	movlw	255
  3982  0BEA  05E3               	andwf	___fttol@f1,f
  3983  0BEB  30FF               	movlw	255
  3984  0BEC  05E4               	andwf	___fttol@f1+1,f
  3985  0BED  3000               	movlw	0
  3986  0BEE  05E5               	andwf	___fttol@f1+2,f
  3987  0BEF  0863               	movf	___fttol@f1,w
  3988  0BF0  1683               	bsf	3,5	;RP0=1, select bank1
  3989  0BF1  1303               	bcf	3,6	;RP1=0, select bank1
  3990  0BF2  00A1               	movwf	___fttol@lval^(0+128)
  3991  0BF3  1283               	bcf	3,5	;RP0=0, select bank0
  3992  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
  3993  0BF5  0864               	movf	___fttol@f1+1,w
  3994  0BF6  1683               	bsf	3,5	;RP0=1, select bank1
  3995  0BF7  1303               	bcf	3,6	;RP1=0, select bank1
  3996  0BF8  00A2               	movwf	(___fttol@lval^(0+128)+1)
  3997  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  3998  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  3999  0BFB  0865               	movf	___fttol@f1+2,w
  4000  0BFC  1683               	bsf	3,5	;RP0=1, select bank1
  4001  0BFD  1303               	bcf	3,6	;RP1=0, select bank1
  4002  0BFE  00A3               	movwf	(___fttol@lval^(0+128)+2)
  4003  0BFF  01A4               	clrf	(___fttol@lval^(0+128)+3)
  4004  0C00  308E               	movlw	142
  4005  0C01  02A5               	subwf	___fttol@exp1^(0+128),f
  4006  0C02  1FA5               	btfss	___fttol@exp1^(0+128),7
  4007  0C03  2C2A               	goto	l3052
  4008  0C04  0825               	movf	___fttol@exp1^(0+128),w
  4009  0C05  3A80               	xorlw	128
  4010  0C06  3E8F               	addlw	143
  4011  0C07  1803               	skipnc
  4012  0C08  2C14               	goto	l3050
  4013  0C09  3000               	movlw	0
  4014  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  4015  0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  4016  0C0C  00E6               	movwf	?___fttol+3
  4017  0C0D  3000               	movlw	0
  4018  0C0E  00E5               	movwf	?___fttol+2
  4019  0C0F  3000               	movlw	0
  4020  0C10  00E4               	movwf	?___fttol+1
  4021  0C11  3000               	movlw	0
  4022  0C12  00E3               	movwf	?___fttol
  4023  0C13  0008               	return
  4024  0C14                     l3050:	
  4025  0C14  3001               	movlw	1
  4026  0C15                     u2005:	
  4027  0C15  1003               	clrc
  4028  0C16  1683               	bsf	3,5	;RP0=1, select bank1
  4029  0C17  1303               	bcf	3,6	;RP1=0, select bank1
  4030  0C18  0CA4               	rrf	(___fttol@lval+3)^(0+128),f
  4031  0C19  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  4032  0C1A  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  4033  0C1B  0CA1               	rrf	___fttol@lval^(0+128),f
  4034  0C1C  3EFF               	addlw	-1
  4035  0C1D  1D03               	skipz
  4036  0C1E  2C15               	goto	u2005
  4037  0C1F  3001               	movlw	1
  4038  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  4039  0C21  1303               	bcf	3,6	;RP1=0, select bank0
  4040  0C22  00E7               	movwf	??___fttol
  4041  0C23  0867               	movf	??___fttol,w
  4042  0C24  1683               	bsf	3,5	;RP0=1, select bank1
  4043  0C25  1303               	bcf	3,6	;RP1=0, select bank1
  4044  0C26  07A5               	addwf	___fttol@exp1^(0+128),f
  4045  0C27  1903               	btfsc	3,2
  4046  0C28  2C50               	goto	l3062
  4047  0C29  2C14               	goto	l3050
  4048  0C2A                     l3052:	
  4049  0C2A  3018               	movlw	24
  4050  0C2B  0225               	subwf	___fttol@exp1^(0+128),w
  4051  0C2C  1C03               	skipc
  4052  0C2D  2C4B               	goto	l3060
  4053  0C2E  3000               	movlw	0
  4054  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  4055  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0C31  00E6               	movwf	?___fttol+3
  4057  0C32  3000               	movlw	0
  4058  0C33  00E5               	movwf	?___fttol+2
  4059  0C34  3000               	movlw	0
  4060  0C35  00E4               	movwf	?___fttol+1
  4061  0C36  3000               	movlw	0
  4062  0C37  00E3               	movwf	?___fttol
  4063  0C38  0008               	return
  4064  0C39                     l3058:	
  4065  0C39  3001               	movlw	1
  4066  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0C3B  00E7               	movwf	??___fttol
  4068  0C3C                     u2035:	
  4069  0C3C  1003               	clrc
  4070  0C3D  1683               	bsf	3,5	;RP0=1, select bank1
  4071  0C3E  1303               	bcf	3,6	;RP1=0, select bank1
  4072  0C3F  0DA1               	rlf	___fttol@lval^(0+128),f
  4073  0C40  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  4074  0C41  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  4075  0C42  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  4076  0C43  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0C44  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0C45  0BE7               	decfsz	??___fttol,f
  4079  0C46  2C3C               	goto	u2035
  4080  0C47  3001               	movlw	1
  4081  0C48  1683               	bsf	3,5	;RP0=1, select bank1
  4082  0C49  1303               	bcf	3,6	;RP1=0, select bank1
  4083  0C4A  02A5               	subwf	___fttol@exp1^(0+128),f
  4084  0C4B                     l3060:	
  4085  0C4B  1683               	bsf	3,5	;RP0=1, select bank1
  4086  0C4C  1303               	bcf	3,6	;RP1=0, select bank1
  4087  0C4D  08A5               	movf	___fttol@exp1^(0+128),f
  4088  0C4E  1D03               	skipz
  4089  0C4F  2C39               	goto	l3058
  4090  0C50                     l3062:	
  4091  0C50  0820               	movf	___fttol@sign1^(0+128),w
  4092  0C51  1903               	btfsc	3,2
  4093  0C52  2C5E               	goto	l3066
  4094  0C53  09A1               	comf	___fttol@lval^(0+128),f
  4095  0C54  09A2               	comf	(___fttol@lval+1)^(0+128),f
  4096  0C55  09A3               	comf	(___fttol@lval+2)^(0+128),f
  4097  0C56  09A4               	comf	(___fttol@lval+3)^(0+128),f
  4098  0C57  0AA1               	incf	___fttol@lval^(0+128),f
  4099  0C58  1903               	skipnz
  4100  0C59  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  4101  0C5A  1903               	skipnz
  4102  0C5B  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  4103  0C5C  1903               	skipnz
  4104  0C5D  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  4105  0C5E                     l3066:	
  4106  0C5E  0824               	movf	(___fttol@lval+3)^(0+128),w
  4107  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0C61  00E6               	movwf	?___fttol+3
  4110  0C62  1683               	bsf	3,5	;RP0=1, select bank1
  4111  0C63  1303               	bcf	3,6	;RP1=0, select bank1
  4112  0C64  0823               	movf	(___fttol@lval+2)^(0+128),w
  4113  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0C67  00E5               	movwf	?___fttol+2
  4116  0C68  1683               	bsf	3,5	;RP0=1, select bank1
  4117  0C69  1303               	bcf	3,6	;RP1=0, select bank1
  4118  0C6A  0822               	movf	(___fttol@lval+1)^(0+128),w
  4119  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  4121  0C6D  00E4               	movwf	?___fttol+1
  4122  0C6E  1683               	bsf	3,5	;RP0=1, select bank1
  4123  0C6F  1303               	bcf	3,6	;RP1=0, select bank1
  4124  0C70  0821               	movf	___fttol@lval^(0+128),w
  4125  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  4126  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  4127  0C73  00E3               	movwf	?___fttol
  4128  0C74  0008               	return
  4129  0C75                     __end_of___fttol:	
  4130                           
  4131                           	psect	text13
  4132  1740                     __ptext13:	
  4133 ;; *************** function ___ftge *****************
  4134 ;; Defined at:
  4135 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftge.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  ff1             3    0[BANK0 ] float 
  4138 ;;  ff2             3    3[BANK0 ] float 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;		None               void
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4150 ;;      Params:         0       6       0       0       0
  4151 ;;      Locals:         0       0       0       0       0
  4152 ;;      Temps:          0       6       0       0       0
  4153 ;;      Totals:         0      12       0       0       0
  4154 ;;Total ram usage:       12 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    2
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_pow
  4161 ;;		_exp
  4162 ;;		_floor
  4163 ;;		_ldexp
  4164 ;;		_log
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function ___ftge
  4170  1740                     ___ftge:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4174  1740  1283               	bcf	3,5	;RP0=0, select bank0
  4175  1741  1303               	bcf	3,6	;RP1=0, select bank0
  4176  1742  1FA2               	btfss	___ftge@ff1+2,7
  4177  1743  2F69               	goto	l2952
  4178  1744  3000               	movlw	0
  4179  1745  00A6               	movwf	??___ftge
  4180  1746  3000               	movlw	0
  4181  1747  00A7               	movwf	??___ftge+1
  4182  1748  3080               	movlw	128
  4183  1749  00A8               	movwf	??___ftge+2
  4184  174A  0920               	comf	___ftge@ff1,w
  4185  174B  00A9               	movwf	??___ftge+3
  4186  174C  0921               	comf	___ftge@ff1+1,w
  4187  174D  00AA               	movwf	??___ftge+4
  4188  174E  0922               	comf	___ftge@ff1+2,w
  4189  174F  00AB               	movwf	??___ftge+5
  4190  1750  0AA9               	incf	??___ftge+3,f
  4191  1751  1903               	skipnz
  4192  1752  0AAA               	incf	??___ftge+4,f
  4193  1753  1903               	skipnz
  4194  1754  0AAB               	incf	??___ftge+5,f
  4195  1755  0829               	movf	??___ftge+3,w
  4196  1756  07A6               	addwf	??___ftge,f
  4197  1757  082A               	movf	??___ftge+4,w
  4198  1758  1803               	skipnc
  4199  1759  0F2A               	incfsz	??___ftge+4,w
  4200  175A  2F5C               	goto	u1771
  4201  175B  2F5D               	goto	u1772
  4202  175C                     u1771:	
  4203  175C  07A7               	addwf	??___ftge+1,f
  4204  175D                     u1772:	
  4205  175D  082B               	movf	??___ftge+5,w
  4206  175E  1803               	skipnc
  4207  175F  0F2B               	incfsz	??___ftge+5,w
  4208  1760  2F62               	goto	u1773
  4209  1761  2F63               	goto	u1774
  4210  1762                     u1773:	
  4211  1762  07A8               	addwf	??___ftge+2,f
  4212  1763                     u1774:	
  4213  1763  0826               	movf	??___ftge,w
  4214  1764  00A0               	movwf	___ftge@ff1
  4215  1765  0827               	movf	??___ftge+1,w
  4216  1766  00A1               	movwf	___ftge@ff1+1
  4217  1767  0828               	movf	??___ftge+2,w
  4218  1768  00A2               	movwf	___ftge@ff1+2
  4219  1769                     l2952:	
  4220  1769  1FA5               	btfss	___ftge@ff2+2,7
  4221  176A  2F90               	goto	l2956
  4222  176B  3000               	movlw	0
  4223  176C  00A6               	movwf	??___ftge
  4224  176D  3000               	movlw	0
  4225  176E  00A7               	movwf	??___ftge+1
  4226  176F  3080               	movlw	128
  4227  1770  00A8               	movwf	??___ftge+2
  4228  1771  0923               	comf	___ftge@ff2,w
  4229  1772  00A9               	movwf	??___ftge+3
  4230  1773  0924               	comf	___ftge@ff2+1,w
  4231  1774  00AA               	movwf	??___ftge+4
  4232  1775  0925               	comf	___ftge@ff2+2,w
  4233  1776  00AB               	movwf	??___ftge+5
  4234  1777  0AA9               	incf	??___ftge+3,f
  4235  1778  1903               	skipnz
  4236  1779  0AAA               	incf	??___ftge+4,f
  4237  177A  1903               	skipnz
  4238  177B  0AAB               	incf	??___ftge+5,f
  4239  177C  0829               	movf	??___ftge+3,w
  4240  177D  07A6               	addwf	??___ftge,f
  4241  177E  082A               	movf	??___ftge+4,w
  4242  177F  1803               	skipnc
  4243  1780  0F2A               	incfsz	??___ftge+4,w
  4244  1781  2F83               	goto	u1791
  4245  1782  2F84               	goto	u1792
  4246  1783                     u1791:	
  4247  1783  07A7               	addwf	??___ftge+1,f
  4248  1784                     u1792:	
  4249  1784  082B               	movf	??___ftge+5,w
  4250  1785  1803               	skipnc
  4251  1786  0F2B               	incfsz	??___ftge+5,w
  4252  1787  2F89               	goto	u1793
  4253  1788  2F8A               	goto	u1794
  4254  1789                     u1793:	
  4255  1789  07A8               	addwf	??___ftge+2,f
  4256  178A                     u1794:	
  4257  178A  0826               	movf	??___ftge,w
  4258  178B  00A3               	movwf	___ftge@ff2
  4259  178C  0827               	movf	??___ftge+1,w
  4260  178D  00A4               	movwf	___ftge@ff2+1
  4261  178E  0828               	movf	??___ftge+2,w
  4262  178F  00A5               	movwf	___ftge@ff2+2
  4263  1790                     l2956:	
  4264  1790  3080               	movlw	128
  4265  1791  06A2               	xorwf	___ftge@ff1+2,f
  4266  1792  3080               	movlw	128
  4267  1793  06A5               	xorwf	___ftge@ff2+2,f
  4268  1794  0825               	movf	___ftge@ff2+2,w
  4269  1795  0222               	subwf	___ftge@ff1+2,w
  4270  1796  1D03               	skipz
  4271  1797  0008               	return
  4272  1798  0824               	movf	___ftge@ff2+1,w
  4273  1799  0221               	subwf	___ftge@ff1+1,w
  4274  179A  1D03               	skipz
  4275  179B  0008               	return
  4276  179C  0823               	movf	___ftge@ff2,w
  4277  179D  0220               	subwf	___ftge@ff1,w
  4278  179E  0008               	return
  4279  179F                     __end_of___ftge:	
  4280                           
  4281                           	psect	text14
  4282  0801                     __ptext14:	
  4283 ;; *************** function ___altoft *****************
  4284 ;; Defined at:
  4285 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\altoft.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  c               4   75[BANK0 ] long 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  sign            1    9[BANK1 ] unsigned char 
  4290 ;;  exp             1    8[BANK1 ] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  3   75[BANK0 ] float 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4300 ;;      Params:         0       4       0       0       0
  4301 ;;      Locals:         0       0       2       0       0
  4302 ;;      Temps:          0       0       2       0       0
  4303 ;;      Totals:         0       4       4       0       0
  4304 ;;Total ram usage:        8 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    3
  4307 ;; This function calls:
  4308 ;;		___ftpack
  4309 ;; This function is called by:
  4310 ;;		_floor
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function ___altoft
  4316  0801                     ___altoft:	
  4317                           
  4318                           ;incstack = 0
  4319 ;; hardware stack exceeded
  4320                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4321  0801  1683               	bsf	3,5	;RP0=1, select bank1
  4322  0802  1303               	bcf	3,6	;RP1=0, select bank1
  4323  0803  01A9               	clrf	___altoft@sign^(0+128)
  4324  0804  308E               	movlw	142
  4325  0805  00A6               	movwf	??___altoft^(0+128)
  4326  0806  0826               	movf	??___altoft^(0+128),w
  4327  0807  00A8               	movwf	___altoft@exp^(0+128)
  4328  0808  1283               	bcf	3,5	;RP0=0, select bank0
  4329  0809  1303               	bcf	3,6	;RP1=0, select bank0
  4330  080A  1FEE               	btfss	___altoft@c+3,7
  4331  080B  281B               	goto	l3850
  4332  080C  09EB               	comf	___altoft@c,f
  4333  080D  09EC               	comf	___altoft@c+1,f
  4334  080E  09ED               	comf	___altoft@c+2,f
  4335  080F  09EE               	comf	___altoft@c+3,f
  4336  0810  0AEB               	incf	___altoft@c,f
  4337  0811  1903               	skipnz
  4338  0812  0AEC               	incf	___altoft@c+1,f
  4339  0813  1903               	skipnz
  4340  0814  0AED               	incf	___altoft@c+2,f
  4341  0815  1903               	skipnz
  4342  0816  0AEE               	incf	___altoft@c+3,f
  4343  0817  1683               	bsf	3,5	;RP0=1, select bank1
  4344  0818  1303               	bcf	3,6	;RP1=0, select bank1
  4345  0819  01A9               	clrf	___altoft@sign^(0+128)
  4346  081A  0AA9               	incf	___altoft@sign^(0+128),f
  4347  081B                     l3850:	
  4348  081B  30FF               	movlw	255
  4349  081C  1283               	bcf	3,5	;RP0=0, select bank0
  4350  081D  056E               	andwf	___altoft@c+3,w
  4351  081E  1903               	btfsc	3,2
  4352  081F  2831               	goto	l3852
  4353  0820  3001               	movlw	1
  4354  0821                     u2835:	
  4355  0821  1003               	clrc
  4356  0822  1283               	bcf	3,5	;RP0=0, select bank0
  4357  0823  0CEE               	rrf	___altoft@c+3,f
  4358  0824  0CED               	rrf	___altoft@c+2,f
  4359  0825  0CEC               	rrf	___altoft@c+1,f
  4360  0826  0CEB               	rrf	___altoft@c,f
  4361  0827  3EFF               	addlw	-1
  4362  0828  1D03               	skipz
  4363  0829  2821               	goto	u2835
  4364  082A  3001               	movlw	1
  4365  082B  1683               	bsf	3,5	;RP0=1, select bank1
  4366  082C  1303               	bcf	3,6	;RP1=0, select bank1
  4367  082D  00A6               	movwf	??___altoft^(0+128)
  4368  082E  0826               	movf	??___altoft^(0+128),w
  4369  082F  07A8               	addwf	___altoft@exp^(0+128),f
  4370  0830  281B               	goto	l3850
  4371  0831                     l3852:	
  4372  0831  086B               	movf	___altoft@c,w
  4373  0832  00A0               	movwf	___ftpack@arg
  4374  0833  086C               	movf	___altoft@c+1,w
  4375  0834  00A1               	movwf	___ftpack@arg+1
  4376  0835  086D               	movf	___altoft@c+2,w
  4377  0836  00A2               	movwf	___ftpack@arg+2
  4378  0837  1683               	bsf	3,5	;RP0=1, select bank1
  4379  0838  1303               	bcf	3,6	;RP1=0, select bank1
  4380  0839  0828               	movf	___altoft@exp^(0+128),w
  4381  083A  00A6               	movwf	??___altoft^(0+128)
  4382  083B  0826               	movf	??___altoft^(0+128),w
  4383  083C  1283               	bcf	3,5	;RP0=0, select bank0
  4384  083D  1303               	bcf	3,6	;RP1=0, select bank0
  4385  083E  00A3               	movwf	___ftpack@exp
  4386  083F  1683               	bsf	3,5	;RP0=1, select bank1
  4387  0840  1303               	bcf	3,6	;RP1=0, select bank1
  4388  0841  0829               	movf	___altoft@sign^(0+128),w
  4389  0842  00A7               	movwf	(??___altoft+1)^(0+128)
  4390  0843  0827               	movf	(??___altoft+1)^(0+128),w
  4391  0844  1283               	bcf	3,5	;RP0=0, select bank0
  4392  0845  1303               	bcf	3,6	;RP1=0, select bank0
  4393  0846  00A4               	movwf	___ftpack@sign
  4394  0847  120A  158A  2053   	fcall	___ftpack
  4395  084A  1283               	bcf	3,5	;RP0=0, select bank0
  4396  084B  1303               	bcf	3,6	;RP1=0, select bank0
  4397  084C  0820               	movf	?___ftpack,w
  4398  084D  00EB               	movwf	?___altoft
  4399  084E  0821               	movf	?___ftpack+1,w
  4400  084F  00EC               	movwf	?___altoft+1
  4401  0850  0822               	movf	?___ftpack+2,w
  4402  0851  00ED               	movwf	?___altoft+2
  4403  0852  0008               	return
  4404  0853                     __end_of___altoft:	
  4405                           
  4406                           	psect	text15
  4407  08BD                     __ptext15:	
  4408 ;; *************** function _eval_poly *****************
  4409 ;; Defined at:
  4410 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\evalpoly.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  x               3   59[BANK0 ] float 
  4413 ;;  d               1   62[BANK0 ] PTR const 
  4414 ;;		 -> log@coeff(27), exp@coeff(30), 
  4415 ;;  n               2   63[BANK0 ] int 
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;  res             3   66[BANK0 ] int 
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  3   59[BANK0 ] int 
  4420 ;; Registers used:
  4421 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4427 ;;      Params:         0       6       0       0       0
  4428 ;;      Locals:         0       3       0       0       0
  4429 ;;      Temps:          0       1       0       0       0
  4430 ;;      Totals:         0      10       0       0       0
  4431 ;;Total ram usage:       10 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    4
  4434 ;; This function calls:
  4435 ;;		___bmul
  4436 ;;		___ftadd
  4437 ;;		___ftmul
  4438 ;; This function is called by:
  4439 ;;		_exp
  4440 ;;		_log
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _eval_poly
  4446  08BD                     _eval_poly:	
  4447                           
  4448                           ;incstack = 0
  4449 ;; hardware stack exceeded
  4450                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4451  08BD  3003               	movlw	3
  4452  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  4453  08BF  1303               	bcf	3,6	;RP1=0, select bank0
  4454  08C0  00E1               	movwf	??_eval_poly
  4455  08C1  0861               	movf	??_eval_poly,w
  4456  08C2  00A0               	movwf	___bmul@multiplicand
  4457  08C3  085F               	movf	eval_poly@n,w
  4458  08C4  120A  118A  27EB   	fcall	___bmul
      +       120A  158A         
  4459  08C9  1283               	bcf	3,5	;RP0=0, select bank0
  4460  08CA  1303               	bcf	3,6	;RP1=0, select bank0
  4461  08CB  075E               	addwf	eval_poly@d,w
  4462  08CC  0084               	movwf	4
  4463  08CD  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4464  08D2  00E2               	movwf	eval_poly@res
  4465  08D3  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4466  08D8  00E3               	movwf	eval_poly@res+1
  4467  08D9  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4468  08DE                     L3:	
  4469  08DE  00E4               	movwf	eval_poly@res+2
  4470  08DF  0860               	movf	eval_poly@n+1,w
  4471  08E0  045F               	iorwf	eval_poly@n,w
  4472  08E1  1903               	btfsc	3,2
  4473  08E2  292F               	goto	l4116
  4474  08E3  3003               	movlw	3
  4475  08E4  00E1               	movwf	??_eval_poly
  4476  08E5  0861               	movf	??_eval_poly,w
  4477  08E6  00A0               	movwf	___bmul@multiplicand
  4478  08E7  30FF               	movlw	255
  4479  08E8  07DF               	addwf	eval_poly@n,f
  4480  08E9  1803               	skipnc
  4481  08EA  0AE0               	incf	eval_poly@n+1,f
  4482  08EB  30FF               	movlw	255
  4483  08EC  07E0               	addwf	eval_poly@n+1,f
  4484  08ED  085F               	movf	eval_poly@n,w
  4485  08EE  120A  118A  27EB   	fcall	___bmul
      +       120A  158A         
  4486  08F3  1283               	bcf	3,5	;RP0=0, select bank0
  4487  08F4  1303               	bcf	3,6	;RP1=0, select bank0
  4488  08F5  075E               	addwf	eval_poly@d,w
  4489  08F6  0084               	movwf	4
  4490  08F7  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4491  08FC  00CE               	movwf	___ftadd@f1
  4492  08FD  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4493  0902  00CF               	movwf	___ftadd@f1+1
  4494  0903  160A  118A  2000   	fcall	stringdir
      +       120A  158A         
  4495  0908  00D0               	movwf	___ftadd@f1+2
  4496  0909  0862               	movf	eval_poly@res,w
  4497  090A  00AE               	movwf	___ftmul@f1
  4498  090B  0863               	movf	eval_poly@res+1,w
  4499  090C  00AF               	movwf	___ftmul@f1+1
  4500  090D  0864               	movf	eval_poly@res+2,w
  4501  090E  00B0               	movwf	___ftmul@f1+2
  4502  090F  085B               	movf	eval_poly@x,w
  4503  0910  00B1               	movwf	___ftmul@f2
  4504  0911  085C               	movf	eval_poly@x+1,w
  4505  0912  00B2               	movwf	___ftmul@f2+1
  4506  0913  085D               	movf	eval_poly@x+2,w
  4507  0914  00B3               	movwf	___ftmul@f2+2
  4508  0915  120A  118A  2718   	fcall	___ftmul
      +       120A  158A         
  4509  091A  1283               	bcf	3,5	;RP0=0, select bank0
  4510  091B  1303               	bcf	3,6	;RP1=0, select bank0
  4511  091C  082E               	movf	?___ftmul,w
  4512  091D  00D1               	movwf	___ftadd@f2
  4513  091E  082F               	movf	?___ftmul+1,w
  4514  091F  00D2               	movwf	___ftadd@f2+1
  4515  0920  0830               	movf	?___ftmul+2,w
  4516  0921  00D3               	movwf	___ftadd@f2+2
  4517  0922  120A  158A  26F7   	fcall	___ftadd
      +       120A  158A         
  4518  0927  1283               	bcf	3,5	;RP0=0, select bank0
  4519  0928  1303               	bcf	3,6	;RP1=0, select bank0
  4520  0929  084E               	movf	?___ftadd,w
  4521  092A  00E2               	movwf	eval_poly@res
  4522  092B  084F               	movf	?___ftadd+1,w
  4523  092C  00E3               	movwf	eval_poly@res+1
  4524  092D  0850               	movf	?___ftadd+2,w
  4525  092E  28DE               	goto	L3
  4526  092F                     l4116:	
  4527  092F  0862               	movf	eval_poly@res,w
  4528  0930  00DB               	movwf	?_eval_poly
  4529  0931  0863               	movf	eval_poly@res+1,w
  4530  0932  00DC               	movwf	?_eval_poly+1
  4531  0933  0864               	movf	eval_poly@res+2,w
  4532  0934  00DD               	movwf	?_eval_poly+2
  4533  0935  0008               	return
  4534  0936                     __end_of_eval_poly:	
  4535                           
  4536                           	psect	text16
  4537  07EB                     __ptext16:	
  4538 ;; *************** function ___bmul *****************
  4539 ;; Defined at:
  4540 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\bmul.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  multiplier      1    wreg     unsigned char 
  4543 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4546 ;;  product         1    2[BANK0 ] unsigned char 
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      unsigned char 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4556 ;;      Params:         0       1       0       0       0
  4557 ;;      Locals:         0       2       0       0       0
  4558 ;;      Temps:          0       1       0       0       0
  4559 ;;      Totals:         0       4       0       0       0
  4560 ;;Total ram usage:        4 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    2
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		_eval_poly
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           
  4571                           ;psect for function ___bmul
  4572  07EB                     ___bmul:	
  4573                           
  4574                           ;incstack = 0
  4575                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4576                           ;___bmul@multiplier stored from wreg
  4577  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  4578  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  4579  07ED  00A3               	movwf	___bmul@multiplier
  4580  07EE  01A2               	clrf	___bmul@product
  4581  07EF                     l3858:	
  4582  07EF  1C23               	btfss	___bmul@multiplier,0
  4583  07F0  2FF5               	goto	l3862
  4584  07F1  0820               	movf	___bmul@multiplicand,w
  4585  07F2  00A1               	movwf	??___bmul
  4586  07F3  0821               	movf	??___bmul,w
  4587  07F4  07A2               	addwf	___bmul@product,f
  4588  07F5                     l3862:	
  4589  07F5  1003               	clrc
  4590  07F6  0DA0               	rlf	___bmul@multiplicand,f
  4591  07F7  1003               	clrc
  4592  07F8  0CA3               	rrf	___bmul@multiplier,f
  4593  07F9  08A3               	movf	___bmul@multiplier,f
  4594  07FA  1D03               	skipz
  4595  07FB  2FEF               	goto	l3858
  4596  07FC  0822               	movf	___bmul@product,w
  4597  07FD  0008               	return
  4598  07FE                     __end_of___bmul:	
  4599                           
  4600                           	psect	text17
  4601  15CA                     __ptext17:	
  4602 ;; *************** function ___ftsub *****************
  4603 ;; Defined at:
  4604 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftsub.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  f2              3   59[BANK0 ] float 
  4607 ;;  f1              3   62[BANK0 ] float 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  3   59[BANK0 ] float 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4619 ;;      Params:         0       6       0       0       0
  4620 ;;      Locals:         0       0       0       0       0
  4621 ;;      Temps:          0       0       0       0       0
  4622 ;;      Totals:         0       6       0       0       0
  4623 ;;Total ram usage:        6 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    4
  4626 ;; This function calls:
  4627 ;;		___ftadd
  4628 ;; This function is called by:
  4629 ;;		_exp
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function ___ftsub
  4635  15CA                     ___ftsub:	
  4636                           
  4637                           ;incstack = 0
  4638 ;; hardware stack exceeded
  4639                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4640  15CA  3080               	movlw	128
  4641  15CB  1283               	bcf	3,5	;RP0=0, select bank0
  4642  15CC  1303               	bcf	3,6	;RP1=0, select bank0
  4643  15CD  06DD               	xorwf	___ftsub@f2+2,f
  4644  15CE  085E               	movf	___ftsub@f1,w
  4645  15CF  00CE               	movwf	___ftadd@f1
  4646  15D0  085F               	movf	___ftsub@f1+1,w
  4647  15D1  00CF               	movwf	___ftadd@f1+1
  4648  15D2  0860               	movf	___ftsub@f1+2,w
  4649  15D3  00D0               	movwf	___ftadd@f1+2
  4650  15D4  085B               	movf	___ftsub@f2,w
  4651  15D5  00D1               	movwf	___ftadd@f2
  4652  15D6  085C               	movf	___ftsub@f2+1,w
  4653  15D7  00D2               	movwf	___ftadd@f2+1
  4654  15D8  085D               	movf	___ftsub@f2+2,w
  4655  15D9  00D3               	movwf	___ftadd@f2+2
  4656  15DA  120A  158A  26F7   	fcall	___ftadd
  4657  15DD  1283               	bcf	3,5	;RP0=0, select bank0
  4658  15DE  1303               	bcf	3,6	;RP1=0, select bank0
  4659  15DF  084E               	movf	?___ftadd,w
  4660  15E0  00DB               	movwf	?___ftsub
  4661  15E1  084F               	movf	?___ftadd+1,w
  4662  15E2  00DC               	movwf	?___ftsub+1
  4663  15E3  0850               	movf	?___ftadd+2,w
  4664  15E4  00DD               	movwf	?___ftsub+2
  4665  15E5  0008               	return
  4666  15E6                     __end_of___ftsub:	
  4667                           
  4668                           	psect	text18
  4669  0EF7                     __ptext18:	
  4670 ;; *************** function ___ftadd *****************
  4671 ;; Defined at:
  4672 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftadd.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  f1              3   46[BANK0 ] float 
  4675 ;;  f2              3   49[BANK0 ] float 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  exp1            1   58[BANK0 ] unsigned char 
  4678 ;;  exp2            1   57[BANK0 ] unsigned char 
  4679 ;;  sign            1   56[BANK0 ] unsigned char 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  3   46[BANK0 ] float 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0, pclath, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4689 ;;      Params:         0       6       0       0       0
  4690 ;;      Locals:         0       3       0       0       0
  4691 ;;      Temps:          0       4       0       0       0
  4692 ;;      Totals:         0      13       0       0       0
  4693 ;;Total ram usage:       13 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    3
  4696 ;; This function calls:
  4697 ;;		___ftpack
  4698 ;; This function is called by:
  4699 ;;		_readLight
  4700 ;;		_tempCalibration
  4701 ;;		_readTemp
  4702 ;;		___ftsub
  4703 ;;		_floor
  4704 ;;		_log
  4705 ;;		_eval_poly
  4706 ;;		_singleAxisMeasure
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           
  4711                           ;psect for function ___ftadd
  4712  0EF7                     ___ftadd:	
  4713                           
  4714                           ;incstack = 0
  4715                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4716  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  4717  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  4718  0EF9  084E               	movf	___ftadd@f1,w
  4719  0EFA  00D4               	movwf	??___ftadd
  4720  0EFB  084F               	movf	___ftadd@f1+1,w
  4721  0EFC  00D5               	movwf	??___ftadd+1
  4722  0EFD  0850               	movf	___ftadd@f1+2,w
  4723  0EFE  00D6               	movwf	??___ftadd+2
  4724  0EFF  1003               	clrc
  4725  0F00  0D55               	rlf	??___ftadd+1,w
  4726  0F01  0D56               	rlf	??___ftadd+2,w
  4727  0F02  00D7               	movwf	??___ftadd+3
  4728  0F03  0857               	movf	??___ftadd+3,w
  4729  0F04  00DA               	movwf	___ftadd@exp1
  4730  0F05  0851               	movf	___ftadd@f2,w
  4731  0F06  00D4               	movwf	??___ftadd
  4732  0F07  0852               	movf	___ftadd@f2+1,w
  4733  0F08  00D5               	movwf	??___ftadd+1
  4734  0F09  0853               	movf	___ftadd@f2+2,w
  4735  0F0A  00D6               	movwf	??___ftadd+2
  4736  0F0B  1003               	clrc
  4737  0F0C  0D55               	rlf	??___ftadd+1,w
  4738  0F0D  0D56               	rlf	??___ftadd+2,w
  4739  0F0E  00D7               	movwf	??___ftadd+3
  4740  0F0F  0857               	movf	??___ftadd+3,w
  4741  0F10  00D9               	movwf	___ftadd@exp2
  4742  0F11  085A               	movf	___ftadd@exp1,w
  4743  0F12  1903               	btfsc	3,2
  4744  0F13  2F20               	goto	l3880
  4745  0F14  0859               	movf	___ftadd@exp2,w
  4746  0F15  025A               	subwf	___ftadd@exp1,w
  4747  0F16  1803               	skipnc
  4748  0F17  2F27               	goto	l3884
  4749  0F18  035A               	decf	___ftadd@exp1,w
  4750  0F19  3AFF               	xorlw	255
  4751  0F1A  0759               	addwf	___ftadd@exp2,w
  4752  0F1B  00D4               	movwf	??___ftadd
  4753  0F1C  3019               	movlw	25
  4754  0F1D  0254               	subwf	??___ftadd,w
  4755  0F1E  1C03               	skipc
  4756  0F1F  2F27               	goto	l3884
  4757  0F20                     l3880:	
  4758  0F20  0851               	movf	___ftadd@f2,w
  4759  0F21  00CE               	movwf	?___ftadd
  4760  0F22  0852               	movf	___ftadd@f2+1,w
  4761  0F23  00CF               	movwf	?___ftadd+1
  4762  0F24  0853               	movf	___ftadd@f2+2,w
  4763  0F25  00D0               	movwf	?___ftadd+2
  4764  0F26  0008               	return
  4765  0F27                     l3884:	
  4766  0F27  0859               	movf	___ftadd@exp2,w
  4767  0F28  1903               	btfsc	3,2
  4768  0F29  0008               	return
  4769  0F2A  085A               	movf	___ftadd@exp1,w
  4770  0F2B  0259               	subwf	___ftadd@exp2,w
  4771  0F2C  1803               	skipnc
  4772  0F2D  2F36               	goto	l3890
  4773  0F2E  0359               	decf	___ftadd@exp2,w
  4774  0F2F  3AFF               	xorlw	255
  4775  0F30  075A               	addwf	___ftadd@exp1,w
  4776  0F31  00D4               	movwf	??___ftadd
  4777  0F32  3019               	movlw	25
  4778  0F33  0254               	subwf	??___ftadd,w
  4779  0F34  1803               	btfsc	3,0
  4780  0F35  0008               	return
  4781  0F36                     l3890:	
  4782  0F36  3006               	movlw	6
  4783  0F37  00D4               	movwf	??___ftadd
  4784  0F38  0854               	movf	??___ftadd,w
  4785  0F39  00D8               	movwf	___ftadd@sign
  4786  0F3A  1BD0               	btfsc	___ftadd@f1+2,7
  4787  0F3B  17D8               	bsf	___ftadd@sign,7
  4788  0F3C  1BD3               	btfsc	___ftadd@f2+2,7
  4789  0F3D  1758               	bsf	___ftadd@sign,6
  4790  0F3E  17CF               	bsf	___ftadd@f1+1,7
  4791  0F3F  30FF               	movlw	255
  4792  0F40  05CE               	andwf	___ftadd@f1,f
  4793  0F41  30FF               	movlw	255
  4794  0F42  05CF               	andwf	___ftadd@f1+1,f
  4795  0F43  3000               	movlw	0
  4796  0F44  05D0               	andwf	___ftadd@f1+2,f
  4797  0F45  17D2               	bsf	___ftadd@f2+1,7
  4798  0F46  30FF               	movlw	255
  4799  0F47  05D1               	andwf	___ftadd@f2,f
  4800  0F48  30FF               	movlw	255
  4801  0F49  05D2               	andwf	___ftadd@f2+1,f
  4802  0F4A  3000               	movlw	0
  4803  0F4B  05D3               	andwf	___ftadd@f2+2,f
  4804  0F4C  0859               	movf	___ftadd@exp2,w
  4805  0F4D  025A               	subwf	___ftadd@exp1,w
  4806  0F4E  1803               	skipnc
  4807  0F4F  2F76               	goto	l3912
  4808  0F50                     l3902:	
  4809  0F50  3001               	movlw	1
  4810  0F51                     u2965:	
  4811  0F51  1003               	clrc
  4812  0F52  0DD1               	rlf	___ftadd@f2,f
  4813  0F53  0DD2               	rlf	___ftadd@f2+1,f
  4814  0F54  0DD3               	rlf	___ftadd@f2+2,f
  4815  0F55  3EFF               	addlw	-1
  4816  0F56  1D03               	skipz
  4817  0F57  2F51               	goto	u2965
  4818  0F58  3001               	movlw	1
  4819  0F59  02D9               	subwf	___ftadd@exp2,f
  4820  0F5A  0859               	movf	___ftadd@exp2,w
  4821  0F5B  065A               	xorwf	___ftadd@exp1,w
  4822  0F5C  1903               	skipnz
  4823  0F5D  2F71               	goto	l3910
  4824  0F5E  3001               	movlw	1
  4825  0F5F  02D8               	subwf	___ftadd@sign,f
  4826  0F60  0858               	movf	___ftadd@sign,w
  4827  0F61  3907               	andlw	7
  4828  0F62  1903               	btfsc	3,2
  4829  0F63  2F71               	goto	l3910
  4830  0F64  2F50               	goto	l3902
  4831  0F65                     l3908:	
  4832  0F65  3001               	movlw	1
  4833  0F66                     u2995:	
  4834  0F66  1003               	clrc
  4835  0F67  0CD0               	rrf	___ftadd@f1+2,f
  4836  0F68  0CCF               	rrf	___ftadd@f1+1,f
  4837  0F69  0CCE               	rrf	___ftadd@f1,f
  4838  0F6A  3EFF               	addlw	-1
  4839  0F6B  1D03               	skipz
  4840  0F6C  2F66               	goto	u2995
  4841  0F6D  3001               	movlw	1
  4842  0F6E  00D4               	movwf	??___ftadd
  4843  0F6F  0854               	movf	??___ftadd,w
  4844  0F70  07DA               	addwf	___ftadd@exp1,f
  4845  0F71                     l3910:	
  4846  0F71  085A               	movf	___ftadd@exp1,w
  4847  0F72  0659               	xorwf	___ftadd@exp2,w
  4848  0F73  1903               	btfsc	3,2
  4849  0F74  2F9F               	goto	l452
  4850  0F75  2F65               	goto	l3908
  4851  0F76                     l3912:	
  4852  0F76  085A               	movf	___ftadd@exp1,w
  4853  0F77  0259               	subwf	___ftadd@exp2,w
  4854  0F78  1803               	skipnc
  4855  0F79  2F9F               	goto	l452
  4856  0F7A                     l3914:	
  4857  0F7A  3001               	movlw	1
  4858  0F7B                     u3025:	
  4859  0F7B  1003               	clrc
  4860  0F7C  0DCE               	rlf	___ftadd@f1,f
  4861  0F7D  0DCF               	rlf	___ftadd@f1+1,f
  4862  0F7E  0DD0               	rlf	___ftadd@f1+2,f
  4863  0F7F  3EFF               	addlw	-1
  4864  0F80  1D03               	skipz
  4865  0F81  2F7B               	goto	u3025
  4866  0F82  3001               	movlw	1
  4867  0F83  02DA               	subwf	___ftadd@exp1,f
  4868  0F84  0859               	movf	___ftadd@exp2,w
  4869  0F85  065A               	xorwf	___ftadd@exp1,w
  4870  0F86  1903               	skipnz
  4871  0F87  2F9B               	goto	l3922
  4872  0F88  3001               	movlw	1
  4873  0F89  02D8               	subwf	___ftadd@sign,f
  4874  0F8A  0858               	movf	___ftadd@sign,w
  4875  0F8B  3907               	andlw	7
  4876  0F8C  1903               	btfsc	3,2
  4877  0F8D  2F9B               	goto	l3922
  4878  0F8E  2F7A               	goto	l3914
  4879  0F8F                     l3920:	
  4880  0F8F  3001               	movlw	1
  4881  0F90                     u3055:	
  4882  0F90  1003               	clrc
  4883  0F91  0CD3               	rrf	___ftadd@f2+2,f
  4884  0F92  0CD2               	rrf	___ftadd@f2+1,f
  4885  0F93  0CD1               	rrf	___ftadd@f2,f
  4886  0F94  3EFF               	addlw	-1
  4887  0F95  1D03               	skipz
  4888  0F96  2F90               	goto	u3055
  4889  0F97  3001               	movlw	1
  4890  0F98  00D4               	movwf	??___ftadd
  4891  0F99  0854               	movf	??___ftadd,w
  4892  0F9A  07D9               	addwf	___ftadd@exp2,f
  4893  0F9B                     l3922:	
  4894  0F9B  085A               	movf	___ftadd@exp1,w
  4895  0F9C  0659               	xorwf	___ftadd@exp2,w
  4896  0F9D  1D03               	skipz
  4897  0F9E  2F8F               	goto	l3920
  4898  0F9F                     l452:	
  4899  0F9F  1FD8               	btfss	___ftadd@sign,7
  4900  0FA0  2FB1               	goto	l3926
  4901  0FA1  30FF               	movlw	255
  4902  0FA2  06CE               	xorwf	___ftadd@f1,f
  4903  0FA3  30FF               	movlw	255
  4904  0FA4  06CF               	xorwf	___ftadd@f1+1,f
  4905  0FA5  30FF               	movlw	255
  4906  0FA6  06D0               	xorwf	___ftadd@f1+2,f
  4907  0FA7  3001               	movlw	1
  4908  0FA8  07CE               	addwf	___ftadd@f1,f
  4909  0FA9  3000               	movlw	0
  4910  0FAA  1803               	skipnc
  4911  0FAB  3001               	movlw	1
  4912  0FAC  07CF               	addwf	___ftadd@f1+1,f
  4913  0FAD  3000               	movlw	0
  4914  0FAE  1803               	skipnc
  4915  0FAF  3001               	movlw	1
  4916  0FB0  07D0               	addwf	___ftadd@f1+2,f
  4917  0FB1                     l3926:	
  4918  0FB1  1F58               	btfss	___ftadd@sign,6
  4919  0FB2  2FC3               	goto	l3930
  4920  0FB3  30FF               	movlw	255
  4921  0FB4  06D1               	xorwf	___ftadd@f2,f
  4922  0FB5  30FF               	movlw	255
  4923  0FB6  06D2               	xorwf	___ftadd@f2+1,f
  4924  0FB7  30FF               	movlw	255
  4925  0FB8  06D3               	xorwf	___ftadd@f2+2,f
  4926  0FB9  3001               	movlw	1
  4927  0FBA  07D1               	addwf	___ftadd@f2,f
  4928  0FBB  3000               	movlw	0
  4929  0FBC  1803               	skipnc
  4930  0FBD  3001               	movlw	1
  4931  0FBE  07D2               	addwf	___ftadd@f2+1,f
  4932  0FBF  3000               	movlw	0
  4933  0FC0  1803               	skipnc
  4934  0FC1  3001               	movlw	1
  4935  0FC2  07D3               	addwf	___ftadd@f2+2,f
  4936  0FC3                     l3930:	
  4937  0FC3  01D8               	clrf	___ftadd@sign
  4938  0FC4  084E               	movf	___ftadd@f1,w
  4939  0FC5  07D1               	addwf	___ftadd@f2,f
  4940  0FC6  084F               	movf	___ftadd@f1+1,w
  4941  0FC7  1103               	clrz
  4942  0FC8  1803               	skipnc
  4943  0FC9  0A4F               	incf	___ftadd@f1+1,w
  4944  0FCA  1D03               	btfss	3,2
  4945  0FCB  07D2               	addwf	___ftadd@f2+1,f
  4946  0FCC  0850               	movf	___ftadd@f1+2,w
  4947  0FCD  1103               	clrz
  4948  0FCE  1803               	skipnc
  4949  0FCF  0A50               	incf	___ftadd@f1+2,w
  4950  0FD0  1D03               	btfss	3,2
  4951  0FD1  07D3               	addwf	___ftadd@f2+2,f
  4952  0FD2  1FD3               	btfss	___ftadd@f2+2,7
  4953  0FD3  2FE6               	goto	l3940
  4954  0FD4  30FF               	movlw	255
  4955  0FD5  06D1               	xorwf	___ftadd@f2,f
  4956  0FD6  30FF               	movlw	255
  4957  0FD7  06D2               	xorwf	___ftadd@f2+1,f
  4958  0FD8  30FF               	movlw	255
  4959  0FD9  06D3               	xorwf	___ftadd@f2+2,f
  4960  0FDA  3001               	movlw	1
  4961  0FDB  07D1               	addwf	___ftadd@f2,f
  4962  0FDC  3000               	movlw	0
  4963  0FDD  1803               	skipnc
  4964  0FDE  3001               	movlw	1
  4965  0FDF  07D2               	addwf	___ftadd@f2+1,f
  4966  0FE0  3000               	movlw	0
  4967  0FE1  1803               	skipnc
  4968  0FE2  3001               	movlw	1
  4969  0FE3  07D3               	addwf	___ftadd@f2+2,f
  4970  0FE4  01D8               	clrf	___ftadd@sign
  4971  0FE5  0AD8               	incf	___ftadd@sign,f
  4972  0FE6                     l3940:	
  4973  0FE6  0851               	movf	___ftadd@f2,w
  4974  0FE7  00A0               	movwf	___ftpack@arg
  4975  0FE8  0852               	movf	___ftadd@f2+1,w
  4976  0FE9  00A1               	movwf	___ftpack@arg+1
  4977  0FEA  0853               	movf	___ftadd@f2+2,w
  4978  0FEB  00A2               	movwf	___ftpack@arg+2
  4979  0FEC  085A               	movf	___ftadd@exp1,w
  4980  0FED  00D4               	movwf	??___ftadd
  4981  0FEE  0854               	movf	??___ftadd,w
  4982  0FEF  00A3               	movwf	___ftpack@exp
  4983  0FF0  0858               	movf	___ftadd@sign,w
  4984  0FF1  00D5               	movwf	??___ftadd+1
  4985  0FF2  0855               	movf	??___ftadd+1,w
  4986  0FF3  00A4               	movwf	___ftpack@sign
  4987  0FF4  120A  158A  2053   	fcall	___ftpack
  4988  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  4989  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  4990  0FF9  0820               	movf	?___ftpack,w
  4991  0FFA  00CE               	movwf	?___ftadd
  4992  0FFB  0821               	movf	?___ftpack+1,w
  4993  0FFC  00CF               	movwf	?___ftadd+1
  4994  0FFD  0822               	movf	?___ftpack+2,w
  4995  0FFE  00D0               	movwf	?___ftadd+2
  4996  0FFF  0008               	return
  4997  1000                     __end_of___ftadd:	
  4998                           
  4999                           	psect	text19
  5000  1655                     __ptext19:	
  5001 ;; *************** function ___lltoft *****************
  5002 ;; Defined at:
  5003 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\lltoft.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  c               4    8[BANK0 ] unsigned long 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;  exp             1   13[BANK0 ] unsigned char 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  3    8[BANK0 ] float 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2, status,0, pclath, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5017 ;;      Params:         0       4       0       0       0
  5018 ;;      Locals:         0       1       0       0       0
  5019 ;;      Temps:          0       1       0       0       0
  5020 ;;      Totals:         0       6       0       0       0
  5021 ;;Total ram usage:        6 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; Hardware stack levels required when called:    3
  5024 ;; This function calls:
  5025 ;;		___ftpack
  5026 ;; This function is called by:
  5027 ;;		_pow
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           
  5032                           ;psect for function ___lltoft
  5033  1655                     ___lltoft:	
  5034                           
  5035                           ;incstack = 0
  5036                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5037  1655  308E               	movlw	142
  5038  1656  1283               	bcf	3,5	;RP0=0, select bank0
  5039  1657  1303               	bcf	3,6	;RP1=0, select bank0
  5040  1658  00AC               	movwf	??___lltoft
  5041  1659  082C               	movf	??___lltoft,w
  5042  165A  00AD               	movwf	___lltoft@exp
  5043  165B                     l4170:	
  5044  165B  30FF               	movlw	255
  5045  165C  052B               	andwf	___lltoft@c+3,w
  5046  165D  1903               	btfsc	3,2
  5047  165E  2E6D               	goto	l4172
  5048  165F  3001               	movlw	1
  5049  1660                     u3455:	
  5050  1660  1003               	clrc
  5051  1661  0CAB               	rrf	___lltoft@c+3,f
  5052  1662  0CAA               	rrf	___lltoft@c+2,f
  5053  1663  0CA9               	rrf	___lltoft@c+1,f
  5054  1664  0CA8               	rrf	___lltoft@c,f
  5055  1665  3EFF               	addlw	-1
  5056  1666  1D03               	skipz
  5057  1667  2E60               	goto	u3455
  5058  1668  3001               	movlw	1
  5059  1669  00AC               	movwf	??___lltoft
  5060  166A  082C               	movf	??___lltoft,w
  5061  166B  07AD               	addwf	___lltoft@exp,f
  5062  166C  2E5B               	goto	l4170
  5063  166D                     l4172:	
  5064  166D  0828               	movf	___lltoft@c,w
  5065  166E  00A0               	movwf	___ftpack@arg
  5066  166F  0829               	movf	___lltoft@c+1,w
  5067  1670  00A1               	movwf	___ftpack@arg+1
  5068  1671  082A               	movf	___lltoft@c+2,w
  5069  1672  00A2               	movwf	___ftpack@arg+2
  5070  1673  082D               	movf	___lltoft@exp,w
  5071  1674  00AC               	movwf	??___lltoft
  5072  1675  082C               	movf	??___lltoft,w
  5073  1676  00A3               	movwf	___ftpack@exp
  5074  1677  01A4               	clrf	___ftpack@sign
  5075  1678  120A  158A  2053   	fcall	___ftpack
  5076  167B  1283               	bcf	3,5	;RP0=0, select bank0
  5077  167C  1303               	bcf	3,6	;RP1=0, select bank0
  5078  167D  0820               	movf	?___ftpack,w
  5079  167E  00A8               	movwf	?___lltoft
  5080  167F  0821               	movf	?___ftpack+1,w
  5081  1680  00A9               	movwf	?___lltoft+1
  5082  1681  0822               	movf	?___ftpack+2,w
  5083  1682  00AA               	movwf	?___lltoft+2
  5084  1683  0008               	return
  5085  1684                     __end_of___lltoft:	
  5086                           
  5087                           	psect	text20
  5088  16FB                     __ptext20:	
  5089 ;; *************** function _readAccelerometer *****************
  5090 ;; Defined at:
  5091 ;;		line 230 in file "Analog.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  axis            2   49[BANK0 ] int 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;		None
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  3   49[BANK0 ] float 
  5098 ;; Registers used:
  5099 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5105 ;;      Params:         0       3       0       0       0
  5106 ;;      Locals:         0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0
  5108 ;;      Totals:         0       3       0       0       0
  5109 ;;Total ram usage:        3 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    5
  5112 ;; This function calls:
  5113 ;;		___awtoft
  5114 ;;		_pointToVoltage
  5115 ;;		_read
  5116 ;; This function is called by:
  5117 ;;		_fillRegister
  5118 ;;		_singleAxisMeasure
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           
  5123                           ;psect for function _readAccelerometer
  5124  16FB                     _readAccelerometer:	
  5125                           
  5126                           ;Analog.c: 231: if(axis == (2) ||axis == (3) ||axis == (4))
  5127                           
  5128                           ;incstack = 0
  5129                           ; Regs used in _readAccelerometer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5130  16FB  3002               	movlw	2
  5131  16FC  1283               	bcf	3,5	;RP0=0, select bank0
  5132  16FD  1303               	bcf	3,6	;RP1=0, select bank0
  5133  16FE  0651               	xorwf	readAccelerometer@axis,w
  5134  16FF  0452               	iorwf	readAccelerometer@axis+1,w
  5135  1700  1903               	skipnz
  5136  1701  2F0C               	goto	l4370
  5137  1702  3003               	movlw	3
  5138  1703  0651               	xorwf	readAccelerometer@axis,w
  5139  1704  0452               	iorwf	readAccelerometer@axis+1,w
  5140  1705  1903               	skipnz
  5141  1706  2F0C               	goto	l4370
  5142  1707  3004               	movlw	4
  5143  1708  0651               	xorwf	readAccelerometer@axis,w
  5144  1709  0452               	iorwf	readAccelerometer@axis+1,w
  5145  170A  1D03               	skipz
  5146  170B  2F39               	goto	l4376
  5147  170C                     l4370:	
  5148                           
  5149                           ;Analog.c: 232: return pointToVoltage((int) read(axis, 0));
  5150  170C  01A2               	clrf	read@justification
  5151  170D  0852               	movf	readAccelerometer@axis+1,w
  5152  170E  01A1               	clrf	read@channel+1
  5153  170F  07A1               	addwf	read@channel+1,f
  5154  1710  0851               	movf	readAccelerometer@axis,w
  5155  1711  01A0               	clrf	read@channel
  5156  1712  07A0               	addwf	read@channel,f
  5157  1713  120A  158A  22F7   	fcall	_read
      +       160A  118A         
  5158  1718  1283               	bcf	3,5	;RP0=0, select bank0
  5159  1719  1303               	bcf	3,6	;RP1=0, select bank0
  5160  171A  0821               	movf	?_read+1,w
  5161  171B  01A9               	clrf	___awtoft@c+1
  5162  171C  07A9               	addwf	___awtoft@c+1,f
  5163  171D  0820               	movf	?_read,w
  5164  171E  01A8               	clrf	___awtoft@c
  5165  171F  07A8               	addwf	___awtoft@c,f
  5166  1720  160A  118A  2603   	fcall	___awtoft
      +       160A  118A         
  5167  1725  1283               	bcf	3,5	;RP0=0, select bank0
  5168  1726  1303               	bcf	3,6	;RP1=0, select bank0
  5169  1727  0828               	movf	?___awtoft,w
  5170  1728  00CE               	movwf	pointToVoltage@point
  5171  1729  0829               	movf	?___awtoft+1,w
  5172  172A  00CF               	movwf	pointToVoltage@point+1
  5173  172B  082A               	movf	?___awtoft+2,w
  5174  172C  00D0               	movwf	pointToVoltage@point+2
  5175  172D  160A  118A  2628   	fcall	_pointToVoltage
  5176  1730  1283               	bcf	3,5	;RP0=0, select bank0
  5177  1731  1303               	bcf	3,6	;RP1=0, select bank0
  5178  1732  084E               	movf	?_pointToVoltage,w
  5179  1733  00D1               	movwf	?_readAccelerometer
  5180  1734  084F               	movf	?_pointToVoltage+1,w
  5181  1735  00D2               	movwf	?_readAccelerometer+1
  5182  1736  0850               	movf	?_pointToVoltage+2,w
  5183  1737  00D3               	movwf	?_readAccelerometer+2
  5184  1738  0008               	return
  5185  1739                     l4376:	
  5186                           
  5187                           ;Analog.c: 233: else
  5188                           ;Analog.c: 234: return -11;
  5189  1739  3000               	movlw	0
  5190  173A  00D1               	movwf	?_readAccelerometer
  5191  173B  3030               	movlw	48
  5192  173C  00D2               	movwf	?_readAccelerometer+1
  5193  173D  30C1               	movlw	193
  5194  173E  00D3               	movwf	?_readAccelerometer+2
  5195  173F  0008               	return
  5196  1740                     __end_of_readAccelerometer:	
  5197                           
  5198                           	psect	text21
  5199  0AF7                     __ptext21:	
  5200 ;; *************** function _read *****************
  5201 ;; Defined at:
  5202 ;;		line 16 in file "Analog.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  channel         2    0[BANK0 ] int 
  5205 ;;  justificatio    1    2[BANK0 ] unsigned char 
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  analogValue     2    3[BANK0 ] int 
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  2    0[BANK0 ] int 
  5210 ;; Registers used:
  5211 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5217 ;;      Params:         0       3       0       0       0
  5218 ;;      Locals:         0       2       0       0       0
  5219 ;;      Temps:          0       0       0       0       0
  5220 ;;      Totals:         0       5       0       0       0
  5221 ;;Total ram usage:        5 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    2
  5224 ;; This function calls:
  5225 ;;		Nothing
  5226 ;; This function is called by:
  5227 ;;		_readLight
  5228 ;;		_tempCalibration
  5229 ;;		_readTemp
  5230 ;;		_readAccelerometer
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           
  5235                           ;psect for function _read
  5236  0AF7                     _read:	
  5237                           
  5238                           ;Analog.c: 17: int analogValue;
  5239                           ;Analog.c: 20: ANSEL = 0x00;
  5240                           
  5241                           ;incstack = 0
  5242                           ; Regs used in _read: [wreg-fsr0h+status,2+status,0]
  5243  0AF7  1683               	bsf	3,5	;RP0=1, select bank3
  5244  0AF8  1703               	bsf	3,6	;RP1=1, select bank3
  5245  0AF9  0188               	clrf	8	;volatile
  5246                           
  5247                           ;Analog.c: 21: switch (channel) {
  5248  0AFA  2B48               	goto	l4260
  5249  0AFB                     l142:	
  5250                           ;Analog.c: 22: case 0:
  5251                           
  5252                           
  5253                           ;Analog.c: 23: ANSELbits.ANS0 = 1;
  5254  0AFB  1683               	bsf	3,5	;RP0=1, select bank3
  5255  0AFC  1703               	bsf	3,6	;RP1=1, select bank3
  5256  0AFD  1408               	bsf	8,0	;volatile
  5257                           
  5258                           ;Analog.c: 24: ADCON0bits.CHS0 = 0;
  5259  0AFE  1283               	bcf	3,5	;RP0=0, select bank0
  5260  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  5261  0B00  111F               	bcf	31,2	;volatile
  5262  0B01  2B08               	goto	L4
  5263  0B02                     l144:	
  5264                           ;Analog.c: 30: case 1:
  5265                           
  5266                           ;Analog.c: 28: break;
  5267                           
  5268                           ;Analog.c: 27: ADCON0bits.CHS3 = 0;
  5269                           
  5270                           ;Analog.c: 26: ADCON0bits.CHS2 = 0;
  5271                           
  5272                           ;Analog.c: 25: ADCON0bits.CHS1 = 0;
  5273                           
  5274                           
  5275                           ;Analog.c: 31: ANSELbits.ANS1 = 1;
  5276  0B02  1683               	bsf	3,5	;RP0=1, select bank3
  5277  0B03  1703               	bsf	3,6	;RP1=1, select bank3
  5278  0B04  1488               	bsf	8,1	;volatile
  5279                           
  5280                           ;Analog.c: 32: ADCON0bits.CHS0 = 1;
  5281  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  5282  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  5283  0B07  151F               	bsf	31,2	;volatile
  5284  0B08                     L4:	
  5285                           
  5286                           ;Analog.c: 33: ADCON0bits.CHS1 = 0;
  5287  0B08  119F               	bcf	31,3	;volatile
  5288  0B09  2B18               	goto	L6
  5289  0B0A                     l145:	
  5290                           ;Analog.c: 38: case 2:
  5291                           
  5292                           ;Analog.c: 36: break;
  5293                           
  5294                           ;Analog.c: 35: ADCON0bits.CHS3 = 0;
  5295                           
  5296                           ;Analog.c: 34: ADCON0bits.CHS2 = 0;
  5297                           
  5298                           
  5299                           ;Analog.c: 39: ANSELbits.ANS2 = 1;
  5300  0B0A  1683               	bsf	3,5	;RP0=1, select bank3
  5301  0B0B  1703               	bsf	3,6	;RP1=1, select bank3
  5302  0B0C  1508               	bsf	8,2	;volatile
  5303                           
  5304                           ;Analog.c: 40: ADCON0bits.CHS0 = 0;
  5305  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  5306  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  5307  0B0F  111F               	bcf	31,2	;volatile
  5308  0B10  2B17               	goto	L17
  5309  0B11                     l146:	
  5310                           ;Analog.c: 46: case 3:
  5311                           
  5312                           ;Analog.c: 44: break;
  5313                           
  5314                           ;Analog.c: 43: ADCON0bits.CHS3 = 0;
  5315                           
  5316                           ;Analog.c: 42: ADCON0bits.CHS2 = 0;
  5317                           
  5318                           ;Analog.c: 41: ADCON0bits.CHS1 = 1;
  5319                           
  5320                           
  5321                           ;Analog.c: 47: ANSELbits.ANS3 = 1;
  5322  0B11  1683               	bsf	3,5	;RP0=1, select bank3
  5323  0B12  1703               	bsf	3,6	;RP1=1, select bank3
  5324  0B13  1588               	bsf	8,3	;volatile
  5325                           
  5326                           ;Analog.c: 48: ADCON0bits.CHS0 = 1;
  5327  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  5328  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  5329  0B16  151F               	bsf	31,2	;volatile
  5330  0B17                     L17:	
  5331                           
  5332                           ;Analog.c: 49: ADCON0bits.CHS1 = 1;
  5333  0B17  159F               	bsf	31,3	;volatile
  5334  0B18                     L6:	
  5335                           
  5336                           ;Analog.c: 50: ADCON0bits.CHS2 = 0;
  5337  0B18  121F               	bcf	31,4	;volatile
  5338  0B19  2B29               	goto	L10
  5339  0B1A                     l147:	
  5340                           ;Analog.c: 54: case 4:
  5341                           
  5342                           ;Analog.c: 52: break;
  5343                           
  5344                           ;Analog.c: 51: ADCON0bits.CHS3 = 0;
  5345                           
  5346                           
  5347                           ;Analog.c: 55: ANSELbits.ANS4 = 1;
  5348  0B1A  1683               	bsf	3,5	;RP0=1, select bank3
  5349  0B1B  1703               	bsf	3,6	;RP1=1, select bank3
  5350  0B1C  1608               	bsf	8,4	;volatile
  5351                           
  5352                           ;Analog.c: 56: ADCON0bits.CHS0 = 0;
  5353  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  5354  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  5355  0B1F  111F               	bcf	31,2	;volatile
  5356  0B20  2B22               	goto	L22
  5357  0B21                     l148:	
  5358                           ;Analog.c: 62: case 5:
  5359                           
  5360                           ;Analog.c: 60: break;
  5361                           
  5362                           ;Analog.c: 59: ADCON0bits.CHS3 = 0;
  5363                           
  5364                           ;Analog.c: 58: ADCON0bits.CHS2 = 1;
  5365                           
  5366                           ;Analog.c: 57: ADCON0bits.CHS1 = 0;
  5367                           
  5368                           
  5369                           ;Analog.c: 63: ADCON0bits.CHS0 = 1;
  5370  0B21  151F               	bsf	31,2	;volatile
  5371  0B22                     L22:	
  5372                           
  5373                           ;Analog.c: 64: ADCON0bits.CHS1 = 0;
  5374  0B22  119F               	bcf	31,3	;volatile
  5375  0B23  2B28               	goto	L20
  5376  0B24                     l149:	
  5377                           ;Analog.c: 69: case 6:
  5378                           
  5379                           ;Analog.c: 67: break;
  5380                           
  5381                           ;Analog.c: 66: ADCON0bits.CHS3 = 0;
  5382                           
  5383                           ;Analog.c: 65: ADCON0bits.CHS2 = 1;
  5384                           
  5385                           
  5386                           ;Analog.c: 70: ADCON0bits.CHS0 = 0;
  5387  0B24  111F               	bcf	31,2	;volatile
  5388  0B25  2B27               	goto	L21
  5389  0B26                     l150:	
  5390                           ;Analog.c: 76: case 7:
  5391                           
  5392                           ;Analog.c: 74: break;
  5393                           
  5394                           ;Analog.c: 73: ADCON0bits.CHS3 = 0;
  5395                           
  5396                           ;Analog.c: 72: ADCON0bits.CHS2 = 1;
  5397                           
  5398                           ;Analog.c: 71: ADCON0bits.CHS1 = 1;
  5399                           
  5400                           
  5401                           ;Analog.c: 77: ADCON0bits.CHS0 = 1;
  5402  0B26  151F               	bsf	31,2	;volatile
  5403  0B27                     L21:	
  5404                           
  5405                           ;Analog.c: 78: ADCON0bits.CHS1 = 1;
  5406  0B27  159F               	bsf	31,3	;volatile
  5407  0B28                     L20:	
  5408                           
  5409                           ;Analog.c: 79: ADCON0bits.CHS2 = 1;
  5410  0B28  161F               	bsf	31,4	;volatile
  5411  0B29                     L10:	
  5412                           
  5413                           ;Analog.c: 80: ADCON0bits.CHS3 = 0;
  5414  0B29  129F               	bcf	31,5	;volatile
  5415                           
  5416                           ;Analog.c: 81: break;
  5417  0B2A  2B7B               	goto	l4262
  5418  0B2B                     l151:	
  5419                           ;Analog.c: 83: case 8:
  5420                           
  5421                           
  5422                           ;Analog.c: 84: ADCON0bits.CHS0 = 0;
  5423  0B2B  111F               	bcf	31,2	;volatile
  5424  0B2C  2B2E               	goto	L11
  5425  0B2D                     l152:	
  5426                           ;Analog.c: 90: case 9:
  5427                           
  5428                           ;Analog.c: 88: break;
  5429                           
  5430                           ;Analog.c: 87: ADCON0bits.CHS3 = 1;
  5431                           
  5432                           ;Analog.c: 86: ADCON0bits.CHS2 = 0;
  5433                           
  5434                           ;Analog.c: 85: ADCON0bits.CHS1 = 0;
  5435                           
  5436                           
  5437                           ;Analog.c: 91: ADCON0bits.CHS0 = 1;
  5438  0B2D  151F               	bsf	31,2	;volatile
  5439  0B2E                     L11:	
  5440                           
  5441                           ;Analog.c: 92: ADCON0bits.CHS1 = 0;
  5442  0B2E  119F               	bcf	31,3	;volatile
  5443  0B2F  2B34               	goto	L13
  5444  0B30                     l153:	
  5445                           ;Analog.c: 97: case 10:
  5446                           
  5447                           ;Analog.c: 95: break;
  5448                           
  5449                           ;Analog.c: 94: ADCON0bits.CHS3 = 1;
  5450                           
  5451                           ;Analog.c: 93: ADCON0bits.CHS2 = 0;
  5452                           
  5453                           
  5454                           ;Analog.c: 98: ADCON0bits.CHS0 = 0;
  5455  0B30  111F               	bcf	31,2	;volatile
  5456  0B31  2B33               	goto	L18
  5457  0B32                     l154:	
  5458                           ;Analog.c: 104: case 11:
  5459                           
  5460                           ;Analog.c: 102: break;
  5461                           
  5462                           ;Analog.c: 101: ADCON0bits.CHS3 = 1;
  5463                           
  5464                           ;Analog.c: 100: ADCON0bits.CHS2 = 0;
  5465                           
  5466                           ;Analog.c: 99: ADCON0bits.CHS1 = 1;
  5467                           
  5468                           
  5469                           ;Analog.c: 105: ADCON0bits.CHS0 = 1;
  5470  0B32  151F               	bsf	31,2	;volatile
  5471  0B33                     L18:	
  5472                           
  5473                           ;Analog.c: 106: ADCON0bits.CHS1 = 1;
  5474  0B33  159F               	bsf	31,3	;volatile
  5475  0B34                     L13:	
  5476                           
  5477                           ;Analog.c: 107: ADCON0bits.CHS2 = 0;
  5478  0B34  121F               	bcf	31,4	;volatile
  5479  0B35  2B3B               	goto	L15
  5480  0B36                     l155:	
  5481                           ;Analog.c: 111: case 12:
  5482                           
  5483                           ;Analog.c: 109: break;
  5484                           
  5485                           ;Analog.c: 108: ADCON0bits.CHS3 = 1;
  5486                           
  5487                           
  5488                           ;Analog.c: 112: ADCON0bits.CHS0 = 0;
  5489  0B36  111F               	bcf	31,2	;volatile
  5490  0B37  2B39               	goto	L19
  5491  0B38                     l156:	
  5492                           ;Analog.c: 118: case 13:
  5493                           
  5494                           ;Analog.c: 116: break;
  5495                           
  5496                           ;Analog.c: 115: ADCON0bits.CHS3 = 1;
  5497                           
  5498                           ;Analog.c: 114: ADCON0bits.CHS2 = 1;
  5499                           
  5500                           ;Analog.c: 113: ADCON0bits.CHS1 = 0;
  5501                           
  5502                           
  5503                           ;Analog.c: 119: ADCON0bits.CHS0 = 1;
  5504  0B38  151F               	bsf	31,2	;volatile
  5505  0B39                     L19:	
  5506                           
  5507                           ;Analog.c: 120: ADCON0bits.CHS1 = 0;
  5508  0B39  119F               	bcf	31,3	;volatile
  5509                           
  5510                           ;Analog.c: 121: ADCON0bits.CHS2 = 1;
  5511  0B3A  161F               	bsf	31,4	;volatile
  5512  0B3B                     L15:	
  5513                           
  5514                           ;Analog.c: 122: ADCON0bits.CHS3 = 1;
  5515  0B3B  169F               	bsf	31,5	;volatile
  5516                           
  5517                           ;Analog.c: 123: break;
  5518  0B3C  2B7B               	goto	l4262
  5519  0B3D                     l157:	
  5520                           ;Analog.c: 125: default:
  5521                           
  5522                           
  5523                           ;Analog.c: 126: (TRISBbits.TRISB6) = 0;
  5524  0B3D  1683               	bsf	3,5	;RP0=1, select bank1
  5525  0B3E  1303               	bcf	3,6	;RP1=0, select bank1
  5526  0B3F  1306               	bcf	6,6	;volatile
  5527                           
  5528                           ;Analog.c: 127: (PORTBbits.RB6) = 1;
  5529  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  5530  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  5531  0B42  1706               	bsf	6,6	;volatile
  5532                           
  5533                           ;Analog.c: 128: return -11;
  5534  0B43  30F5               	movlw	245
  5535  0B44  00A0               	movwf	?_read
  5536  0B45  30FF               	movlw	255
  5537  0B46  00A1               	movwf	?_read+1
  5538  0B47  0008               	return
  5539  0B48                     l4260:	
  5540                           ;Analog.c: 129: }
  5541                           
  5542                           
  5543                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5544                           ; Switch size 1, requested type "space"
  5545                           ; Number of cases is 1, Range of values is 0 to 0
  5546                           ; switch strategies available:
  5547                           ; Name         Instructions Cycles
  5548                           ; simple_byte            4     3 (average)
  5549                           ; direct_byte           11     8 (fixed)
  5550                           ; jumptable            260     6 (fixed)
  5551                           ;	Chosen strategy is simple_byte
  5552  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  5553  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  5554  0B4A  0821               	movf	read@channel+1,w
  5555  0B4B  3A00               	xorlw	0	; case 0
  5556  0B4C  1903               	skipnz
  5557  0B4D  2B4F               	goto	l4446
  5558  0B4E  2B3D               	goto	l157
  5559  0B4F                     l4446:	
  5560                           
  5561                           ; Switch size 1, requested type "space"
  5562                           ; Number of cases is 14, Range of values is 0 to 13
  5563                           ; switch strategies available:
  5564                           ; Name         Instructions Cycles
  5565                           ; simple_byte           43    22 (average)
  5566                           ; direct_byte           50     8 (fixed)
  5567                           ; jumptable            260     6 (fixed)
  5568                           ;	Chosen strategy is simple_byte
  5569  0B4F  0820               	movf	read@channel,w
  5570  0B50  3A00               	xorlw	0	; case 0
  5571  0B51  1903               	skipnz
  5572  0B52  2AFB               	goto	l142
  5573  0B53  3A01               	xorlw	1	; case 1
  5574  0B54  1903               	skipnz
  5575  0B55  2B02               	goto	l144
  5576  0B56  3A03               	xorlw	3	; case 2
  5577  0B57  1903               	skipnz
  5578  0B58  2B0A               	goto	l145
  5579  0B59  3A01               	xorlw	1	; case 3
  5580  0B5A  1903               	skipnz
  5581  0B5B  2B11               	goto	l146
  5582  0B5C  3A07               	xorlw	7	; case 4
  5583  0B5D  1903               	skipnz
  5584  0B5E  2B1A               	goto	l147
  5585  0B5F  3A01               	xorlw	1	; case 5
  5586  0B60  1903               	skipnz
  5587  0B61  2B21               	goto	l148
  5588  0B62  3A03               	xorlw	3	; case 6
  5589  0B63  1903               	skipnz
  5590  0B64  2B24               	goto	l149
  5591  0B65  3A01               	xorlw	1	; case 7
  5592  0B66  1903               	skipnz
  5593  0B67  2B26               	goto	l150
  5594  0B68  3A0F               	xorlw	15	; case 8
  5595  0B69  1903               	skipnz
  5596  0B6A  2B2B               	goto	l151
  5597  0B6B  3A01               	xorlw	1	; case 9
  5598  0B6C  1903               	skipnz
  5599  0B6D  2B2D               	goto	l152
  5600  0B6E  3A03               	xorlw	3	; case 10
  5601  0B6F  1903               	skipnz
  5602  0B70  2B30               	goto	l153
  5603  0B71  3A01               	xorlw	1	; case 11
  5604  0B72  1903               	skipnz
  5605  0B73  2B32               	goto	l154
  5606  0B74  3A07               	xorlw	7	; case 12
  5607  0B75  1903               	skipnz
  5608  0B76  2B36               	goto	l155
  5609  0B77  3A01               	xorlw	1	; case 13
  5610  0B78  1903               	skipnz
  5611  0B79  2B38               	goto	l156
  5612  0B7A  2B3D               	goto	l157
  5613  0B7B                     l4262:	
  5614                           
  5615                           ;Analog.c: 132: if (justification == 1) ADCON1bits.ADFM = 0;
  5616  0B7B  0822               	movf	read@justification,w
  5617  0B7C  3A01               	xorlw	1
  5618  0B7D  1D03               	skipz
  5619  0B7E  2B83               	goto	l159
  5620  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  5621  0B80  1303               	bcf	3,6	;RP1=0, select bank1
  5622  0B81  139F               	bcf	31,7	;volatile
  5623  0B82  2B86               	goto	l160
  5624  0B83                     l159:	
  5625                           
  5626                           ;Analog.c: 133: else ADCON1bits.ADFM = 1;
  5627  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  5628  0B84  1303               	bcf	3,6	;RP1=0, select bank1
  5629  0B85  179F               	bsf	31,7	;volatile
  5630  0B86                     l160:	
  5631                           
  5632                           ;Analog.c: 136: ADCON0bits.ADCS0 = 1;
  5633  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  5634  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  5635  0B88  171F               	bsf	31,6	;volatile
  5636                           
  5637                           ;Analog.c: 137: ADCON0bits.ADCS1 = 1;
  5638  0B89  179F               	bsf	31,7	;volatile
  5639                           
  5640                           ;Analog.c: 140: ADCON1bits.VCFG0 = 0;
  5641  0B8A  1683               	bsf	3,5	;RP0=1, select bank1
  5642  0B8B  1303               	bcf	3,6	;RP1=0, select bank1
  5643  0B8C  121F               	bcf	31,4	;volatile
  5644                           
  5645                           ;Analog.c: 141: ADCON1bits.VCFG1 = 0;
  5646  0B8D  129F               	bcf	31,5	;volatile
  5647                           
  5648                           ;Analog.c: 144: ADCON0bits.ADON = 1;
  5649  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  5650  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  5651  0B90  141F               	bsf	31,0	;volatile
  5652                           
  5653                           ;Analog.c: 147: GO_DONE = 1;
  5654  0B91  149F               	bsf	31,1	;volatile
  5655  0B92                     l161:	
  5656                           ;Analog.c: 148: while (GO_DONE);
  5657                           
  5658  0B92  189F               	btfsc	31,1	;volatile
  5659  0B93  2B92               	goto	l161
  5660                           
  5661                           ;Analog.c: 151: if (justification == 1) analogValue = ((ADRESL << 8) + ADRESH);
  5662  0B94  0822               	movf	read@justification,w
  5663  0B95  3A01               	xorlw	1
  5664  0B96  1D03               	skipz
  5665  0B97  2BA1               	goto	l4270
  5666  0B98  1683               	bsf	3,5	;RP0=1, select bank1
  5667  0B99  1303               	bcf	3,6	;RP1=0, select bank1
  5668  0B9A  081E               	movf	30,w	;volatile
  5669  0B9B  1283               	bcf	3,5	;RP0=0, select bank0
  5670  0B9C  1303               	bcf	3,6	;RP1=0, select bank0
  5671  0B9D  01A4               	clrf	read@analogValue+1
  5672  0B9E  07A4               	addwf	read@analogValue+1,f
  5673  0B9F  081E               	movf	30,w	;volatile
  5674  0BA0  2BA9               	goto	L16
  5675  0BA1                     l4270:	
  5676                           
  5677                           ;Analog.c: 152: else analogValue = ((ADRESH << 8) + ADRESL);
  5678  0BA1  081E               	movf	30,w	;volatile
  5679  0BA2  01A4               	clrf	read@analogValue+1
  5680  0BA3  07A4               	addwf	read@analogValue+1,f
  5681  0BA4  1683               	bsf	3,5	;RP0=1, select bank1
  5682  0BA5  1303               	bcf	3,6	;RP1=0, select bank1
  5683  0BA6  081E               	movf	30,w	;volatile
  5684  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  5685  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  5686  0BA9                     L16:	
  5687  0BA9  01A3               	clrf	read@analogValue
  5688  0BAA  07A3               	addwf	read@analogValue,f
  5689                           
  5690                           ;Analog.c: 155: ADCON0bits.ADON = 0;
  5691  0BAB  101F               	bcf	31,0	;volatile
  5692                           
  5693                           ;Analog.c: 157: return analogValue;
  5694  0BAC  0824               	movf	read@analogValue+1,w
  5695  0BAD  01A1               	clrf	?_read+1
  5696  0BAE  07A1               	addwf	?_read+1,f
  5697  0BAF  0823               	movf	read@analogValue,w
  5698  0BB0  01A0               	clrf	?_read
  5699  0BB1  07A0               	addwf	?_read,f
  5700  0BB2  0008               	return
  5701  0BB3                     __end_of_read:	
  5702                           
  5703                           	psect	text22
  5704  1628                     __ptext22:	
  5705 ;; *************** function _pointToVoltage *****************
  5706 ;; Defined at:
  5707 ;;		line 238 in file "Analog.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  point           3   46[BANK0 ] int 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;		None
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  3   46[BANK0 ] int 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5721 ;;      Params:         0       3       0       0       0
  5722 ;;      Locals:         0       0       0       0       0
  5723 ;;      Temps:          0       0       0       0       0
  5724 ;;      Totals:         0       3       0       0       0
  5725 ;;Total ram usage:        3 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    4
  5728 ;; This function calls:
  5729 ;;		___ftdiv
  5730 ;;		___ftmul
  5731 ;; This function is called by:
  5732 ;;		_readLight
  5733 ;;		_readTemp
  5734 ;;		_readAccelerometer
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           
  5739                           ;psect for function _pointToVoltage
  5740  1628                     _pointToVoltage:	
  5741                           
  5742                           ;Analog.c: 239: return (5 * point) / 1023;
  5743                           
  5744                           ;incstack = 0
  5745                           ; Regs used in _pointToVoltage: [wreg+status,2+status,0+pclath+cstack]
  5746  1628  30C0               	movlw	192
  5747  1629  1283               	bcf	3,5	;RP0=0, select bank0
  5748  162A  1303               	bcf	3,6	;RP1=0, select bank0
  5749  162B  00BE               	movwf	___ftdiv@f2
  5750  162C  307F               	movlw	127
  5751  162D  00BF               	movwf	___ftdiv@f2+1
  5752  162E  3044               	movlw	68
  5753  162F  00C0               	movwf	___ftdiv@f2+2
  5754  1630  3000               	movlw	0
  5755  1631  00AE               	movwf	___ftmul@f1
  5756  1632  30A0               	movlw	160
  5757  1633  00AF               	movwf	___ftmul@f1+1
  5758  1634  3040               	movlw	64
  5759  1635  00B0               	movwf	___ftmul@f1+2
  5760  1636  084E               	movf	pointToVoltage@point,w
  5761  1637  00B1               	movwf	___ftmul@f2
  5762  1638  084F               	movf	pointToVoltage@point+1,w
  5763  1639  00B2               	movwf	___ftmul@f2+1
  5764  163A  0850               	movf	pointToVoltage@point+2,w
  5765  163B  00B3               	movwf	___ftmul@f2+2
  5766  163C  120A  118A  2718   	fcall	___ftmul
      +       160A  118A         
  5767  1641  1283               	bcf	3,5	;RP0=0, select bank0
  5768  1642  1303               	bcf	3,6	;RP1=0, select bank0
  5769  1643  082E               	movf	?___ftmul,w
  5770  1644  00C1               	movwf	___ftdiv@f1
  5771  1645  082F               	movf	?___ftmul+1,w
  5772  1646  00C2               	movwf	___ftdiv@f1+1
  5773  1647  0830               	movf	?___ftmul+2,w
  5774  1648  00C3               	movwf	___ftdiv@f1+2
  5775  1649  120A  158A  223F   	fcall	___ftdiv
  5776  164C  1283               	bcf	3,5	;RP0=0, select bank0
  5777  164D  1303               	bcf	3,6	;RP1=0, select bank0
  5778  164E  083E               	movf	?___ftdiv,w
  5779  164F  00CE               	movwf	?_pointToVoltage
  5780  1650  083F               	movf	?___ftdiv+1,w
  5781  1651  00CF               	movwf	?_pointToVoltage+1
  5782  1652  0840               	movf	?___ftdiv+2,w
  5783  1653  00D0               	movwf	?_pointToVoltage+2
  5784  1654  0008               	return
  5785  1655                     __end_of_pointToVoltage:	
  5786                           
  5787                           	psect	text23
  5788  0718                     __ptext23:	
  5789 ;; *************** function ___ftmul *****************
  5790 ;; Defined at:
  5791 ;;		line 51 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\ftmul.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  f1              3   14[BANK0 ] float 
  5794 ;;  f2              3   17[BANK0 ] float 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  5797 ;;  sign            1   29[BANK0 ] unsigned char 
  5798 ;;  cntr            1   28[BANK0 ] unsigned char 
  5799 ;;  exp             1   24[BANK0 ] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  3   14[BANK0 ] float 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, pclath, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5809 ;;      Params:         0       6       0       0       0
  5810 ;;      Locals:         0       6       0       0       0
  5811 ;;      Temps:          0       4       0       0       0
  5812 ;;      Totals:         0      16       0       0       0
  5813 ;;Total ram usage:       16 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    3
  5816 ;; This function calls:
  5817 ;;		___ftpack
  5818 ;; This function is called by:
  5819 ;;		_readLight
  5820 ;;		_readTemp
  5821 ;;		_pointToVoltage
  5822 ;;		_pow
  5823 ;;		_exp
  5824 ;;		_log
  5825 ;;		_eval_poly
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           
  5830                           ;psect for function ___ftmul
  5831  0718                     ___ftmul:	
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5835  0718  1283               	bcf	3,5	;RP0=0, select bank0
  5836  0719  1303               	bcf	3,6	;RP1=0, select bank0
  5837  071A  082E               	movf	___ftmul@f1,w
  5838  071B  00B4               	movwf	??___ftmul
  5839  071C  082F               	movf	___ftmul@f1+1,w
  5840  071D  00B5               	movwf	??___ftmul+1
  5841  071E  0830               	movf	___ftmul@f1+2,w
  5842  071F  00B6               	movwf	??___ftmul+2
  5843  0720  1003               	clrc
  5844  0721  0D35               	rlf	??___ftmul+1,w
  5845  0722  0D36               	rlf	??___ftmul+2,w
  5846  0723  00B7               	movwf	??___ftmul+3
  5847  0724  0837               	movf	??___ftmul+3,w
  5848  0725  00B8               	movwf	___ftmul@exp
  5849  0726  08B8               	movf	___ftmul@exp,f
  5850  0727  1D03               	skipz
  5851  0728  2F30               	goto	l3950
  5852  0729  3000               	movlw	0
  5853  072A  00AE               	movwf	?___ftmul
  5854  072B  3000               	movlw	0
  5855  072C  00AF               	movwf	?___ftmul+1
  5856  072D  3000               	movlw	0
  5857  072E  00B0               	movwf	?___ftmul+2
  5858  072F  0008               	return
  5859  0730                     l3950:	
  5860  0730  0831               	movf	___ftmul@f2,w
  5861  0731  00B4               	movwf	??___ftmul
  5862  0732  0832               	movf	___ftmul@f2+1,w
  5863  0733  00B5               	movwf	??___ftmul+1
  5864  0734  0833               	movf	___ftmul@f2+2,w
  5865  0735  00B6               	movwf	??___ftmul+2
  5866  0736  1003               	clrc
  5867  0737  0D35               	rlf	??___ftmul+1,w
  5868  0738  0D36               	rlf	??___ftmul+2,w
  5869  0739  00B7               	movwf	??___ftmul+3
  5870  073A  0837               	movf	??___ftmul+3,w
  5871  073B  00BD               	movwf	___ftmul@sign
  5872  073C  08BD               	movf	___ftmul@sign,f
  5873  073D  1D03               	skipz
  5874  073E  2F46               	goto	l3956
  5875  073F  3000               	movlw	0
  5876  0740  00AE               	movwf	?___ftmul
  5877  0741  3000               	movlw	0
  5878  0742  00AF               	movwf	?___ftmul+1
  5879  0743  3000               	movlw	0
  5880  0744  00B0               	movwf	?___ftmul+2
  5881  0745  0008               	return
  5882  0746                     l3956:	
  5883  0746  083D               	movf	___ftmul@sign,w
  5884  0747  3E7B               	addlw	123
  5885  0748  00B4               	movwf	??___ftmul
  5886  0749  0834               	movf	??___ftmul,w
  5887  074A  07B8               	addwf	___ftmul@exp,f
  5888  074B  082E               	movf	___ftmul@f1,w
  5889  074C  00B4               	movwf	??___ftmul
  5890  074D  082F               	movf	___ftmul@f1+1,w
  5891  074E  00B5               	movwf	??___ftmul+1
  5892  074F  0830               	movf	___ftmul@f1+2,w
  5893  0750  00B6               	movwf	??___ftmul+2
  5894  0751  3010               	movlw	16
  5895  0752                     u3135:	
  5896  0752  1003               	clrc
  5897  0753  0CB6               	rrf	??___ftmul+2,f
  5898  0754  0CB5               	rrf	??___ftmul+1,f
  5899  0755  0CB4               	rrf	??___ftmul,f
  5900  0756  3EFF               	addlw	-1
  5901  0757  1D03               	skipz
  5902  0758  2F52               	goto	u3135
  5903  0759  0834               	movf	??___ftmul,w
  5904  075A  00B7               	movwf	??___ftmul+3
  5905  075B  0837               	movf	??___ftmul+3,w
  5906  075C  00BD               	movwf	___ftmul@sign
  5907  075D  0831               	movf	___ftmul@f2,w
  5908  075E  00B4               	movwf	??___ftmul
  5909  075F  0832               	movf	___ftmul@f2+1,w
  5910  0760  00B5               	movwf	??___ftmul+1
  5911  0761  0833               	movf	___ftmul@f2+2,w
  5912  0762  00B6               	movwf	??___ftmul+2
  5913  0763  3010               	movlw	16
  5914  0764                     u3145:	
  5915  0764  1003               	clrc
  5916  0765  0CB6               	rrf	??___ftmul+2,f
  5917  0766  0CB5               	rrf	??___ftmul+1,f
  5918  0767  0CB4               	rrf	??___ftmul,f
  5919  0768  3EFF               	addlw	-1
  5920  0769  1D03               	skipz
  5921  076A  2F64               	goto	u3145
  5922  076B  0834               	movf	??___ftmul,w
  5923  076C  00B7               	movwf	??___ftmul+3
  5924  076D  0837               	movf	??___ftmul+3,w
  5925  076E  06BD               	xorwf	___ftmul@sign,f
  5926  076F  3080               	movlw	128
  5927  0770  00B4               	movwf	??___ftmul
  5928  0771  0834               	movf	??___ftmul,w
  5929  0772  05BD               	andwf	___ftmul@sign,f
  5930  0773  17AF               	bsf	___ftmul@f1+1,7
  5931  0774  17B2               	bsf	___ftmul@f2+1,7
  5932  0775  30FF               	movlw	255
  5933  0776  05B1               	andwf	___ftmul@f2,f
  5934  0777  30FF               	movlw	255
  5935  0778  05B2               	andwf	___ftmul@f2+1,f
  5936  0779  3000               	movlw	0
  5937  077A  05B3               	andwf	___ftmul@f2+2,f
  5938  077B  3000               	movlw	0
  5939  077C  00B9               	movwf	___ftmul@f3_as_product
  5940  077D  3000               	movlw	0
  5941  077E  00BA               	movwf	___ftmul@f3_as_product+1
  5942  077F  3000               	movlw	0
  5943  0780  00BB               	movwf	___ftmul@f3_as_product+2
  5944  0781  3007               	movlw	7
  5945  0782  00B4               	movwf	??___ftmul
  5946  0783  0834               	movf	??___ftmul,w
  5947  0784  00BC               	movwf	___ftmul@cntr
  5948  0785                     l3968:	
  5949  0785  1C2E               	btfss	___ftmul@f1,0
  5950  0786  2F95               	goto	l3972
  5951  0787  0831               	movf	___ftmul@f2,w
  5952  0788  07B9               	addwf	___ftmul@f3_as_product,f
  5953  0789  0832               	movf	___ftmul@f2+1,w
  5954  078A  1103               	clrz
  5955  078B  1803               	skipnc
  5956  078C  0A32               	incf	___ftmul@f2+1,w
  5957  078D  1D03               	btfss	3,2
  5958  078E  07BA               	addwf	___ftmul@f3_as_product+1,f
  5959  078F  0833               	movf	___ftmul@f2+2,w
  5960  0790  1103               	clrz
  5961  0791  1803               	skipnc
  5962  0792  0A33               	incf	___ftmul@f2+2,w
  5963  0793  1D03               	btfss	3,2
  5964  0794  07BB               	addwf	___ftmul@f3_as_product+2,f
  5965  0795                     l3972:	
  5966  0795  3001               	movlw	1
  5967  0796                     u3175:	
  5968  0796  1003               	clrc
  5969  0797  0CB0               	rrf	___ftmul@f1+2,f
  5970  0798  0CAF               	rrf	___ftmul@f1+1,f
  5971  0799  0CAE               	rrf	___ftmul@f1,f
  5972  079A  3EFF               	addlw	-1
  5973  079B  1D03               	skipz
  5974  079C  2F96               	goto	u3175
  5975  079D  3001               	movlw	1
  5976  079E                     u3185:	
  5977  079E  1003               	clrc
  5978  079F  0DB1               	rlf	___ftmul@f2,f
  5979  07A0  0DB2               	rlf	___ftmul@f2+1,f
  5980  07A1  0DB3               	rlf	___ftmul@f2+2,f
  5981  07A2  3EFF               	addlw	-1
  5982  07A3  1D03               	skipz
  5983  07A4  2F9E               	goto	u3185
  5984  07A5  3001               	movlw	1
  5985  07A6  02BC               	subwf	___ftmul@cntr,f
  5986  07A7  1D03               	btfss	3,2
  5987  07A8  2F85               	goto	l3968
  5988  07A9  3009               	movlw	9
  5989  07AA  00B4               	movwf	??___ftmul
  5990  07AB  0834               	movf	??___ftmul,w
  5991  07AC  00BC               	movwf	___ftmul@cntr
  5992  07AD                     l3980:	
  5993  07AD  1C2E               	btfss	___ftmul@f1,0
  5994  07AE  2FBD               	goto	l3984
  5995  07AF  0831               	movf	___ftmul@f2,w
  5996  07B0  07B9               	addwf	___ftmul@f3_as_product,f
  5997  07B1  0832               	movf	___ftmul@f2+1,w
  5998  07B2  1103               	clrz
  5999  07B3  1803               	skipnc
  6000  07B4  0A32               	incf	___ftmul@f2+1,w
  6001  07B5  1D03               	btfss	3,2
  6002  07B6  07BA               	addwf	___ftmul@f3_as_product+1,f
  6003  07B7  0833               	movf	___ftmul@f2+2,w
  6004  07B8  1103               	clrz
  6005  07B9  1803               	skipnc
  6006  07BA  0A33               	incf	___ftmul@f2+2,w
  6007  07BB  1D03               	btfss	3,2
  6008  07BC  07BB               	addwf	___ftmul@f3_as_product+2,f
  6009  07BD                     l3984:	
  6010  07BD  3001               	movlw	1
  6011  07BE                     u3225:	
  6012  07BE  1003               	clrc
  6013  07BF  0CB0               	rrf	___ftmul@f1+2,f
  6014  07C0  0CAF               	rrf	___ftmul@f1+1,f
  6015  07C1  0CAE               	rrf	___ftmul@f1,f
  6016  07C2  3EFF               	addlw	-1
  6017  07C3  1D03               	skipz
  6018  07C4  2FBE               	goto	u3225
  6019  07C5  3001               	movlw	1
  6020  07C6                     u3235:	
  6021  07C6  1003               	clrc
  6022  07C7  0CBB               	rrf	___ftmul@f3_as_product+2,f
  6023  07C8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  6024  07C9  0CB9               	rrf	___ftmul@f3_as_product,f
  6025  07CA  3EFF               	addlw	-1
  6026  07CB  1D03               	skipz
  6027  07CC  2FC6               	goto	u3235
  6028  07CD  3001               	movlw	1
  6029  07CE  02BC               	subwf	___ftmul@cntr,f
  6030  07CF  1D03               	btfss	3,2
  6031  07D0  2FAD               	goto	l3980
  6032  07D1  0839               	movf	___ftmul@f3_as_product,w
  6033  07D2  00A0               	movwf	___ftpack@arg
  6034  07D3  083A               	movf	___ftmul@f3_as_product+1,w
  6035  07D4  00A1               	movwf	___ftpack@arg+1
  6036  07D5  083B               	movf	___ftmul@f3_as_product+2,w
  6037  07D6  00A2               	movwf	___ftpack@arg+2
  6038  07D7  0838               	movf	___ftmul@exp,w
  6039  07D8  00B4               	movwf	??___ftmul
  6040  07D9  0834               	movf	??___ftmul,w
  6041  07DA  00A3               	movwf	___ftpack@exp
  6042  07DB  083D               	movf	___ftmul@sign,w
  6043  07DC  00B5               	movwf	??___ftmul+1
  6044  07DD  0835               	movf	??___ftmul+1,w
  6045  07DE  00A4               	movwf	___ftpack@sign
  6046  07DF  120A  158A  2053   	fcall	___ftpack
  6047  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  6048  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  6049  07E4  0820               	movf	?___ftpack,w
  6050  07E5  00AE               	movwf	?___ftmul
  6051  07E6  0821               	movf	?___ftpack+1,w
  6052  07E7  00AF               	movwf	?___ftmul+1
  6053  07E8  0822               	movf	?___ftpack+2,w
  6054  07E9  00B0               	movwf	?___ftmul+2
  6055  07EA  0008               	return
  6056  07EB                     __end_of___ftmul:	
  6057                           
  6058                           	psect	text24
  6059  0A3F                     __ptext24:	
  6060 ;; *************** function ___ftdiv *****************
  6061 ;; Defined at:
  6062 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.31\sources\pic\ftdiv.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  f2              3   30[BANK0 ] float 
  6065 ;;  f1              3   33[BANK0 ] float 
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;  f3              3   41[BANK0 ] float 
  6068 ;;  sign            1   45[BANK0 ] unsigned char 
  6069 ;;  exp             1   44[BANK0 ] unsigned char 
  6070 ;;  cntr            1   40[BANK0 ] unsigned char 
  6071 ;; Return value:  Size  Location     Type
  6072 ;;                  3   30[BANK0 ] float 
  6073 ;; Registers used:
  6074 ;;		wreg, status,2, status,0, pclath, cstack
  6075 ;; Tracked objects:
  6076 ;;		On entry : 0/0
  6077 ;;		On exit  : 0/0
  6078 ;;		Unchanged: 0/0
  6079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6080 ;;      Params:         0       6       0       0       0
  6081 ;;      Locals:         0       6       0       0       0
  6082 ;;      Temps:          0       4       0       0       0
  6083 ;;      Totals:         0      16       0       0       0
  6084 ;;Total ram usage:       16 bytes
  6085 ;; Hardware stack levels used:    1
  6086 ;; Hardware stack levels required when called:    3
  6087 ;; This function calls:
  6088 ;;		___ftpack
  6089 ;; This function is called by:
  6090 ;;		_readLight
  6091 ;;		_tempCalibration
  6092 ;;		_readTemp
  6093 ;;		_pointToVoltage
  6094 ;;		_exp
  6095 ;;		_singleAxisMeasure
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           
  6100                           ;psect for function ___ftdiv
  6101  0A3F                     ___ftdiv:	
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6105  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  6106  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  6107  0A41  0841               	movf	___ftdiv@f1,w
  6108  0A42  00C4               	movwf	??___ftdiv
  6109  0A43  0842               	movf	___ftdiv@f1+1,w
  6110  0A44  00C5               	movwf	??___ftdiv+1
  6111  0A45  0843               	movf	___ftdiv@f1+2,w
  6112  0A46  00C6               	movwf	??___ftdiv+2
  6113  0A47  1003               	clrc
  6114  0A48  0D45               	rlf	??___ftdiv+1,w
  6115  0A49  0D46               	rlf	??___ftdiv+2,w
  6116  0A4A  00C7               	movwf	??___ftdiv+3
  6117  0A4B  0847               	movf	??___ftdiv+3,w
  6118  0A4C  00CC               	movwf	___ftdiv@exp
  6119  0A4D  08CC               	movf	___ftdiv@exp,f
  6120  0A4E  1D03               	skipz
  6121  0A4F  2A57               	goto	l4040
  6122  0A50  3000               	movlw	0
  6123  0A51  00BE               	movwf	?___ftdiv
  6124  0A52  3000               	movlw	0
  6125  0A53  00BF               	movwf	?___ftdiv+1
  6126  0A54  3000               	movlw	0
  6127  0A55  00C0               	movwf	?___ftdiv+2
  6128  0A56  0008               	return
  6129  0A57                     l4040:	
  6130  0A57  083E               	movf	___ftdiv@f2,w
  6131  0A58  00C4               	movwf	??___ftdiv
  6132  0A59  083F               	movf	___ftdiv@f2+1,w
  6133  0A5A  00C5               	movwf	??___ftdiv+1
  6134  0A5B  0840               	movf	___ftdiv@f2+2,w
  6135  0A5C  00C6               	movwf	??___ftdiv+2
  6136  0A5D  1003               	clrc
  6137  0A5E  0D45               	rlf	??___ftdiv+1,w
  6138  0A5F  0D46               	rlf	??___ftdiv+2,w
  6139  0A60  00C7               	movwf	??___ftdiv+3
  6140  0A61  0847               	movf	??___ftdiv+3,w
  6141  0A62  00CD               	movwf	___ftdiv@sign
  6142  0A63  08CD               	movf	___ftdiv@sign,f
  6143  0A64  1D03               	skipz
  6144  0A65  2A6D               	goto	l4046
  6145  0A66  3000               	movlw	0
  6146  0A67  00BE               	movwf	?___ftdiv
  6147  0A68  3000               	movlw	0
  6148  0A69  00BF               	movwf	?___ftdiv+1
  6149  0A6A  3000               	movlw	0
  6150  0A6B  00C0               	movwf	?___ftdiv+2
  6151  0A6C  0008               	return
  6152  0A6D                     l4046:	
  6153  0A6D  3000               	movlw	0
  6154  0A6E  00C9               	movwf	___ftdiv@f3
  6155  0A6F  3000               	movlw	0
  6156  0A70  00CA               	movwf	___ftdiv@f3+1
  6157  0A71  3000               	movlw	0
  6158  0A72  00CB               	movwf	___ftdiv@f3+2
  6159  0A73  3089               	movlw	137
  6160  0A74  074D               	addwf	___ftdiv@sign,w
  6161  0A75  00C4               	movwf	??___ftdiv
  6162  0A76  0844               	movf	??___ftdiv,w
  6163  0A77  02CC               	subwf	___ftdiv@exp,f
  6164  0A78  0841               	movf	___ftdiv@f1,w
  6165  0A79  00C4               	movwf	??___ftdiv
  6166  0A7A  0842               	movf	___ftdiv@f1+1,w
  6167  0A7B  00C5               	movwf	??___ftdiv+1
  6168  0A7C  0843               	movf	___ftdiv@f1+2,w
  6169  0A7D  00C6               	movwf	??___ftdiv+2
  6170  0A7E  3010               	movlw	16
  6171  0A7F                     u3305:	
  6172  0A7F  1003               	clrc
  6173  0A80  0CC6               	rrf	??___ftdiv+2,f
  6174  0A81  0CC5               	rrf	??___ftdiv+1,f
  6175  0A82  0CC4               	rrf	??___ftdiv,f
  6176  0A83  3EFF               	addlw	-1
  6177  0A84  1D03               	skipz
  6178  0A85  2A7F               	goto	u3305
  6179  0A86  0844               	movf	??___ftdiv,w
  6180  0A87  00C7               	movwf	??___ftdiv+3
  6181  0A88  0847               	movf	??___ftdiv+3,w
  6182  0A89  00CD               	movwf	___ftdiv@sign
  6183  0A8A  083E               	movf	___ftdiv@f2,w
  6184  0A8B  00C4               	movwf	??___ftdiv
  6185  0A8C  083F               	movf	___ftdiv@f2+1,w
  6186  0A8D  00C5               	movwf	??___ftdiv+1
  6187  0A8E  0840               	movf	___ftdiv@f2+2,w
  6188  0A8F  00C6               	movwf	??___ftdiv+2
  6189  0A90  3010               	movlw	16
  6190  0A91                     u3315:	
  6191  0A91  1003               	clrc
  6192  0A92  0CC6               	rrf	??___ftdiv+2,f
  6193  0A93  0CC5               	rrf	??___ftdiv+1,f
  6194  0A94  0CC4               	rrf	??___ftdiv,f
  6195  0A95  3EFF               	addlw	-1
  6196  0A96  1D03               	skipz
  6197  0A97  2A91               	goto	u3315
  6198  0A98  0844               	movf	??___ftdiv,w
  6199  0A99  00C7               	movwf	??___ftdiv+3
  6200  0A9A  0847               	movf	??___ftdiv+3,w
  6201  0A9B  06CD               	xorwf	___ftdiv@sign,f
  6202  0A9C  3080               	movlw	128
  6203  0A9D  00C4               	movwf	??___ftdiv
  6204  0A9E  0844               	movf	??___ftdiv,w
  6205  0A9F  05CD               	andwf	___ftdiv@sign,f
  6206  0AA0  17C2               	bsf	___ftdiv@f1+1,7
  6207  0AA1  30FF               	movlw	255
  6208  0AA2  05C1               	andwf	___ftdiv@f1,f
  6209  0AA3  30FF               	movlw	255
  6210  0AA4  05C2               	andwf	___ftdiv@f1+1,f
  6211  0AA5  3000               	movlw	0
  6212  0AA6  05C3               	andwf	___ftdiv@f1+2,f
  6213  0AA7  17BF               	bsf	___ftdiv@f2+1,7
  6214  0AA8  30FF               	movlw	255
  6215  0AA9  05BE               	andwf	___ftdiv@f2,f
  6216  0AAA  30FF               	movlw	255
  6217  0AAB  05BF               	andwf	___ftdiv@f2+1,f
  6218  0AAC  3000               	movlw	0
  6219  0AAD  05C0               	andwf	___ftdiv@f2+2,f
  6220  0AAE  3018               	movlw	24
  6221  0AAF  00C4               	movwf	??___ftdiv
  6222  0AB0  0844               	movf	??___ftdiv,w
  6223  0AB1  00C8               	movwf	___ftdiv@cntr
  6224  0AB2                     l4060:	
  6225  0AB2  3001               	movlw	1
  6226  0AB3                     u3325:	
  6227  0AB3  1003               	clrc
  6228  0AB4  0DC9               	rlf	___ftdiv@f3,f
  6229  0AB5  0DCA               	rlf	___ftdiv@f3+1,f
  6230  0AB6  0DCB               	rlf	___ftdiv@f3+2,f
  6231  0AB7  3EFF               	addlw	-1
  6232  0AB8  1D03               	skipz
  6233  0AB9  2AB3               	goto	u3325
  6234  0ABA  0840               	movf	___ftdiv@f2+2,w
  6235  0ABB  0243               	subwf	___ftdiv@f1+2,w
  6236  0ABC  1D03               	skipz
  6237  0ABD  2AC4               	goto	u3335
  6238  0ABE  083F               	movf	___ftdiv@f2+1,w
  6239  0ABF  0242               	subwf	___ftdiv@f1+1,w
  6240  0AC0  1D03               	skipz
  6241  0AC1  2AC4               	goto	u3335
  6242  0AC2  083E               	movf	___ftdiv@f2,w
  6243  0AC3  0241               	subwf	___ftdiv@f1,w
  6244  0AC4                     u3335:	
  6245  0AC4  1C03               	skipc
  6246  0AC5  2AD1               	goto	l4068
  6247  0AC6  083E               	movf	___ftdiv@f2,w
  6248  0AC7  02C1               	subwf	___ftdiv@f1,f
  6249  0AC8  083F               	movf	___ftdiv@f2+1,w
  6250  0AC9  1C03               	skipc
  6251  0ACA  0F3F               	incfsz	___ftdiv@f2+1,w
  6252  0ACB  02C2               	subwf	___ftdiv@f1+1,f
  6253  0ACC  0840               	movf	___ftdiv@f2+2,w
  6254  0ACD  1C03               	skipc
  6255  0ACE  0A40               	incf	___ftdiv@f2+2,w
  6256  0ACF  02C3               	subwf	___ftdiv@f1+2,f
  6257  0AD0  1449               	bsf	___ftdiv@f3,0
  6258  0AD1                     l4068:	
  6259  0AD1  3001               	movlw	1
  6260  0AD2                     u3345:	
  6261  0AD2  1003               	clrc
  6262  0AD3  0DC1               	rlf	___ftdiv@f1,f
  6263  0AD4  0DC2               	rlf	___ftdiv@f1+1,f
  6264  0AD5  0DC3               	rlf	___ftdiv@f1+2,f
  6265  0AD6  3EFF               	addlw	-1
  6266  0AD7  1D03               	skipz
  6267  0AD8  2AD2               	goto	u3345
  6268  0AD9  3001               	movlw	1
  6269  0ADA  02C8               	subwf	___ftdiv@cntr,f
  6270  0ADB  1D03               	btfss	3,2
  6271  0ADC  2AB2               	goto	l4060
  6272  0ADD  0849               	movf	___ftdiv@f3,w
  6273  0ADE  00A0               	movwf	___ftpack@arg
  6274  0ADF  084A               	movf	___ftdiv@f3+1,w
  6275  0AE0  00A1               	movwf	___ftpack@arg+1
  6276  0AE1  084B               	movf	___ftdiv@f3+2,w
  6277  0AE2  00A2               	movwf	___ftpack@arg+2
  6278  0AE3  084C               	movf	___ftdiv@exp,w
  6279  0AE4  00C4               	movwf	??___ftdiv
  6280  0AE5  0844               	movf	??___ftdiv,w
  6281  0AE6  00A3               	movwf	___ftpack@exp
  6282  0AE7  084D               	movf	___ftdiv@sign,w
  6283  0AE8  00C5               	movwf	??___ftdiv+1
  6284  0AE9  0845               	movf	??___ftdiv+1,w
  6285  0AEA  00A4               	movwf	___ftpack@sign
  6286  0AEB  120A  158A  2053   	fcall	___ftpack
  6287  0AEE  1283               	bcf	3,5	;RP0=0, select bank0
  6288  0AEF  1303               	bcf	3,6	;RP1=0, select bank0
  6289  0AF0  0820               	movf	?___ftpack,w
  6290  0AF1  00BE               	movwf	?___ftdiv
  6291  0AF2  0821               	movf	?___ftpack+1,w
  6292  0AF3  00BF               	movwf	?___ftdiv+1
  6293  0AF4  0822               	movf	?___ftpack+2,w
  6294  0AF5  00C0               	movwf	?___ftdiv+2
  6295  0AF6  0008               	return
  6296  0AF7                     __end_of___ftdiv:	
  6297                           
  6298                           	psect	text25
  6299  1603                     __ptext25:	
  6300 ;; *************** function ___awtoft *****************
  6301 ;; Defined at:
  6302 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\awtoft.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  c               2    8[BANK0 ] int 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  sign            1   13[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  3    8[BANK0 ] float 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0, pclath, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6316 ;;      Params:         0       3       0       0       0
  6317 ;;      Locals:         0       1       0       0       0
  6318 ;;      Temps:          0       2       0       0       0
  6319 ;;      Totals:         0       6       0       0       0
  6320 ;;Total ram usage:        6 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    3
  6323 ;; This function calls:
  6324 ;;		___ftpack
  6325 ;; This function is called by:
  6326 ;;		_readLight
  6327 ;;		_tempCalibration
  6328 ;;		_readTemp
  6329 ;;		_readAccelerometer
  6330 ;;		_exp
  6331 ;;		_log
  6332 ;;		_singleAxisMeasure
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function ___awtoft
  6338  1603                     ___awtoft:	
  6339                           
  6340                           ;incstack = 0
  6341                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6342  1603  1283               	bcf	3,5	;RP0=0, select bank0
  6343  1604  1303               	bcf	3,6	;RP1=0, select bank0
  6344  1605  01AD               	clrf	___awtoft@sign
  6345  1606  1FA9               	btfss	___awtoft@c+1,7
  6346  1607  2E0F               	goto	l4030
  6347  1608  09A8               	comf	___awtoft@c,f
  6348  1609  09A9               	comf	___awtoft@c+1,f
  6349  160A  0AA8               	incf	___awtoft@c,f
  6350  160B  1903               	skipnz
  6351  160C  0AA9               	incf	___awtoft@c+1,f
  6352  160D  01AD               	clrf	___awtoft@sign
  6353  160E  0AAD               	incf	___awtoft@sign,f
  6354  160F                     l4030:	
  6355  160F  0828               	movf	___awtoft@c,w
  6356  1610  00A0               	movwf	___ftpack@arg
  6357  1611  0829               	movf	___awtoft@c+1,w
  6358  1612  00A1               	movwf	___ftpack@arg+1
  6359  1613  01A2               	clrf	___ftpack@arg+2
  6360  1614  308E               	movlw	142
  6361  1615  00AB               	movwf	??___awtoft
  6362  1616  082B               	movf	??___awtoft,w
  6363  1617  00A3               	movwf	___ftpack@exp
  6364  1618  082D               	movf	___awtoft@sign,w
  6365  1619  00AC               	movwf	??___awtoft+1
  6366  161A  082C               	movf	??___awtoft+1,w
  6367  161B  00A4               	movwf	___ftpack@sign
  6368  161C  120A  158A  2053   	fcall	___ftpack
  6369  161F  1283               	bcf	3,5	;RP0=0, select bank0
  6370  1620  1303               	bcf	3,6	;RP1=0, select bank0
  6371  1621  0820               	movf	?___ftpack,w
  6372  1622  00A8               	movwf	?___awtoft
  6373  1623  0821               	movf	?___ftpack+1,w
  6374  1624  00A9               	movwf	?___awtoft+1
  6375  1625  0822               	movf	?___ftpack+2,w
  6376  1626  00AA               	movwf	?___awtoft+2
  6377  1627  0008               	return
  6378  1628                     __end_of___awtoft:	
  6379                           
  6380                           	psect	text26
  6381  0853                     __ptext26:	
  6382 ;; *************** function ___ftpack *****************
  6383 ;; Defined at:
  6384 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.31\sources\common\float.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  arg             3    0[BANK0 ] unsigned um
  6387 ;;  exp             1    3[BANK0 ] unsigned char 
  6388 ;;  sign            1    4[BANK0 ] unsigned char 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;		None
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  3    0[BANK0 ] float 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, status,0
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6400 ;;      Params:         0       5       0       0       0
  6401 ;;      Locals:         0       0       0       0       0
  6402 ;;      Temps:          0       3       0       0       0
  6403 ;;      Totals:         0       8       0       0       0
  6404 ;;Total ram usage:        8 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    2
  6407 ;; This function calls:
  6408 ;;		Nothing
  6409 ;; This function is called by:
  6410 ;;		___altoft
  6411 ;;		___awtoft
  6412 ;;		___ftadd
  6413 ;;		___ftdiv
  6414 ;;		___ftmul
  6415 ;;		___lltoft
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           
  6420                           ;psect for function ___ftpack
  6421  0853                     ___ftpack:	
  6422                           
  6423                           ;incstack = 0
  6424                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6425  0853  1283               	bcf	3,5	;RP0=0, select bank0
  6426  0854  1303               	bcf	3,6	;RP1=0, select bank0
  6427  0855  0823               	movf	___ftpack@exp,w
  6428  0856  1903               	btfsc	3,2
  6429  0857  285D               	goto	l3814
  6430  0858  0822               	movf	___ftpack@arg+2,w
  6431  0859  0421               	iorwf	___ftpack@arg+1,w
  6432  085A  0420               	iorwf	___ftpack@arg,w
  6433  085B  1D03               	skipz
  6434  085C  2870               	goto	l3820
  6435  085D                     l3814:	
  6436  085D  3000               	movlw	0
  6437  085E  00A0               	movwf	?___ftpack
  6438  085F  3000               	movlw	0
  6439  0860  00A1               	movwf	?___ftpack+1
  6440  0861  3000               	movlw	0
  6441  0862  00A2               	movwf	?___ftpack+2
  6442  0863  0008               	return
  6443  0864                     l3818:	
  6444  0864  3001               	movlw	1
  6445  0865  00A5               	movwf	??___ftpack
  6446  0866  0825               	movf	??___ftpack,w
  6447  0867  07A3               	addwf	___ftpack@exp,f
  6448  0868  3001               	movlw	1
  6449  0869                     u2735:	
  6450  0869  1003               	clrc
  6451  086A  0CA2               	rrf	___ftpack@arg+2,f
  6452  086B  0CA1               	rrf	___ftpack@arg+1,f
  6453  086C  0CA0               	rrf	___ftpack@arg,f
  6454  086D  3EFF               	addlw	-1
  6455  086E  1D03               	skipz
  6456  086F  2869               	goto	u2735
  6457  0870                     l3820:	
  6458  0870  30FE               	movlw	254
  6459  0871  0522               	andwf	___ftpack@arg+2,w
  6460  0872  1903               	btfsc	3,2
  6461  0873  288B               	goto	l423
  6462  0874  2864               	goto	l3818
  6463  0875                     l3822:	
  6464  0875  3001               	movlw	1
  6465  0876  00A5               	movwf	??___ftpack
  6466  0877  0825               	movf	??___ftpack,w
  6467  0878  07A3               	addwf	___ftpack@exp,f
  6468  0879  3001               	movlw	1
  6469  087A  07A0               	addwf	___ftpack@arg,f
  6470  087B  3000               	movlw	0
  6471  087C  1803               	skipnc
  6472  087D  3001               	movlw	1
  6473  087E  07A1               	addwf	___ftpack@arg+1,f
  6474  087F  3000               	movlw	0
  6475  0880  1803               	skipnc
  6476  0881  3001               	movlw	1
  6477  0882  07A2               	addwf	___ftpack@arg+2,f
  6478  0883  3001               	movlw	1
  6479  0884                     u2755:	
  6480  0884  1003               	clrc
  6481  0885  0CA2               	rrf	___ftpack@arg+2,f
  6482  0886  0CA1               	rrf	___ftpack@arg+1,f
  6483  0887  0CA0               	rrf	___ftpack@arg,f
  6484  0888  3EFF               	addlw	-1
  6485  0889  1D03               	skipz
  6486  088A  2884               	goto	u2755
  6487  088B                     l423:	
  6488  088B  30FF               	movlw	255
  6489  088C  0522               	andwf	___ftpack@arg+2,w
  6490  088D  1903               	btfsc	3,2
  6491  088E  289A               	goto	l3830
  6492  088F  2875               	goto	l3822
  6493  0890                     l3828:	
  6494  0890  3001               	movlw	1
  6495  0891  02A3               	subwf	___ftpack@exp,f
  6496  0892  3001               	movlw	1
  6497  0893                     u2775:	
  6498  0893  1003               	clrc
  6499  0894  0DA0               	rlf	___ftpack@arg,f
  6500  0895  0DA1               	rlf	___ftpack@arg+1,f
  6501  0896  0DA2               	rlf	___ftpack@arg+2,f
  6502  0897  3EFF               	addlw	-1
  6503  0898  1D03               	skipz
  6504  0899  2893               	goto	u2775
  6505  089A                     l3830:	
  6506  089A  1FA1               	btfss	___ftpack@arg+1,7
  6507  089B  2890               	goto	l3828
  6508  089C  1823               	btfsc	___ftpack@exp,0
  6509  089D  28A4               	goto	l429
  6510  089E  30FF               	movlw	255
  6511  089F  05A0               	andwf	___ftpack@arg,f
  6512  08A0  307F               	movlw	127
  6513  08A1  05A1               	andwf	___ftpack@arg+1,f
  6514  08A2  30FF               	movlw	255
  6515  08A3  05A2               	andwf	___ftpack@arg+2,f
  6516  08A4                     l429:	
  6517  08A4  1003               	clrc
  6518  08A5  0CA3               	rrf	___ftpack@exp,f
  6519  08A6  0823               	movf	___ftpack@exp,w
  6520  08A7  00A5               	movwf	??___ftpack
  6521  08A8  01A6               	clrf	??___ftpack+1
  6522  08A9  01A7               	clrf	??___ftpack+2
  6523  08AA  3010               	movlw	16
  6524  08AB                     u2805:	
  6525  08AB  1003               	clrc
  6526  08AC  0DA5               	rlf	??___ftpack,f
  6527  08AD  0DA6               	rlf	??___ftpack+1,f
  6528  08AE  0DA7               	rlf	??___ftpack+2,f
  6529  08AF  3EFF               	addlw	-1
  6530  08B0  1D03               	skipz
  6531  08B1  28AB               	goto	u2805
  6532  08B2  0825               	movf	??___ftpack,w
  6533  08B3  04A0               	iorwf	___ftpack@arg,f
  6534  08B4  0826               	movf	??___ftpack+1,w
  6535  08B5  04A1               	iorwf	___ftpack@arg+1,f
  6536  08B6  0827               	movf	??___ftpack+2,w
  6537  08B7  04A2               	iorwf	___ftpack@arg+2,f
  6538  08B8  0824               	movf	___ftpack@sign,w
  6539  08B9  1903               	btfsc	3,2
  6540  08BA  0008               	return
  6541  08BB  17A2               	bsf	___ftpack@arg+2,7
  6542  08BC  0008               	return
  6543  08BD                     __end_of___ftpack:	
  6544                           
  6545                           	psect	text27
  6546  1684                     __ptext27:	
  6547 ;; *************** function _config *****************
  6548 ;; Defined at:
  6549 ;;		line 108 in file "SensorBoard.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6563 ;;      Params:         0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0
  6565 ;;      Temps:          0       3       0       0       0
  6566 ;;      Totals:         0       3       0       0       0
  6567 ;;Total ram usage:        3 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    2
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_main
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _config
  6579  1684                     _config:	
  6580                           
  6581                           ;SensorBoard.c: 110: OSCCONbits.IRCF0 = 1;
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _config: [wreg+status,2+status,0]
  6585  1684  1683               	bsf	3,5	;RP0=1, select bank1
  6586  1685  1303               	bcf	3,6	;RP1=0, select bank1
  6587  1686  160F               	bsf	15,4	;volatile
  6588                           
  6589                           ;SensorBoard.c: 111: OSCCONbits.IRCF1 = 1;
  6590  1687  168F               	bsf	15,5	;volatile
  6591                           
  6592                           ;SensorBoard.c: 112: OSCCONbits.IRCF2 = 1;
  6593  1688  170F               	bsf	15,6	;volatile
  6594                           
  6595                           ;SensorBoard.c: 115: OSCCONbits.SCS = 1;
  6596  1689  140F               	bsf	15,0	;volatile
  6597                           
  6598                           ;SensorBoard.c: 118: ANSELH = 0x00;
  6599  168A  1683               	bsf	3,5	;RP0=1, select bank3
  6600  168B  1703               	bsf	3,6	;RP1=1, select bank3
  6601  168C  0189               	clrf	9	;volatile
  6602                           
  6603                           ;SensorBoard.c: 122: TRISCbits.TRISC3 = 1;
  6604  168D  1683               	bsf	3,5	;RP0=1, select bank1
  6605  168E  1303               	bcf	3,6	;RP1=0, select bank1
  6606  168F  1587               	bsf	7,3	;volatile
  6607                           
  6608                           ;SensorBoard.c: 123: TRISCbits.TRISC4 = 1;
  6609  1690  1607               	bsf	7,4	;volatile
  6610                           
  6611                           ;SensorBoard.c: 126: SSPSTATbits.SMP = 0;
  6612  1691  1394               	bcf	20,7	;volatile
  6613                           
  6614                           ;SensorBoard.c: 129: SSPCONbits.WCOL = 0;
  6615  1692  1283               	bcf	3,5	;RP0=0, select bank0
  6616  1693  1303               	bcf	3,6	;RP1=0, select bank0
  6617  1694  1394               	bcf	20,7	;volatile
  6618                           
  6619                           ;SensorBoard.c: 132: SSPCONbits.SSPOV = 0;
  6620  1695  1314               	bcf	20,6	;volatile
  6621                           
  6622                           ;SensorBoard.c: 137: SSPCONbits.SSPM0 = 0;
  6623  1696  1014               	bcf	20,0	;volatile
  6624                           
  6625                           ;SensorBoard.c: 138: SSPCONbits.SSPM1 = 1;
  6626  1697  1494               	bsf	20,1	;volatile
  6627                           
  6628                           ;SensorBoard.c: 139: SSPCONbits.SSPM2 = 1;
  6629  1698  1514               	bsf	20,2	;volatile
  6630                           
  6631                           ;SensorBoard.c: 140: SSPCONbits.SSPM3 = 0;
  6632  1699  1194               	bcf	20,3	;volatile
  6633                           
  6634                           ;SensorBoard.c: 141: SSPCONbits.CKP = 1;
  6635  169A  1614               	bsf	20,4	;volatile
  6636                           
  6637                           ;SensorBoard.c: 142: SSPCONbits.SSPEN = 1;
  6638  169B  1694               	bsf	20,5	;volatile
  6639                           
  6640                           ;SensorBoard.c: 144: (TRISBbits.TRISB0) = 1;
  6641  169C  1683               	bsf	3,5	;RP0=1, select bank1
  6642  169D  1303               	bcf	3,6	;RP1=0, select bank1
  6643  169E  1406               	bsf	6,0	;volatile
  6644                           
  6645                           ;SensorBoard.c: 145: (TRISBbits.TRISB1) = 1;
  6646  169F  1486               	bsf	6,1	;volatile
  6647                           
  6648                           ;SensorBoard.c: 148: SSPADD = (((PORTBbits.RB0)) | ((PORTBbits.RB1) << 1) | 0b01110000) 
      +                          << 1;
  6649  16A0  1283               	bcf	3,5	;RP0=0, select bank0
  6650  16A1  1303               	bcf	3,6	;RP1=0, select bank0
  6651  16A2  0806               	movf	6,w	;volatile
  6652  16A3  3901               	andlw	1
  6653  16A4  00A0               	movwf	??_config
  6654  16A5  0C06               	rrf	6,w	;volatile
  6655  16A6  3901               	andlw	1
  6656  16A7  00A1               	movwf	??_config+1
  6657  16A8  0721               	addwf	??_config+1,w
  6658  16A9  0420               	iorwf	??_config,w
  6659  16AA  00A2               	movwf	??_config+2
  6660  16AB  0722               	addwf	??_config+2,w
  6661  16AC  38E0               	iorlw	224
  6662  16AD  1683               	bsf	3,5	;RP0=1, select bank1
  6663  16AE  1303               	bcf	3,6	;RP1=0, select bank1
  6664  16AF  0093               	movwf	19	;volatile
  6665                           
  6666                           ;SensorBoard.c: 151: SSPCON2bits.GCEN = 0;
  6667  16B0  1391               	bcf	17,7	;volatile
  6668                           
  6669                           ;SensorBoard.c: 154: PIE1bits.SSPIE = 1;
  6670  16B1  158C               	bsf	12,3	;volatile
  6671                           
  6672                           ;SensorBoard.c: 157: PIR1bits.SSPIF = 0;
  6673  16B2  1283               	bcf	3,5	;RP0=0, select bank0
  6674  16B3  1303               	bcf	3,6	;RP1=0, select bank0
  6675  16B4  118C               	bcf	12,3	;volatile
  6676                           
  6677                           ;SensorBoard.c: 159: (TRISBbits.TRISB4) = 0;
  6678  16B5  1683               	bsf	3,5	;RP0=1, select bank1
  6679  16B6  1303               	bcf	3,6	;RP1=0, select bank1
  6680  16B7  1206               	bcf	6,4	;volatile
  6681  16B8  0008               	return
  6682  16B9                     __end_of_config:	
  6683                           
  6684                           	psect	text28
  6685  179F                     __ptext28:	
  6686 ;; *************** function _ISR *****************
  6687 ;; Defined at:
  6688 ;;		line 162 in file "SensorBoard.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6702 ;;      Params:         0       0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0
  6704 ;;      Temps:          5       0       0       0       0
  6705 ;;      Totals:         5       0       0       0       0
  6706 ;;Total ram usage:        5 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:    1
  6709 ;; This function calls:
  6710 ;;		_sendMaster
  6711 ;; This function is called by:
  6712 ;;		Interrupt level 1
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           
  6717                           ;psect for function _ISR
  6718  179F                     _ISR:	
  6719                           
  6720                           ;SensorBoard.c: 164: if (SSPIF)
  6721  179F  1D8C               	btfss	12,3	;volatile
  6722  17A0  2FF2               	goto	i1l3642
  6723                           
  6724                           ;SensorBoard.c: 165: {
  6725                           ;SensorBoard.c: 166: if (!D_A && !R_W && BF)
  6726  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  6727  17A2  1303               	bcf	3,6	;RP1=0, select bank1
  6728  17A3  1E94               	btfss	20,5	;volatile
  6729  17A4  1914               	btfsc	20,2	;volatile
  6730  17A5  2FAF               	goto	i1l71
  6731  17A6  1C14               	btfss	20,0	;volatile
  6732  17A7  2FAF               	goto	i1l71
  6733                           
  6734                           ;SensorBoard.c: 167: {
  6735                           ;SensorBoard.c: 168: junk = SSPBUF;
  6736  17A8  1283               	bcf	3,5	;RP0=0, select bank0
  6737  17A9  1303               	bcf	3,6	;RP1=0, select bank0
  6738  17AA  0813               	movf	19,w	;volatile
  6739  17AB  00F1               	movwf	??_ISR
  6740  17AC  0871               	movf	??_ISR,w
  6741  17AD  00F8               	movwf	_junk	;volatile
  6742                           
  6743                           ;SensorBoard.c: 170: } else if (D_A && !R_W && BF)
  6744  17AE  2FF2               	goto	i1l3642
  6745  17AF                     i1l71:	
  6746  17AF  1A94               	btfsc	20,5	;volatile
  6747  17B0  1914               	btfsc	20,2	;volatile
  6748  17B1  2FD5               	goto	i1l73
  6749  17B2  1C14               	btfss	20,0	;volatile
  6750  17B3  2FD5               	goto	i1l73
  6751                           
  6752                           ;SensorBoard.c: 171: {
  6753                           ;SensorBoard.c: 172: if (counter == 1) {
  6754  17B4  3001               	movlw	1
  6755  17B5  067A               	xorwf	_counter,w
  6756  17B6  047B               	iorwf	_counter+1,w
  6757  17B7  1D03               	skipz
  6758  17B8  2FC2               	goto	i1l3616
  6759                           
  6760                           ;SensorBoard.c: 173: Register[index] = SSPBUF;
  6761  17B9  1283               	bcf	3,5	;RP0=0, select bank0
  6762  17BA  1303               	bcf	3,6	;RP1=0, select bank0
  6763  17BB  0813               	movf	19,w	;volatile
  6764  17BC  00F1               	movwf	??_ISR
  6765  17BD  0871               	movf	??_ISR,w
  6766  17BE  1683               	bsf	3,5	;RP0=1, select bank3
  6767  17BF  1703               	bsf	3,6	;RP1=1, select bank3
  6768  17C0  0090               	movwf	_Register^(0+384)
  6769  17C1  2FCE               	goto	i1l3618
  6770  17C2                     i1l3616:	
  6771                           ;SensorBoard.c: 175: } else {
  6772                           
  6773                           ;SensorBoard.c: 174: counter++;
  6774                           
  6775                           
  6776                           ;SensorBoard.c: 176: Register[Register[index]] = SSPBUF;
  6777  17C2  1283               	bcf	3,5	;RP0=0, select bank0
  6778  17C3  1303               	bcf	3,6	;RP1=0, select bank0
  6779  17C4  0813               	movf	19,w	;volatile
  6780  17C5  00F1               	movwf	??_ISR
  6781  17C6  1683               	bsf	3,5	;RP0=1, select bank3
  6782  17C7  1703               	bsf	3,6	;RP1=1, select bank3
  6783  17C8  0810               	movf	_Register^(0+384),w
  6784  17C9  3E90               	addlw	_Register& (0+255)
  6785  17CA  0084               	movwf	4
  6786  17CB  0871               	movf	??_ISR,w
  6787  17CC  1783               	bsf	3,7	;select IRP bank3
  6788  17CD  0080               	movwf	0
  6789  17CE                     i1l3618:	
  6790                           
  6791                           ;SensorBoard.c: 177: counter++;
  6792  17CE  3001               	movlw	1
  6793  17CF  07FA               	addwf	_counter,f
  6794  17D0  1803               	skipnc
  6795  17D1  0AFB               	incf	_counter+1,f
  6796  17D2  3000               	movlw	0
  6797  17D3  07FB               	addwf	_counter+1,f
  6798                           
  6799                           ;SensorBoard.c: 178: }
  6800                           ;SensorBoard.c: 179: } else if (!D_A && R_W && !BF)
  6801  17D4  2FF2               	goto	i1l3642
  6802  17D5                     i1l73:	
  6803  17D5  1E94               	btfss	20,5	;volatile
  6804  17D6  1D14               	btfss	20,2	;volatile
  6805  17D7  2FDA               	goto	i1l77
  6806  17D8  1C14               	btfss	20,0	;volatile
  6807  17D9  2FDF               	goto	i1l3632
  6808  17DA                     i1l77:	
  6809                           ;SensorBoard.c: 183: } else if (D_A && R_W && !BF)
  6810                           
  6811                           ;SensorBoard.c: 182: CKP = 1;
  6812                           
  6813                           ;SensorBoard.c: 180: {
  6814                           ;SensorBoard.c: 181: SSPBUF = sendMaster();
  6815                           
  6816  17DA  1A94               	btfsc	20,5	;volatile
  6817  17DB  1D14               	btfss	20,2	;volatile
  6818  17DC  2FE9               	goto	i1l79
  6819  17DD  1814               	btfsc	20,0	;volatile
  6820  17DE  2FE9               	goto	i1l79
  6821  17DF                     i1l3632:	
  6822                           
  6823                           ;SensorBoard.c: 184: {
  6824                           ;SensorBoard.c: 185: SSPBUF = sendMaster();
  6825  17DF  120A  158A  21B7   	fcall	_sendMaster
      +       160A  118A         
  6826  17E4  1283               	bcf	3,5	;RP0=0, select bank0
  6827  17E5  1303               	bcf	3,6	;RP1=0, select bank0
  6828  17E6  0093               	movwf	19	;volatile
  6829                           
  6830                           ;SensorBoard.c: 186: CKP = 1;
  6831  17E7  1614               	bsf	20,4	;volatile
  6832                           
  6833                           ;SensorBoard.c: 187: } else if (D_A && !R_W && !BF)
  6834  17E8  2FF2               	goto	i1l3642
  6835  17E9                     i1l79:	
  6836  17E9  1A94               	btfsc	20,5	;volatile
  6837  17EA  1914               	btfsc	20,2	;volatile
  6838  17EB  2FF2               	goto	i1l3642
  6839  17EC  1814               	btfsc	20,0	;volatile
  6840  17ED  2FF2               	goto	i1l3642
  6841                           
  6842                           ;SensorBoard.c: 188: {
  6843                           ;SensorBoard.c: 189: counter = 1;
  6844  17EE  3001               	movlw	1
  6845  17EF  00FA               	movwf	_counter
  6846  17F0  3000               	movlw	0
  6847  17F1  00FB               	movwf	_counter+1
  6848  17F2                     i1l3642:	
  6849                           
  6850                           ;SensorBoard.c: 190: }
  6851                           ;SensorBoard.c: 191: }
  6852                           ;SensorBoard.c: 192: SSPIF = 0;
  6853  17F2  1283               	bcf	3,5	;RP0=0, select bank0
  6854  17F3  1303               	bcf	3,6	;RP1=0, select bank0
  6855  17F4  118C               	bcf	12,3	;volatile
  6856  17F5  0875               	movf	??_ISR+4,w
  6857  17F6  00FF               	movwf	127
  6858  17F7  0874               	movf	??_ISR+3,w
  6859  17F8  008A               	movwf	10
  6860  17F9  0873               	movf	??_ISR+2,w
  6861  17FA  0084               	movwf	4
  6862  17FB  0E72               	swapf	(??_ISR+1)^(0+-128),w
  6863  17FC  0083               	movwf	3
  6864  17FD  0EFE               	swapf	126,f
  6865  17FE  0E7E               	swapf	126,w
  6866  17FF  0009               	retfie
  6867  1800                     __end_of_ISR:	
  6868                           
  6869                           	psect	intentry
  6870  0004                     __pintentry:	
  6871                           ;incstack = 0
  6872 ;; hardware stack exceeded
  6873                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6874                           
  6875  0004                     interrupt_function:	
  6876  007E                     saved_w	set	btemp
  6877  0004  00FE               	movwf	btemp
  6878  0005  0E03               	swapf	3,w
  6879  0006  00F2               	movwf	??_ISR+1
  6880  0007  0804               	movf	4,w
  6881  0008  00F3               	movwf	??_ISR+2
  6882  0009  080A               	movf	10,w
  6883  000A  00F4               	movwf	??_ISR+3
  6884  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6885  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6886  000D  087F               	movf	btemp+1,w
  6887  000E  00F5               	movwf	??_ISR+4
  6888  000F  160A  118A  2F9F   	ljmp	_ISR
  6889                           
  6890                           	psect	text29
  6891  09B7                     __ptext29:	
  6892 ;; *************** function _sendMaster *****************
  6893 ;; Defined at:
  6894 ;;		line 228 in file "SensorBoard.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      unsigned char 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6908 ;;      Params:         0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0
  6910 ;;      Temps:          1       0       0       0       0
  6911 ;;      Totals:         1       0       0       0       0
  6912 ;;Total ram usage:        1 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		_ISR
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           
  6922                           ;psect for function _sendMaster
  6923  09B7                     _sendMaster:	
  6924                           
  6925                           ;SensorBoard.c: 229: static char indexCounter = 0;
  6926                           ;SensorBoard.c: 230: if (!(Register[index] < last && Register[index] > index)) {
  6927                           
  6928                           ;incstack = 0
  6929 ;; hardware stack exceeded
  6930                           ; Regs used in _sendMaster: [wreg-fsr0h+status,2+status,0]
  6931  09B7  300D               	movlw	13
  6932  09B8  1683               	bsf	3,5	;RP0=1, select bank3
  6933  09B9  1703               	bsf	3,6	;RP1=1, select bank3
  6934  09BA  0210               	subwf	_Register^(0+384),w
  6935  09BB  1803               	skipnc
  6936  09BC  29C0               	goto	i1l97
  6937  09BD  0890               	movf	_Register^(0+384),f
  6938  09BE  1D03               	skipz
  6939  09BF  2A1B               	goto	i1l3586
  6940  09C0                     i1l97:	
  6941                           
  6942                           ;SensorBoard.c: 231: Register[index] = 1;
  6943  09C0  0190               	clrf	_Register^(0+384)
  6944  09C1  0A90               	incf	_Register^(0+384),f
  6945                           
  6946                           ;SensorBoard.c: 232: indexCounter = 0;
  6947  09C2  01F9               	clrf	sendMaster@indexCounter
  6948                           
  6949                           ;SensorBoard.c: 233: }
  6950                           ;SensorBoard.c: 234: switch (indexCounter) {
  6951  09C3  2A1B               	goto	i1l3586
  6952  09C4                     i1l3514:	
  6953                           ;SensorBoard.c: 235: case 0:
  6954                           
  6955                           
  6956                           ;SensorBoard.c: 236: indexCounter++;
  6957  09C4  3001               	movlw	1
  6958  09C5  00F0               	movwf	??_sendMaster
  6959  09C6  0870               	movf	??_sendMaster,w
  6960  09C7  07F9               	addwf	sendMaster@indexCounter,f
  6961                           
  6962                           ;SensorBoard.c: 237: return Register[tempL];
  6963  09C8  1683               	bsf	3,5	;RP0=1, select bank3
  6964  09C9  1703               	bsf	3,6	;RP1=1, select bank3
  6965  09CA  0811               	movf	(_Register^(0+384)+1),w
  6966  09CB  0008               	return
  6967  09CC                     i1l3520:	
  6968                           ;SensorBoard.c: 239: case 1:
  6969                           
  6970                           
  6971                           ;SensorBoard.c: 240: indexCounter++;
  6972  09CC  3001               	movlw	1
  6973  09CD  00F0               	movwf	??_sendMaster
  6974  09CE  0870               	movf	??_sendMaster,w
  6975  09CF  07F9               	addwf	sendMaster@indexCounter,f
  6976                           
  6977                           ;SensorBoard.c: 241: return Register[tempH];
  6978  09D0  1683               	bsf	3,5	;RP0=1, select bank3
  6979  09D1  1703               	bsf	3,6	;RP1=1, select bank3
  6980  09D2  0812               	movf	(_Register^(0+384)+2),w
  6981  09D3  0008               	return
  6982  09D4                     i1l3526:	
  6983                           ;SensorBoard.c: 243: case 2:
  6984                           
  6985                           
  6986                           ;SensorBoard.c: 244: indexCounter++;
  6987  09D4  3001               	movlw	1
  6988  09D5  00F0               	movwf	??_sendMaster
  6989  09D6  0870               	movf	??_sendMaster,w
  6990  09D7  07F9               	addwf	sendMaster@indexCounter,f
  6991                           
  6992                           ;SensorBoard.c: 245: return Register[lightL];
  6993  09D8  1683               	bsf	3,5	;RP0=1, select bank3
  6994  09D9  1703               	bsf	3,6	;RP1=1, select bank3
  6995  09DA  0819               	movf	(_Register^(0+384)+9),w
  6996  09DB  0008               	return
  6997  09DC                     i1l3532:	
  6998                           ;SensorBoard.c: 247: case 3:
  6999                           
  7000                           
  7001                           ;SensorBoard.c: 248: indexCounter++;
  7002  09DC  3001               	movlw	1
  7003  09DD  00F0               	movwf	??_sendMaster
  7004  09DE  0870               	movf	??_sendMaster,w
  7005  09DF  07F9               	addwf	sendMaster@indexCounter,f
  7006                           
  7007                           ;SensorBoard.c: 249: return Register[lightH];
  7008  09E0  1683               	bsf	3,5	;RP0=1, select bank3
  7009  09E1  1703               	bsf	3,6	;RP1=1, select bank3
  7010  09E2  081A               	movf	(_Register^(0+384)+10),w
  7011  09E3  0008               	return
  7012  09E4                     i1l3538:	
  7013                           ;SensorBoard.c: 251: case 4:
  7014                           
  7015                           
  7016                           ;SensorBoard.c: 252: indexCounter++;
  7017  09E4  3001               	movlw	1
  7018  09E5  00F0               	movwf	??_sendMaster
  7019  09E6  0870               	movf	??_sendMaster,w
  7020  09E7  07F9               	addwf	sendMaster@indexCounter,f
  7021                           
  7022                           ;SensorBoard.c: 253: return Register[accXL];
  7023  09E8  1683               	bsf	3,5	;RP0=1, select bank3
  7024  09E9  1703               	bsf	3,6	;RP1=1, select bank3
  7025  09EA  0813               	movf	(_Register^(0+384)+3),w
  7026  09EB  0008               	return
  7027  09EC                     i1l3544:	
  7028                           ;SensorBoard.c: 255: case 5:
  7029                           
  7030                           
  7031                           ;SensorBoard.c: 256: indexCounter++;
  7032  09EC  3001               	movlw	1
  7033  09ED  00F0               	movwf	??_sendMaster
  7034  09EE  0870               	movf	??_sendMaster,w
  7035  09EF  07F9               	addwf	sendMaster@indexCounter,f
  7036                           
  7037                           ;SensorBoard.c: 257: return Register[accXH];
  7038  09F0  1683               	bsf	3,5	;RP0=1, select bank3
  7039  09F1  1703               	bsf	3,6	;RP1=1, select bank3
  7040  09F2  0814               	movf	(_Register^(0+384)+4),w
  7041  09F3  0008               	return
  7042  09F4                     i1l3550:	
  7043                           ;SensorBoard.c: 259: case 6:
  7044                           
  7045                           
  7046                           ;SensorBoard.c: 260: indexCounter++;
  7047  09F4  3001               	movlw	1
  7048  09F5  00F0               	movwf	??_sendMaster
  7049  09F6  0870               	movf	??_sendMaster,w
  7050  09F7  07F9               	addwf	sendMaster@indexCounter,f
  7051                           
  7052                           ;SensorBoard.c: 261: return Register[accYL];
  7053  09F8  1683               	bsf	3,5	;RP0=1, select bank3
  7054  09F9  1703               	bsf	3,6	;RP1=1, select bank3
  7055  09FA  0815               	movf	(_Register^(0+384)+5),w
  7056  09FB  0008               	return
  7057  09FC                     i1l3556:	
  7058                           ;SensorBoard.c: 263: case 7:
  7059                           
  7060                           
  7061                           ;SensorBoard.c: 264: indexCounter++;
  7062  09FC  3001               	movlw	1
  7063  09FD  00F0               	movwf	??_sendMaster
  7064  09FE  0870               	movf	??_sendMaster,w
  7065  09FF  07F9               	addwf	sendMaster@indexCounter,f
  7066                           
  7067                           ;SensorBoard.c: 265: return Register[accYH];
  7068  0A00  1683               	bsf	3,5	;RP0=1, select bank3
  7069  0A01  1703               	bsf	3,6	;RP1=1, select bank3
  7070  0A02  0816               	movf	(_Register^(0+384)+6),w
  7071  0A03  0008               	return
  7072  0A04                     i1l3562:	
  7073                           ;SensorBoard.c: 267: case 8:
  7074                           
  7075                           
  7076                           ;SensorBoard.c: 268: indexCounter++;
  7077  0A04  3001               	movlw	1
  7078  0A05  00F0               	movwf	??_sendMaster
  7079  0A06  0870               	movf	??_sendMaster,w
  7080  0A07  07F9               	addwf	sendMaster@indexCounter,f
  7081                           
  7082                           ;SensorBoard.c: 269: return Register[accZL];
  7083  0A08  1683               	bsf	3,5	;RP0=1, select bank3
  7084  0A09  1703               	bsf	3,6	;RP1=1, select bank3
  7085  0A0A  0817               	movf	(_Register^(0+384)+7),w
  7086  0A0B  0008               	return
  7087  0A0C                     i1l3568:	
  7088                           ;SensorBoard.c: 271: case 9:
  7089                           
  7090                           
  7091                           ;SensorBoard.c: 272: indexCounter++;
  7092  0A0C  3001               	movlw	1
  7093  0A0D  00F0               	movwf	??_sendMaster
  7094  0A0E  0870               	movf	??_sendMaster,w
  7095  0A0F  07F9               	addwf	sendMaster@indexCounter,f
  7096                           
  7097                           ;SensorBoard.c: 273: return Register[accZH];
  7098  0A10  1683               	bsf	3,5	;RP0=1, select bank3
  7099  0A11  1703               	bsf	3,6	;RP1=1, select bank3
  7100  0A12  0818               	movf	(_Register^(0+384)+8),w
  7101  0A13  0008               	return
  7102  0A14                     i1l3574:	
  7103                           ;SensorBoard.c: 275: case 10:
  7104                           
  7105                           
  7106                           ;SensorBoard.c: 276: indexCounter = 0;
  7107  0A14  01F9               	clrf	sendMaster@indexCounter
  7108                           
  7109                           ;SensorBoard.c: 277: return Register[status];
  7110  0A15  1683               	bsf	3,5	;RP0=1, select bank3
  7111  0A16  1703               	bsf	3,6	;RP1=1, select bank3
  7112  0A17  081C               	movf	(_Register^(0+384)+12),w
  7113  0A18  0008               	return
  7114  0A19                     i1l3580:	
  7115                           ;SensorBoard.c: 278: default:
  7116                           
  7117                           
  7118                           ;SensorBoard.c: 279: return -10;
  7119  0A19  30F6               	movlw	246
  7120                           
  7121                           ;SensorBoard.c: 280: }
  7122  0A1A  0008               	return
  7123  0A1B                     i1l3586:	
  7124  0A1B  0879               	movf	sendMaster@indexCounter,w
  7125                           
  7126                           ; Switch size 1, requested type "space"
  7127                           ; Number of cases is 11, Range of values is 0 to 10
  7128                           ; switch strategies available:
  7129                           ; Name         Instructions Cycles
  7130                           ; simple_byte           34    18 (average)
  7131                           ; direct_byte           41     8 (fixed)
  7132                           ; jumptable            260     6 (fixed)
  7133                           ;	Chosen strategy is simple_byte
  7134  0A1C  3A00               	xorlw	0	; case 0
  7135  0A1D  1903               	skipnz
  7136  0A1E  29C4               	goto	i1l3514
  7137  0A1F  3A01               	xorlw	1	; case 1
  7138  0A20  1903               	skipnz
  7139  0A21  29CC               	goto	i1l3520
  7140  0A22  3A03               	xorlw	3	; case 2
  7141  0A23  1903               	skipnz
  7142  0A24  29D4               	goto	i1l3526
  7143  0A25  3A01               	xorlw	1	; case 3
  7144  0A26  1903               	skipnz
  7145  0A27  29DC               	goto	i1l3532
  7146  0A28  3A07               	xorlw	7	; case 4
  7147  0A29  1903               	skipnz
  7148  0A2A  29E4               	goto	i1l3538
  7149  0A2B  3A01               	xorlw	1	; case 5
  7150  0A2C  1903               	skipnz
  7151  0A2D  29EC               	goto	i1l3544
  7152  0A2E  3A03               	xorlw	3	; case 6
  7153  0A2F  1903               	skipnz
  7154  0A30  29F4               	goto	i1l3550
  7155  0A31  3A01               	xorlw	1	; case 7
  7156  0A32  1903               	skipnz
  7157  0A33  29FC               	goto	i1l3556
  7158  0A34  3A0F               	xorlw	15	; case 8
  7159  0A35  1903               	skipnz
  7160  0A36  2A04               	goto	i1l3562
  7161  0A37  3A01               	xorlw	1	; case 9
  7162  0A38  1903               	skipnz
  7163  0A39  2A0C               	goto	i1l3568
  7164  0A3A  3A03               	xorlw	3	; case 10
  7165  0A3B  1903               	skipnz
  7166  0A3C  2A14               	goto	i1l3574
  7167  0A3D  2A19               	goto	i1l3580
  7168  0A3E  0008               	return
  7169  0A3F                     __end_of_sendMaster:	
  7170  0003                     
  7171                           	psect	functab
  7172  0100                     __pfunctab:	
  7173  0100                     __fptable:	
  7174  0100                     fptable:	
  7175  0100  00FF               	movwf	(btemp+1)& (0+127)
  7176  0101  3001               	movlw	high fptable
  7177  0102  008A               	movwf	10
  7178  0103  087F               	movf	(btemp+1)& (0+127),w
  7179  0104  0782               	addwf	2,f
  7180  0105                     fpbase:	
  7181  0105  2905               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7182  0106                     fp__readAccelerometer:	
  7183  0106                     entry__readAccelerometer:	
  7184  0106  160A  118A  2EFB   	ljmp	_readAccelerometer
  7185  0109                     fp__readLight:	
  7186  0109                     entry__readLight:	
  7187  0109  120A  118A  2E0B   	ljmp	_readLight
  7188  010C                     fp__readTemp:	
  7189  010C                     entry__readTemp:	
  7190  010C  120A  158A  2C75   	ljmp	_readTemp
  7191  010F                     __end_of__fptable:	
  7192  007E                     btemp	set	126	;btemp
  7193  007E                     wtemp	set	126
  7194  007E                     wtemp0	set	126
  7195  0080                     wtemp1	set	128
  7196  0082                     wtemp2	set	130
  7197  0084                     wtemp3	set	132
  7198  0086                     wtemp4	set	134
  7199  0088                     wtemp5	set	136
  7200  007F                     wtemp6	set	127
  7201  007E                     ttemp	set	126
  7202  007E                     ttemp0	set	126
  7203  0081                     ttemp1	set	129
  7204  0084                     ttemp2	set	132
  7205  0087                     ttemp3	set	135
  7206  007F                     ttemp4	set	127
  7207  007E                     ltemp	set	126
  7208  007E                     ltemp0	set	126
  7209  0082                     ltemp1	set	130
  7210  0086                     ltemp2	set	134
  7211  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    57
    Data        5
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     70      75
    BANK3            96      0      13
    BANK2            96      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_sendMaster

Critical Paths under _main in BANK0

    _tempCalibration->___ftadd
    _readTemp->___ftadd
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->_readTemp
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___lltoft->___ftpack
    _readAccelerometer->_pointToVoltage
    _pointToVoltage->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_fillRegister
    _fillRegister->_readLight
    _readLight->_pow
    _pow->_exp
    _exp->_floor
    _floor->___altoft
    ___altoft->___fttol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  144157
                                             66 BANK1      4     0      4
                             _config
                       _fillRegister
                    _tempCalibration
 ---------------------------------------------------------------------------------
 (1) _tempCalibration                                      6     6      0   12118
                                             59 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                               _read
 ---------------------------------------------------------------------------------
 (1) _fillRegister                                         8     8      0  132039
                                             61 BANK1      5     5      0
                            ___fttol
                  _readAccelerometer
                          _readLight
                           _readTemp
 ---------------------------------------------------------------------------------
 (2) _readTemp                                             8     5      3   23650
                                             59 BANK0      8     5      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                     _pointToVoltage
                               _read
 ---------------------------------------------------------------------------------
 (2) _readLight                                           12     9      3   95494
                                             49 BANK1     12     9      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                     _pointToVoltage
                                _pow
                               _read
 ---------------------------------------------------------------------------------
 (3) _pow                                                 18    12      6   71881
                                             31 BANK1     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     3      3   22884
                                             69 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 13    10      3   39895
                                             18 BANK1     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                               10     5      5    1941
                                             69 BANK0     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     325
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3   10284
                                             79 BANK0      1     1      0
                                             10 BANK1      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     582
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     941
                                             67 BANK0      8     4      4
                                              0 BANK1      6     6      0
                  _readAccelerometer (ARG)
                           _readTemp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6    1090
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2426
                                             75 BANK0      4     0      4
                                              6 BANK1      4     4      0
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    9455
                                             59 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     224
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    5007
                                             59 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4812
                                             46 BANK0     13     7      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    2324
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _readAccelerometer                                    3     0      3   11787
                                             49 BANK0      3     0      3
                           ___awtoft
                     _pointToVoltage
                               _read
 ---------------------------------------------------------------------------------
 (2) _read                                                 5     2      3     780
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _pointToVoltage                                       3     0      3    7618
                                             46 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv
                            ___ftmul
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3775
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3617
                                             30 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2810
                                              8 BANK0      6     3      3
                           ___ftpack
                               _read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2157
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _config                                               3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  5     5      0       0
                                              1 COMMON     5     5      0
                         _sendMaster
 ---------------------------------------------------------------------------------
 (9) _sendMaster                                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config
   _fillRegister
     ___fttol
       _readAccelerometer (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         _pointToVoltage
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           _read (ARG)
         _read
       _readTemp (ARG)
         ___awtoft
           ___ftpack
           _read (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _pointToVoltage
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           _read (ARG)
         _read
     _readAccelerometer
       ___awtoft
         ___ftpack
         _read (ARG)
       _pointToVoltage
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _read (ARG)
       _read
     _readLight
       ___awtoft
         ___ftpack
         _read (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       _pointToVoltage
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _read (ARG)
       _pow
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftneg
         ___fttol
           _readAccelerometer (ARG)
             ___awtoft
               ___ftpack
               _read (ARG)
             _pointToVoltage
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               _read (ARG)
             _read
           _readTemp (ARG)
             ___awtoft
               ___ftpack
               _read (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             _pointToVoltage
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               _read (ARG)
             _read
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
             _read (ARG)
           ___ftdiv
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
           ___fttol
             _readAccelerometer (ARG)
               ___awtoft
                 ___ftpack
                 _read (ARG)
               _pointToVoltage
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 _read (ARG)
               _read
             _readTemp (ARG)
               ___awtoft
                 ___ftpack
                 _read (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___bmul (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftdiv
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               _pointToVoltage
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 _read (ARG)
               _read
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 _readAccelerometer (ARG)
                   ___awtoft
                     ___ftpack
                     _read (ARG)
                   _pointToVoltage
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftdiv (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                           _read (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                         _read (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     _read (ARG)
                   _read
                 _readTemp (ARG)
                   ___awtoft
                     ___ftpack
                     _read (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___bmul (ARG)
                     ___ftdiv (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                           _read (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                         _read (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftdiv
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   _pointToVoltage
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftdiv (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                           _read (ARG)
                         ___ftpack (ARG)
                         _frexp (ARG)
                         _read (ARG)
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     _read (ARG)
                   _read
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftge
             ___fttol
               _readAccelerometer (ARG)
                 ___awtoft
                   ___ftpack
                   _read (ARG)
                 _pointToVoltage
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftdiv (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   _read (ARG)
                 _read
               _readTemp (ARG)
                 ___awtoft
                   ___ftpack
                   _read (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___bmul (ARG)
                   ___ftdiv (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftdiv
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 _pointToVoltage
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftdiv (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                         _read (ARG)
                       ___ftpack (ARG)
                       _frexp (ARG)
                       _read (ARG)
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   _read (ARG)
                 _read
             _frexp
           _ldexp
             ___ftge
             ___ftneg
             _eval_poly (ARG)
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___bmul (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
               _read (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             _eval_poly
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___bmul (ARG)
                 ___ftdiv (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       _read (ARG)
                     ___ftpack (ARG)
                     _frexp (ARG)
                     _read (ARG)
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
             _read (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___bmul (ARG)
             ___ftdiv (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___bmul (ARG)
               ___ftdiv (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     _read (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                   _read (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   _read (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
                 _read (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               _read (ARG)
           _frexp
       _read
     _readTemp
       ___awtoft
         ___ftpack
         _read (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       _pointToVoltage
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               _read (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             _read (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         _read (ARG)
       _read
   _tempCalibration
     ___awtoft
       ___ftpack
       _read (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         _read (ARG)
       ___bmul (ARG)
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _read (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           _read (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       _read (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           _read (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         _read (ARG)
       ___ftpack (ARG)
     _read

 _ISR (ROOT)
   _sendMaster

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       D       9       13.5%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     46      4B       7       93.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B4      12        0.0%
ABS                  0      0      B4       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat Feb 14 10:44:29 2015

              ___altoft@exp 00A8                 fp__readTemp 010C                           pc 0002  
            ___bmul@product 0022                fp__readLight 0109                 __CFG_CP$OFF 0000  
               _SSPSTATbits 0094               ___altoft@sign 00A9                          _BF 04A0  
                        l90 060A                          fsr 0004                ___ftadd@exp1 005A  
              ___ftadd@exp2 0059                ___ftadd@sign 0058              ??_fillRegister 00DD  
                       l150 0B26                         l142 0AFB                         l151 0B2B  
                       l160 0B86                         l152 0B2D                         l144 0B02  
                       l161 0B92                         l153 0B30                         l145 0B0A  
                       l154 0B32                         l146 0B11                         l155 0B36  
                       l147 0B1A                         l156 0B38                         l148 0B21  
                       l157 0B3D                         l149 0B24                         l173 09B0  
                       l423 088B                         l159 0B83                         l168 0704  
                       l452 0F9F                         l429 08A4                         l629 0334  
                       _CKP 00A4                         _D_A 04A5                __CFG_CPD$OFF 0000  
                       _ISR 179F                         _R_W 04A2                         _exp 010F  
                       _log 0D3A                         _pow 0305                         fsr0 0004  
                       indf 0000                __CFG_IESO$ON 0000                __CFG_LVP$OFF 0000  
                      ?_ISR 0070                ___ftdiv@cntr 0048                ___ftdiv@sign 004D  
                      l3032 0BD1                        l3050 0C14                        l4010 16CD  
                      l3060 0C4B                        l3052 0C2A                        l4030 160F  
                      l3062 0C50                        l4040 0A57                        l3066 0C5E  
                      l3058 0C39                        l4106 0EEE                        l4060 0AB2  
                      l4116 092F                        l4220 0177                        l4204 011D  
                      l4300 0349                        l4046 0A6D                        l4126 005C  
                      l4214 014B                        l4160 00CE                        l4136 0085  
                      l4312 0403                        l4170 165B                        l4226 01C6  
                      l4068 0AD1                        l4260 0B48                        l4172 166D  
                      l4092 0E4F                        l4156 00C5                        l4308 03D5  
                      l4332 0C8A                        l4404 15F0                        l4270 0BA1  
                      l4262 0B7B                        l4182 0D5E                        l4096 0E58  
                      l4248 02D9                        l4360 0711                        l4370 170C  
                      l4338 0CCF                        l3820 0870                        l4188 0D74  
                      l3830 089A                        l3822 0875                        l3814 085D  
                      l4446 0B4F                        l3910 0F71                        l3902 0F50  
                      l4294 033D                        l4390 04DC                        l4376 1739  
                      l3920 0F8F                        l3912 0F76                        l2952 1769  
                      l3818 0864                        l3930 0FC3                        l3922 0F9B  
                      l3914 0F7A                        l3850 081B                        l3828 0890  
                      l3940 0FE6                        l3908 0F65                        l3852 0831  
                      l2956 1790                        l4396 0533                        l4388 04A5  
                      l3950 0730                        l3926 0FB1                        l3862 07F5  
                      l4398 05FE                        l3880 0F20                        l3890 0F36  
                      l3858 07EF                        l3980 07AD                        l3972 0795  
                      l3956 0746                        l3884 0F27                        ?_exp 00B2  
                      ?_log 0065                        l3984 07BD                        l3968 0785  
                      ?_pow 00BF                        u2005 0C15                        u2035 0C3C  
                      u3025 0F7B                        u3135 0752                        u3055 0F90  
                      u3305 0A7F                        u3225 07BE                        u3145 0764  
                      u3315 0A91                        u3235 07C6                        u3325 0AB3  
                      u3335 0AC4                        u3175 0796                        u3345 0AD2  
                      u3185 079E                        u1771 175C                        u3435 008E  
                      u1772 175D                        u2805 08AB                        u1773 1762  
                      u1774 1763                        u2735 0869                        u3455 1660  
                      u1791 1783                        u1792 1784                        u1793 1789  
                      u3545 02D0                        u3625 03C6                        u1794 178A  
                      u2755 0884                        u2835 0821                        u3645 0C88  
                      u2775 0893                        u1975 0BD9                        u3655 0CCD  
                      u2965 0F51                        i1l71 17AF                        i1l73 17D5  
                      u2995 0F66                        i1l77 17DA                        i1l79 17E9  
                      i1l97 09C0                __CFG_WRT$OFF 0000               __CFG_FCMEN$ON 0000  
                      _main 15E6                ___ftpack@arg 0020                        _read 0AF7  
              ___ftpack@exp 0023                        _junk 0078                        btemp 007E  
                      exp@x 00B2                        log@x 0065               __CFG_BOREN$ON 0000  
         _readAccelerometer 16FB                        ltemp 007E                        pow@x 00BF  
                      pow@y 00C2                        start 0012                        ttemp 007E  
                      wtemp 007E          ?_readAccelerometer 0051           ___bmul@multiplier 0023  
             __CFG_MCLRE$ON 0000                ___ftmul@cntr 003C                ___ftmul@sign 003D  
                     ??_ISR 0071                ___fttol@exp1 00A5                       ??_exp 00B5  
                     ??_log 0068                ___fttol@lval 00A1                       ??_pow 00C5  
       ??_readAccelerometer 0054                       ?_main 00E2                       ?_read 0020  
           __end_of___ftadd 1000               __CFG_WDTE$OFF 0000             __end_of___ftdiv 0AF7  
           __end_of___ftneg 00F1                       _ANSEL 0188             __end_of___ftmul 07EB  
           __end_of___ftsub 15E6             __end_of___fttol 0C75                       _SSPIF 0063  
             __CFG_PWRTE$ON 0000                ___lltoft@exp 002D               ___awtoft@sign 002D  
                     _floor 0E0A                       _ldexp 004E                       _frexp 16B9  
                     _errno 00E9               ___ftpack@sign 0024                       fpbase 0105  
                     pclath 000A                       ltemp0 007E                       ltemp1 0082  
                     ltemp2 0086                       ltemp3 0080   __end_of_readAccelerometer 1740  
                     pow@yi 00CD                       ttemp0 007E                       ttemp1 0081  
                     ttemp2 0084                       ttemp3 0087                       ttemp4 007F  
                     status 0003                       wtemp0 007E                       wtemp1 0080  
                     wtemp2 0082                       wtemp3 0084                       wtemp4 0086  
                     wtemp5 0088                       wtemp6 007F                 exp@exponent 00BC  
               ldexp@newexp 0068             __initialization 0015                 log@exponent 0069  
              __end_of_main 1603                __end_of_read 0BB3                      ??_main 0070  
             ___fttol@sign1 00A0                      ??_read 0023                 read@channel 0020  
                    ?_floor 00AA                      ?_ldexp 0065                      ?_frexp 0020  
          __end_of___altoft 0853                      _ADRESH 001E                      _ADRESL 009E  
          __end_of___awtoft 1628            __end_of___ftpack 08BD                      _ANSELH 0189  
              _I2C_sendByte 0077            __end_of___lltoft 1684                      i1l3520 09CC  
                    i1l3514 09C4                      i1l3532 09DC                      i1l3550 09F4  
                    i1l3526 09D4                      i1l3544 09EC                      i1l3632 17DF  
                    i1l3616 17C2                      i1l3562 0A04                      i1l3538 09E4  
                    i1l3618 17CE                      i1l3642 17F2                      i1l3580 0A19  
                    i1l3556 09FC                      i1l3574 0A14                      i1l3568 0A0C  
                    i1l3586 0A1B    __size_of_tempCalibration 0081                      _SSPADD 0093  
                    _SSPBUF 0013            __end_of__fptable 010F        __end_of_fillRegister 060B  
                    ___bmul 07EB                      ___ftge 1740                   ??___ftadd 0054  
                 ??___ftdiv 0044                   ??___ftneg 0023                   ??___ftmul 0034  
                 ??___ftsub 0061                   ??___fttol 0067                      _config 1684  
          __end_of_readTemp 0D3A         pointToVoltage@point 004E                      floor@i 00AD  
                    floor@x 00AA       ___ftmul@f3_as_product 0039                      fptable 0100  
              __pdataCOMMON 007A                      fptotal 0003                      saved_w 007E  
          __end_ofexp@coeff 1024  __size_of_readAccelerometer 0045            __end_oflog@coeff 103F  
   __end_of__initialization 004A                  ___altoft@c 006B                  ___ftadd@f1 004E  
                ___ftadd@f2 0051                  ___ftge@ff1 0020                  ___ftge@ff2 0023  
              eval_poly@res 0062                  ___ftdiv@f1 0041                  ___ftdiv@f2 003E  
                ___ftdiv@f3 0049                  ___ftneg@f1 0020                  ___awtoft@c 0028  
       ___bmul@multiplicand 0020                  ___ftmul@f1 002E                  ___ftmul@f2 0031  
                ___ftsub@f1 005E                  ___ftsub@f2 005B                  ___fttol@f1 0063  
            __pcstackCOMMON 0070                __pidataBANK1 00F1                  ___lltoft@c 0028  
             __end_of_floor 0EF7               __end_of_ldexp 00E7               __end_of_frexp 16FB  
                   ??_floor 006F                     ??_ldexp 006A                     ??_frexp 0024  
                __pbssBANK1 00E9                  __pbssBANK3 0190          __size_of_eval_poly 0079  
        __size_of_readLight 010D                  __pmaintext 15E6           ??_tempCalibration 005B  
                   ?___bmul 0020                     ?___ftge 0020             entry__readLight 0109  
                __pintentry 0004                     ?_config 0070                   ?___altoft 006B  
                 ?___awtoft 0028                   ?___ftpack 0020                   ?___lltoft 0028  
                   _GO_DONE 00F9       __size_of_fillRegister 016A                  __stringtab 1000  
                 ?_readTemp 005B           readLight@lightVal 00DA             __size_of___bmul 0013  
           __size_of___ftge 005F                     ___ftadd 0EF7                     ___ftdiv 0A3F  
                   ___ftneg 00E7                     ___ftmul 0718                     ___ftsub 15CA  
                   ___fttol 0BB3     __size_of_pointToVoltage 002D             __size_of_config 0035  
                ??___altoft 00A6                     _exp$859 00B9                  ??___awtoft 002B  
                ??___ftpack 0025                   _ANSELbits 0188           __end_of_eval_poly 0936  
              readTemp@temp 0060                  ??___lltoft 002C                     __ptext1 0936  
                   __ptext2 04A1                     __ptext3 0C75                     __ptext4 060B  
                   __ptext5 0305                     __ptext6 0D3A                     __ptext7 010F  
                   __ptext8 004E                     __ptext9 00E7                __size_of_ISR 0061  
         __end_of_readLight 0718                     _counter 007A                _fillRegister 04A1  
              __size_of_exp 01F6                __size_of_log 00D0                __size_of_pow 019C  
                _sendMaster 09B7        end_of_initialization 004A                     exp@sign 00BE  
                ??_readTemp 005E                     pow@sign 00CC        fp__readAccelerometer 0106  
            _readLight$1140 00D4              _readLight$1141 00D7                   _PORTBbits 0006  
                 _TRISBbits 0086                   _TRISCbits 0087                 ___ftdiv@exp 004C  
               ___ftmul@exp 0038              __end_of___bmul 07FE              __end_of___ftge 179F  
             __pidataCOMMON 07FE              __end_of_config 16B9                  floor@expon 00B0  
       start_initialization 0015                  eval_poly@d 005E                  eval_poly@n 005F  
                eval_poly@x 005B                 __end_of_ISR 1800                  ldexp@value 0065  
               __end_of_exp 0305                 __end_of_log 0E0A                 __end_of_pow 04A1  
   entry__readAccelerometer 0106                 ?_sendMaster 0070             _tempCalibration 0936  
                frexp@value 0020                    ??___bmul 0021                    ??___ftge 0026  
         fillRegister@array 00DE              _pointToVoltage 1628                    ??_config 0020  
               __pdataBANK1 00E6             read@analogValue 0023           _fillRegister$1139 00DF  
         __size_of___altoft 0052           __size_of___awtoft 0025           __size_of___ftpack 006A  
         __size_of___lltoft 002F                 __pbssCOMMON 0076                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00A0           __size_of__fptable 000F  
         __size_of_readTemp 00C5           read@justification 0022      __end_of_pointToVoltage 1655  
                 __pfunctab 0100              entry__readTemp 010C                    ?___ftadd 004E  
                  ?___ftdiv 003E                    ?___ftneg 0020                    ?___ftmul 002E  
                  ?___ftsub 005B                    ?___fttol 0063         __size_of_sendMaster 0088  
                 __pstrings 1000                   _ldexp$896 006C                   _eval_poly 08BD  
   __end_of_tempCalibration 09B7                   _readLight 060B              __size_of_floor 00ED  
            __size_of_ldexp 0099              __size_of_frexp 0042           interrupt_function 0004  
                  _PIE1bits 008C    __CFG_FOSC$EXTRC_NOCLKOUT 0000                    _PIR1bits 000C  
           ?_pointToVoltage 004E                  _ADCON0bits 001F                 __stringbase 1005  
                _ADCON1bits 009F                  ?_eval_poly 005B                  ?_readLight 00D1  
                 frexp@eptr 0023                    _Register 0190            _I2C_receivedByte 0076  
                 readTemp@i 005E            __size_of___ftadd 0109            __size_of___ftdiv 00B8  
          __size_of___ftneg 000A                    ___altoft 0801            __size_of___ftmul 00D3  
          __size_of___ftsub 001C            __size_of___fttol 00C2                    ___awtoft 1603  
                  ___ftpack 0853          __end_of__stringtab 1006                    ___lltoft 1655  
                  _exp$1144 00B6                    __fptable 0100                    _gainTemp 00E6  
          ?_tempCalibration 0070                    __ptext10 0E0A                    __ptext11 16B9  
                  __ptext20 16FB                    __ptext12 0BB3                    __ptext21 0AF7  
                  __ptext13 1740                    __ptext22 1628                    __ptext14 0801  
                  __ptext23 0718                    __ptext15 08BD                    __ptext24 0A3F  
                  __ptext16 07EB                    __ptext25 1603                    __ptext17 15CA  
                  __ptext26 0853                    __ptext18 0EF7                    __ptext27 1684  
                  __ptext19 1655                    __ptext28 179F                    __ptext29 09B7  
         __CFG_BOR4V$BOR40V 0000                ??_sendMaster 0070                    _pow$1142 00C6  
                  _pow$1143 00C9                    _readTemp 0C75               __size_of_main 001D  
             __size_of_read 00BC         tempCalibration@vOut 005B                    main@argc 00E2  
                  main@argv 00E4          __end_of_sendMaster 0A3F                    exp@coeff 1006  
                  log@coeff 1024                 ??_eval_poly 0061                 ??_readLight 0070  
                  intlevel1 0100          tempCalibration@vIn 005E                   stringcode 1000  
                _OSCCONbits 008F      sendMaster@indexCounter 0079       readAccelerometer@axis 0051  
             ?_fillRegister 0070                    stringdir 1000                    stringtab 1000  
               _SSPCON2bits 0091            ??_pointToVoltage 0051                  _SSPCONbits 0014  
